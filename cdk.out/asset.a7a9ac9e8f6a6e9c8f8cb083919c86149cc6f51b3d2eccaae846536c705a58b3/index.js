var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) =>
  function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
  };
var __commonJS = (cb, mod) =>
  function __require() {
    return (
      mod ||
        (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod),
      mod.exports
    );
  };
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod
  )
);
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
});
function __extends(d, b) {
  if (typeof b !== 'function' && b !== null)
    throw new TypeError(
      'Class extends value ' + String(b) + ' is not a constructor or null'
    );
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype =
    b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === 'function')
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (
        e.indexOf(p[i]) < 0 &&
        Object.prototype.propertyIsEnumerable.call(s, p[i])
      )
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r =
      c < 3
        ? target
        : desc === null
        ? (desc = Object.getOwnPropertyDescriptor(target, key))
        : desc,
    d;
  if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if ((d = decorators[i]))
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(
  ctor,
  descriptorIn,
  decorators,
  contextIn,
  initializers,
  extraInitializers
) {
  function accept(f) {
    if (f !== void 0 && typeof f !== 'function')
      throw new TypeError('Function expected');
    return f;
  }
  var kind = contextIn.kind,
    key = kind === 'getter' ? 'get' : kind === 'setter' ? 'set' : 'value';
  var target =
    !descriptorIn && ctor
      ? contextIn['static']
        ? ctor
        : ctor.prototype
      : null;
  var descriptor =
    descriptorIn ||
    (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _2,
    done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === 'access' ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function (f) {
      if (done)
        throw new TypeError(
          'Cannot add initializers after decoration has completed'
        );
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(
      kind === 'accessor'
        ? { get: descriptor.get, set: descriptor.set }
        : descriptor[key],
      context
    );
    if (kind === 'accessor') {
      if (result === void 0) continue;
      if (result === null || typeof result !== 'object')
        throw new TypeError('Object expected');
      if ((_2 = accept(result.get))) descriptor.get = _2;
      if ((_2 = accept(result.set))) descriptor.set = _2;
      if ((_2 = accept(result.init))) initializers.push(_2);
    } else if ((_2 = accept(result))) {
      if (kind === 'field') initializers.push(_2);
      else descriptor[key] = _2;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue
      ? initializers[i].call(thisArg, value)
      : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === 'symbol' ? x : ''.concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === 'symbol')
    name = name.description ? '['.concat(name.description, ']') : '';
  return Object.defineProperty(f, 'name', {
    configurable: true,
    value: prefix ? ''.concat(prefix, ' ', name) : name,
  });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P
      ? value
      : new P(function (resolve) {
          resolve(value);
        });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator['throw'](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done
        ? resolve(result.value)
        : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _2 = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: [],
    },
    f,
    y,
    t,
    g;
  return (
    (g = { next: verb(0), throw: verb(1), return: verb(2) }),
    typeof Symbol === 'function' &&
      (g[Symbol.iterator] = function () {
        return this;
      }),
    g
  );
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError('Generator is already executing.');
    while ((g && ((g = 0), op[0] && (_2 = 0)), _2))
      try {
        if (
          ((f = 1),
          y &&
            (t =
              op[0] & 2
                ? y['return']
                : op[0]
                ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                : y.next) &&
            !(t = t.call(y, op[1])).done)
        )
          return t;
        if (((y = 0), t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (
              !((t = _2.trys), (t = t.length > 0 && t[t.length - 1])) &&
              (op[0] === 6 || op[0] === 2)
            ) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2]) _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === 'function' && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === 'number')
    return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return { value: o && o[i++], done: !o };
      },
    };
  throw new TypeError(
    s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
  );
}
function __read(o, n) {
  var m = typeof Symbol === 'function' && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i['return'])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? ((this.v = v), this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError('Symbol.asyncIterator is not defined.');
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return (
    (i = {}),
    verb('next'),
    verb('throw'),
    verb('return'),
    (i[Symbol.asyncIterator] = function () {
      return this;
    }),
    i
  );
  function verb(n) {
    if (g[n])
      i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle2(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await
      ? Promise.resolve(r.value.v).then(fulfill, reject)
      : settle2(q[0][2], r);
  }
  function fulfill(value) {
    resume('next', value);
  }
  function reject(value) {
    resume('throw', value);
  }
  function settle2(f, v) {
    if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return (
    (i = {}),
    verb('next'),
    verb('throw', function (e) {
      throw e;
    }),
    verb('return'),
    (i[Symbol.iterator] = function () {
      return this;
    }),
    i
  );
  function verb(n, f) {
    i[n] = o[n]
      ? function (v) {
          return (p = !p)
            ? { value: __await(o[n](v)), done: false }
            : f
            ? f(v)
            : v;
        }
      : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError('Symbol.asyncIterator is not defined.');
  var m = o[Symbol.asyncIterator],
    i;
  return m
    ? m.call(o)
    : ((o =
        typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
      (i = {}),
      verb('next'),
      verb('throw'),
      verb('return'),
      (i[Symbol.asyncIterator] = function () {
        return this;
      }),
      i);
  function verb(n) {
    i[n] =
      o[n] &&
      function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v)), settle2(resolve, reject, v.done, v.value);
        });
      };
  }
  function settle2(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, 'raw', { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === 'a' && !f)
    throw new TypeError('Private accessor was defined without a getter');
  if (
    typeof state === 'function'
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      'Cannot read private member from an object whose class did not declare it'
    );
  return kind === 'm'
    ? f
    : kind === 'a'
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === 'm') throw new TypeError('Private method is not writable');
  if (kind === 'a' && !f)
    throw new TypeError('Private accessor was defined without a setter');
  if (
    typeof state === 'function'
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      'Cannot write private member to an object whose class did not declare it'
    );
  return (
    kind === 'a'
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
}
function __classPrivateFieldIn(state, receiver) {
  if (
    receiver === null ||
    (typeof receiver !== 'object' && typeof receiver !== 'function')
  )
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === 'function' ? receiver === state : state.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  'node_modules/tslib/tslib.es6.js'() {
    extendStatics = function (d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d2, b2) {
            d2.__proto__ = b2;
          }) ||
        function (d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
      return extendStatics(d, b);
    };
    __assign = function () {
      __assign =
        Object.assign ||
        function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create
      ? function (o, m, k, k2) {
          if (k2 === void 0) k2 = k;
          var desc = Object.getOwnPropertyDescriptor(m, k);
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k];
              },
            };
          }
          Object.defineProperty(o, k2, desc);
        }
      : function (o, m, k, k2) {
          if (k2 === void 0) k2 = k;
          o[k2] = m[k];
        };
    __setModuleDefault = Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', { enumerable: true, value: v });
        }
      : function (o, v) {
          o['default'] = v;
        };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js
var require_NoOpLogger = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {}
      debug() {}
      info() {}
      warn() {}
      error() {}
    };
    exports.NoOpLogger = NoOpLogger;
  },
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  'node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) =>
        entries.sort(
          (a, b) =>
            stepWeights[b.step] - stepWeights[a.step] ||
            priorityWeights[b.priority || 'normal'] -
              priorityWeights[a.priority || 'normal']
        );
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name) entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: [],
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: [],
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(
                `${entry.toMiddleware} is not found when adding ${
                  entry.name || 'anonymous'
                } middleware ${entry.relation} ${entry.toMiddleware}`
              );
            }
            if (entry.relation === 'after') {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === 'before') {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries)
          .map(expandRelativeMiddlewareList)
          .reduce((wholeList, expendedMiddlewareList) => {
            wholeList.push(...expendedMiddlewareList);
            return wholeList;
          }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: 'initialize',
            priority: 'normal',
            middleware,
            ...options,
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex(
                (entry2) => entry2.name === name
              );
              const toOverride = absoluteEntries[toOverrideIndex];
              if (
                toOverride.step !== entry.step ||
                toOverride.priority !== entry.priority
              ) {
                throw new Error(
                  `"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`
                );
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options,
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex(
                (entry2) => entry2.name === name
              );
              const toOverride = relativeEntries[toOverrideIndex];
              if (
                toOverride.toMiddleware !== entry.toMiddleware ||
                toOverride.relation !== entry.relation
              ) {
                throw new Error(
                  `"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`
                );
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === 'string') return removeByName(toRemove);
          else return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name) entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ': ' + (mw.tags || []).join(',');
          });
        },
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList()
            .map((entry) => entry.middleware)
            .reverse()) {
            handler2 = middleware(handler2, context);
          }
          return handler2;
        },
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1,
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1,
    };
  },
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  'node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/client.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options =
          typeof optionsOrCb !== 'function' ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === 'function' ? optionsOrCb : cb;
        const handler2 = command.resolveMiddleware(
          this.middlewareStack,
          this.config,
          options
        );
        if (callback) {
          handler2(command)
            .then(
              (result) => callback(null, result.output),
              (err) => callback(err)
            )
            .catch(() => {});
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/command.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = '***SensitiveInformation***';
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/create-aggregated-client.js
var require_create_aggregated_client = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/create-aggregated-client.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createAggregatedClient = void 0;
    var createAggregatedClient = (commands, Client) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = async function (args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === 'function') {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === 'function') {
            if (typeof optionsOrCb !== 'object')
              throw new Error(
                `Expected http options but got ${typeof optionsOrCb}`
              );
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (
          command[0].toLowerCase() + command.slice(1)
        ).replace(/Command$/, '');
        Client.prototype[methodName] = methodImpl;
      }
    };
    exports.createAggregatedClient = createAggregatedClient;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.logger =
      exports.strictParseByte =
      exports.strictParseShort =
      exports.strictParseInt32 =
      exports.strictParseInt =
      exports.strictParseLong =
      exports.limitedParseFloat32 =
      exports.limitedParseFloat =
      exports.handleFloat =
      exports.limitedParseDouble =
      exports.strictParseFloat32 =
      exports.strictParseFloat =
      exports.strictParseDouble =
      exports.expectUnion =
      exports.expectString =
      exports.expectObject =
      exports.expectNonNull =
      exports.expectByte =
      exports.expectShort =
      exports.expectInt32 =
      exports.expectInt =
      exports.expectLong =
      exports.expectFloat32 =
      exports.expectNumber =
      exports.expectBoolean =
      exports.parseBoolean =
        void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case 'true':
          return true;
        case 'false':
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'number') {
        if (value === 0 || value === 1) {
          exports.logger.warn(
            stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`)
          );
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === 'string') {
        const lower = value.toLowerCase();
        if (lower === 'false' || lower === 'true') {
          exports.logger.warn(
            stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`)
          );
        }
        if (lower === 'false') {
          return false;
        }
        if (lower === 'true') {
          return true;
        }
      }
      if (typeof value === 'boolean') {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'string') {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports.logger.warn(
              stackTraceWarning(`Expected number but observed string: ${value}`)
            );
          }
          return parsed;
        }
      }
      if (typeof value === 'number') {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (
        expected !== void 0 &&
        !Number.isNaN(expected) &&
        expected !== Infinity &&
        expected !== -Infinity
      ) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError('Expected a non-null value');
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'object' && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? 'array' : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'string') {
        return value;
      }
      if (['boolean', 'number', 'bigint'].includes(typeof value)) {
        exports.logger.warn(
          stackTraceWarning(`Expected string, got ${typeof value}: ${value}`)
        );
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject)
        .filter(([, v]) => v != null)
        .map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(
          `Unions must have exactly one non-null member. None were found.`
        );
      }
      if (setKeys.length > 1) {
        throw new TypeError(
          `Unions must have exactly one non-null member. Keys ${setKeys} were not null.`
        );
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == 'string') {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == 'string') {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX =
      /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == 'string') {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == 'string') {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case 'NaN':
          return NaN;
        case 'Infinity':
          return Infinity;
        case '-Infinity':
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message)
        .split('\n')
        .slice(0, 5)
        .filter((s) => !s.includes('stackTraceWarning'))
        .join('\n');
    };
    exports.logger = {
      warn: console.warn,
    };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseEpochTimestamp =
      exports.parseRfc7231DateTime =
      exports.parseRfc3339DateTimeWithOffset =
      exports.parseRfc3339DateTime =
      exports.dateToUtcString =
        void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    var MONTHS = [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString =
        dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString =
        minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString =
        secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/
    );
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-3339 date-times must be expressed as strings');
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError('Invalid RFC-3339 date-time value');
      }
      const [
        _2,
        yearStr,
        monthStr,
        dayStr,
        hours,
        minutes,
        seconds,
        fractionalMilliseconds,
      ] = match;
      const year = (0, parse_utils_1.strictParseShort)(
        stripLeadingZeroes(yearStr)
      );
      const month = parseDateValue(monthStr, 'month', 1, 12);
      const day = parseDateValue(dayStr, 'day', 1, 31);
      return buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds,
      });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/
    );
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-3339 date-times must be expressed as strings');
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError('Invalid RFC-3339 date-time value');
      }
      const [
        _2,
        yearStr,
        monthStr,
        dayStr,
        hours,
        minutes,
        seconds,
        fractionalMilliseconds,
        offsetStr,
      ] = match;
      const year = (0, parse_utils_1.strictParseShort)(
        stripLeadingZeroes(yearStr)
      );
      const month = parseDateValue(monthStr, 'month', 1, 12);
      const day = parseDateValue(dayStr, 'day', 1, 31);
      const date = buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds,
      });
      if (offsetStr.toUpperCase() != 'Z') {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var RFC_850_DATE = new RegExp(
      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var ASC_TIME = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/
    );
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-7231 date-times must be expressed as strings');
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [
          _2,
          dayStr,
          monthStr,
          yearStr,
          hours,
          minutes,
          seconds,
          fractionalMilliseconds,
        ] = match;
        return buildDate(
          (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr, 'day', 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [
          _2,
          dayStr,
          monthStr,
          yearStr,
          hours,
          minutes,
          seconds,
          fractionalMilliseconds,
        ] = match;
        return adjustRfc850Year(
          buildDate(
            parseTwoDigitYear(yearStr),
            parseMonthByShortName(monthStr),
            parseDateValue(dayStr, 'day', 1, 31),
            {
              hours,
              minutes,
              seconds,
              fractionalMilliseconds,
            }
          )
        );
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [
          _2,
          monthStr,
          dayStr,
          hours,
          minutes,
          seconds,
          fractionalMilliseconds,
          yearStr,
        ] = match;
        return buildDate(
          (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr.trimLeft(), 'day', 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      throw new TypeError('Invalid RFC-7231 date-time value');
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === 'number') {
        valueAsDouble = value;
      } else if (typeof value === 'string') {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError(
          'Epoch timestamps must be expressed as floating point numbers or their string representation'
        );
      }
      if (
        Number.isNaN(valueAsDouble) ||
        valueAsDouble === Infinity ||
        valueAsDouble === -Infinity
      ) {
        throw new TypeError(
          'Epoch timestamps must be valid, non-Infinite, non-NaN numerics'
        );
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(
        Date.UTC(
          year,
          adjustedMonth,
          day,
          parseDateValue(time.hours, 'hour', 0, 23),
          parseDateValue(time.minutes, 'minute', 0, 59),
          parseDateValue(time.seconds, 'seconds', 0, 60),
          parseMilliseconds(time.fractionalMilliseconds)
        )
      );
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = /* @__PURE__ */ new Date().getUTCFullYear();
      const valueInThisCentury =
        Math.floor(thisYear / 100) * 100 +
        (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (
        input.getTime() - /* @__PURE__ */ new Date().getTime() >
        FIFTY_YEARS_IN_MILLIS
      ) {
        return new Date(
          Date.UTC(
            input.getUTCFullYear() - 100,
            input.getUTCMonth(),
            input.getUTCDate(),
            input.getUTCHours(),
            input.getUTCMinutes(),
            input.getUTCSeconds(),
            input.getUTCMilliseconds()
          )
        );
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(
          `Invalid day for ${MONTHS[month]} in ${year}: ${day}`
        );
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(
        stripLeadingZeroes(value)
      );
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(
          `${type} must be between ${lower} and ${upper}, inclusive`
        );
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)('0.' + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == '+') {
        direction = 1;
      } else if (directionStr == '-') {
        direction = -1;
      } else {
        throw new TypeError(
          `Offset direction, ${directionStr}, must be "+" or "-"`
        );
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === '0') {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions)
        .filter(([, v]) => v !== void 0)
        .forEach(([k, v]) => {
          if (exception[k] == void 0 || exception[k] === '') {
            exception[k] = v;
          }
        });
      const message = exception.message || exception.Message || 'UnknownError';
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.withBaseException = exports.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({
      output,
      parsedBody,
      exceptionCtor,
      errorCode,
    }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode
        ? $metadata.httpStatusCode + ''
        : void 0;
      const response = new exceptionCtor({
        name:
          (parsedBody === null || parsedBody === void 0
            ? void 0
            : parsedBody.code) ||
          (parsedBody === null || parsedBody === void 0
            ? void 0
            : parsedBody.Code) ||
          errorCode ||
          statusCode ||
          'UnknownError',
        $fault: 'client',
        $metadata,
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports.throwDefaultError = throwDefaultError;
    var withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        (0, exports.throwDefaultError)({
          output,
          parsedBody,
          exceptionCtor: ExceptionCtor,
          errorCode,
        });
      };
    };
    exports.withBaseException = withBaseException;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_b =
            (_a = output.headers['x-amzn-requestid']) !== null && _a !== void 0
              ? _a
              : output.headers['x-amzn-request-id']) !== null && _b !== void 0
            ? _b
            : output.headers['x-amz-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case 'standard':
          return {
            retryMode: 'standard',
            connectionTimeout: 3100,
          };
        case 'in-region':
          return {
            retryMode: 'standard',
            connectionTimeout: 1100,
          };
        case 'cross-region':
          return {
            retryMode: 'standard',
            connectionTimeout: 3100,
          };
        case 'mobile':
          return {
            retryMode: 'standard',
            connectionTimeout: 3e4,
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (
        version2 &&
        !warningEmitted &&
        parseInt(version2.substring(1, version2.indexOf('.'))) < 14
      ) {
        warningEmitted = true;
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) =>
      Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = '#text';
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === 'object' && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function () {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true,
      },
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === 'string') {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.take = exports.convertMap = exports.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter2;
      let instructions;
      if (typeof arg1 === 'undefined' && typeof arg2 === 'undefined') {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === 'function') {
          filter2 = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter2, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    exports.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports.convertMap = convertMap;
    var take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    exports.take = take;
    var mapWithFilter = (target, filter2, instructions) => {
      return map(
        target,
        Object.entries(instructions).reduce((_instructions, [key, value]) => {
          if (Array.isArray(value)) {
            _instructions[key] = value;
          } else {
            if (typeof value === 'function') {
              _instructions[key] = [filter2, value()];
            } else {
              _instructions[key] = [filter2, value];
            }
          }
          return _instructions;
        }, {})
      );
    };
    var applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === 'function') {
          instruction = [, instruction];
        }
        const [filter3 = nonNullish, valueFn = pass, sourceKey = targetKey] =
          instruction;
        if (
          (typeof filter3 === 'function' && filter3(source[sourceKey])) ||
          (typeof filter3 !== 'function' && !!filter3)
        ) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter2, value] = instructions[targetKey];
      if (typeof value === 'function') {
        let _value;
        const defaultFilterPassed =
          filter2 === void 0 && (_value = value()) != null;
        const customFilterPassed =
          (typeof filter2 === 'function' && !!filter2(void 0)) ||
          (typeof filter2 !== 'function' && !!filter2);
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter2 === void 0 && value != null;
        const customFilterPassed =
          (typeof filter2 === 'function' && !!filter2(value)) ||
          (typeof filter2 !== 'function' && !!filter2);
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    var nonNullish = (_2) => _2 != null;
    var pass = (_2) => _2;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolvedPath = void 0;
    var extended_encode_uri_component_1 =
      require_extended_encode_uri_component();
    var resolvedPath = (
      resolvedPath2,
      input,
      memberName,
      labelValueProvider,
      uriLabel,
      isGreedyLabel
    ) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error(
            'Empty value provided for input HTTP label: ' + memberName + '.'
          );
        }
        resolvedPath2 = resolvedPath2.replace(
          uriLabel,
          isGreedyLabel
            ? labelValue
                .split('/')
                .map((segment) =>
                  (0,
                  extended_encode_uri_component_1.extendedEncodeURIComponent)(
                    segment
                  )
                )
                .join('/')
            : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(
                labelValue
              )
        );
      } else {
        throw new Error(
          'No value provided for input HTTP label: ' + memberName + '.'
        );
      }
      return resolvedPath2;
    };
    exports.resolvedPath = resolvedPath;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return 'NaN';
      }
      switch (value) {
        case Infinity:
          return 'Infinity';
        case -Infinity:
          return '-Infinity';
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/serde-json.js
var require_serde_json = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/serde-json.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports._json = void 0;
    var _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_2) => _2 != null);
      }
      if (typeof obj === 'object') {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = (0, exports._json)(obj[key]);
        }
        return target;
      }
      return obj;
    };
    exports._json = _json;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error(
          'Invalid number of delimiters (' + numDelimiters + ') for splitEvery.'
        );
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = '';
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === '') {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = '';
        }
      }
      if (currentSegment !== '') {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports);
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants(), exports);
    tslib_1.__exportStar(require_create_aggregated_client(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_default_error_handler(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_object_mapping(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_resolve_path(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_serde_json(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isArnBucketName =
      exports.isDnsCompatibleBucketName =
      exports.S3_HOSTNAME_PATTERN =
      exports.DOT_PATTERN =
      exports.resolveParamsForS3 =
        void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket =
        (endpointParams === null || endpointParams === void 0
          ? void 0
          : endpointParams.Bucket) || '';
      if (typeof endpointParams.Bucket === 'string') {
        endpointParams.Bucket = bucket
          .replace(/#/g, encodeURIComponent('#'))
          .replace(/\?/g, encodeURIComponent('?'));
      }
      if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error(
            'Path-style addressing cannot be used with ARN buckets'
          );
        }
      } else if (
        !(0, exports.isDnsCompatibleBucketName)(bucket) ||
        (bucket.indexOf('.') !== -1 &&
          !String(endpointParams.Endpoint).startsWith('http:')) ||
        bucket.toLowerCase() !== bucket ||
        bucket.length < 3
      ) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports.DOT_PATTERN = /\./;
    exports.S3_HOSTNAME_PATTERN =
      /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) =>
      DOMAIN_PATTERN.test(bucketName) &&
      !IP_ADDRESS_PATTERN.test(bucketName) &&
      !DOTS_PATTERN.test(bucketName);
    exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] =
        bucketName.split(':');
      const isArn = arn === 'arn' && bucketName.split(':').length >= 6;
      const isValidArn =
        [arn, partition, service, account, typeOrId].filter(Boolean).length ===
        5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return (
        arn === 'arn' && !!partition && !!service && !!account && !!typeOrId
      );
    };
    exports.isArnBucketName = isArnBucketName;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createConfigValueProvider = void 0;
    var createConfigValueProvider = (
      configKey,
      canonicalEndpointParamKey,
      config
    ) => {
      const configProvider = async () => {
        var _a;
        const configValue =
          (_a = config[configKey]) !== null && _a !== void 0
            ? _a
            : config[canonicalEndpointParamKey];
        if (typeof configValue === 'function') {
          return configValue();
        }
        return configValue;
      };
      if (
        configKey === 'endpoint' ||
        canonicalEndpointParamKey === 'endpoint'
      ) {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === 'object') {
            if ('url' in endpoint) {
              return endpoint.url.href;
            }
            if ('hostname' in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ':' + port : ''}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports.createConfigValueProvider = createConfigValueProvider;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveParams = exports.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (
      commandInput,
      instructionsSupplier,
      clientConfig,
      context
    ) => {
      const endpointParams = await (0, exports.resolveParams)(
        commandInput,
        instructionsSupplier,
        clientConfig
      );
      if (typeof clientConfig.endpointProvider !== 'function') {
        throw new Error('config.endpointProvider is not set.');
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (
      commandInput,
      instructionsSupplier,
      clientConfig
    ) => {
      var _a;
      const endpointParams = {};
      const instructions =
        ((_a =
          instructionsSupplier === null || instructionsSupplier === void 0
            ? void 0
            : instructionsSupplier.getEndpointParameterInstructions) === null ||
        _a === void 0
          ? void 0
          : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case 'staticContextParams':
            endpointParams[name] = instruction.value;
            break;
          case 'contextParams':
            endpointParams[name] = commandInput[instruction.name];
            break;
          case 'clientContextParams':
          case 'builtInParams':
            endpointParams[name] = await (0,
            createConfigValueProvider_1.createConfigValueProvider)(
              instruction.name,
              name,
              clientConfig
            )();
            break;
          default:
            throw new Error(
              'Unrecognized endpoint parameter instruction: ' +
                JSON.stringify(instruction)
            );
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === 's3') {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports.resolveParams = resolveParams;
  },
});

// node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  'node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, '');
      if (querystring) {
        for (const pair of querystring.split('&')) {
          let [key, value = null] = pair.split('=');
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  },
});

// node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  'node_modules/@aws-sdk/url-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs3();
    var parseUrl = (url2) => {
      if (typeof url2 === 'string') {
        return (0, exports.parseUrl)(new URL(url2));
      }
      const { hostname, pathname, port, protocol, search } = url2;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query,
      };
    };
    exports.parseUrl = parseUrl;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs4();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === 'object') {
        if ('url' in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports.toEndpointV1 = toEndpointV1;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports);
    tslib_1.__exportStar(require_toEndpointV1(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0,
        getEndpointFromInstructions_1.getEndpointFromInstructions)(
          args.input,
          {
            getEndpointParameterInstructions() {
              return instructions;
            },
          },
          { ...config },
          context
        );
        context.endpointV2 = endpoint;
        context.authSchemes =
          (_a = endpoint.properties) === null || _a === void 0
            ? void 0
            : _a.authSchemes;
        const authScheme =
          (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context['signing_region'] = authScheme.signingRegion;
          context['signing_service'] = authScheme.signingName;
        }
        return next({
          ...args,
        });
      };
    };
    exports.endpointMiddleware = endpointMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware =
      (options, deserializer) => (next, context) => async (args) => {
        const { response } = await next(args);
        try {
          const parsed = await deserializer(response, options);
          return {
            response,
            output: parsed,
          };
        } catch (error) {
          Object.defineProperty(error, '$response', {
            value: response,
          });
          if (!('$metadata' in error)) {
            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
            error.message += '\n  ' + hint;
          }
          throw error;
        }
      };
    exports.deserializerMiddleware = deserializerMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware =
      (options, serializer) => (next, context) => async (args) => {
        var _a;
        const endpoint =
          ((_a = context.endpointV2) === null || _a === void 0
            ? void 0
            : _a.url) && options.urlParser
            ? async () => options.urlParser(context.endpointV2.url)
            : options.endpoint;
        if (!endpoint) {
          throw new Error('No valid endpoint provider available.');
        }
        const request = await serializer(args.input, { ...options, endpoint });
        return next({
          ...args,
          request,
        });
      };
    exports.serializerMiddleware = serializerMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  'node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSerdePlugin =
      exports.serializerMiddlewareOption =
      exports.deserializerMiddlewareOption =
        void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: 'deserializerMiddleware',
      step: 'deserialize',
      tags: ['DESERIALIZER'],
      override: true,
    };
    exports.serializerMiddlewareOption = {
      name: 'serializerMiddleware',
      step: 'serialize',
      tags: ['SERIALIZER'],
      override: true,
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(
            (0, deserializerMiddleware_1.deserializerMiddleware)(
              config,
              deserializer
            ),
            exports.deserializerMiddlewareOption
          );
          commandStack.add(
            (0, serializerMiddleware_1.serializerMiddleware)(
              config,
              serializer
            ),
            exports.serializerMiddlewareOption
          );
        },
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  },
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  'node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs5();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports.endpointMiddlewareOptions = {
      step: 'serialize',
      tags: ['ENDPOINT_PARAMETERS', 'ENDPOINT_V2', 'ENDPOINT'],
      name: 'endpointV2Middleware',
      override: true,
      relation: 'before',
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name,
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          (0, endpointMiddleware_1.endpointMiddleware)({
            config,
            instructions,
          }),
          exports.endpointMiddlewareOptions
        );
      },
    });
    exports.getEndpointPlugin = getEndpointPlugin;
  },
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  'node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === 'function') return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  },
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  'node_modules/@aws-sdk/util-middleware/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider =
        endpoint != null
          ? async () =>
              (0, toEndpointV1_1.toEndpointV1)(
                await (0, util_middleware_1.normalizeProvider)(endpoint)()
              )
          : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(
          (_b = input.useDualstackEndpoint) !== null && _b !== void 0
            ? _b
            : false
        ),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)(
          (_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false
        ),
      };
    };
    exports.resolveEndpointConfig = resolveEndpointConfig;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js
var require_types = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports);
    tslib_1.__exportStar(require_endpointMiddleware(), exports);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports);
    tslib_1.__exportStar(require_types(), exports);
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js
var require_FieldPosition = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.FieldPosition = void 0;
    var FieldPosition;
    (function (FieldPosition2) {
      FieldPosition2[(FieldPosition2['HEADER'] = 0)] = 'HEADER';
      FieldPosition2[(FieldPosition2['TRAILER'] = 1)] = 'TRAILER';
    })((FieldPosition = exports.FieldPosition || (exports.FieldPosition = {})));
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js
var require_Field = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Field = void 0;
    var FieldPosition_1 = require_FieldPosition();
    var Field = class {
      constructor({
        name,
        kind = FieldPosition_1.FieldPosition.HEADER,
        values = [],
      }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values
          .map((v) => (v.includes(',') || v.includes(' ') ? `"${v}"` : v))
          .join(', ');
      }
      get() {
        return this.values;
      }
    };
    exports.Field = Field;
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js
var require_Fields = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = 'utf-8' }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind) {
        return Object.values(this.entries).filter(
          (field) => field.kind === kind
        );
      }
    };
    exports.Fields = Fields;
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || 'GET';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
          ? options.protocol.slice(-1) !== ':'
            ? `${options.protocol}:`
            : options.protocol
          : 'https:';
        this.path = options.path
          ? options.path.charAt(0) !== '/'
            ? `/${options.path}`
            : options.path
          : '/';
      }
      static isInstance(request) {
        if (!request) return false;
        const req = request;
        return (
          'method' in req &&
          'protocol' in req &&
          'hostname' in req &&
          'path' in req &&
          typeof req['query'] === 'object' &&
          typeof req['headers'] === 'object'
        );
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers },
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    }
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return (
          typeof resp.statusCode === 'number' &&
          typeof resp.headers === 'object'
        );
      }
    };
    exports.HttpResponse = HttpResponse;
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Field(), exports);
    tslib_1.__exportStar(require_FieldPosition(), exports);
    tslib_1.__exportStar(require_Fields(), exports);
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  },
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, (poolPtr += 16));
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  'node_modules/uuid/dist/esm-node/rng.js'() {
    import_crypto = __toESM(require('crypto'));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  },
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  'node_modules/uuid/dist/esm-node/regex.js'() {
    regex_default =
      /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  },
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === 'string' && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  'node_modules/uuid/dist/esm-node/validate.js'() {
    init_regex();
    validate_default = validate;
  },
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (
    byteToHex[arr[offset + 0]] +
    byteToHex[arr[offset + 1]] +
    byteToHex[arr[offset + 2]] +
    byteToHex[arr[offset + 3]] +
    '-' +
    byteToHex[arr[offset + 4]] +
    byteToHex[arr[offset + 5]] +
    '-' +
    byteToHex[arr[offset + 6]] +
    byteToHex[arr[offset + 7]] +
    '-' +
    byteToHex[arr[offset + 8]] +
    byteToHex[arr[offset + 9]] +
    '-' +
    byteToHex[arr[offset + 10]] +
    byteToHex[arr[offset + 11]] +
    byteToHex[arr[offset + 12]] +
    byteToHex[arr[offset + 13]] +
    byteToHex[arr[offset + 14]] +
    byteToHex[arr[offset + 15]]
  ).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  'node_modules/uuid/dist/esm-node/stringify.js'() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  },
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = (buf && offset) || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [
        seedBytes[0] | 1,
        seedBytes[1],
        seedBytes[2],
        seedBytes[3],
        seedBytes[4],
        seedBytes[5],
      ];
    }
    if (clockseq == null) {
      clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = (clockseq + 1) & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = (tl >>> 24) & 255;
  b[i++] = (tl >>> 16) & 255;
  b[i++] = (tl >>> 8) & 255;
  b[i++] = tl & 255;
  const tmh = ((msecs / 4294967296) * 1e4) & 268435455;
  b[i++] = (tmh >>> 8) & 255;
  b[i++] = tmh & 255;
  b[i++] = ((tmh >>> 24) & 15) | 16;
  b[i++] = (tmh >>> 16) & 255;
  b[i++] = (clockseq >>> 8) | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  'node_modules/uuid/dist/esm-node/v1.js'() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  },
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError('Invalid UUID');
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = (v >>> 16) & 255;
  arr[2] = (v >>> 8) & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776) & 255;
  arr[11] = (v / 4294967296) & 255;
  arr[12] = (v >>> 24) & 255;
  arr[13] = (v >>> 16) & 255;
  arr[14] = (v >>> 8) & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  'node_modules/uuid/dist/esm-node/parse.js'() {
    init_validate();
    parse_default = parse;
  },
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError(
        'Namespace must be array-like (16 iterable integer values, 0-255)'
      );
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = (bytes[6] & 15) | version2;
    bytes[8] = (bytes[8] & 63) | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {}
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  'node_modules/uuid/dist/esm-node/v35.js'() {
    init_stringify();
    init_parse();
    DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    URL2 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
  },
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }
  return import_crypto2.default.createHash('md5').update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  'node_modules/uuid/dist/esm-node/md5.js'() {
    import_crypto2 = __toESM(require('crypto'));
    md5_default = md5;
  },
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  'node_modules/uuid/dist/esm-node/v3.js'() {
    init_v35();
    init_md5();
    v3 = v35_default('v3', 48, md5_default);
    v3_default = v3;
  },
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = (rnds[6] & 15) | 64;
  rnds[8] = (rnds[8] & 63) | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  'node_modules/uuid/dist/esm-node/v4.js'() {
    init_rng();
    init_stringify();
    v4_default = v4;
  },
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }
  return import_crypto3.default.createHash('sha1').update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  'node_modules/uuid/dist/esm-node/sha1.js'() {
    import_crypto3 = __toESM(require('crypto'));
    sha1_default = sha1;
  },
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  'node_modules/uuid/dist/esm-node/v5.js'() {
    init_v35();
    init_sha1();
    v5 = v35_default('v5', 80, sha1_default);
    v5_default = v5;
  },
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  'node_modules/uuid/dist/esm-node/nil.js'() {
    nil_default = '00000000-0000-0000-0000-000000000000';
  },
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError('Invalid UUID');
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  'node_modules/uuid/dist/esm-node/version.js'() {
    init_validate();
    version_default = version;
  },
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default,
});
var init_esm_node = __esm({
  'node_modules/uuid/dist/esm-node/index.js'() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js
var require_DynamoDBServiceException = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBServiceException = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var DynamoDBServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, DynamoDBServiceException.prototype);
      }
    };
    exports.DynamoDBServiceException = DynamoDBServiceException;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ImportStatus =
      exports.GlobalTableNotFoundException =
      exports.ExportNotFoundException =
      exports.S3SseAlgorithm =
      exports.ExportStatus =
      exports.ExportFormat =
      exports.TransactionConflictException =
      exports.ReturnValue =
      exports.ResourceInUseException =
      exports.TableStatus =
      exports.IndexStatus =
      exports.GlobalTableAlreadyExistsException =
      exports.TableClass =
      exports.ReplicaStatus =
      exports.GlobalTableStatus =
      exports.TableNotFoundException =
      exports.TableInUseException =
      exports.LimitExceededException =
      exports.ContributorInsightsStatus =
      exports.ContributorInsightsAction =
      exports.ContinuousBackupsUnavailableException =
      exports.PointInTimeRecoveryStatus =
      exports.ContinuousBackupsStatus =
      exports.ReturnValuesOnConditionCheckFailure =
      exports.ConditionalOperator =
      exports.ConditionalCheckFailedException =
      exports.ComparisonOperator =
      exports.ItemCollectionSizeLimitExceededException =
      exports.ReturnItemCollectionMetrics =
      exports.ResourceNotFoundException =
      exports.ProvisionedThroughputExceededException =
      exports.InvalidEndpointException =
      exports.RequestLimitExceeded =
      exports.InternalServerError =
      exports.BatchStatementErrorCodeEnum =
      exports.ReturnConsumedCapacity =
      exports.BackupTypeFilter =
      exports.BackupNotFoundException =
      exports.BackupInUseException =
      exports.TimeToLiveStatus =
      exports.StreamViewType =
      exports.SSEStatus =
      exports.SSEType =
      exports.ProjectionType =
      exports.KeyType =
      exports.BillingMode =
      exports.BackupType =
      exports.BackupStatus =
      exports.ScalarAttributeType =
      exports.AttributeAction =
        void 0;
    exports.TransactionCanceledException =
      exports.AttributeValue =
      exports.IndexNotFoundException =
      exports.ReplicaNotFoundException =
      exports.ReplicaAlreadyExistsException =
      exports.InvalidRestoreTimeException =
      exports.TableAlreadyExistsException =
      exports.Select =
      exports.ImportConflictException =
      exports.PointInTimeRecoveryUnavailableException =
      exports.InvalidExportTimeException =
      exports.ExportConflictException =
      exports.TransactionInProgressException =
      exports.IdempotentParameterMismatchException =
      exports.DuplicateItemException =
      exports.DestinationStatus =
      exports.ImportNotFoundException =
      exports.InputFormat =
      exports.InputCompressionType =
        void 0;
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    exports.AttributeAction = {
      ADD: 'ADD',
      DELETE: 'DELETE',
      PUT: 'PUT',
    };
    exports.ScalarAttributeType = {
      B: 'B',
      N: 'N',
      S: 'S',
    };
    exports.BackupStatus = {
      AVAILABLE: 'AVAILABLE',
      CREATING: 'CREATING',
      DELETED: 'DELETED',
    };
    exports.BackupType = {
      AWS_BACKUP: 'AWS_BACKUP',
      SYSTEM: 'SYSTEM',
      USER: 'USER',
    };
    exports.BillingMode = {
      PAY_PER_REQUEST: 'PAY_PER_REQUEST',
      PROVISIONED: 'PROVISIONED',
    };
    exports.KeyType = {
      HASH: 'HASH',
      RANGE: 'RANGE',
    };
    exports.ProjectionType = {
      ALL: 'ALL',
      INCLUDE: 'INCLUDE',
      KEYS_ONLY: 'KEYS_ONLY',
    };
    exports.SSEType = {
      AES256: 'AES256',
      KMS: 'KMS',
    };
    exports.SSEStatus = {
      DISABLED: 'DISABLED',
      DISABLING: 'DISABLING',
      ENABLED: 'ENABLED',
      ENABLING: 'ENABLING',
      UPDATING: 'UPDATING',
    };
    exports.StreamViewType = {
      KEYS_ONLY: 'KEYS_ONLY',
      NEW_AND_OLD_IMAGES: 'NEW_AND_OLD_IMAGES',
      NEW_IMAGE: 'NEW_IMAGE',
      OLD_IMAGE: 'OLD_IMAGE',
    };
    exports.TimeToLiveStatus = {
      DISABLED: 'DISABLED',
      DISABLING: 'DISABLING',
      ENABLED: 'ENABLED',
      ENABLING: 'ENABLING',
    };
    var BackupInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'BackupInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'BackupInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, BackupInUseException.prototype);
      }
    };
    exports.BackupInUseException = BackupInUseException;
    var BackupNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'BackupNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'BackupNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, BackupNotFoundException.prototype);
      }
    };
    exports.BackupNotFoundException = BackupNotFoundException;
    exports.BackupTypeFilter = {
      ALL: 'ALL',
      AWS_BACKUP: 'AWS_BACKUP',
      SYSTEM: 'SYSTEM',
      USER: 'USER',
    };
    exports.ReturnConsumedCapacity = {
      INDEXES: 'INDEXES',
      NONE: 'NONE',
      TOTAL: 'TOTAL',
    };
    exports.BatchStatementErrorCodeEnum = {
      AccessDenied: 'AccessDenied',
      ConditionalCheckFailed: 'ConditionalCheckFailed',
      DuplicateItem: 'DuplicateItem',
      InternalServerError: 'InternalServerError',
      ItemCollectionSizeLimitExceeded: 'ItemCollectionSizeLimitExceeded',
      ProvisionedThroughputExceeded: 'ProvisionedThroughputExceeded',
      RequestLimitExceeded: 'RequestLimitExceeded',
      ResourceNotFound: 'ResourceNotFound',
      ThrottlingError: 'ThrottlingError',
      TransactionConflict: 'TransactionConflict',
      ValidationError: 'ValidationError',
    };
    var InternalServerError = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InternalServerError',
          $fault: 'server',
          ...opts,
        });
        this.name = 'InternalServerError';
        this.$fault = 'server';
        Object.setPrototypeOf(this, InternalServerError.prototype);
      }
    };
    exports.InternalServerError = InternalServerError;
    var RequestLimitExceeded = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'RequestLimitExceeded',
          $fault: 'client',
          ...opts,
        });
        this.name = 'RequestLimitExceeded';
        this.$fault = 'client';
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
      }
    };
    exports.RequestLimitExceeded = RequestLimitExceeded;
    var InvalidEndpointException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidEndpointException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidEndpointException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidEndpointException = InvalidEndpointException;
    var ProvisionedThroughputExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ProvisionedThroughputExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ProvisionedThroughputExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          ProvisionedThroughputExceededException.prototype
        );
      }
    };
    exports.ProvisionedThroughputExceededException =
      ProvisionedThroughputExceededException;
    var ResourceNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ResourceNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    exports.ReturnItemCollectionMetrics = {
      NONE: 'NONE',
      SIZE: 'SIZE',
    };
    var ItemCollectionSizeLimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ItemCollectionSizeLimitExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ItemCollectionSizeLimitExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          ItemCollectionSizeLimitExceededException.prototype
        );
      }
    };
    exports.ItemCollectionSizeLimitExceededException =
      ItemCollectionSizeLimitExceededException;
    exports.ComparisonOperator = {
      BEGINS_WITH: 'BEGINS_WITH',
      BETWEEN: 'BETWEEN',
      CONTAINS: 'CONTAINS',
      EQ: 'EQ',
      GE: 'GE',
      GT: 'GT',
      IN: 'IN',
      LE: 'LE',
      LT: 'LT',
      NE: 'NE',
      NOT_CONTAINS: 'NOT_CONTAINS',
      NOT_NULL: 'NOT_NULL',
      NULL: 'NULL',
    };
    var ConditionalCheckFailedException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ConditionalCheckFailedException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ConditionalCheckFailedException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
      }
    };
    exports.ConditionalCheckFailedException = ConditionalCheckFailedException;
    exports.ConditionalOperator = {
      AND: 'AND',
      OR: 'OR',
    };
    exports.ReturnValuesOnConditionCheckFailure = {
      ALL_OLD: 'ALL_OLD',
      NONE: 'NONE',
    };
    exports.ContinuousBackupsStatus = {
      DISABLED: 'DISABLED',
      ENABLED: 'ENABLED',
    };
    exports.PointInTimeRecoveryStatus = {
      DISABLED: 'DISABLED',
      ENABLED: 'ENABLED',
    };
    var ContinuousBackupsUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ContinuousBackupsUnavailableException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ContinuousBackupsUnavailableException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          ContinuousBackupsUnavailableException.prototype
        );
      }
    };
    exports.ContinuousBackupsUnavailableException =
      ContinuousBackupsUnavailableException;
    exports.ContributorInsightsAction = {
      DISABLE: 'DISABLE',
      ENABLE: 'ENABLE',
    };
    exports.ContributorInsightsStatus = {
      DISABLED: 'DISABLED',
      DISABLING: 'DISABLING',
      ENABLED: 'ENABLED',
      ENABLING: 'ENABLING',
      FAILED: 'FAILED',
    };
    var LimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'LimitExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'LimitExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, LimitExceededException.prototype);
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var TableInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableInUseException.prototype);
      }
    };
    exports.TableInUseException = TableInUseException;
    var TableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableNotFoundException.prototype);
      }
    };
    exports.TableNotFoundException = TableNotFoundException;
    exports.GlobalTableStatus = {
      ACTIVE: 'ACTIVE',
      CREATING: 'CREATING',
      DELETING: 'DELETING',
      UPDATING: 'UPDATING',
    };
    exports.ReplicaStatus = {
      ACTIVE: 'ACTIVE',
      CREATING: 'CREATING',
      CREATION_FAILED: 'CREATION_FAILED',
      DELETING: 'DELETING',
      INACCESSIBLE_ENCRYPTION_CREDENTIALS:
        'INACCESSIBLE_ENCRYPTION_CREDENTIALS',
      REGION_DISABLED: 'REGION_DISABLED',
      UPDATING: 'UPDATING',
    };
    exports.TableClass = {
      STANDARD: 'STANDARD',
      STANDARD_INFREQUENT_ACCESS: 'STANDARD_INFREQUENT_ACCESS',
    };
    var GlobalTableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'GlobalTableAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'GlobalTableAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          GlobalTableAlreadyExistsException.prototype
        );
      }
    };
    exports.GlobalTableAlreadyExistsException =
      GlobalTableAlreadyExistsException;
    exports.IndexStatus = {
      ACTIVE: 'ACTIVE',
      CREATING: 'CREATING',
      DELETING: 'DELETING',
      UPDATING: 'UPDATING',
    };
    exports.TableStatus = {
      ACTIVE: 'ACTIVE',
      ARCHIVED: 'ARCHIVED',
      ARCHIVING: 'ARCHIVING',
      CREATING: 'CREATING',
      DELETING: 'DELETING',
      INACCESSIBLE_ENCRYPTION_CREDENTIALS:
        'INACCESSIBLE_ENCRYPTION_CREDENTIALS',
      UPDATING: 'UPDATING',
    };
    var ResourceInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ResourceInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    exports.ReturnValue = {
      ALL_NEW: 'ALL_NEW',
      ALL_OLD: 'ALL_OLD',
      NONE: 'NONE',
      UPDATED_NEW: 'UPDATED_NEW',
      UPDATED_OLD: 'UPDATED_OLD',
    };
    var TransactionConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionConflictException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionConflictException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionConflictException.prototype);
      }
    };
    exports.TransactionConflictException = TransactionConflictException;
    exports.ExportFormat = {
      DYNAMODB_JSON: 'DYNAMODB_JSON',
      ION: 'ION',
    };
    exports.ExportStatus = {
      COMPLETED: 'COMPLETED',
      FAILED: 'FAILED',
      IN_PROGRESS: 'IN_PROGRESS',
    };
    exports.S3SseAlgorithm = {
      AES256: 'AES256',
      KMS: 'KMS',
    };
    var ExportNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ExportNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExportNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExportNotFoundException.prototype);
      }
    };
    exports.ExportNotFoundException = ExportNotFoundException;
    var GlobalTableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'GlobalTableNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'GlobalTableNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, GlobalTableNotFoundException.prototype);
      }
    };
    exports.GlobalTableNotFoundException = GlobalTableNotFoundException;
    exports.ImportStatus = {
      CANCELLED: 'CANCELLED',
      CANCELLING: 'CANCELLING',
      COMPLETED: 'COMPLETED',
      FAILED: 'FAILED',
      IN_PROGRESS: 'IN_PROGRESS',
    };
    exports.InputCompressionType = {
      GZIP: 'GZIP',
      NONE: 'NONE',
      ZSTD: 'ZSTD',
    };
    exports.InputFormat = {
      CSV: 'CSV',
      DYNAMODB_JSON: 'DYNAMODB_JSON',
      ION: 'ION',
    };
    var ImportNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ImportNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ImportNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ImportNotFoundException.prototype);
      }
    };
    exports.ImportNotFoundException = ImportNotFoundException;
    exports.DestinationStatus = {
      ACTIVE: 'ACTIVE',
      DISABLED: 'DISABLED',
      DISABLING: 'DISABLING',
      ENABLE_FAILED: 'ENABLE_FAILED',
      ENABLING: 'ENABLING',
    };
    var DuplicateItemException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'DuplicateItemException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'DuplicateItemException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, DuplicateItemException.prototype);
      }
    };
    exports.DuplicateItemException = DuplicateItemException;
    var IdempotentParameterMismatchException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'IdempotentParameterMismatchException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IdempotentParameterMismatchException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          IdempotentParameterMismatchException.prototype
        );
        this.Message = opts.Message;
      }
    };
    exports.IdempotentParameterMismatchException =
      IdempotentParameterMismatchException;
    var TransactionInProgressException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionInProgressException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionInProgressException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TransactionInProgressException = TransactionInProgressException;
    var ExportConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ExportConflictException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExportConflictException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExportConflictException.prototype);
      }
    };
    exports.ExportConflictException = ExportConflictException;
    var InvalidExportTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidExportTimeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidExportTimeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidExportTimeException.prototype);
      }
    };
    exports.InvalidExportTimeException = InvalidExportTimeException;
    var PointInTimeRecoveryUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'PointInTimeRecoveryUnavailableException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'PointInTimeRecoveryUnavailableException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          PointInTimeRecoveryUnavailableException.prototype
        );
      }
    };
    exports.PointInTimeRecoveryUnavailableException =
      PointInTimeRecoveryUnavailableException;
    var ImportConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ImportConflictException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ImportConflictException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ImportConflictException.prototype);
      }
    };
    exports.ImportConflictException = ImportConflictException;
    exports.Select = {
      ALL_ATTRIBUTES: 'ALL_ATTRIBUTES',
      ALL_PROJECTED_ATTRIBUTES: 'ALL_PROJECTED_ATTRIBUTES',
      COUNT: 'COUNT',
      SPECIFIC_ATTRIBUTES: 'SPECIFIC_ATTRIBUTES',
    };
    var TableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableAlreadyExistsException.prototype);
      }
    };
    exports.TableAlreadyExistsException = TableAlreadyExistsException;
    var InvalidRestoreTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidRestoreTimeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidRestoreTimeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidRestoreTimeException.prototype);
      }
    };
    exports.InvalidRestoreTimeException = InvalidRestoreTimeException;
    var ReplicaAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ReplicaAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ReplicaAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ReplicaAlreadyExistsException.prototype);
      }
    };
    exports.ReplicaAlreadyExistsException = ReplicaAlreadyExistsException;
    var ReplicaNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ReplicaNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ReplicaNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ReplicaNotFoundException.prototype);
      }
    };
    exports.ReplicaNotFoundException = ReplicaNotFoundException;
    var IndexNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'IndexNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IndexNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IndexNotFoundException.prototype);
      }
    };
    exports.IndexNotFoundException = IndexNotFoundException;
    var AttributeValue;
    (function (AttributeValue2) {
      AttributeValue2.visit = (value, visitor) => {
        if (value.S !== void 0) return visitor.S(value.S);
        if (value.N !== void 0) return visitor.N(value.N);
        if (value.B !== void 0) return visitor.B(value.B);
        if (value.SS !== void 0) return visitor.SS(value.SS);
        if (value.NS !== void 0) return visitor.NS(value.NS);
        if (value.BS !== void 0) return visitor.BS(value.BS);
        if (value.M !== void 0) return visitor.M(value.M);
        if (value.L !== void 0) return visitor.L(value.L);
        if (value.NULL !== void 0) return visitor.NULL(value.NULL);
        if (value.BOOL !== void 0) return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(
      (AttributeValue = exports.AttributeValue || (exports.AttributeValue = {}))
    );
    var TransactionCanceledException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionCanceledException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionCanceledException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
      }
    };
    exports.TransactionCanceledException = TransactionCanceledException;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js
var require_Aws_json1_0 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.se_UpdateItemCommand =
      exports.se_UpdateGlobalTableSettingsCommand =
      exports.se_UpdateGlobalTableCommand =
      exports.se_UpdateContributorInsightsCommand =
      exports.se_UpdateContinuousBackupsCommand =
      exports.se_UntagResourceCommand =
      exports.se_TransactWriteItemsCommand =
      exports.se_TransactGetItemsCommand =
      exports.se_TagResourceCommand =
      exports.se_ScanCommand =
      exports.se_RestoreTableToPointInTimeCommand =
      exports.se_RestoreTableFromBackupCommand =
      exports.se_QueryCommand =
      exports.se_PutItemCommand =
      exports.se_ListTagsOfResourceCommand =
      exports.se_ListTablesCommand =
      exports.se_ListImportsCommand =
      exports.se_ListGlobalTablesCommand =
      exports.se_ListExportsCommand =
      exports.se_ListContributorInsightsCommand =
      exports.se_ListBackupsCommand =
      exports.se_ImportTableCommand =
      exports.se_GetItemCommand =
      exports.se_ExportTableToPointInTimeCommand =
      exports.se_ExecuteTransactionCommand =
      exports.se_ExecuteStatementCommand =
      exports.se_EnableKinesisStreamingDestinationCommand =
      exports.se_DisableKinesisStreamingDestinationCommand =
      exports.se_DescribeTimeToLiveCommand =
      exports.se_DescribeTableReplicaAutoScalingCommand =
      exports.se_DescribeTableCommand =
      exports.se_DescribeLimitsCommand =
      exports.se_DescribeKinesisStreamingDestinationCommand =
      exports.se_DescribeImportCommand =
      exports.se_DescribeGlobalTableSettingsCommand =
      exports.se_DescribeGlobalTableCommand =
      exports.se_DescribeExportCommand =
      exports.se_DescribeEndpointsCommand =
      exports.se_DescribeContributorInsightsCommand =
      exports.se_DescribeContinuousBackupsCommand =
      exports.se_DescribeBackupCommand =
      exports.se_DeleteTableCommand =
      exports.se_DeleteItemCommand =
      exports.se_DeleteBackupCommand =
      exports.se_CreateTableCommand =
      exports.se_CreateGlobalTableCommand =
      exports.se_CreateBackupCommand =
      exports.se_BatchWriteItemCommand =
      exports.se_BatchGetItemCommand =
      exports.se_BatchExecuteStatementCommand =
        void 0;
    exports.de_UpdateContributorInsightsCommand =
      exports.de_UpdateContinuousBackupsCommand =
      exports.de_UntagResourceCommand =
      exports.de_TransactWriteItemsCommand =
      exports.de_TransactGetItemsCommand =
      exports.de_TagResourceCommand =
      exports.de_ScanCommand =
      exports.de_RestoreTableToPointInTimeCommand =
      exports.de_RestoreTableFromBackupCommand =
      exports.de_QueryCommand =
      exports.de_PutItemCommand =
      exports.de_ListTagsOfResourceCommand =
      exports.de_ListTablesCommand =
      exports.de_ListImportsCommand =
      exports.de_ListGlobalTablesCommand =
      exports.de_ListExportsCommand =
      exports.de_ListContributorInsightsCommand =
      exports.de_ListBackupsCommand =
      exports.de_ImportTableCommand =
      exports.de_GetItemCommand =
      exports.de_ExportTableToPointInTimeCommand =
      exports.de_ExecuteTransactionCommand =
      exports.de_ExecuteStatementCommand =
      exports.de_EnableKinesisStreamingDestinationCommand =
      exports.de_DisableKinesisStreamingDestinationCommand =
      exports.de_DescribeTimeToLiveCommand =
      exports.de_DescribeTableReplicaAutoScalingCommand =
      exports.de_DescribeTableCommand =
      exports.de_DescribeLimitsCommand =
      exports.de_DescribeKinesisStreamingDestinationCommand =
      exports.de_DescribeImportCommand =
      exports.de_DescribeGlobalTableSettingsCommand =
      exports.de_DescribeGlobalTableCommand =
      exports.de_DescribeExportCommand =
      exports.de_DescribeEndpointsCommand =
      exports.de_DescribeContributorInsightsCommand =
      exports.de_DescribeContinuousBackupsCommand =
      exports.de_DescribeBackupCommand =
      exports.de_DeleteTableCommand =
      exports.de_DeleteItemCommand =
      exports.de_DeleteBackupCommand =
      exports.de_CreateTableCommand =
      exports.de_CreateGlobalTableCommand =
      exports.de_CreateBackupCommand =
      exports.de_BatchWriteItemCommand =
      exports.de_BatchGetItemCommand =
      exports.de_BatchExecuteStatementCommand =
      exports.se_UpdateTimeToLiveCommand =
      exports.se_UpdateTableReplicaAutoScalingCommand =
      exports.se_UpdateTableCommand =
        void 0;
    exports.de_UpdateTimeToLiveCommand =
      exports.de_UpdateTableReplicaAutoScalingCommand =
      exports.de_UpdateTableCommand =
      exports.de_UpdateItemCommand =
      exports.de_UpdateGlobalTableSettingsCommand =
      exports.de_UpdateGlobalTableCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs2();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var models_0_1 = require_models_0();
    var se_BatchExecuteStatementCommand = async (input, context) => {
      const headers = sharedHeaders('BatchExecuteStatement');
      let body;
      body = JSON.stringify(se_BatchExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_BatchExecuteStatementCommand = se_BatchExecuteStatementCommand;
    var se_BatchGetItemCommand = async (input, context) => {
      const headers = sharedHeaders('BatchGetItem');
      let body;
      body = JSON.stringify(se_BatchGetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_BatchGetItemCommand = se_BatchGetItemCommand;
    var se_BatchWriteItemCommand = async (input, context) => {
      const headers = sharedHeaders('BatchWriteItem');
      let body;
      body = JSON.stringify(se_BatchWriteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_BatchWriteItemCommand = se_BatchWriteItemCommand;
    var se_CreateBackupCommand = async (input, context) => {
      const headers = sharedHeaders('CreateBackup');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_CreateBackupCommand = se_CreateBackupCommand;
    var se_CreateGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders('CreateGlobalTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_CreateGlobalTableCommand = se_CreateGlobalTableCommand;
    var se_CreateTableCommand = async (input, context) => {
      const headers = sharedHeaders('CreateTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_CreateTableCommand = se_CreateTableCommand;
    var se_DeleteBackupCommand = async (input, context) => {
      const headers = sharedHeaders('DeleteBackup');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DeleteBackupCommand = se_DeleteBackupCommand;
    var se_DeleteItemCommand = async (input, context) => {
      const headers = sharedHeaders('DeleteItem');
      let body;
      body = JSON.stringify(se_DeleteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DeleteItemCommand = se_DeleteItemCommand;
    var se_DeleteTableCommand = async (input, context) => {
      const headers = sharedHeaders('DeleteTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DeleteTableCommand = se_DeleteTableCommand;
    var se_DescribeBackupCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeBackup');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeBackupCommand = se_DescribeBackupCommand;
    var se_DescribeContinuousBackupsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeContinuousBackups');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeContinuousBackupsCommand =
      se_DescribeContinuousBackupsCommand;
    var se_DescribeContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeContributorInsights');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeContributorInsightsCommand =
      se_DescribeContributorInsightsCommand;
    var se_DescribeEndpointsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeEndpoints');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeEndpointsCommand = se_DescribeEndpointsCommand;
    var se_DescribeExportCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeExport');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeExportCommand = se_DescribeExportCommand;
    var se_DescribeGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeGlobalTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeGlobalTableCommand = se_DescribeGlobalTableCommand;
    var se_DescribeGlobalTableSettingsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeGlobalTableSettings');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeGlobalTableSettingsCommand =
      se_DescribeGlobalTableSettingsCommand;
    var se_DescribeImportCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeImport');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeImportCommand = se_DescribeImportCommand;
    var se_DescribeKinesisStreamingDestinationCommand = async (
      input,
      context
    ) => {
      const headers = sharedHeaders('DescribeKinesisStreamingDestination');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeKinesisStreamingDestinationCommand =
      se_DescribeKinesisStreamingDestinationCommand;
    var se_DescribeLimitsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeLimits');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeLimitsCommand = se_DescribeLimitsCommand;
    var se_DescribeTableCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeTableCommand = se_DescribeTableCommand;
    var se_DescribeTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeTableReplicaAutoScaling');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeTableReplicaAutoScalingCommand =
      se_DescribeTableReplicaAutoScalingCommand;
    var se_DescribeTimeToLiveCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeTimeToLive');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeTimeToLiveCommand = se_DescribeTimeToLiveCommand;
    var se_DisableKinesisStreamingDestinationCommand = async (
      input,
      context
    ) => {
      const headers = sharedHeaders('DisableKinesisStreamingDestination');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DisableKinesisStreamingDestinationCommand =
      se_DisableKinesisStreamingDestinationCommand;
    var se_EnableKinesisStreamingDestinationCommand = async (
      input,
      context
    ) => {
      const headers = sharedHeaders('EnableKinesisStreamingDestination');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_EnableKinesisStreamingDestinationCommand =
      se_EnableKinesisStreamingDestinationCommand;
    var se_ExecuteStatementCommand = async (input, context) => {
      const headers = sharedHeaders('ExecuteStatement');
      let body;
      body = JSON.stringify(se_ExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ExecuteStatementCommand = se_ExecuteStatementCommand;
    var se_ExecuteTransactionCommand = async (input, context) => {
      const headers = sharedHeaders('ExecuteTransaction');
      let body;
      body = JSON.stringify(se_ExecuteTransactionInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ExecuteTransactionCommand = se_ExecuteTransactionCommand;
    var se_ExportTableToPointInTimeCommand = async (input, context) => {
      const headers = sharedHeaders('ExportTableToPointInTime');
      let body;
      body = JSON.stringify(se_ExportTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ExportTableToPointInTimeCommand =
      se_ExportTableToPointInTimeCommand;
    var se_GetItemCommand = async (input, context) => {
      const headers = sharedHeaders('GetItem');
      let body;
      body = JSON.stringify(se_GetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetItemCommand = se_GetItemCommand;
    var se_ImportTableCommand = async (input, context) => {
      const headers = sharedHeaders('ImportTable');
      let body;
      body = JSON.stringify(se_ImportTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ImportTableCommand = se_ImportTableCommand;
    var se_ListBackupsCommand = async (input, context) => {
      const headers = sharedHeaders('ListBackups');
      let body;
      body = JSON.stringify(se_ListBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListBackupsCommand = se_ListBackupsCommand;
    var se_ListContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders('ListContributorInsights');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListContributorInsightsCommand =
      se_ListContributorInsightsCommand;
    var se_ListExportsCommand = async (input, context) => {
      const headers = sharedHeaders('ListExports');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListExportsCommand = se_ListExportsCommand;
    var se_ListGlobalTablesCommand = async (input, context) => {
      const headers = sharedHeaders('ListGlobalTables');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListGlobalTablesCommand = se_ListGlobalTablesCommand;
    var se_ListImportsCommand = async (input, context) => {
      const headers = sharedHeaders('ListImports');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListImportsCommand = se_ListImportsCommand;
    var se_ListTablesCommand = async (input, context) => {
      const headers = sharedHeaders('ListTables');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListTablesCommand = se_ListTablesCommand;
    var se_ListTagsOfResourceCommand = async (input, context) => {
      const headers = sharedHeaders('ListTagsOfResource');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListTagsOfResourceCommand = se_ListTagsOfResourceCommand;
    var se_PutItemCommand = async (input, context) => {
      const headers = sharedHeaders('PutItem');
      let body;
      body = JSON.stringify(se_PutItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_PutItemCommand = se_PutItemCommand;
    var se_QueryCommand = async (input, context) => {
      const headers = sharedHeaders('Query');
      let body;
      body = JSON.stringify(se_QueryInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_QueryCommand = se_QueryCommand;
    var se_RestoreTableFromBackupCommand = async (input, context) => {
      const headers = sharedHeaders('RestoreTableFromBackup');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_RestoreTableFromBackupCommand = se_RestoreTableFromBackupCommand;
    var se_RestoreTableToPointInTimeCommand = async (input, context) => {
      const headers = sharedHeaders('RestoreTableToPointInTime');
      let body;
      body = JSON.stringify(se_RestoreTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_RestoreTableToPointInTimeCommand =
      se_RestoreTableToPointInTimeCommand;
    var se_ScanCommand = async (input, context) => {
      const headers = sharedHeaders('Scan');
      let body;
      body = JSON.stringify(se_ScanInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ScanCommand = se_ScanCommand;
    var se_TagResourceCommand = async (input, context) => {
      const headers = sharedHeaders('TagResource');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_TagResourceCommand = se_TagResourceCommand;
    var se_TransactGetItemsCommand = async (input, context) => {
      const headers = sharedHeaders('TransactGetItems');
      let body;
      body = JSON.stringify(se_TransactGetItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_TransactGetItemsCommand = se_TransactGetItemsCommand;
    var se_TransactWriteItemsCommand = async (input, context) => {
      const headers = sharedHeaders('TransactWriteItems');
      let body;
      body = JSON.stringify(se_TransactWriteItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_TransactWriteItemsCommand = se_TransactWriteItemsCommand;
    var se_UntagResourceCommand = async (input, context) => {
      const headers = sharedHeaders('UntagResource');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UntagResourceCommand = se_UntagResourceCommand;
    var se_UpdateContinuousBackupsCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateContinuousBackups');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateContinuousBackupsCommand =
      se_UpdateContinuousBackupsCommand;
    var se_UpdateContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateContributorInsights');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateContributorInsightsCommand =
      se_UpdateContributorInsightsCommand;
    var se_UpdateGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateGlobalTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateGlobalTableCommand = se_UpdateGlobalTableCommand;
    var se_UpdateGlobalTableSettingsCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateGlobalTableSettings');
      let body;
      body = JSON.stringify(se_UpdateGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateGlobalTableSettingsCommand =
      se_UpdateGlobalTableSettingsCommand;
    var se_UpdateItemCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateItem');
      let body;
      body = JSON.stringify(se_UpdateItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateItemCommand = se_UpdateItemCommand;
    var se_UpdateTableCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateTableCommand = se_UpdateTableCommand;
    var se_UpdateTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateTableReplicaAutoScaling');
      let body;
      body = JSON.stringify(
        se_UpdateTableReplicaAutoScalingInput(input, context)
      );
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateTableReplicaAutoScalingCommand =
      se_UpdateTableReplicaAutoScalingCommand;
    var se_UpdateTimeToLiveCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateTimeToLive');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateTimeToLiveCommand = se_UpdateTimeToLiveCommand;
    var de_BatchExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_BatchExecuteStatementCommand = de_BatchExecuteStatementCommand;
    var de_BatchExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_BatchGetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchGetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchGetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_BatchGetItemCommand = de_BatchGetItemCommand;
    var de_BatchGetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_BatchWriteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchWriteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchWriteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_BatchWriteItemCommand = de_BatchWriteItemCommand;
    var de_BatchWriteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_CreateBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_CreateBackupCommand = de_CreateBackupCommand;
    var de_CreateBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case 'ContinuousBackupsUnavailableException':
        case 'com.amazonaws.dynamodb#ContinuousBackupsUnavailableException':
          throw await de_ContinuousBackupsUnavailableExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_CreateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_CreateGlobalTableCommand = de_CreateGlobalTableCommand;
    var de_CreateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#GlobalTableAlreadyExistsException':
          throw await de_GlobalTableAlreadyExistsExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_CreateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_CreateTableCommand = de_CreateTableCommand;
    var de_CreateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DeleteBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DeleteBackupCommand = de_DeleteBackupCommand;
    var de_DeleteBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DeleteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DeleteItemCommand = de_DeleteItemCommand;
    var de_DeleteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await de_ConditionalCheckFailedExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DeleteTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DeleteTableCommand = de_DeleteTableCommand;
    var de_DeleteTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeBackupCommand = de_DescribeBackupCommand;
    var de_DescribeBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeContinuousBackupsCommand =
      de_DescribeContinuousBackupsCommand;
    var de_DescribeContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeContributorInsightsCommand =
      de_DescribeContributorInsightsCommand;
    var de_DescribeContributorInsightsCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeEndpointsCommand = de_DescribeEndpointsCommand;
    var de_DescribeEndpointsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode,
      });
    };
    var de_DescribeExportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeExportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeExportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeExportCommand = de_DescribeExportCommand;
    var de_DescribeExportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExportNotFoundException':
        case 'com.amazonaws.dynamodb#ExportNotFoundException':
          throw await de_ExportNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeGlobalTableCommand = de_DescribeGlobalTableCommand;
    var de_DescribeGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeGlobalTableSettingsCommand =
      de_DescribeGlobalTableSettingsCommand;
    var de_DescribeGlobalTableSettingsCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeImportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeImportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeImportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeImportCommand = de_DescribeImportCommand;
    var de_DescribeImportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ImportNotFoundException':
        case 'com.amazonaws.dynamodb#ImportNotFoundException':
          throw await de_ImportNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeKinesisStreamingDestinationCommand = async (
      output,
      context
    ) => {
      if (output.statusCode >= 300) {
        return de_DescribeKinesisStreamingDestinationCommandError(
          output,
          context
        );
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeKinesisStreamingDestinationCommand =
      de_DescribeKinesisStreamingDestinationCommand;
    var de_DescribeKinesisStreamingDestinationCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeLimitsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeLimitsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeLimitsCommand = de_DescribeLimitsCommand;
    var de_DescribeLimitsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeTableCommand = de_DescribeTableCommand;
    var de_DescribeTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeTableReplicaAutoScalingCommand =
      de_DescribeTableReplicaAutoScalingCommand;
    var de_DescribeTableReplicaAutoScalingCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeTimeToLiveCommand = de_DescribeTimeToLiveCommand;
    var de_DescribeTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DisableKinesisStreamingDestinationCommand = async (
      output,
      context
    ) => {
      if (output.statusCode >= 300) {
        return de_DisableKinesisStreamingDestinationCommandError(
          output,
          context
        );
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DisableKinesisStreamingDestinationCommand =
      de_DisableKinesisStreamingDestinationCommand;
    var de_DisableKinesisStreamingDestinationCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_EnableKinesisStreamingDestinationCommand = async (
      output,
      context
    ) => {
      if (output.statusCode >= 300) {
        return de_EnableKinesisStreamingDestinationCommandError(
          output,
          context
        );
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_EnableKinesisStreamingDestinationCommand =
      de_EnableKinesisStreamingDestinationCommand;
    var de_EnableKinesisStreamingDestinationCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ExecuteStatementCommand = de_ExecuteStatementCommand;
    var de_ExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await de_ConditionalCheckFailedExceptionRes(
            parsedOutput,
            context
          );
        case 'DuplicateItemException':
        case 'com.amazonaws.dynamodb#DuplicateItemException':
          throw await de_DuplicateItemExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ExecuteTransactionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExecuteTransactionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExecuteTransactionOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ExecuteTransactionCommand = de_ExecuteTransactionCommand;
    var de_ExecuteTransactionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'IdempotentParameterMismatchException':
        case 'com.amazonaws.dynamodb#IdempotentParameterMismatchException':
          throw await de_IdempotentParameterMismatchExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case 'TransactionInProgressException':
        case 'com.amazonaws.dynamodb#TransactionInProgressException':
          throw await de_TransactionInProgressExceptionRes(
            parsedOutput,
            context
          );
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ExportTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExportTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExportTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ExportTableToPointInTimeCommand =
      de_ExportTableToPointInTimeCommand;
    var de_ExportTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExportConflictException':
        case 'com.amazonaws.dynamodb#ExportConflictException':
          throw await de_ExportConflictExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidExportTimeException':
        case 'com.amazonaws.dynamodb#InvalidExportTimeException':
          throw await de_InvalidExportTimeExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'PointInTimeRecoveryUnavailableException':
        case 'com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException':
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(
            parsedOutput,
            context
          );
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_GetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetItemCommand = de_GetItemCommand;
    var de_GetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ImportTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ImportTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ImportTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ImportTableCommand = de_ImportTableCommand;
    var de_ImportTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ImportConflictException':
        case 'com.amazonaws.dynamodb#ImportConflictException':
          throw await de_ImportConflictExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListBackupsCommand = de_ListBackupsCommand;
    var de_ListBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListContributorInsightsCommand =
      de_ListContributorInsightsCommand;
    var de_ListContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListExportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListExportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListExportsCommand = de_ListExportsCommand;
    var de_ListExportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListGlobalTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListGlobalTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListGlobalTablesCommand = de_ListGlobalTablesCommand;
    var de_ListGlobalTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListImportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListImportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListImportsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListImportsCommand = de_ListImportsCommand;
    var de_ListImportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListTablesCommand = de_ListTablesCommand;
    var de_ListTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListTagsOfResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTagsOfResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListTagsOfResourceCommand = de_ListTagsOfResourceCommand;
    var de_ListTagsOfResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_PutItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PutItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_PutItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_PutItemCommand = de_PutItemCommand;
    var de_PutItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await de_ConditionalCheckFailedExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_QueryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_QueryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_QueryOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_QueryCommand = de_QueryCommand;
    var de_QueryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_RestoreTableFromBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RestoreTableFromBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RestoreTableFromBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_RestoreTableFromBackupCommand = de_RestoreTableFromBackupCommand;
    var de_RestoreTableFromBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'TableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#TableAlreadyExistsException':
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_RestoreTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RestoreTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RestoreTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_RestoreTableToPointInTimeCommand =
      de_RestoreTableToPointInTimeCommand;
    var de_RestoreTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'InvalidRestoreTimeException':
        case 'com.amazonaws.dynamodb#InvalidRestoreTimeException':
          throw await de_InvalidRestoreTimeExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'PointInTimeRecoveryUnavailableException':
        case 'com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException':
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(
            parsedOutput,
            context
          );
        case 'TableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#TableAlreadyExistsException':
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ScanCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ScanCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ScanOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ScanCommand = de_ScanCommand;
    var de_ScanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output),
      };
      return response;
    };
    exports.de_TagResourceCommand = de_TagResourceCommand;
    var de_TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_TransactGetItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TransactGetItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TransactGetItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_TransactGetItemsCommand = de_TransactGetItemsCommand;
    var de_TransactGetItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_TransactWriteItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TransactWriteItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TransactWriteItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_TransactWriteItemsCommand = de_TransactWriteItemsCommand;
    var de_TransactWriteItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'IdempotentParameterMismatchException':
        case 'com.amazonaws.dynamodb#IdempotentParameterMismatchException':
          throw await de_IdempotentParameterMismatchExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case 'TransactionInProgressException':
        case 'com.amazonaws.dynamodb#TransactionInProgressException':
          throw await de_TransactionInProgressExceptionRes(
            parsedOutput,
            context
          );
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output),
      };
      return response;
    };
    exports.de_UntagResourceCommand = de_UntagResourceCommand;
    var de_UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateContinuousBackupsCommand =
      de_UpdateContinuousBackupsCommand;
    var de_UpdateContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ContinuousBackupsUnavailableException':
        case 'com.amazonaws.dynamodb#ContinuousBackupsUnavailableException':
          throw await de_ContinuousBackupsUnavailableExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateContributorInsightsCommand =
      de_UpdateContributorInsightsCommand;
    var de_UpdateContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateGlobalTableCommand = de_UpdateGlobalTableCommand;
    var de_UpdateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ReplicaAlreadyExistsException':
        case 'com.amazonaws.dynamodb#ReplicaAlreadyExistsException':
          throw await de_ReplicaAlreadyExistsExceptionRes(
            parsedOutput,
            context
          );
        case 'ReplicaNotFoundException':
        case 'com.amazonaws.dynamodb#ReplicaNotFoundException':
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateGlobalTableSettingsCommand =
      de_UpdateGlobalTableSettingsCommand;
    var de_UpdateGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case 'IndexNotFoundException':
        case 'com.amazonaws.dynamodb#IndexNotFoundException':
          throw await de_IndexNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ReplicaNotFoundException':
        case 'com.amazonaws.dynamodb#ReplicaNotFoundException':
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateItemCommand = de_UpdateItemCommand;
    var de_UpdateItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await de_ConditionalCheckFailedExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateTableCommand = de_UpdateTableCommand;
    var de_UpdateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateTableReplicaAutoScalingCommand =
      de_UpdateTableReplicaAutoScalingCommand;
    var de_UpdateTableReplicaAutoScalingCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateTimeToLiveCommand = de_UpdateTimeToLiveCommand;
    var de_UpdateTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_BackupInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.BackupInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_BackupNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.BackupNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ConditionalCheckFailedExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ConditionalCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ContinuousBackupsUnavailableExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ContinuousBackupsUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DuplicateItemExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.DuplicateItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ExportConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ExportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ExportNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ExportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalTableAlreadyExistsExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.GlobalTableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalTableNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.GlobalTableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IdempotentParameterMismatchExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ImportConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ImportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ImportNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ImportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IndexNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IndexNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InternalServerErrorRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidEndpointExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidExportTimeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidExportTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidRestoreTimeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidRestoreTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ItemCollectionSizeLimitExceededExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ItemCollectionSizeLimitExceededException(
        {
          $metadata: deserializeMetadata(parsedOutput),
          ...deserialized,
        }
      );
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PointInTimeRecoveryUnavailableExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.PointInTimeRecoveryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ProvisionedThroughputExceededExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicaAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ReplicaAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicaNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ReplicaNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RequestLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.RequestLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionCanceledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TransactionCanceledException(body, context);
      const exception = new models_0_1.TransactionCanceledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TransactionConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionInProgressExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TransactionInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AttributeUpdates = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValueUpdate(value, context);
        return acc;
      }, {});
    };
    var se_AttributeValue = (input, context) => {
      return models_0_1.AttributeValue.visit(input, {
        B: (value) => ({ B: context.base64Encoder(value) }),
        BOOL: (value) => ({ BOOL: value }),
        BS: (value) => ({ BS: se_BinarySetAttributeValue(value, context) }),
        L: (value) => ({ L: se_ListAttributeValue(value, context) }),
        M: (value) => ({ M: se_MapAttributeValue(value, context) }),
        N: (value) => ({ N: value }),
        NS: (value) => ({ NS: (0, smithy_client_1._json)(value) }),
        NULL: (value) => ({ NULL: value }),
        S: (value) => ({ S: value }),
        SS: (value) => ({ SS: (0, smithy_client_1._json)(value) }),
        _: (name, value) => ({ name: value }),
      });
    };
    var se_AttributeValueList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_AttributeValue(entry, context);
        });
    };
    var se_AttributeValueUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Action: [],
        Value: (_2) => se_AttributeValue(_2, context),
      });
    };
    var se_AutoScalingPolicyUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        PolicyName: [],
        TargetTrackingScalingPolicyConfiguration: (_2) =>
          se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(
            _2,
            context
          ),
      });
    };
    var se_AutoScalingSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AutoScalingDisabled: [],
        AutoScalingRoleArn: [],
        MaximumUnits: [],
        MinimumUnits: [],
        ScalingPolicyUpdate: (_2) => se_AutoScalingPolicyUpdate(_2, context),
      });
    };
    var se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (
      input,
      context
    ) => {
      return (0, smithy_client_1.take)(input, {
        DisableScaleIn: [],
        ScaleInCooldown: [],
        ScaleOutCooldown: [],
        TargetValue: smithy_client_1.serializeFloat,
      });
    };
    var se_BatchExecuteStatementInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ReturnConsumedCapacity: [],
        Statements: (_2) => se_PartiQLBatchRequest(_2, context),
      });
    };
    var se_BatchGetItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RequestItems: (_2) => se_BatchGetRequestMap(_2, context),
        ReturnConsumedCapacity: [],
      });
    };
    var se_BatchGetRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_KeysAndAttributes(value, context);
        return acc;
      }, {});
    };
    var se_BatchStatementRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConsistentRead: [],
        Parameters: (_2) => se_PreparedStatementParameters(_2, context),
        Statement: [],
      });
    };
    var se_BatchWriteItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RequestItems: (_2) => se_BatchWriteItemRequestMap(_2, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
      });
    };
    var se_BatchWriteItemRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_WriteRequests(value, context);
        return acc;
      }, {});
    };
    var se_BinarySetAttributeValue = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return context.base64Encoder(entry);
        });
    };
    var se_Condition = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeValueList: (_2) => se_AttributeValueList(_2, context),
        ComparisonOperator: [],
      });
    };
    var se_ConditionCheck = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
      });
    };
    var se_Delete = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
      });
    };
    var se_DeleteItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_2) => se_ExpectedAttributeMap(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        TableName: [],
      });
    };
    var se_DeleteRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Key: (_2) => se_Key(_2, context),
      });
    };
    var se_ExecuteStatementInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConsistentRead: [],
        Limit: [],
        NextToken: [],
        Parameters: (_2) => se_PreparedStatementParameters(_2, context),
        ReturnConsumedCapacity: [],
        Statement: [],
      });
    };
    var se_ExecuteTransactionInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_2) => _2 ?? (0, uuid_1.v4)()],
        ReturnConsumedCapacity: [],
        TransactStatements: (_2) => se_ParameterizedStatements(_2, context),
      });
    };
    var se_ExpectedAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_ExpectedAttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_ExpectedAttributeValue = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeValueList: (_2) => se_AttributeValueList(_2, context),
        ComparisonOperator: [],
        Exists: [],
        Value: (_2) => se_AttributeValue(_2, context),
      });
    };
    var se_ExportTableToPointInTimeInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_2) => _2 ?? (0, uuid_1.v4)()],
        ExportFormat: [],
        ExportTime: (_2) => Math.round(_2.getTime() / 1e3),
        S3Bucket: [],
        S3BucketOwner: [],
        S3Prefix: [],
        S3SseAlgorithm: [],
        S3SseKmsKeyId: [],
        TableArn: [],
      });
    };
    var se_ExpressionAttributeValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_FilterConditionMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    };
    var se_Get = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ExpressionAttributeNames: smithy_client_1._json,
        Key: (_2) => se_Key(_2, context),
        ProjectionExpression: [],
        TableName: [],
      });
    };
    var se_GetItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: [],
        ExpressionAttributeNames: smithy_client_1._json,
        Key: (_2) => se_Key(_2, context),
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        TableName: [],
      });
    };
    var se_GlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
      });
    };
    var se_GlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_GlobalSecondaryIndexAutoScalingUpdate(entry, context);
        });
    };
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingSettingsUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        ProvisionedWriteCapacityUnits: [],
      });
    };
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdateList = (
      input,
      context
    ) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_GlobalTableGlobalSecondaryIndexSettingsUpdate(
            entry,
            context
          );
        });
    };
    var se_ImportTableInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_2) => _2 ?? (0, uuid_1.v4)()],
        InputCompressionType: [],
        InputFormat: [],
        InputFormatOptions: smithy_client_1._json,
        S3BucketSource: smithy_client_1._json,
        TableCreationParameters: smithy_client_1._json,
      });
    };
    var se_Key = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_KeyConditions = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    };
    var se_KeyList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_Key(entry, context);
        });
    };
    var se_KeysAndAttributes = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: [],
        ExpressionAttributeNames: smithy_client_1._json,
        Keys: (_2) => se_KeyList(_2, context),
        ProjectionExpression: [],
      });
    };
    var se_ListAttributeValue = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_AttributeValue(entry, context);
        });
    };
    var se_ListBackupsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        BackupType: [],
        ExclusiveStartBackupArn: [],
        Limit: [],
        TableName: [],
        TimeRangeLowerBound: (_2) => Math.round(_2.getTime() / 1e3),
        TimeRangeUpperBound: (_2) => Math.round(_2.getTime() / 1e3),
      });
    };
    var se_MapAttributeValue = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_ParameterizedStatement = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Parameters: (_2) => se_PreparedStatementParameters(_2, context),
        Statement: [],
      });
    };
    var se_ParameterizedStatements = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ParameterizedStatement(entry, context);
        });
    };
    var se_PartiQLBatchRequest = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_BatchStatementRequest(entry, context);
        });
    };
    var se_PreparedStatementParameters = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_AttributeValue(entry, context);
        });
    };
    var se_Put = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Item: (_2) => se_PutItemInputAttributeMap(_2, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
      });
    };
    var se_PutItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_2) => se_ExpectedAttributeMap(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Item: (_2) => se_PutItemInputAttributeMap(_2, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        TableName: [],
      });
    };
    var se_PutItemInputAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_PutRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Item: (_2) => se_PutItemInputAttributeMap(_2, context),
      });
    };
    var se_QueryInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_2) => se_Key(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        FilterExpression: [],
        IndexName: [],
        KeyConditionExpression: [],
        KeyConditions: (_2) => se_KeyConditions(_2, context),
        Limit: [],
        ProjectionExpression: [],
        QueryFilter: (_2) => se_FilterConditionMap(_2, context),
        ReturnConsumedCapacity: [],
        ScanIndexForward: [],
        Select: [],
        TableName: [],
      });
    };
    var se_ReplicaAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexUpdates: (_2) =>
          se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList(_2, context),
        ReplicaProvisionedReadCapacityAutoScalingUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
      });
    };
    var se_ReplicaAutoScalingUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ReplicaAutoScalingUpdate(entry, context);
        });
    };
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
      });
    };
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (
      input,
      context
    ) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ReplicaGlobalSecondaryIndexAutoScalingUpdate(
            entry,
            context
          );
        });
    };
    var se_ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingSettingsUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        ProvisionedReadCapacityUnits: [],
      });
    };
    var se_ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
        });
    };
    var se_ReplicaSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexSettingsUpdate: (_2) =>
          se_ReplicaGlobalSecondaryIndexSettingsUpdateList(_2, context),
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        ReplicaProvisionedReadCapacityUnits: [],
        ReplicaTableClass: [],
      });
    };
    var se_ReplicaSettingsUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ReplicaSettingsUpdate(entry, context);
        });
    };
    var se_RestoreTableToPointInTimeInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        BillingModeOverride: [],
        GlobalSecondaryIndexOverride: smithy_client_1._json,
        LocalSecondaryIndexOverride: smithy_client_1._json,
        ProvisionedThroughputOverride: smithy_client_1._json,
        RestoreDateTime: (_2) => Math.round(_2.getTime() / 1e3),
        SSESpecificationOverride: smithy_client_1._json,
        SourceTableArn: [],
        SourceTableName: [],
        TargetTableName: [],
        UseLatestRestorableTime: [],
      });
    };
    var se_ScanInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_2) => se_Key(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        FilterExpression: [],
        IndexName: [],
        Limit: [],
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        ScanFilter: (_2) => se_FilterConditionMap(_2, context),
        Segment: [],
        Select: [],
        TableName: [],
        TotalSegments: [],
      });
    };
    var se_TransactGetItem = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Get: (_2) => se_Get(_2, context),
      });
    };
    var se_TransactGetItemList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_TransactGetItem(entry, context);
        });
    };
    var se_TransactGetItemsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ReturnConsumedCapacity: [],
        TransactItems: (_2) => se_TransactGetItemList(_2, context),
      });
    };
    var se_TransactWriteItem = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionCheck: (_2) => se_ConditionCheck(_2, context),
        Delete: (_2) => se_Delete(_2, context),
        Put: (_2) => se_Put(_2, context),
        Update: (_2) => se_Update(_2, context),
      });
    };
    var se_TransactWriteItemList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_TransactWriteItem(entry, context);
        });
    };
    var se_TransactWriteItemsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_2) => _2 ?? (0, uuid_1.v4)()],
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        TransactItems: (_2) => se_TransactWriteItemList(_2, context),
      });
    };
    var se_Update = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: [],
      });
    };
    var se_UpdateGlobalTableSettingsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        GlobalTableBillingMode: [],
        GlobalTableGlobalSecondaryIndexSettingsUpdate: (_2) =>
          se_GlobalTableGlobalSecondaryIndexSettingsUpdateList(_2, context),
        GlobalTableName: [],
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        GlobalTableProvisionedWriteCapacityUnits: [],
        ReplicaSettingsUpdate: (_2) =>
          se_ReplicaSettingsUpdateList(_2, context),
      });
    };
    var se_UpdateItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeUpdates: (_2) => se_AttributeUpdates(_2, context),
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_2) => se_ExpectedAttributeMap(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        TableName: [],
        UpdateExpression: [],
      });
    };
    var se_UpdateTableReplicaAutoScalingInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        GlobalSecondaryIndexUpdates: (_2) =>
          se_GlobalSecondaryIndexAutoScalingUpdateList(_2, context),
        ProvisionedWriteCapacityAutoScalingUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        ReplicaUpdates: (_2) => se_ReplicaAutoScalingUpdateList(_2, context),
        TableName: [],
      });
    };
    var se_WriteRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        DeleteRequest: (_2) => se_DeleteRequest(_2, context),
        PutRequest: (_2) => se_PutRequest(_2, context),
      });
    };
    var se_WriteRequests = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_WriteRequest(entry, context);
        });
    };
    var de_ArchivalSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ArchivalBackupArn: smithy_client_1.expectString,
        ArchivalDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ArchivalReason: smithy_client_1.expectString,
      });
    };
    var de_AttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_AttributeValue = (output, context) => {
      if (output.B != null) {
        return {
          B: context.base64Decoder(output.B),
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.BOOL) !== void 0) {
        return { BOOL: (0, smithy_client_1.expectBoolean)(output.BOOL) };
      }
      if (output.BS != null) {
        return {
          BS: de_BinarySetAttributeValue(output.BS, context),
        };
      }
      if (output.L != null) {
        return {
          L: de_ListAttributeValue(output.L, context),
        };
      }
      if (output.M != null) {
        return {
          M: de_MapAttributeValue(output.M, context),
        };
      }
      if ((0, smithy_client_1.expectString)(output.N) !== void 0) {
        return { N: (0, smithy_client_1.expectString)(output.N) };
      }
      if (output.NS != null) {
        return {
          NS: (0, smithy_client_1._json)(output.NS),
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.NULL) !== void 0) {
        return { NULL: (0, smithy_client_1.expectBoolean)(output.NULL) };
      }
      if ((0, smithy_client_1.expectString)(output.S) !== void 0) {
        return { S: (0, smithy_client_1.expectString)(output.S) };
      }
      if (output.SS != null) {
        return {
          SS: (0, smithy_client_1._json)(output.SS),
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var de_AutoScalingPolicyDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        PolicyName: smithy_client_1.expectString,
        TargetTrackingScalingPolicyConfiguration: (_2) =>
          de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(
            _2,
            context
          ),
      });
    };
    var de_AutoScalingPolicyDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_AutoScalingPolicyDescription(entry, context);
        });
      return retVal;
    };
    var de_AutoScalingSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AutoScalingDisabled: smithy_client_1.expectBoolean,
        AutoScalingRoleArn: smithy_client_1.expectString,
        MaximumUnits: smithy_client_1.expectLong,
        MinimumUnits: smithy_client_1.expectLong,
        ScalingPolicies: (_2) =>
          de_AutoScalingPolicyDescriptionList(_2, context),
      });
    };
    var de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (
      output,
      context
    ) => {
      return (0, smithy_client_1.take)(output, {
        DisableScaleIn: smithy_client_1.expectBoolean,
        ScaleInCooldown: smithy_client_1.expectInt32,
        ScaleOutCooldown: smithy_client_1.expectInt32,
        TargetValue: smithy_client_1.limitedParseDouble,
      });
    };
    var de_BackupDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDetails: (_2) => de_BackupDetails(_2, context),
        SourceTableDetails: (_2) => de_SourceTableDetails(_2, context),
        SourceTableFeatureDetails: (_2) =>
          de_SourceTableFeatureDetails(_2, context),
      });
    };
    var de_BackupDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupArn: smithy_client_1.expectString,
        BackupCreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        BackupExpiryDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        BackupName: smithy_client_1.expectString,
        BackupSizeBytes: smithy_client_1.expectLong,
        BackupStatus: smithy_client_1.expectString,
        BackupType: smithy_client_1.expectString,
      });
    };
    var de_BackupSummaries = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_BackupSummary(entry, context);
        });
      return retVal;
    };
    var de_BackupSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupArn: smithy_client_1.expectString,
        BackupCreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        BackupExpiryDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        BackupName: smithy_client_1.expectString,
        BackupSizeBytes: smithy_client_1.expectLong,
        BackupStatus: smithy_client_1.expectString,
        BackupType: smithy_client_1.expectString,
        TableArn: smithy_client_1.expectString,
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
      });
    };
    var de_BatchExecuteStatementOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        Responses: (_2) => de_PartiQLBatchResponse(_2, context),
      });
    };
    var de_BatchGetItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        Responses: (_2) => de_BatchGetResponseMap(_2, context),
        UnprocessedKeys: (_2) => de_BatchGetRequestMap(_2, context),
      });
    };
    var de_BatchGetRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_KeysAndAttributes(value, context);
        return acc;
      }, {});
    };
    var de_BatchGetResponseMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemList(value, context);
        return acc;
      }, {});
    };
    var de_BatchStatementResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Error: smithy_client_1._json,
        Item: (_2) => de_AttributeMap(_2, context),
        TableName: smithy_client_1.expectString,
      });
    };
    var de_BatchWriteItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        ItemCollectionMetrics: (_2) =>
          de_ItemCollectionMetricsPerTable(_2, context),
        UnprocessedItems: (_2) => de_BatchWriteItemRequestMap(_2, context),
      });
    };
    var de_BatchWriteItemRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_WriteRequests(value, context);
        return acc;
      }, {});
    };
    var de_BillingModeSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BillingMode: smithy_client_1.expectString,
        LastUpdateToPayPerRequestDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
      });
    };
    var de_BinarySetAttributeValue = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return context.base64Decoder(entry);
        });
      return retVal;
    };
    var de_CancellationReason = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Code: smithy_client_1.expectString,
        Item: (_2) => de_AttributeMap(_2, context),
        Message: smithy_client_1.expectString,
      });
    };
    var de_CancellationReasonList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_CancellationReason(entry, context);
        });
      return retVal;
    };
    var de_Capacity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CapacityUnits: smithy_client_1.limitedParseDouble,
        ReadCapacityUnits: smithy_client_1.limitedParseDouble,
        WriteCapacityUnits: smithy_client_1.limitedParseDouble,
      });
    };
    var de_ConsumedCapacity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CapacityUnits: smithy_client_1.limitedParseDouble,
        GlobalSecondaryIndexes: (_2) =>
          de_SecondaryIndexesCapacityMap(_2, context),
        LocalSecondaryIndexes: (_2) =>
          de_SecondaryIndexesCapacityMap(_2, context),
        ReadCapacityUnits: smithy_client_1.limitedParseDouble,
        Table: (_2) => de_Capacity(_2, context),
        TableName: smithy_client_1.expectString,
        WriteCapacityUnits: smithy_client_1.limitedParseDouble,
      });
    };
    var de_ConsumedCapacityMultiple = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ConsumedCapacity(entry, context);
        });
      return retVal;
    };
    var de_ContinuousBackupsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsStatus: smithy_client_1.expectString,
        PointInTimeRecoveryDescription: (_2) =>
          de_PointInTimeRecoveryDescription(_2, context),
      });
    };
    var de_CreateBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDetails: (_2) => de_BackupDetails(_2, context),
      });
    };
    var de_CreateGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_2) => de_GlobalTableDescription(_2, context),
      });
    };
    var de_CreateTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_DeleteBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDescription: (_2) => de_BackupDescription(_2, context),
      });
    };
    var de_DeleteItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_2) => de_AttributeMap(_2, context),
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        ItemCollectionMetrics: (_2) => de_ItemCollectionMetrics(_2, context),
      });
    };
    var de_DeleteRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Key: (_2) => de_Key(_2, context),
      });
    };
    var de_DeleteTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_DescribeBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDescription: (_2) => de_BackupDescription(_2, context),
      });
    };
    var de_DescribeContinuousBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsDescription: (_2) =>
          de_ContinuousBackupsDescription(_2, context),
      });
    };
    var de_DescribeContributorInsightsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContributorInsightsRuleList: smithy_client_1._json,
        ContributorInsightsStatus: smithy_client_1.expectString,
        FailureException: smithy_client_1._json,
        IndexName: smithy_client_1.expectString,
        LastUpdateDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableName: smithy_client_1.expectString,
      });
    };
    var de_DescribeExportOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportDescription: (_2) => de_ExportDescription(_2, context),
      });
    };
    var de_DescribeGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_2) => de_GlobalTableDescription(_2, context),
      });
    };
    var de_DescribeGlobalTableSettingsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableName: smithy_client_1.expectString,
        ReplicaSettings: (_2) => de_ReplicaSettingsDescriptionList(_2, context),
      });
    };
    var de_DescribeImportOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportTableDescription: (_2) => de_ImportTableDescription(_2, context),
      });
    };
    var de_DescribeTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Table: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_DescribeTableReplicaAutoScalingOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableAutoScalingDescription: (_2) =>
          de_TableAutoScalingDescription(_2, context),
      });
    };
    var de_ExecuteStatementOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        Items: (_2) => de_ItemList(_2, context),
        LastEvaluatedKey: (_2) => de_Key(_2, context),
        NextToken: smithy_client_1.expectString,
      });
    };
    var de_ExecuteTransactionOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        Responses: (_2) => de_ItemResponseList(_2, context),
      });
    };
    var de_ExportDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BilledSizeBytes: smithy_client_1.expectLong,
        ClientToken: smithy_client_1.expectString,
        EndTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ExportArn: smithy_client_1.expectString,
        ExportFormat: smithy_client_1.expectString,
        ExportManifest: smithy_client_1.expectString,
        ExportStatus: smithy_client_1.expectString,
        ExportTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        FailureCode: smithy_client_1.expectString,
        FailureMessage: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        S3Bucket: smithy_client_1.expectString,
        S3BucketOwner: smithy_client_1.expectString,
        S3Prefix: smithy_client_1.expectString,
        S3SseAlgorithm: smithy_client_1.expectString,
        S3SseKmsKeyId: smithy_client_1.expectString,
        StartTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableArn: smithy_client_1.expectString,
        TableId: smithy_client_1.expectString,
      });
    };
    var de_ExportTableToPointInTimeOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportDescription: (_2) => de_ExportDescription(_2, context),
      });
    };
    var de_GetItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        Item: (_2) => de_AttributeMap(_2, context),
      });
    };
    var de_GlobalSecondaryIndexDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Backfilling: smithy_client_1.expectBoolean,
        IndexArn: smithy_client_1.expectString,
        IndexName: smithy_client_1.expectString,
        IndexSizeBytes: smithy_client_1.expectLong,
        IndexStatus: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        Projection: smithy_client_1._json,
        ProvisionedThroughput: (_2) =>
          de_ProvisionedThroughputDescription(_2, context),
      });
    };
    var de_GlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_GlobalSecondaryIndexDescription(entry, context);
        });
      return retVal;
    };
    var de_GlobalTableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        GlobalTableArn: smithy_client_1.expectString,
        GlobalTableName: smithy_client_1.expectString,
        GlobalTableStatus: smithy_client_1.expectString,
        ReplicationGroup: (_2) => de_ReplicaDescriptionList(_2, context),
      });
    };
    var de_ImportSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CloudWatchLogGroupArn: smithy_client_1.expectString,
        EndTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ImportArn: smithy_client_1.expectString,
        ImportStatus: smithy_client_1.expectString,
        InputFormat: smithy_client_1.expectString,
        S3BucketSource: smithy_client_1._json,
        StartTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableArn: smithy_client_1.expectString,
      });
    };
    var de_ImportSummaryList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ImportSummary(entry, context);
        });
      return retVal;
    };
    var de_ImportTableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ClientToken: smithy_client_1.expectString,
        CloudWatchLogGroupArn: smithy_client_1.expectString,
        EndTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ErrorCount: smithy_client_1.expectLong,
        FailureCode: smithy_client_1.expectString,
        FailureMessage: smithy_client_1.expectString,
        ImportArn: smithy_client_1.expectString,
        ImportStatus: smithy_client_1.expectString,
        ImportedItemCount: smithy_client_1.expectLong,
        InputCompressionType: smithy_client_1.expectString,
        InputFormat: smithy_client_1.expectString,
        InputFormatOptions: smithy_client_1._json,
        ProcessedItemCount: smithy_client_1.expectLong,
        ProcessedSizeBytes: smithy_client_1.expectLong,
        S3BucketSource: smithy_client_1._json,
        StartTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableArn: smithy_client_1.expectString,
        TableCreationParameters: smithy_client_1._json,
        TableId: smithy_client_1.expectString,
      });
    };
    var de_ImportTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportTableDescription: (_2) => de_ImportTableDescription(_2, context),
      });
    };
    var de_ItemCollectionKeyAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_ItemCollectionMetrics = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ItemCollectionKey: (_2) =>
          de_ItemCollectionKeyAttributeMap(_2, context),
        SizeEstimateRangeGB: (_2) =>
          de_ItemCollectionSizeEstimateRange(_2, context),
      });
    };
    var de_ItemCollectionMetricsMultiple = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ItemCollectionMetrics(entry, context);
        });
      return retVal;
    };
    var de_ItemCollectionMetricsPerTable = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemCollectionMetricsMultiple(value, context);
        return acc;
      }, {});
    };
    var de_ItemCollectionSizeEstimateRange = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return (0, smithy_client_1.limitedParseDouble)(entry);
        });
      return retVal;
    };
    var de_ItemList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_AttributeMap(entry, context);
        });
      return retVal;
    };
    var de_ItemResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_2) => de_AttributeMap(_2, context),
      });
    };
    var de_ItemResponseList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ItemResponse(entry, context);
        });
      return retVal;
    };
    var de_Key = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_KeyList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_Key(entry, context);
        });
      return retVal;
    };
    var de_KeysAndAttributes = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: smithy_client_1.expectBoolean,
        ExpressionAttributeNames: smithy_client_1._json,
        Keys: (_2) => de_KeyList(_2, context),
        ProjectionExpression: smithy_client_1.expectString,
      });
    };
    var de_ListAttributeValue = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_AttributeValue(
            (0, smithy_client_1.expectUnion)(entry),
            context
          );
        });
      return retVal;
    };
    var de_ListBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupSummaries: (_2) => de_BackupSummaries(_2, context),
        LastEvaluatedBackupArn: smithy_client_1.expectString,
      });
    };
    var de_ListImportsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportSummaryList: (_2) => de_ImportSummaryList(_2, context),
        NextToken: smithy_client_1.expectString,
      });
    };
    var de_MapAttributeValue = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_PartiQLBatchResponse = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_BatchStatementResponse(entry, context);
        });
      return retVal;
    };
    var de_PointInTimeRecoveryDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EarliestRestorableDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        LatestRestorableDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        PointInTimeRecoveryStatus: smithy_client_1.expectString,
      });
    };
    var de_ProvisionedThroughputDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastDecreaseDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        LastIncreaseDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        NumberOfDecreasesToday: smithy_client_1.expectLong,
        ReadCapacityUnits: smithy_client_1.expectLong,
        WriteCapacityUnits: smithy_client_1.expectLong,
      });
    };
    var de_PutItemInputAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_PutItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_2) => de_AttributeMap(_2, context),
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        ItemCollectionMetrics: (_2) => de_ItemCollectionMetrics(_2, context),
      });
    };
    var de_PutRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_2) => de_PutItemInputAttributeMap(_2, context),
      });
    };
    var de_QueryOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        Count: smithy_client_1.expectInt32,
        Items: (_2) => de_ItemList(_2, context),
        LastEvaluatedKey: (_2) => de_Key(_2, context),
        ScannedCount: smithy_client_1.expectInt32,
      });
    };
    var de_ReplicaAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: (_2) =>
          de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(_2, context),
        RegionName: smithy_client_1.expectString,
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ReplicaStatus: smithy_client_1.expectString,
      });
    };
    var de_ReplicaAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaAutoScalingDescription(entry, context);
        });
      return retVal;
    };
    var de_ReplicaDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: smithy_client_1._json,
        KMSMasterKeyId: smithy_client_1.expectString,
        ProvisionedThroughputOverride: smithy_client_1._json,
        RegionName: smithy_client_1.expectString,
        ReplicaInaccessibleDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ReplicaStatus: smithy_client_1.expectString,
        ReplicaStatusDescription: smithy_client_1.expectString,
        ReplicaStatusPercentProgress: smithy_client_1.expectString,
        ReplicaTableClassSummary: (_2) => de_TableClassSummary(_2, context),
      });
    };
    var de_ReplicaDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaDescription(entry, context);
        });
      return retVal;
    };
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescription = (
      output,
      context
    ) => {
      return (0, smithy_client_1.take)(output, {
        IndexName: smithy_client_1.expectString,
        IndexStatus: smithy_client_1.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ProvisionedWriteCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
      });
    };
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (
      output,
      context
    ) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaGlobalSecondaryIndexAutoScalingDescription(
            entry,
            context
          );
        });
      return retVal;
    };
    var de_ReplicaGlobalSecondaryIndexSettingsDescription = (
      output,
      context
    ) => {
      return (0, smithy_client_1.take)(output, {
        IndexName: smithy_client_1.expectString,
        IndexStatus: smithy_client_1.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ProvisionedReadCapacityUnits: smithy_client_1.expectLong,
        ProvisionedWriteCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ProvisionedWriteCapacityUnits: smithy_client_1.expectLong,
      });
    };
    var de_ReplicaGlobalSecondaryIndexSettingsDescriptionList = (
      output,
      context
    ) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaGlobalSecondaryIndexSettingsDescription(
            entry,
            context
          );
        });
      return retVal;
    };
    var de_ReplicaSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        RegionName: smithy_client_1.expectString,
        ReplicaBillingModeSummary: (_2) => de_BillingModeSummary(_2, context),
        ReplicaGlobalSecondaryIndexSettings: (_2) =>
          de_ReplicaGlobalSecondaryIndexSettingsDescriptionList(_2, context),
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ReplicaProvisionedReadCapacityUnits: smithy_client_1.expectLong,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ReplicaProvisionedWriteCapacityUnits: smithy_client_1.expectLong,
        ReplicaStatus: smithy_client_1.expectString,
        ReplicaTableClassSummary: (_2) => de_TableClassSummary(_2, context),
      });
    };
    var de_ReplicaSettingsDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaSettingsDescription(entry, context);
        });
      return retVal;
    };
    var de_RestoreSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        RestoreDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        RestoreInProgress: smithy_client_1.expectBoolean,
        SourceBackupArn: smithy_client_1.expectString,
        SourceTableArn: smithy_client_1.expectString,
      });
    };
    var de_RestoreTableFromBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_RestoreTableToPointInTimeOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_ScanOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        Count: smithy_client_1.expectInt32,
        Items: (_2) => de_ItemList(_2, context),
        LastEvaluatedKey: (_2) => de_Key(_2, context),
        ScannedCount: smithy_client_1.expectInt32,
      });
    };
    var de_SecondaryIndexesCapacityMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_Capacity(value, context);
        return acc;
      }, {});
    };
    var de_SourceTableDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BillingMode: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        ProvisionedThroughput: smithy_client_1._json,
        TableArn: smithy_client_1.expectString,
        TableCreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableSizeBytes: smithy_client_1.expectLong,
      });
    };
    var de_SourceTableFeatureDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: smithy_client_1._json,
        LocalSecondaryIndexes: smithy_client_1._json,
        SSEDescription: (_2) => de_SSEDescription(_2, context),
        StreamDescription: smithy_client_1._json,
        TimeToLiveDescription: smithy_client_1._json,
      });
    };
    var de_SSEDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InaccessibleEncryptionDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        KMSMasterKeyArn: smithy_client_1.expectString,
        SSEType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
      });
    };
    var de_TableAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Replicas: (_2) => de_ReplicaAutoScalingDescriptionList(_2, context),
        TableName: smithy_client_1.expectString,
        TableStatus: smithy_client_1.expectString,
      });
    };
    var de_TableClassSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastUpdateDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableClass: smithy_client_1.expectString,
      });
    };
    var de_TableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ArchivalSummary: (_2) => de_ArchivalSummary(_2, context),
        AttributeDefinitions: smithy_client_1._json,
        BillingModeSummary: (_2) => de_BillingModeSummary(_2, context),
        CreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        DeletionProtectionEnabled: smithy_client_1.expectBoolean,
        GlobalSecondaryIndexes: (_2) =>
          de_GlobalSecondaryIndexDescriptionList(_2, context),
        GlobalTableVersion: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        LatestStreamArn: smithy_client_1.expectString,
        LatestStreamLabel: smithy_client_1.expectString,
        LocalSecondaryIndexes: smithy_client_1._json,
        ProvisionedThroughput: (_2) =>
          de_ProvisionedThroughputDescription(_2, context),
        Replicas: (_2) => de_ReplicaDescriptionList(_2, context),
        RestoreSummary: (_2) => de_RestoreSummary(_2, context),
        SSEDescription: (_2) => de_SSEDescription(_2, context),
        StreamSpecification: smithy_client_1._json,
        TableArn: smithy_client_1.expectString,
        TableClassSummary: (_2) => de_TableClassSummary(_2, context),
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableSizeBytes: smithy_client_1.expectLong,
        TableStatus: smithy_client_1.expectString,
      });
    };
    var de_TransactGetItemsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        Responses: (_2) => de_ItemResponseList(_2, context),
      });
    };
    var de_TransactionCanceledException = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CancellationReasons: (_2) => de_CancellationReasonList(_2, context),
        Message: smithy_client_1.expectString,
      });
    };
    var de_TransactWriteItemsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        ItemCollectionMetrics: (_2) =>
          de_ItemCollectionMetricsPerTable(_2, context),
      });
    };
    var de_UpdateContinuousBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsDescription: (_2) =>
          de_ContinuousBackupsDescription(_2, context),
      });
    };
    var de_UpdateGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_2) => de_GlobalTableDescription(_2, context),
      });
    };
    var de_UpdateGlobalTableSettingsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableName: smithy_client_1.expectString,
        ReplicaSettings: (_2) => de_ReplicaSettingsDescriptionList(_2, context),
      });
    };
    var de_UpdateItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_2) => de_AttributeMap(_2, context),
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        ItemCollectionMetrics: (_2) => de_ItemCollectionMetrics(_2, context),
      });
    };
    var de_UpdateTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_UpdateTableReplicaAutoScalingOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableAutoScalingDescription: (_2) =>
          de_TableAutoScalingDescription(_2, context),
      });
    };
    var de_WriteRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DeleteRequest: (_2) => de_DeleteRequest(_2, context),
        PutRequest: (_2) => de_PutRequest(_2, context),
      });
    };
    var de_WriteRequests = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_WriteRequest(entry, context);
        });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId:
        output.headers['x-amzn-requestid'] ??
        output.headers['x-amzn-request-id'] ??
        output.headers['x-amz-request-id'],
      extendedRequestId: output.headers['x-amz-id-2'],
      cfId: output.headers['x-amz-cf-id'],
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return (
        context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
      );
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) =>
        context.utf8Encoder(body)
      );
    var throwDefaultError = (0, smithy_client_1.withBaseException)(
      DynamoDBServiceException_1.DynamoDBServiceException
    );
    var buildHttpRpcRequest = async (
      context,
      headers,
      path,
      resolvedHostname,
      body
    ) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: 'POST',
        path: basePath.endsWith('/')
          ? basePath.slice(0, -1) + path
          : basePath + path,
        headers,
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    function sharedHeaders(operation) {
      return {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': `DynamoDB_20120810.${operation}`,
      };
    }
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          return JSON.parse(encoded);
        }
        return {};
      });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey2 = (object, key) =>
        Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(',') >= 0) {
          cleanValue = cleanValue.split(',')[0];
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      const headerKey = findKey2(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data['__type'] !== void 0) {
        return sanitizeErrorCode(data['__type']);
      }
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchExecuteStatementCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchExecuteStatementCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            BatchExecuteStatementCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchExecuteStatementCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchExecuteStatementCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchExecuteStatementCommand)(
          output,
          context
        );
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js
var require_BatchGetItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchGetItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchGetItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            BatchGetItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchGetItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchGetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchGetItemCommand)(output, context);
      }
    };
    exports.BatchGetItemCommand = BatchGetItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js
var require_BatchWriteItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchWriteItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchWriteItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            BatchWriteItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchWriteItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchWriteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchWriteItemCommand)(output, context);
      }
    };
    exports.BatchWriteItemCommand = BatchWriteItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js
var require_CreateBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateBackupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateBackupCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            CreateBackupCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateBackupCommand)(output, context);
      }
    };
    exports.CreateBackupCommand = CreateBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js
var require_CreateGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateGlobalTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateGlobalTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            CreateGlobalTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateGlobalTableCommand)(output, context);
      }
    };
    exports.CreateGlobalTableCommand = CreateGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js
var require_CreateTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            CreateTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateTableCommand)(output, context);
      }
    };
    exports.CreateTableCommand = CreateTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js
var require_DeleteBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteBackupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteBackupCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DeleteBackupCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteBackupCommand)(output, context);
      }
    };
    exports.DeleteBackupCommand = DeleteBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js
var require_DeleteItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DeleteItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteItemCommand)(output, context);
      }
    };
    exports.DeleteItemCommand = DeleteItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js
var require_DeleteTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DeleteTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteTableCommand)(output, context);
      }
    };
    exports.DeleteTableCommand = DeleteTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js
var require_DescribeBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeBackupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeBackupCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeBackupCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeBackupCommand)(output, context);
      }
    };
    exports.DescribeBackupCommand = DescribeBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js
var require_DescribeContinuousBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeContinuousBackupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContinuousBackupsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeContinuousBackupsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeContinuousBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeContinuousBackupsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeContinuousBackupsCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeContinuousBackupsCommand = DescribeContinuousBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js
var require_DescribeContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeContributorInsightsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContributorInsightsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeContributorInsightsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeContributorInsightsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeContributorInsightsCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeContributorInsightsCommand =
      DescribeContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js
var require_DescribeEndpointsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeEndpointsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeEndpointsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeEndpointsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeEndpointsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeEndpointsCommand)(output, context);
      }
    };
    exports.DescribeEndpointsCommand = DescribeEndpointsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js
var require_DescribeExportCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeExportCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeExportCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeExportCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeExportCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeExportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeExportCommand)(output, context);
      }
    };
    exports.DescribeExportCommand = DescribeExportCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js
var require_DescribeGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeGlobalTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeGlobalTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeGlobalTableCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeGlobalTableCommand = DescribeGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js
var require_DescribeGlobalTableSettingsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeGlobalTableSettingsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeGlobalTableSettingsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeGlobalTableSettingsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeGlobalTableSettingsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeGlobalTableSettingsCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeGlobalTableSettingsCommand =
      DescribeGlobalTableSettingsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeImportCommand.js
var require_DescribeImportCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeImportCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeImportCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeImportCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeImportCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeImportCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeImportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeImportCommand)(output, context);
      }
    };
    exports.DescribeImportCommand = DescribeImportCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js
var require_DescribeKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeKinesisStreamingDestinationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeKinesisStreamingDestinationCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeKinesisStreamingDestinationCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeKinesisStreamingDestinationCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeKinesisStreamingDestinationCommand =
      DescribeKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js
var require_DescribeLimitsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeLimitsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeLimitsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeLimitsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeLimitsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeLimitsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeLimitsCommand)(output, context);
      }
    };
    exports.DescribeLimitsCommand = DescribeLimitsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js
var require_DescribeTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTableCommand)(output, context);
      }
    };
    exports.DescribeTableCommand = DescribeTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js
var require_DescribeTableReplicaAutoScalingCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTableReplicaAutoScalingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeTableReplicaAutoScalingCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTableReplicaAutoScalingCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTableReplicaAutoScalingCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTableReplicaAutoScalingCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeTableReplicaAutoScalingCommand =
      DescribeTableReplicaAutoScalingCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js
var require_DescribeTimeToLiveCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTimeToLiveCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTimeToLiveCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeTimeToLiveCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTimeToLiveCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTimeToLiveCommand)(output, context);
      }
    };
    exports.DescribeTimeToLiveCommand = DescribeTimeToLiveCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js
var require_DisableKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DisableKinesisStreamingDestinationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DisableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DisableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DisableKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DisableKinesisStreamingDestinationCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DisableKinesisStreamingDestinationCommand)(
          output,
          context
        );
      }
    };
    exports.DisableKinesisStreamingDestinationCommand =
      DisableKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js
var require_EnableKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EnableKinesisStreamingDestinationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var EnableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            EnableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'EnableKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_EnableKinesisStreamingDestinationCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_EnableKinesisStreamingDestinationCommand)(
          output,
          context
        );
      }
    };
    exports.EnableKinesisStreamingDestinationCommand =
      EnableKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteStatementCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteStatementCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ExecuteStatementCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExecuteStatementCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExecuteStatementCommand)(output, context);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteTransactionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteTransactionCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ExecuteTransactionCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExecuteTransactionCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExecuteTransactionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExecuteTransactionCommand)(output, context);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js
var require_ExportTableToPointInTimeCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExportTableToPointInTimeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExportTableToPointInTimeCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ExportTableToPointInTimeCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExportTableToPointInTimeCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExportTableToPointInTimeCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExportTableToPointInTimeCommand)(
          output,
          context
        );
      }
    };
    exports.ExportTableToPointInTimeCommand = ExportTableToPointInTimeCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js
var require_GetItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var GetItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'GetItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_GetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_GetItemCommand)(output, context);
      }
    };
    exports.GetItemCommand = GetItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ImportTableCommand.js
var require_ImportTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ImportTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ImportTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ImportTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ImportTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ImportTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ImportTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ImportTableCommand)(output, context);
      }
    };
    exports.ImportTableCommand = ImportTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js
var require_ListBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListBackupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListBackupsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListBackupsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListBackupsCommand)(output, context);
      }
    };
    exports.ListBackupsCommand = ListBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js
var require_ListContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListContributorInsightsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListContributorInsightsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListContributorInsightsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListContributorInsightsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListContributorInsightsCommand)(
          output,
          context
        );
      }
    };
    exports.ListContributorInsightsCommand = ListContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js
var require_ListExportsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListExportsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListExportsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListExportsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListExportsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListExportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListExportsCommand)(output, context);
      }
    };
    exports.ListExportsCommand = ListExportsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js
var require_ListGlobalTablesCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListGlobalTablesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListGlobalTablesCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListGlobalTablesCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListGlobalTablesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListGlobalTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListGlobalTablesCommand)(output, context);
      }
    };
    exports.ListGlobalTablesCommand = ListGlobalTablesCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListImportsCommand.js
var require_ListImportsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListImportsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListImportsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListImportsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListImportsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListImportsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListImportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListImportsCommand)(output, context);
      }
    };
    exports.ListImportsCommand = ListImportsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js
var require_ListTablesCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListTablesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTablesCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListTablesCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListTablesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListTablesCommand)(output, context);
      }
    };
    exports.ListTablesCommand = ListTablesCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js
var require_ListTagsOfResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListTagsOfResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTagsOfResourceCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListTagsOfResourceCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListTagsOfResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListTagsOfResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListTagsOfResourceCommand)(output, context);
      }
    };
    exports.ListTagsOfResourceCommand = ListTagsOfResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js
var require_PutItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.PutItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var PutItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            PutItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'PutItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_PutItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_PutItemCommand)(output, context);
      }
    };
    exports.PutItemCommand = PutItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.QueryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var QueryCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            QueryCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'QueryCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_QueryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_QueryCommand)(output, context);
      }
    };
    exports.QueryCommand = QueryCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js
var require_RestoreTableFromBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RestoreTableFromBackupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableFromBackupCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            RestoreTableFromBackupCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'RestoreTableFromBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_RestoreTableFromBackupCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_RestoreTableFromBackupCommand)(
          output,
          context
        );
      }
    };
    exports.RestoreTableFromBackupCommand = RestoreTableFromBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js
var require_RestoreTableToPointInTimeCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RestoreTableToPointInTimeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableToPointInTimeCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            RestoreTableToPointInTimeCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'RestoreTableToPointInTimeCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_RestoreTableToPointInTimeCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_RestoreTableToPointInTimeCommand)(
          output,
          context
        );
      }
    };
    exports.RestoreTableToPointInTimeCommand = RestoreTableToPointInTimeCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ScanCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ScanCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ScanCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ScanCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ScanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ScanCommand)(output, context);
      }
    };
    exports.ScanCommand = ScanCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TagResourceCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            TagResourceCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TagResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js
var require_TransactGetItemsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactGetItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactGetItemsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            TransactGetItemsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TransactGetItemsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TransactGetItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TransactGetItemsCommand)(output, context);
      }
    };
    exports.TransactGetItemsCommand = TransactGetItemsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js
var require_TransactWriteItemsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactWriteItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactWriteItemsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            TransactWriteItemsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TransactWriteItemsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TransactWriteItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TransactWriteItemsCommand)(output, context);
      }
    };
    exports.TransactWriteItemsCommand = TransactWriteItemsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UntagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UntagResourceCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UntagResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js
var require_UpdateContinuousBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateContinuousBackupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContinuousBackupsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateContinuousBackupsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateContinuousBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateContinuousBackupsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateContinuousBackupsCommand)(
          output,
          context
        );
      }
    };
    exports.UpdateContinuousBackupsCommand = UpdateContinuousBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js
var require_UpdateContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateContributorInsightsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContributorInsightsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateContributorInsightsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateContributorInsightsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateContributorInsightsCommand)(
          output,
          context
        );
      }
    };
    exports.UpdateContributorInsightsCommand = UpdateContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js
var require_UpdateGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateGlobalTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateGlobalTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateGlobalTableCommand)(output, context);
      }
    };
    exports.UpdateGlobalTableCommand = UpdateGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js
var require_UpdateGlobalTableSettingsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateGlobalTableSettingsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateGlobalTableSettingsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateGlobalTableSettingsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateGlobalTableSettingsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateGlobalTableSettingsCommand)(
          output,
          context
        );
      }
    };
    exports.UpdateGlobalTableSettingsCommand = UpdateGlobalTableSettingsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js
var require_UpdateItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateItemCommand)(output, context);
      }
    };
    exports.UpdateItemCommand = UpdateItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js
var require_UpdateTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTableCommand)(output, context);
      }
    };
    exports.UpdateTableCommand = UpdateTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js
var require_UpdateTableReplicaAutoScalingCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTableReplicaAutoScalingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateTableReplicaAutoScalingCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTableReplicaAutoScalingCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTableReplicaAutoScalingCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTableReplicaAutoScalingCommand)(
          output,
          context
        );
      }
    };
    exports.UpdateTableReplicaAutoScalingCommand =
      UpdateTableReplicaAutoScalingCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js
var require_UpdateTimeToLiveCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTimeToLiveCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTimeToLiveCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateTimeToLiveCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTimeToLiveCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTimeToLiveCommand)(output, context);
      }
    };
    exports.UpdateTimeToLiveCommand = UpdateTimeToLiveCommand;
  },
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  'node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function (SelectorType2) {
      SelectorType2['ENV'] = 'env';
      SelectorType2['CONFIG'] = 'shared config entry';
    })((SelectorType = exports.SelectorType || (exports.SelectorType = {})));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj)) return void 0;
      if (obj[key] === 'true') return true;
      if (obj[key] === 'false') return false;
      throw new Error(
        `Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`
      );
    };
    exports.booleanSelector = booleanSelector;
  },
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  'node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports);
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_DUALSTACK_ENDPOINT =
      exports.CONFIG_USE_DUALSTACK_ENDPOINT =
      exports.ENV_USE_DUALSTACK_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs9();
    exports.ENV_USE_DUALSTACK_ENDPOINT = 'AWS_USE_DUALSTACK_ENDPOINT';
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = 'use_dualstack_endpoint';
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) =>
        (0, util_config_provider_1.booleanSelector)(
          env,
          exports.ENV_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_FIPS_ENDPOINT =
      exports.CONFIG_USE_FIPS_ENDPOINT =
      exports.ENV_USE_FIPS_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs9();
    exports.ENV_USE_FIPS_ENDPOINT = 'AWS_USE_FIPS_ENDPOINT';
    exports.CONFIG_USE_FIPS_ENDPOINT = 'use_fips_endpoint';
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) =>
        (0, util_config_provider_1.booleanSelector)(
          env,
          exports.ENV_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(
          typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
        ),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(
          (_b = input.useDualstackEndpoint) !== null && _b !== void 0
            ? _b
            : false
        ),
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(
        /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/
      );
      if (!dnsHostRegex.test(region)) {
        throw new Error('Invalid region in client config');
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } =
        (_a = await input.regionInfoProvider(region, {
          useDualstackEndpoint,
          useFipsEndpoint,
        })) !== null && _a !== void 0
          ? _a
          : {};
      if (!hostname) {
        throw new Error('Cannot resolve hostname from client config');
      }
      return input.urlParser(`${tls ? 'https:' : 'http:'}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(
        (_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false
      );
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint
          ? (0, util_middleware_1.normalizeProvider)(
              typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
            )
          : () =>
              (0, getEndpointFromRegion_1.getEndpointFromRegion)({
                ...input,
                useDualstackEndpoint,
                useFipsEndpoint,
              }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint,
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(
      require_NodeUseDualstackEndpointConfigOptions(),
      exports
    );
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS =
      exports.NODE_REGION_CONFIG_OPTIONS =
      exports.REGION_INI_NAME =
      exports.REGION_ENV_NAME =
        void 0;
    exports.REGION_ENV_NAME = 'AWS_REGION';
    exports.REGION_INI_NAME = 'region';
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error('Region is missing');
      },
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: 'credentials',
    };
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) =>
      typeof region === 'string' &&
      (region.startsWith('fips-') || region.endsWith('-fips'));
    exports.isFipsRegion = isFipsRegion;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) =>
      (0, isFipsRegion_1.isFipsRegion)(region)
        ? ['fips-aws-global', 'aws-fips'].includes(region)
          ? 'us-east-1'
          : region.replace(/fips-(dkr-|prod-)?|-fips/, '')
        : region;
    exports.getRealRegion = getRealRegion;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error('Region is missing');
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === 'string') {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion =
            typeof region === 'string' ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== 'function'
            ? Promise.resolve(!!useFipsEndpoint)
            : useFipsEndpoint();
        },
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (
      variants = [],
      { useFipsEndpoint, useDualstackEndpoint }
    ) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) =>
          useFipsEndpoint === tags.includes('fips') &&
          useDualstackEndpoint === tags.includes('dualstack')
      )) === null || _a === void 0
        ? void 0
        : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (
      resolvedRegion,
      { regionHostname, partitionHostname }
    ) =>
      regionHostname
        ? regionHostname
        : partitionHostname
        ? partitionHostname.replace('{region}', resolvedRegion)
        : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) =>
        partitionHash[key].regions.includes(region)
      )) !== null && _a !== void 0
        ? _a
        : 'aws';
    };
    exports.getResolvedPartition = getResolvedPartition;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (
      hostname,
      { signingRegion, regionRegex, useFipsEndpoint }
    ) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex
          .replace('\\\\', '\\')
          .replace(/^\^/g, '\\.')
          .replace(/\$$/g, '\\.');
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (
      region,
      {
        useFipsEndpoint = false,
        useDualstackEndpoint = false,
        signingService,
        regionHash,
        partitionHash,
      }
    ) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(
        region,
        { partitionHash }
      );
      const resolvedRegion =
        region in regionHash
          ? region
          : (_b =
              (_a = partitionHash[partition]) === null || _a === void 0
                ? void 0
                : _a.endpoint) !== null && _b !== void 0
          ? _b
          : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0,
      getHostnameFromVariants_1.getHostnameFromVariants)(
        (_c = regionHash[resolvedRegion]) === null || _c === void 0
          ? void 0
          : _c.variants,
        hostnameOptions
      );
      const partitionHostname = (0,
      getHostnameFromVariants_1.getHostnameFromVariants)(
        (_d = partitionHash[partition]) === null || _d === void 0
          ? void 0
          : _d.variants,
        hostnameOptions
      );
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(
        resolvedRegion,
        { regionHostname, partitionHostname }
      );
      if (hostname === void 0) {
        throw new Error(
          `Endpoint resolution failed for: ${{
            resolvedRegion,
            useFipsEndpoint,
            useDualstackEndpoint,
          }}`
        );
      }
      const signingRegion = (0,
      getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion:
          (_e = regionHash[resolvedRegion]) === null || _e === void 0
            ? void 0
            : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint,
      });
      return {
        partition,
        signingService,
        hostname,
        ...(signingRegion && { signingRegion }),
        ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0
          ? void 0
          : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService,
        }),
      };
    };
    exports.getRegionInfo = getRegionInfo;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  },
});

// node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  'node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getContentLengthPlugin =
      exports.contentLengthMiddlewareOptions =
      exports.contentLengthMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var CONTENT_LENGTH_HEADER = 'content-length';
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (
            body &&
            Object.keys(headers)
              .map((str) => str.toLowerCase())
              .indexOf(CONTENT_LENGTH_HEADER) === -1
          ) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length),
              };
            } catch (error) {}
          }
        }
        return next({
          ...args,
          request,
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: 'build',
      tags: ['SET_CONTENT_LENGTH', 'CONTENT_LENGTH'],
      name: 'contentLengthMiddleware',
      override: true,
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          contentLengthMiddleware(options.bodyLengthChecker),
          exports.contentLengthMiddlewareOptions
        );
      },
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js
var require_configurations = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = void 0;
    var ENV_ENDPOINT_DISCOVERY = [
      'AWS_ENABLE_ENDPOINT_DISCOVERY',
      'AWS_ENDPOINT_DISCOVERY_ENABLED',
    ];
    var CONFIG_ENDPOINT_DISCOVERY = 'endpoint_discovery_enabled';
    var isFalsy = (value) => ['false', '0'].indexOf(value) >= 0;
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
          const envKey = ENV_ENDPOINT_DISCOVERY[i];
          if (envKey in env) {
            const value = env[envKey];
            if (value === '') {
              throw Error(
                `Environment variable ${envKey} can't be empty of undefined, got "${value}"`
              );
            }
            return !isFalsy(value);
          }
        }
      },
      configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
          const value = profile[CONFIG_ENDPOINT_DISCOVERY];
          if (value === void 0) {
            throw Error(
              `Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`
            );
          }
          return !isFalsy(value);
        }
      },
      default: void 0,
    };
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js
var require_getCacheKey = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCacheKey = void 0;
    var getCacheKey = async (commandName, config, options) => {
      const { accessKeyId } = await config.credentials();
      const { identifiers } = options;
      return JSON.stringify({
        ...(accessKeyId && { accessKeyId }),
        ...(identifiers && {
          commandName,
          identifiers: Object.entries(identifiers)
            .sort()
            .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}),
        }),
      });
    };
    exports.getCacheKey = getCacheKey;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js
var require_updateDiscoveredEndpointInCache = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.updateDiscoveredEndpointInCache = void 0;
    var requestQueue = {};
    var updateDiscoveredEndpointInCache = async (config, options) =>
      new Promise((resolve, reject) => {
        const { endpointCache } = config;
        const { cacheKey, commandName, identifiers } = options;
        const endpoints = endpointCache.get(cacheKey);
        if (
          endpoints &&
          endpoints.length === 1 &&
          endpoints[0].Address === ''
        ) {
          if (options.isDiscoveredEndpointRequired) {
            if (!requestQueue[cacheKey]) requestQueue[cacheKey] = [];
            requestQueue[cacheKey].push({ resolve, reject });
          } else {
            resolve();
          }
        } else if (endpoints && endpoints.length > 0) {
          resolve();
        } else {
          const placeholderEndpoints = [
            { Address: '', CachePeriodInMinutes: 1 },
          ];
          endpointCache.set(cacheKey, placeholderEndpoints);
          const command = new options.endpointDiscoveryCommandCtor({
            Operation: commandName.slice(0, -7),
            Identifiers: identifiers,
          });
          const handler2 = command.resolveMiddleware(
            options.clientStack,
            config,
            options.options
          );
          handler2(command)
            .then((result) => {
              endpointCache.set(cacheKey, result.output.Endpoints);
              if (requestQueue[cacheKey]) {
                requestQueue[cacheKey].forEach(({ resolve: resolve2 }) => {
                  resolve2();
                });
                delete requestQueue[cacheKey];
              }
              resolve();
            })
            .catch((error) => {
              endpointCache.delete(cacheKey);
              const errorToThrow = Object.assign(
                new Error(
                  `The operation to discover endpoint failed. Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`
                ),
                { reason: error }
              );
              if (requestQueue[cacheKey]) {
                requestQueue[cacheKey].forEach(({ reject: reject2 }) => {
                  reject2(errorToThrow);
                });
                delete requestQueue[cacheKey];
              }
              if (options.isDiscoveredEndpointRequired) {
                reject(errorToThrow);
              } else {
                endpointCache.set(cacheKey, placeholderEndpoints);
                resolve();
              }
            });
        }
      });
    exports.updateDiscoveredEndpointInCache = updateDiscoveredEndpointInCache;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js
var require_endpointDiscoveryMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.endpointDiscoveryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var getCacheKey_1 = require_getCacheKey();
    var updateDiscoveredEndpointInCache_1 =
      require_updateDiscoveredEndpointInCache();
    var endpointDiscoveryMiddleware =
      (config, middlewareConfig) => (next, context) => async (args) => {
        if (config.isCustomEndpoint) {
          if (config.isClientEndpointDiscoveryEnabled) {
            throw new Error(
              `Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`
            );
          }
          return next(args);
        }
        const { endpointDiscoveryCommandCtor } = config;
        const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
        const { clientName, commandName } = context;
        const isEndpointDiscoveryEnabled =
          await config.endpointDiscoveryEnabled();
        const cacheKey = await (0, getCacheKey_1.getCacheKey)(
          commandName,
          config,
          { identifiers }
        );
        if (isDiscoveredEndpointRequired) {
          if (isEndpointDiscoveryEnabled === false) {
            throw new Error(
              `Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it. Please check your configurations.`
            );
          }
          await (0,
          updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(
            config,
            {
              ...middlewareConfig,
              commandName,
              cacheKey,
              endpointDiscoveryCommandCtor,
            }
          );
        } else if (isEndpointDiscoveryEnabled) {
          (0,
          updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(
            config,
            {
              ...middlewareConfig,
              commandName,
              cacheKey,
              endpointDiscoveryCommandCtor,
            }
          );
        }
        const { request } = args;
        if (cacheKey && protocol_http_1.HttpRequest.isInstance(request)) {
          const endpoint = config.endpointCache.getEndpoint(cacheKey);
          if (endpoint) {
            request.hostname = endpoint;
          }
        }
        return next(args);
      };
    exports.endpointDiscoveryMiddleware = endpointDiscoveryMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js
var require_getEndpointDiscoveryPlugin = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointDiscoveryOptionalPlugin =
      exports.getEndpointDiscoveryRequiredPlugin =
      exports.getEndpointDiscoveryPlugin =
      exports.endpointDiscoveryMiddlewareOptions =
        void 0;
    var endpointDiscoveryMiddleware_1 = require_endpointDiscoveryMiddleware();
    exports.endpointDiscoveryMiddlewareOptions = {
      name: 'endpointDiscoveryMiddleware',
      step: 'build',
      tags: ['ENDPOINT_DISCOVERY'],
      override: true,
    };
    var getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(
            pluginConfig,
            middlewareConfig
          ),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryPlugin = getEndpointDiscoveryPlugin;
    var getEndpointDiscoveryRequiredPlugin = (
      pluginConfig,
      middlewareConfig
    ) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(
            pluginConfig,
            { ...middlewareConfig, isDiscoveredEndpointRequired: true }
          ),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryRequiredPlugin =
      getEndpointDiscoveryRequiredPlugin;
    var getEndpointDiscoveryOptionalPlugin = (
      pluginConfig,
      middlewareConfig
    ) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(
            pluginConfig,
            { ...middlewareConfig, isDiscoveredEndpointRequired: false }
          ),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryOptionalPlugin =
      getEndpointDiscoveryOptionalPlugin;
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js
var require_Endpoint = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  'node_modules/obliterator/iterator.js'(exports, module2) {
    function Iterator(next) {
      Object.defineProperty(this, '_next', {
        writable: false,
        enumerable: false,
        value: next,
      });
      this.done = false;
    }
    Iterator.prototype.next = function () {
      if (this.done) return { done: true };
      var step = this._next();
      if (step.done) this.done = true;
      return step;
    };
    if (typeof Symbol !== 'undefined')
      Iterator.prototype[Symbol.iterator] = function () {
        return this;
      };
    Iterator.of = function () {
      var args = arguments,
        l = args.length,
        i = 0;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function () {
      var iterator = new Iterator(null);
      iterator.done = true;
      return iterator;
    };
    Iterator.is = function (value) {
      if (value instanceof Iterator) return true;
      return (
        typeof value === 'object' &&
        value !== null &&
        typeof value.next === 'function'
      );
    };
    module2.exports = Iterator;
  },
});

// node_modules/obliterator/foreach.js
var require_foreach = __commonJS({
  'node_modules/obliterator/foreach.js'(exports, module2) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';
    var SYMBOL_SUPPORT = typeof Symbol !== 'undefined';
    function forEach2(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable) throw new Error('obliterator/forEach: invalid iterable.');
      if (typeof callback !== 'function')
        throw new Error('obliterator/forEach: expecting a callback.');
      if (
        Array.isArray(iterable) ||
        (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||
        typeof iterable === 'string' ||
        iterable.toString() === '[object Arguments]'
      ) {
        for (i = 0, l = iterable.length; i < l; i++) callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === 'function') {
        iterable.forEach(callback);
        return;
      }
      if (
        SYMBOL_SUPPORT &&
        Symbol.iterator in iterable &&
        typeof iterable.next !== 'function'
      ) {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === 'function') {
        iterator = iterable;
        i = 0;
        while (((s = iterator.next()), s.done !== true)) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    }
    forEach2.forEachWithNullKeys = function (iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error('obliterator/forEachWithNullKeys: invalid iterable.');
      if (typeof callback !== 'function')
        throw new Error(
          'obliterator/forEachWithNullKeys: expecting a callback.'
        );
      if (
        Array.isArray(iterable) ||
        (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||
        typeof iterable === 'string' ||
        iterable.toString() === '[object Arguments]'
      ) {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function (value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === 'function') {
        iterable.forEach(callback);
        return;
      }
      if (
        SYMBOL_SUPPORT &&
        Symbol.iterator in iterable &&
        typeof iterable.next !== 'function'
      ) {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === 'function') {
        iterator = iterable;
        i = 0;
        while (((s = iterator.next()), s.done !== true)) {
          callback(s.value, null);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    };
    module2.exports = forEach2;
  },
});

// node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  'node_modules/mnemonist/utils/typed-arrays.js'(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function (size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER) return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER) return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER) return Uint32Array;
      return Float64Array;
    };
    exports.getSignedPointerArray = function (size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER) return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER) return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER) return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function (value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128) return Int8Array;
          if (value <= 32767 && value >= -32768) return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255) return Uint8Array;
          if (value <= 65535) return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8,
    };
    exports.getMinimalRepresentation = function (array, getter) {
      var maxType = null,
        maxPriority = 0,
        p,
        t,
        v,
        i,
        l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function (value) {
      return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(value);
    };
    exports.concat = function () {
      var length = 0,
        i,
        o,
        l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function (length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++) array[i] = i;
      return array;
    };
  },
});

// node_modules/mnemonist/utils/iterables.js
var require_iterables = __commonJS({
  'node_modules/mnemonist/utils/iterables.js'(exports) {
    var forEach2 = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === 'number') return target.length;
      if (typeof target.size === 'number') return target.size;
      return;
    }
    function toArray2(target) {
      var l = guessLength(target);
      var array = typeof l === 'number' ? new Array(l) : [];
      var i = 0;
      forEach2(target, function (value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === 'number' ? typed.getPointerArray(l) : Array;
      var array = typeof l === 'number' ? new Array(l) : [];
      var indices = typeof l === 'number' ? new IndexArray(l) : [];
      var i = 0;
      forEach2(target, function (value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports.isArrayLike = isArrayLike;
    exports.guessLength = guessLength;
    exports.toArray = toArray2;
    exports.toArrayWithIndices = toArrayWithIndices;
  },
});

// node_modules/mnemonist/lru-cache.js
var require_lru_cache = __commonJS({
  'node_modules/mnemonist/lru-cache.js'(exports, module2) {
    var Iterator = require_iterator();
    var forEach2 = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== 'number' || this.capacity <= 0)
        throw new Error(
          'mnemonist/lru-cache: capacity should be positive number.'
        );
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K =
        typeof Keys === 'function' ? new Keys(capacity) : new Array(capacity);
      this.V =
        typeof Values === 'function'
          ? new Values(capacity)
          : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function () {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function (pointer) {
      var oldHead = this.head;
      if (this.head === pointer) return this;
      var previous = this.backward[pointer],
        next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function (key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== 'undefined') {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function (key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== 'undefined') {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function (key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function (key) {
      var pointer = this.items[key];
      if (typeof pointer === 'undefined') return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function (key) {
      var pointer = this.items[key];
      if (typeof pointer === 'undefined') return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function (callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        values = this.V,
        forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache.prototype.keys = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var key = keys[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value: key,
        };
      });
    };
    LRUCache.prototype.values = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        values = this.V,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var value = values[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value,
        };
      });
    };
    LRUCache.prototype.entries = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        values = this.V,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var key = keys[pointer],
          value = values[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value: [key, value],
        };
      });
    };
    if (typeof Symbol !== 'undefined')
      LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function () {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(),
        step;
      while (((step = iterator.next()), !step.done))
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, 'constructor', {
        value: LRUCache,
        enumerable: false,
      });
      return proxy;
    };
    if (typeof Symbol !== 'undefined')
      LRUCache.prototype[Symbol.for('nodejs.util.inspect.custom')] =
        LRUCache.prototype.inspect;
    LRUCache.from = function (iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== 'number')
          throw new Error(
            'mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.'
          );
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache(Keys, Values, capacity);
      forEach2(iterable, function (value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUCache;
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js
var require_EndpointCache = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointCache = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lru_cache_1 = tslib_1.__importDefault(require_lru_cache());
    var EndpointCache = class {
      constructor(capacity) {
        this.cache = new lru_cache_1.default(capacity);
      }
      getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
          return void 0;
        }
        const endpoints = endpointsWithExpiry.map(
          (endpoint) => endpoint.Address
        );
        return endpoints[Math.floor(Math.random() * endpoints.length)];
      }
      get(key) {
        if (!this.has(key)) {
          return;
        }
        const value = this.cache.get(key);
        if (!value) {
          return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter(
          (endpoint) => now < endpoint.Expires
        );
        if (endpointsWithExpiry.length === 0) {
          this.delete(key);
          return void 0;
        }
        return endpointsWithExpiry;
      }
      set(key, endpoints) {
        const now = Date.now();
        this.cache.set(
          key,
          endpoints.map(({ Address, CachePeriodInMinutes }) => ({
            Address,
            Expires: now + CachePeriodInMinutes * 60 * 1e3,
          }))
        );
      }
      delete(key) {
        this.cache.set(key, []);
      }
      has(key) {
        if (!this.cache.has(key)) {
          return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
          return false;
        }
        return endpoints.length > 0;
      }
      clear() {
        this.cache.clear();
      }
    };
    exports.EndpointCache = EndpointCache;
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Endpoint(), exports);
    tslib_1.__exportStar(require_EndpointCache(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js
var require_resolveEndpointDiscoveryConfig = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointDiscoveryConfig = void 0;
    var endpoint_cache_1 = require_dist_cjs12();
    var resolveEndpointDiscoveryConfig = (
      input,
      { endpointDiscoveryCommandCtor }
    ) => {
      var _a;
      return {
        ...input,
        endpointDiscoveryCommandCtor,
        endpointCache: new endpoint_cache_1.EndpointCache(
          (_a = input.endpointCacheSize) !== null && _a !== void 0 ? _a : 1e3
        ),
        endpointDiscoveryEnabled:
          input.endpointDiscoveryEnabled !== void 0
            ? () => Promise.resolve(input.endpointDiscoveryEnabled)
            : input.endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled:
          input.endpointDiscoveryEnabled !== void 0,
      };
    };
    exports.resolveEndpointDiscoveryConfig = resolveEndpointDiscoveryConfig;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_getEndpointDiscoveryPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointDiscoveryConfig(), exports);
  },
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  'node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostHeaderPlugin =
      exports.hostHeaderMiddlewareOptions =
      exports.hostHeaderMiddleware =
      exports.resolveHostHeaderConfig =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = '' } = options.requestHandler.metadata || {};
      if (
        handlerProtocol.indexOf('h2') >= 0 &&
        !request.headers[':authority']
      ) {
        delete request.headers['host'];
        request.headers[':authority'] = '';
      } else if (!request.headers['host']) {
        let host = request.hostname;
        if (request.port != null) host += `:${request.port}`;
        request.headers['host'] = host;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: 'hostHeaderMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['HOST'],
      override: true,
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.hostHeaderMiddleware)(options),
          exports.hostHeaderMiddlewareOptions
        );
      },
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  },
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getLoggerPlugin =
      exports.loggerMiddlewareOptions =
      exports.loggerMiddleware =
        void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const {
          clientName,
          commandName,
          logger,
          dynamoDbDocumentClientOptions = {},
        } = context;
        const {
          overrideInputFilterSensitiveLog,
          overrideOutputFilterSensitiveLog,
        } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog =
          overrideInputFilterSensitiveLog !== null &&
          overrideInputFilterSensitiveLog !== void 0
            ? overrideInputFilterSensitiveLog
            : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog =
          overrideOutputFilterSensitiveLog !== null &&
          overrideOutputFilterSensitiveLog !== void 0
            ? overrideOutputFilterSensitiveLog
            : context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger === null || logger === void 0 ? void 0 : logger.info) ===
          null || _a === void 0
          ? void 0
          : _a.call(logger, {
              clientName,
              commandName,
              input: inputFilterSensitiveLog(args.input),
              output: outputFilterSensitiveLog(outputWithoutMetadata),
              metadata: $metadata,
            });
        return response;
      } catch (error) {
        const {
          clientName,
          commandName,
          logger,
          dynamoDbDocumentClientOptions = {},
        } = context;
        const { overrideInputFilterSensitiveLog } =
          dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog =
          overrideInputFilterSensitiveLog !== null &&
          overrideInputFilterSensitiveLog !== void 0
            ? overrideInputFilterSensitiveLog
            : context.inputFilterSensitiveLog;
        (_b = logger === null || logger === void 0 ? void 0 : logger.error) ===
          null || _b === void 0
          ? void 0
          : _b.call(logger, {
              clientName,
              commandName,
              input: inputFilterSensitiveLog(args.input),
              error,
              metadata: error.$metadata,
            });
        throw error;
      }
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: 'loggerMiddleware',
      tags: ['LOGGER'],
      step: 'initialize',
      override: true,
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.loggerMiddleware)(),
          exports.loggerMiddlewareOptions
        );
      },
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  },
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  'node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRecursionDetectionPlugin =
      exports.addRecursionDetectionMiddlewareOptions =
      exports.recursionDetectionMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var TRACE_ID_HEADER_NAME = 'X-Amzn-Trace-Id';
    var ENV_LAMBDA_FUNCTION_NAME = 'AWS_LAMBDA_FUNCTION_NAME';
    var ENV_TRACE_ID = '_X_AMZN_TRACE_ID';
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (
        !protocol_http_1.HttpRequest.isInstance(request) ||
        options.runtime !== 'node' ||
        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)
      ) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === 'string' && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request,
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: 'build',
      tags: ['RECURSION_DETECTION'],
      name: 'recursionDetectionMiddleware',
      override: true,
      priority: 'low',
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.recursionDetectionMiddleware)(options),
          exports.addRecursionDetectionMiddlewareOptions
        );
      },
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DEFAULT_RETRY_MODE =
      exports.DEFAULT_MAX_ATTEMPTS =
      exports.RETRY_MODES =
        void 0;
    var RETRY_MODES;
    (function (RETRY_MODES2) {
      RETRY_MODES2['STANDARD'] = 'standard';
      RETRY_MODES2['ADAPTIVE'] = 'adaptive';
    })((RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {})));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = 'STANDARD';
  },
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  'node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES =
      exports.TRANSIENT_ERROR_STATUS_CODES =
      exports.TRANSIENT_ERROR_CODES =
      exports.THROTTLING_ERROR_CODES =
      exports.CLOCK_SKEW_ERROR_CODES =
        void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      'AuthFailure',
      'InvalidSignatureException',
      'RequestExpired',
      'RequestInTheFuture',
      'RequestTimeTooSkewed',
      'SignatureDoesNotMatch',
    ];
    exports.THROTTLING_ERROR_CODES = [
      'BandwidthLimitExceeded',
      'EC2ThrottledException',
      'LimitExceededException',
      'PriorRequestNotComplete',
      'ProvisionedThroughputExceededException',
      'RequestLimitExceeded',
      'RequestThrottled',
      'RequestThrottledException',
      'SlowDown',
      'ThrottledException',
      'Throttling',
      'ThrottlingException',
      'TooManyRequestsException',
      'TransactionInProgressException',
    ];
    exports.TRANSIENT_ERROR_CODES = [
      'AbortError',
      'TimeoutError',
      'RequestTimeout',
      'RequestTimeoutException',
    ];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'EPIPE', 'ETIMEDOUT'];
  },
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  'node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isServerError =
      exports.isTransientError =
      exports.isThrottlingError =
      exports.isClockSkewError =
      exports.isRetryableByTrait =
        void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) =>
      constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return (
        ((_a = error.$metadata) === null || _a === void 0
          ? void 0
          : _a.httpStatusCode) === 429 ||
        constants_1.THROTTLING_ERROR_CODES.includes(error.name) ||
        ((_b = error.$retryable) === null || _b === void 0
          ? void 0
          : _b.throttling) == true
      );
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return (
        constants_1.TRANSIENT_ERROR_CODES.includes(error.name) ||
        constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(
          (error === null || error === void 0 ? void 0 : error.code) || ''
        ) ||
        constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(
          ((_a = error.$metadata) === null || _a === void 0
            ? void 0
            : _a.httpStatusCode) || 0
        )
      );
    };
    exports.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (
        ((_a = error.$metadata) === null || _a === void 0
          ? void 0
          : _a.httpStatusCode) !== void 0
      ) {
        const statusCode = error.$metadata.httpStatusCode;
        if (
          500 <= statusCode &&
          statusCode <= 599 &&
          !(0, exports.isTransientError)(error)
        ) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports.isServerError = isServerError;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs17();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta =
          (_a =
            options === null || options === void 0 ? void 0 : options.beta) !==
            null && _a !== void 0
            ? _a
            : 0.7;
        this.minCapacity =
          (_b =
            options === null || options === void 0
              ? void 0
              : options.minCapacity) !== null && _b !== void 0
            ? _b
            : 1;
        this.minFillRate =
          (_c =
            options === null || options === void 0
              ? void 0
              : options.minFillRate) !== null && _c !== void 0
            ? _c
            : 0.5;
        this.scaleConstant =
          (_d =
            options === null || options === void 0
              ? void 0
              : options.scaleConstant) !== null && _d !== void 0
            ? _d
            : 0.4;
        this.smooth =
          (_e =
            options === null || options === void 0
              ? void 0
              : options.smooth) !== null && _e !== void 0
            ? _e
            : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = ((amount - this.currentCapacity) / this.fillRate) * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(
          this.maxCapacity,
          this.currentCapacity + fillAmount
        );
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled
            ? this.measuredTxRate
            : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(
          Math.pow(
            (this.lastMaxRate * (1 - this.beta)) / this.scaleConstant,
            1 / 3
          )
        );
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant *
            Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) +
            this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate =
            this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(
            currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth)
          );
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.REQUEST_HEADER =
      exports.INVOCATION_ID_HEADER =
      exports.NO_RETRY_INCREMENT =
      exports.TIMEOUT_RETRY_COST =
      exports.RETRY_COST =
      exports.INITIAL_RETRY_TOKENS =
      exports.THROTTLING_RETRY_DELAY_BASE =
      exports.MAXIMUM_RETRY_DELAY =
      exports.DEFAULT_RETRY_DELAY_BASE =
        void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = 'amz-sdk-invocation-id';
    exports.REQUEST_HEADER = 'amz-sdk-request';
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js
var require_defaultRetryBackoffStrategy = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(
          Math.min(
            constants_1.MAXIMUM_RETRY_DELAY,
            Math.random() * 2 ** attempts * delayBase
          )
        );
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase,
      };
    };
    exports.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js
var require_defaultRetryToken = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryToken = void 0;
    var constants_1 = require_constants3();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var getDefaultRetryToken = (
      initialRetryTokens,
      initialRetryDelay,
      initialRetryCount,
      options
    ) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const retryCost =
        (_a =
          options === null || options === void 0
            ? void 0
            : options.retryCost) !== null && _a !== void 0
          ? _a
          : constants_1.RETRY_COST;
      const timeoutRetryCost =
        (_b =
          options === null || options === void 0
            ? void 0
            : options.timeoutRetryCost) !== null && _b !== void 0
          ? _b
          : constants_1.TIMEOUT_RETRY_COST;
      const retryBackoffStrategy =
        (_c =
          options === null || options === void 0
            ? void 0
            : options.retryBackoffStrategy) !== null && _c !== void 0
          ? _c
          : (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
      let availableCapacity = initialRetryTokens;
      let retryDelay = Math.min(
        constants_1.MAXIMUM_RETRY_DELAY,
        initialRetryDelay
      );
      let lastRetryCost = void 0;
      let retryCount =
        initialRetryCount !== null && initialRetryCount !== void 0
          ? initialRetryCount
          : 0;
      const getCapacityAmount = (errorType) =>
        errorType === 'TRANSIENT' ? timeoutRetryCost : retryCost;
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => retryDelay;
      const getLastRetryCost = () => lastRetryCost;
      const hasRetryTokens = (errorType) =>
        getCapacityAmount(errorType) <= availableCapacity;
      const getRetryTokenCount = (errorInfo) => {
        const errorType = errorInfo.errorType;
        if (!hasRetryTokens(errorType)) {
          throw new Error('No retry token available');
        }
        const capacityAmount = getCapacityAmount(errorType);
        const delayBase =
          errorType === 'THROTTLING'
            ? constants_1.THROTTLING_RETRY_DELAY_BASE
            : constants_1.DEFAULT_RETRY_DELAY_BASE;
        retryBackoffStrategy.setDelayBase(delayBase);
        const delayFromErrorType =
          retryBackoffStrategy.computeNextBackoffDelay(retryCount);
        if (errorInfo.retryAfterHint) {
          const delayFromRetryAfterHint =
            errorInfo.retryAfterHint.getTime() - Date.now();
          retryDelay = Math.max(
            delayFromRetryAfterHint || 0,
            delayFromErrorType
          );
        } else {
          retryDelay = delayFromErrorType;
        }
        retryCount++;
        lastRetryCost = capacityAmount;
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (releaseAmount) => {
        availableCapacity +=
          releaseAmount !== null && releaseAmount !== void 0
            ? releaseAmount
            : constants_1.NO_RETRY_INCREMENT;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return {
        getRetryCount,
        getRetryDelay,
        getLastRetryCost,
        hasRetryTokens,
        getRetryTokenCount,
        releaseRetryTokens,
      };
    };
    exports.getDefaultRetryToken = getDefaultRetryToken;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StandardRetryStrategy = void 0;
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(
          constants_1.INITIAL_RETRY_TOKENS,
          constants_1.DEFAULT_RETRY_DELAY_BASE
        );
        this.maxAttemptsProvider = maxAttemptsProvider;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return this.retryToken;
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {
          tokenToRenew.getRetryTokenCount(errorInfo);
          return tokenToRenew;
        }
        throw new Error('No retry token available');
      }
      recordSuccess(token) {
        this.retryToken.releaseRetryTokens(token.getLastRetryCost());
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(
            `Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`
          );
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount();
        return (
          attempts < maxAttempts &&
          tokenToRenew.hasRetryTokens(errorInfo.errorType) &&
          this.isRetryableError(errorInfo.errorType)
        );
      }
      isRetryableError(errorType) {
        return errorType === 'THROTTLING' || errorType === 'TRANSIENT';
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } =
          options !== null && options !== void 0 ? options : {};
        this.rateLimiter =
          rateLimiter !== null && rateLimiter !== void 0
            ? rateLimiter
            : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy =
          new StandardRetryStrategy_1.StandardRetryStrategy(
            maxAttemptsProvider
          );
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(
          retryTokenScope
        );
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(
          tokenToRenew,
          errorInfo
        );
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/types.js
var require_types2 = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_constants3(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs18();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement =
        (_a =
          options === null || options === void 0
            ? void 0
            : options.noRetryIncrement) !== null && _a !== void 0
          ? _a
          : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost =
        (_b =
          options === null || options === void 0
            ? void 0
            : options.retryCost) !== null && _b !== void 0
          ? _b
          : util_retry_1.RETRY_COST;
      const timeoutRetryCost =
        (_c =
          options === null || options === void 0
            ? void 0
            : options.timeoutRetryCost) !== null && _c !== void 0
          ? _c
          : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) =>
        error.name === 'TimeoutError' ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) =>
        getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error('No retry token available');
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity +=
          capacityReleaseAmount !== null && capacityReleaseAmount !== void 0
            ? capacityReleaseAmount
            : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs18();
    var defaultDelayDecider = (delayBase, attempts) =>
      Math.floor(
        Math.min(
          util_retry_1.MAXIMUM_RETRY_DELAY,
          Math.random() * 2 ** attempts * delayBase
        )
      );
    exports.defaultDelayDecider = defaultDelayDecider;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs17();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (
        (0, service_error_classification_1.isRetryableByTrait)(error) ||
        (0, service_error_classification_1.isClockSkewError)(error) ||
        (0, service_error_classification_1.isThrottlingError)(error) ||
        (0, service_error_classification_1.isTransientError)(error)
      );
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js
var require_util = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error) return error;
      if (error instanceof Object) return Object.assign(new Error(), error);
      if (typeof error === 'string') return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports.asSdkError = asSdkError;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy2 = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs17();
    var util_retry_1 = require_dist_cjs18();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider =
          (_a =
            options === null || options === void 0
              ? void 0
              : options.retryDecider) !== null && _a !== void 0
            ? _a
            : retryDecider_1.defaultRetryDecider;
        this.delayDecider =
          (_b =
            options === null || options === void 0
              ? void 0
              : options.delayDecider) !== null && _b !== void 0
            ? _b
            : delayDecider_1.defaultDelayDecider;
        this.retryQuota =
          (_c =
            options === null || options === void 0
              ? void 0
              : options.retryQuota) !== null && _c !== void 0
            ? _c
            : (0, defaultRetryQuota_1.getDefaultRetryQuota)(
                util_retry_1.INITIAL_RETRY_TOKENS
              );
      }
      shouldRetry(error, attempts, maxAttempts) {
        return (
          attempts < maxAttempts &&
          this.retryDecider(error) &&
          this.retryQuota.hasRetryTokens(error)
        );
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${
                attempts + 1
              }; max=${maxAttempts}`;
            }
            if (
              options === null || options === void 0
                ? void 0
                : options.beforeRequest
            ) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (
              options === null || options === void 0
                ? void 0
                : options.afterRequest
            ) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider(
                (0, service_error_classification_1.isThrottlingError)(err)
                  ? util_retry_1.THROTTLING_RETRY_DELAY_BASE
                  : util_retry_1.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              const delayFromResponse = getDelayFromRetryAfterHeader(
                err.$response
              );
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response)) return;
      const retryAfterHeaderName = Object.keys(response.headers).find(
        (key) => key.toLowerCase() === 'retry-after'
      );
      if (!retryAfterHeaderName) return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy2 = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs18();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } =
          options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter =
          rateLimiter !== null && rateLimiter !== void 0
            ? rateLimiter
            : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          },
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS =
      exports.CONFIG_RETRY_MODE =
      exports.ENV_RETRY_MODE =
      exports.resolveRetryConfig =
      exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS =
      exports.CONFIG_MAX_ATTEMPTS =
      exports.ENV_MAX_ATTEMPTS =
        void 0;
    var util_middleware_1 = require_dist_cjs6();
    var util_retry_1 = require_dist_cjs18();
    exports.ENV_MAX_ATTEMPTS = 'AWS_MAX_ATTEMPTS';
    exports.CONFIG_MAX_ATTEMPTS = 'max_attempts';
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(
            `Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`
          );
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(
            `Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`
          );
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS,
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)(
        (_a = input.maxAttempts) !== null && _a !== void 0
          ? _a
          : util_retry_1.DEFAULT_MAX_ATTEMPTS
      );
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(
            input.retryMode
          )();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        },
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = 'AWS_RETRY_MODE';
    exports.CONFIG_RETRY_MODE = 'retry_mode';
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE,
    };
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getOmitRetryHeadersPlugin =
      exports.omitRetryHeadersMiddlewareOptions =
      exports.omitRetryHeadersMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var util_retry_1 = require_dist_cjs18();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: 'omitRetryHeadersMiddleware',
      tags: ['RETRY', 'HEADERS', 'OMIT_RETRY_HEADERS'],
      relation: 'before',
      toMiddleware: 'awsAuthMiddleware',
      override: true,
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          (0, exports.omitRetryHeadersMiddleware)(),
          exports.omitRetryHeadersMiddlewareOptions
        );
      },
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRetryAfterHint =
      exports.getRetryPlugin =
      exports.retryMiddlewareOptions =
      exports.retryMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs17();
    var util_retry_1 = require_dist_cjs18();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(
          context['partition_id']
        );
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${
                attempts + 1
              }; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetyErrorInto(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(
                retryToken,
                retryErrorInfo
              );
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (
          retryStrategy === null || retryStrategy === void 0
            ? void 0
            : retryStrategy.mode
        )
          context.userAgent = [
            ...(context.userAgent || []),
            ['cfg/retry-mode', retryStrategy.mode],
          ];
        return retryStrategy.retry(next, args);
      }
    };
    exports.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) =>
      typeof retryStrategy.acquireInitialRetryToken !== 'undefined' &&
      typeof retryStrategy.refreshRetryTokenForRetry !== 'undefined' &&
      typeof retryStrategy.recordSuccess !== 'undefined';
    var getRetyErrorInto = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error),
      };
      const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return 'THROTTLING';
      if ((0, service_error_classification_1.isTransientError)(error))
        return 'TRANSIENT';
      if ((0, service_error_classification_1.isServerError)(error))
        return 'SERVER_ERROR';
      return 'CLIENT_ERROR';
    };
    exports.retryMiddlewareOptions = {
      name: 'retryMiddleware',
      tags: ['RETRY'],
      step: 'finalizeRequest',
      priority: 'high',
      override: true,
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.retryMiddleware)(options),
          exports.retryMiddlewareOptions
        );
      },
    });
    exports.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response)) return;
      const retryAfterHeaderName = Object.keys(response.headers).find(
        (key) => key.toLowerCase() === 'retry-after'
      );
      if (!retryAfterHeaderName) return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports.getRetryAfterHint = getRetryAfterHint;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports);
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'TokenProviderError';
        Object.setPrototypeOf(this, TokenProviderError.prototype);
      }
    };
    exports.TokenProviderError = TokenProviderError;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(
          new ProviderError_1.ProviderError('No providers in chain')
        );
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (
            !hasResult ||
            (options === null || options === void 0
              ? void 0
              : options.forceRefresh)
          ) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (
          !hasResult ||
          (options === null || options === void 0
            ? void 0
            : options.forceRefresh)
        ) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_TokenProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  },
});

// node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  'node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error('Hex encoded strings must have an even number length');
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(
            `Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`
          );
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = '';
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  },
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  'node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer2 = (arg) =>
      (typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||
      Object.prototype.toString.call(arg) === '[object ArrayBuffer]';
    exports.isArrayBuffer = isArrayBuffer2;
  },
});

// node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  'node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs22();
    var buffer_1 = require('buffer');
    var fromArrayBuffer = (
      input,
      offset = 0,
      length = input.byteLength - offset
    ) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(
          `The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`
        );
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== 'string') {
        throw new TypeError(
          `The "input" argument must be of type string. Received type ${typeof input} (${input})`
        );
      }
      return encoding
        ? buffer_1.Buffer.from(input, encoding)
        : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  },
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js
var require_fromUtf8 = __commonJS({
  'node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, 'utf8');
      return new Uint8Array(
        buf.buffer,
        buf.byteOffset,
        buf.byteLength / Uint8Array.BYTES_PER_ELEMENT
      );
    };
    exports.fromUtf8 = fromUtf8;
  },
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js
var require_toUint8Array = __commonJS({
  'node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === 'string') {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(
          data.buffer,
          data.byteOffset,
          data.byteLength / Uint8Array.BYTES_PER_ELEMENT
        );
      }
      return new Uint8Array(data);
    };
    exports.toUint8Array = toUint8Array;
  },
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js
var require_toUtf8 = __commonJS({
  'node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var toUtf8 = (input) =>
      (0, util_buffer_from_1.fromArrayBuffer)(
        input.buffer,
        input.byteOffset,
        input.byteLength
      ).toString('utf8');
    exports.toUtf8 = toUtf8;
  },
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  'node_modules/@aws-sdk/util-utf8/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports);
    tslib_1.__exportStar(require_toUint8Array(), exports);
    tslib_1.__exportStar(require_toUtf8(), exports);
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.MAX_PRESIGNED_TTL =
      exports.KEY_TYPE_IDENTIFIER =
      exports.MAX_CACHE_SIZE =
      exports.UNSIGNED_PAYLOAD =
      exports.EVENT_ALGORITHM_IDENTIFIER =
      exports.ALGORITHM_IDENTIFIER_V4A =
      exports.ALGORITHM_IDENTIFIER =
      exports.UNSIGNABLE_PATTERNS =
      exports.SEC_HEADER_PATTERN =
      exports.PROXY_HEADER_PATTERN =
      exports.ALWAYS_UNSIGNABLE_HEADERS =
      exports.HOST_HEADER =
      exports.TOKEN_HEADER =
      exports.SHA256_HEADER =
      exports.SIGNATURE_HEADER =
      exports.GENERATED_HEADERS =
      exports.DATE_HEADER =
      exports.AMZ_DATE_HEADER =
      exports.AUTH_HEADER =
      exports.REGION_SET_PARAM =
      exports.TOKEN_QUERY_PARAM =
      exports.SIGNATURE_QUERY_PARAM =
      exports.EXPIRES_QUERY_PARAM =
      exports.SIGNED_HEADERS_QUERY_PARAM =
      exports.AMZ_DATE_QUERY_PARAM =
      exports.CREDENTIAL_QUERY_PARAM =
      exports.ALGORITHM_QUERY_PARAM =
        void 0;
    exports.ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm';
    exports.CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential';
    exports.AMZ_DATE_QUERY_PARAM = 'X-Amz-Date';
    exports.SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders';
    exports.EXPIRES_QUERY_PARAM = 'X-Amz-Expires';
    exports.SIGNATURE_QUERY_PARAM = 'X-Amz-Signature';
    exports.TOKEN_QUERY_PARAM = 'X-Amz-Security-Token';
    exports.REGION_SET_PARAM = 'X-Amz-Region-Set';
    exports.AUTH_HEADER = 'authorization';
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = 'date';
    exports.GENERATED_HEADERS = [
      exports.AUTH_HEADER,
      exports.AMZ_DATE_HEADER,
      exports.DATE_HEADER,
    ];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = 'x-amz-content-sha256';
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = 'host';
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      'cache-control': true,
      connection: true,
      expect: true,
      from: true,
      'keep-alive': true,
      'max-forwards': true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      'x-amzn-trace-id': true,
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256';
    exports.ALGORITHM_IDENTIFIER_V4A = 'AWS4-ECDSA-P256-SHA256';
    exports.EVENT_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256-PAYLOAD';
    exports.UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD';
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = 'aws4_request';
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.clearCredentialCache =
      exports.getSigningKey =
      exports.createScope =
        void 0;
    var util_hex_encoding_1 = require_dist_cjs21();
    var util_utf8_1 = require_dist_cjs24();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) =>
      `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (
      sha256Constructor,
      credentials,
      shortDate,
      region,
      service
    ) => {
      const credsHash = await hmac(
        sha256Constructor,
        credentials.secretAccessKey,
        credentials.accessKeyId
      );
      const cacheKey = `${shortDate}:${region}:${service}:${(0,
      util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [
        shortDate,
        region,
        service,
        constants_1.KEY_TYPE_IDENTIFIER,
      ]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return (signingKeyCache[cacheKey] = key);
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = (
      { headers },
      unsignableHeaders,
      signableHeaders
    ) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (
          canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS ||
          (unsignableHeaders === null || unsignableHeaders === void 0
            ? void 0
            : unsignableHeaders.has(canonicalHeaderName)) ||
          constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
          constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)
        ) {
          if (
            !signableHeaders ||
            (signableHeaders && !signableHeaders.has(canonicalHeaderName))
          ) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName]
          .trim()
          .replace(/\s+/g, ' ');
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  },
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  'node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) =>
      encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  },
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  'node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) =>
      uri.split('/').map(escape_uri_1.escapeUri).join('/');
    exports.escapeUriPath = escapeUriPath;
  },
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  'node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs25();
    var constants_1 = require_constants4();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === 'string') {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0,
          util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value
            .slice(0)
            .sort()
            .reduce(
              (encoded, value2) =>
                encoded.concat([
                  `${(0, util_uri_escape_1.escapeUri)(key)}=${(0,
                  util_uri_escape_1.escapeUri)(value2)}`,
                ]),
              []
            )
            .join('&');
        }
      }
      return keys
        .map((key) => serialized[key])
        .filter((serialized2) => serialized2)
        .join('&');
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs22();
    var util_hex_encoding_1 = require_dist_cjs21();
    var util_utf8_1 = require_dist_cjs24();
    var constants_1 = require_constants4();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
      } else if (
        typeof body === 'string' ||
        ArrayBuffer.isView(body) ||
        (0, is_array_buffer_1.isArrayBuffer)(body)
      ) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0,
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) =>
      Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    exports.cloneQuery = cloneQuery;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } =
        typeof request.clone === 'function'
          ? request.clone()
          : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (
          lname.slice(0, 6) === 'x-amz-' &&
          !((_a = options.unhoistableHeaders) === null || _a === void 0
            ? void 0
            : _a.has(lname))
        ) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query,
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = (request) => {
      request =
        typeof request.clone === 'function'
          ? request.clone()
          : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (
          constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1
        ) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) =>
      (0, exports.toDate)(time)
        .toISOString()
        .replace(/\.\d{3}Z$/, 'Z');
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === 'number') {
        return new Date(time * 1e3);
      }
      if (typeof time === 'string') {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs21();
    var util_middleware_1 = require_dist_cjs6();
    var util_utf8_1 = require_dist_cjs24();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({
        applyChecksum,
        credentials,
        region,
        service,
        sha256,
        uriEscapePath = true,
      }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum =
          typeof applyChecksum === 'boolean' ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(
          credentials
        );
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = /* @__PURE__ */ new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          signingRegion,
          signingService,
        } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region =
          signingRegion !== null && signingRegion !== void 0
            ? signingRegion
            : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject(
            'Signature version 4 presigned URLs must have an expiration date less than one week in the future'
          );
        }
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0
            ? signingService
            : this.service
        );
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)(
          (0, prepareRequest_1.prepareRequest)(originalRequest),
          { unhoistableHeaders }
        );
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] =
            credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] =
          constants_1.ALGORITHM_IDENTIFIER;
        request.query[
          constants_1.CREDENTIAL_QUERY_PARAM
        ] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] =
          getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] =
          await this.getSignature(
            longDate,
            scope,
            this.getSigningKey(credentials, region, shortDate, signingService),
            this.createCanonicalRequest(
              request,
              canonicalHeaders,
              await (0, getPayloadHash_1.getPayloadHash)(
                originalRequest,
                this.sha256
              )
            )
          );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === 'string') {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent(
        { headers, payload },
        {
          signingDate = /* @__PURE__ */ new Date(),
          priorSignature,
          signingRegion,
          signingService,
        }
      ) {
        const region =
          signingRegion !== null && signingRegion !== void 0
            ? signingRegion
            : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0
            ? signingService
            : this.service
        );
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)(
          { headers: {}, body: payload },
          this.sha256
        );
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(
          await hash.digest()
        );
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload,
        ].join('\n');
        return this.signString(stringToSign, {
          signingDate,
          signingRegion: region,
          signingService,
        });
      }
      async signString(
        stringToSign,
        {
          signingDate = /* @__PURE__ */ new Date(),
          signingRegion,
          signingService,
        } = {}
      ) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region =
          signingRegion !== null && signingRegion !== void 0
            ? signingRegion
            : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(
          await this.getSigningKey(
            credentials,
            region,
            shortDate,
            signingService
          )
        );
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(
        requestToSign,
        {
          signingDate = /* @__PURE__ */ new Date(),
          signableHeaders,
          unsignableHeaders,
          signingRegion,
          signingService,
        } = {}
      ) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region =
          signingRegion !== null && signingRegion !== void 0
            ? signingRegion
            : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0
            ? signingService
            : this.service
        );
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(
          request,
          this.sha256
        );
        if (
          !(0, headerUtil_1.hasHeader)(
            constants_1.SHA256_HEADER,
            request.headers
          ) &&
          this.applyChecksum
        ) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[constants_1.AUTH_HEADER] = `${
          constants_1.ALGORITHM_IDENTIFIER
        } Credential=${
          credentials.accessKeyId
        }/${scope}, SignedHeaders=${getCanonicalHeaderList(
          canonicalHeaders
        )}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join('\n')}

${sortedHeaders.join(';')}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split('/')) {
            if (
              (pathSegment === null || pathSegment === void 0
                ? void 0
                : pathSegment.length) === 0
            )
              continue;
            if (pathSegment === '.') continue;
            if (pathSegment === '..') {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${
            (path === null || path === void 0 ? void 0 : path.startsWith('/'))
              ? '/'
              : ''
          }${normalizedPathSegments.join('/')}${
            normalizedPathSegments.length > 0 &&
            (path === null || path === void 0 ? void 0 : path.endsWith('/'))
              ? '/'
              : ''
          }`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, '/');
        }
        return path;
      }
      async getSignature(
        longDate,
        credentialScope,
        keyPromise,
        canonicalRequest
      ) {
        const stringToSign = await this.createStringToSign(
          longDate,
          credentialScope,
          canonicalRequest
        );
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(
          this.sha256,
          credentials,
          shortDate,
          region,
          service || this.service
        );
      }
      validateResolvedCredentials(credentials) {
        if (
          typeof credentials !== 'object' ||
          typeof credentials.accessKeyId !== 'string' ||
          typeof credentials.secretAccessKey !== 'string'
        ) {
          throw new Error('Resolved credential object is not valid');
        }
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, '');
      return {
        longDate,
        shortDate: longDate.slice(0, 8),
      };
    };
    var getCanonicalHeaderList = (headers) =>
      Object.keys(headers).sort().join(';');
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest =
      exports.moveHeadersToQuery =
      exports.getPayloadHash =
      exports.getCanonicalQuery =
      exports.getCanonicalHeaders =
        void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, 'getCanonicalHeaders', {
      enumerable: true,
      get: function () {
        return getCanonicalHeaders_1.getCanonicalHeaders;
      },
    });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, 'getCanonicalQuery', {
      enumerable: true,
      get: function () {
        return getCanonicalQuery_1.getCanonicalQuery;
      },
    });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, 'getPayloadHash', {
      enumerable: true,
      get: function () {
        return getPayloadHash_1.getPayloadHash;
      },
    });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, 'moveHeadersToQuery', {
      enumerable: true,
      get: function () {
        return moveHeadersToQuery_1.moveHeadersToQuery;
      },
    });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, 'prepareRequest', {
      enumerable: true,
      get: function () {
        return prepareRequest_1.prepareRequest;
      },
    });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs20();
    var signature_v4_1 = require_dist_cjs26();
    var util_middleware_1 = require_dist_cjs6();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const {
        signingEscapePath = true,
        systemClockOffset = input.systemClockOffset || 0,
        sha256,
      } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () =>
          (0, util_middleware_1.normalizeProvider)(input.region)()
            .then(async (region) => [
              (await input.regionInfoProvider(region, {
                useFipsEndpoint: await input.useFipsEndpoint(),
                useDualstackEndpoint: await input.useDualstackEndpoint(),
              })) || {},
              region,
            ])
            .then(([regionInfo, region]) => {
              const { signingRegion, signingService } = regionInfo;
              input.signingRegion =
                input.signingRegion || signingRegion || region;
              input.signingName =
                input.signingName || signingService || input.serviceId;
              const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
              };
              const SignerCtor =
                input.signerConstructor || signature_v4_1.SignatureV4;
              return new SignerCtor(params);
            });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign(
            {},
            {
              name: 'sigv4',
              signingName: input.signingName || input.defaultSigningName,
              signingRegion: await (0, util_middleware_1.normalizeProvider)(
                input.region
              )(),
              properties: {},
            },
            authScheme
          );
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName =
            input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
          };
          const SignerCtor =
            input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const {
        signingEscapePath = true,
        systemClockOffset = input.systemClockOffset || 0,
        sha256,
      } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(
          new signature_v4_1.SignatureV4({
            credentials: normalizedCreds,
            region: input.region,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
          })
        );
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === 'function') {
        return (0, property_provider_1.memoize)(
          credentials,
          (credentials2) =>
            credentials2.expiration !== void 0 &&
            credentials2.expiration.getTime() - Date.now() <
              CREDENTIAL_EXPIRE_WINDOW,
          (credentials2) => credentials2.expiration !== void 0
        );
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) =>
      new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) =>
      Math.abs(
        (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(
          systemClockOffset
        ).getTime() - clockTime
      ) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (
        (0, isClockSkewed_1.isClockSkewed)(
          clockTimeInMs,
          currentSystemClockOffset
        )
      ) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSigV4AuthPlugin =
      exports.getAwsAuthPlugin =
      exports.awsAuthMiddlewareOptions =
      exports.awsAuthMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) =>
      async function (args) {
        var _a, _b, _c, _d;
        if (!protocol_http_1.HttpRequest.isInstance(args.request))
          return next(args);
        const authScheme =
          (_c =
            (_b =
              (_a = context.endpointV2) === null || _a === void 0
                ? void 0
                : _a.properties) === null || _b === void 0
              ? void 0
              : _b.authSchemes) === null || _c === void 0
            ? void 0
            : _c[0];
        const multiRegionOverride =
          (authScheme === null || authScheme === void 0
            ? void 0
            : authScheme.name) === 'sigv4a'
            ? (_d =
                authScheme === null || authScheme === void 0
                  ? void 0
                  : authScheme.signingRegionSet) === null || _d === void 0
              ? void 0
              : _d.join(',')
            : void 0;
        const signer = await options.signer(authScheme);
        const output = await next({
          ...args,
          request: await signer.sign(args.request, {
            signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(
              options.systemClockOffset
            ),
            signingRegion: multiRegionOverride || context['signing_region'],
            signingService: context['signing_service'],
          }),
        }).catch((error) => {
          var _a2;
          const serverTime =
            (_a2 = error.ServerTime) !== null && _a2 !== void 0
              ? _a2
              : getDateHeader(error.$response);
          if (serverTime) {
            options.systemClockOffset = (0,
            getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
              serverTime,
              options.systemClockOffset
            );
          }
          throw error;
        });
        const dateHeader = getDateHeader(output.response);
        if (dateHeader) {
          options.systemClockOffset = (0,
          getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
            dateHeader,
            options.systemClockOffset
          );
        }
        return output;
      };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response)
        ? (_b =
            (_a = response.headers) === null || _a === void 0
              ? void 0
              : _a.date) !== null && _b !== void 0
          ? _b
          : (_c = response.headers) === null || _c === void 0
          ? void 0
          : _c.Date
        : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: 'awsAuthMiddleware',
      tags: ['SIGNATURE', 'AWSAUTH'],
      relation: 'after',
      toMiddleware: 'retryMiddleware',
      override: true,
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          (0, exports.awsAuthMiddleware)(options),
          exports.awsAuthMiddlewareOptions
        );
      },
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations4 = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent:
          typeof input.customUserAgent === 'string'
            ? [[input.customUserAgent]]
            : input.customUserAgent,
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json'(
    exports,
    module2
  ) {
    module2.exports = {
      partitions: [
        {
          id: 'aws',
          outputs: {
            dnsSuffix: 'amazonaws.com',
            dualStackDnsSuffix: 'api.aws',
            name: 'aws',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$',
          regions: {
            'af-south-1': {
              description: 'Africa (Cape Town)',
            },
            'ap-east-1': {
              description: 'Asia Pacific (Hong Kong)',
            },
            'ap-northeast-1': {
              description: 'Asia Pacific (Tokyo)',
            },
            'ap-northeast-2': {
              description: 'Asia Pacific (Seoul)',
            },
            'ap-northeast-3': {
              description: 'Asia Pacific (Osaka)',
            },
            'ap-south-1': {
              description: 'Asia Pacific (Mumbai)',
            },
            'ap-south-2': {
              description: 'Asia Pacific (Hyderabad)',
            },
            'ap-southeast-1': {
              description: 'Asia Pacific (Singapore)',
            },
            'ap-southeast-2': {
              description: 'Asia Pacific (Sydney)',
            },
            'ap-southeast-3': {
              description: 'Asia Pacific (Jakarta)',
            },
            'ap-southeast-4': {
              description: 'Asia Pacific (Melbourne)',
            },
            'aws-global': {
              description: 'AWS Standard global region',
            },
            'ca-central-1': {
              description: 'Canada (Central)',
            },
            'eu-central-1': {
              description: 'Europe (Frankfurt)',
            },
            'eu-central-2': {
              description: 'Europe (Zurich)',
            },
            'eu-north-1': {
              description: 'Europe (Stockholm)',
            },
            'eu-south-1': {
              description: 'Europe (Milan)',
            },
            'eu-south-2': {
              description: 'Europe (Spain)',
            },
            'eu-west-1': {
              description: 'Europe (Ireland)',
            },
            'eu-west-2': {
              description: 'Europe (London)',
            },
            'eu-west-3': {
              description: 'Europe (Paris)',
            },
            'me-central-1': {
              description: 'Middle East (UAE)',
            },
            'me-south-1': {
              description: 'Middle East (Bahrain)',
            },
            'sa-east-1': {
              description: 'South America (Sao Paulo)',
            },
            'us-east-1': {
              description: 'US East (N. Virginia)',
            },
            'us-east-2': {
              description: 'US East (Ohio)',
            },
            'us-west-1': {
              description: 'US West (N. California)',
            },
            'us-west-2': {
              description: 'US West (Oregon)',
            },
          },
        },
        {
          id: 'aws-cn',
          outputs: {
            dnsSuffix: 'amazonaws.com.cn',
            dualStackDnsSuffix: 'api.amazonwebservices.com.cn',
            name: 'aws-cn',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^cn\\-\\w+\\-\\d+$',
          regions: {
            'aws-cn-global': {
              description: 'AWS China global region',
            },
            'cn-north-1': {
              description: 'China (Beijing)',
            },
            'cn-northwest-1': {
              description: 'China (Ningxia)',
            },
          },
        },
        {
          id: 'aws-us-gov',
          outputs: {
            dnsSuffix: 'amazonaws.com',
            dualStackDnsSuffix: 'api.aws',
            name: 'aws-us-gov',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-gov\\-\\w+\\-\\d+$',
          regions: {
            'aws-us-gov-global': {
              description: 'AWS GovCloud (US) global region',
            },
            'us-gov-east-1': {
              description: 'AWS GovCloud (US-East)',
            },
            'us-gov-west-1': {
              description: 'AWS GovCloud (US-West)',
            },
          },
        },
        {
          id: 'aws-iso',
          outputs: {
            dnsSuffix: 'c2s.ic.gov',
            dualStackDnsSuffix: 'c2s.ic.gov',
            name: 'aws-iso',
            supportsDualStack: false,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-iso\\-\\w+\\-\\d+$',
          regions: {
            'aws-iso-global': {
              description: 'AWS ISO (US) global region',
            },
            'us-iso-east-1': {
              description: 'US ISO East',
            },
            'us-iso-west-1': {
              description: 'US ISO WEST',
            },
          },
        },
        {
          id: 'aws-iso-b',
          outputs: {
            dnsSuffix: 'sc2s.sgov.gov',
            dualStackDnsSuffix: 'sc2s.sgov.gov',
            name: 'aws-iso-b',
            supportsDualStack: false,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-isob\\-\\w+\\-\\d+$',
          regions: {
            'aws-iso-b-global': {
              description: 'AWS ISOB (US) global region',
            },
            'us-isob-east-1': {
              description: 'US ISOB East (Ohio)',
            },
          },
        },
      ],
      version: '1.1',
    };
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUserAgentPrefix =
      exports.useDefaultPartitionInfo =
      exports.setPartitionInfo =
      exports.partition =
        void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var selectedPartitionsInfo = partitions_json_1.default;
    var selectedUserAgentPrefix = '';
    var partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData,
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs,
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find(
        (partition2) => partition2.id === 'aws'
      );
      if (!DEFAULT_PARTITION) {
        throw new Error(
          "Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist."
        );
      }
      return {
        ...DEFAULT_PARTITION.outputs,
      };
    };
    exports.partition = partition;
    var setPartitionInfo = (partitionsInfo, userAgentPrefix = '') => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    };
    exports.setPartitionInfo = setPartitionInfo;
    var useDefaultPartitionInfo = () => {
      (0, exports.setPartitionInfo)(partitions_json_1.default, '');
    };
    exports.useDefaultPartitionInfo = useDefaultPartitionInfo;
    var getUserAgentPrefix = () => selectedUserAgentPrefix;
    exports.getUserAgentPrefix = getUserAgentPrefix;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.debugId = void 0;
    exports.debugId = 'endpoints';
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== 'object' || input == null) {
        return input;
      }
      if ('ref' in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ('fn' in input) {
        return `${input.fn}(${(input.argv || [])
          .map(toDebugString)
          .join(', ')})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports.toDebugString = toDebugString;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports);
    tslib_1.__exportStar(require_toDebugString(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = 'EndpointError';
      }
    };
    exports.EndpointError = EndpointError;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types3 = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports);
    tslib_1.__exportStar(require_EndpointRuleObject(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports);
    tslib_1.__exportStar(require_RuleSetObject(), exports);
    tslib_1.__exportStar(require_TreeRuleObject(), exports);
    tslib_1.__exportStar(require_shared(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(
      `^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`
    );
    var isIpAddress = (value) =>
      IP_V4_REGEX.test(value) || (value.startsWith('[') && value.endsWith(']'));
    exports.isIpAddress = isIpAddress;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(
      `^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`
    );
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split('.');
      for (const label of labels) {
        if (!(0, exports.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports.isValidHostLabel = isValidHostLabel;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split('.')) {
          if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(':');
      if (segments.length < 6) return null;
      const [arn, partition, service, region, accountId, ...resourceId] =
        segments;
      if (
        arn !== 'arn' ||
        partition === '' ||
        service === '' ||
        resourceId[0] === ''
      )
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes('/')
          ? resourceId[0].split('/')
          : resourceId,
      };
    };
    exports.parseArn = parseArn;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports);
    tslib_1.__exportStar(require_parseArn(), exports);
    tslib_1.__exportStar(require_partition(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports.booleanEquals = booleanEquals;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getAttrPathList = void 0;
    var types_1 = require_types3();
    var getAttrPathList = (path) => {
      const parts = path.split('.');
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf('[');
        if (squareBracketIndex !== -1) {
          if (part.indexOf(']') !== part.length - 1) {
            throw new types_1.EndpointError(
              `Path: '${path}' does not end with ']'`
            );
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(
              `Invalid array index: '${arrayIndex}' in path: '${path}'`
            );
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports.getAttrPathList = getAttrPathList;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getAttr = void 0;
    var types_1 = require_types3();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) =>
      (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
        if (typeof acc !== 'object') {
          throw new types_1.EndpointError(
            `Index '${index}' in '${path}' not found in '${JSON.stringify(
              value
            )}'`
          );
        } else if (Array.isArray(acc)) {
          return acc[parseInt(index)];
        }
        return acc[index];
      }, value);
    exports.getAttr = getAttr;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isSet = void 0;
    var isSet = (value) => value != null;
    exports.isSet = isSet;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.not = void 0;
    var not = (value) => !value;
    exports.not = not;
  },
});

// node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/abort.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/auth.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function (HttpAuthLocation2) {
      HttpAuthLocation2['HEADER'] = 'header';
      HttpAuthLocation2['QUERY'] = 'query';
    })(
      (HttpAuthLocation =
        exports.HttpAuthLocation || (exports.HttpAuthLocation = {}))
    );
  },
});

// node_modules/@aws-sdk/types/dist-cjs/checksum.js
var require_checksum = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/checksum.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client2 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/client.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command2 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/command.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/connection/config.js
var require_config3 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/connection/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/connection/manager.js
var require_manager = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/connection/manager.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/connection/pool.js
var require_pool = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/connection/pool.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/connection/index.js
var require_connection = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/connection/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config3(), exports);
    tslib_1.__exportStar(require_manager(), exports);
    tslib_1.__exportStar(require_pool(), exports);
  },
});

// node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/credentials.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/crypto.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/dns.js
var require_dns = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/dns.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HostAddressType = void 0;
    var HostAddressType;
    (function (HostAddressType2) {
      HostAddressType2['AAAA'] = 'AAAA';
      HostAddressType2['A'] = 'A';
    })(
      (HostAddressType =
        exports.HostAddressType || (exports.HostAddressType = {}))
    );
  },
});

// node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/endpoint.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function (EndpointURLScheme2) {
      EndpointURLScheme2['HTTP'] = 'http';
      EndpointURLScheme2['HTTPS'] = 'https';
    })(
      (EndpointURLScheme =
        exports.EndpointURLScheme || (exports.EndpointURLScheme = {}))
    );
  },
});

// node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/eventStream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/http.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js
var require_AnonymousIdentity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js
var require_AwsCredentialIdentity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js
var require_Identity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js
var require_LoginIdentity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js
var require_TokenIdentity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/index.js
var require_identity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_Identity(), exports);
    tslib_1.__exportStar(require_LoginIdentity(), exports);
    tslib_1.__exportStar(require_TokenIdentity(), exports);
  },
});

// node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/logger.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/middleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/pagination.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/profile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/request.js
var require_request = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/request.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/response.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/retry.js
var require_retry = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/retry.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/serde.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/shapes.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/signature.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/stream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/token.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/transfer.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RequestHandlerProtocol = void 0;
    var RequestHandlerProtocol;
    (function (RequestHandlerProtocol2) {
      RequestHandlerProtocol2['HTTP_0_9'] = 'http/0.9';
      RequestHandlerProtocol2['HTTP_1_0'] = 'http/1.0';
      RequestHandlerProtocol2['TDS_8_0'] = 'tds/8.0';
    })(
      (RequestHandlerProtocol =
        exports.RequestHandlerProtocol || (exports.RequestHandlerProtocol = {}))
    );
  },
});

// node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util2 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/util.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/waiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports);
    tslib_1.__exportStar(require_auth(), exports);
    tslib_1.__exportStar(require_checksum(), exports);
    tslib_1.__exportStar(require_client2(), exports);
    tslib_1.__exportStar(require_command2(), exports);
    tslib_1.__exportStar(require_connection(), exports);
    tslib_1.__exportStar(require_credentials(), exports);
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_dns(), exports);
    tslib_1.__exportStar(require_endpoint(), exports);
    tslib_1.__exportStar(require_eventStream(), exports);
    tslib_1.__exportStar(require_http(), exports);
    tslib_1.__exportStar(require_identity(), exports);
    tslib_1.__exportStar(require_logger(), exports);
    tslib_1.__exportStar(require_middleware2(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    tslib_1.__exportStar(require_profile(), exports);
    tslib_1.__exportStar(require_request(), exports);
    tslib_1.__exportStar(require_response(), exports);
    tslib_1.__exportStar(require_retry(), exports);
    tslib_1.__exportStar(require_serde(), exports);
    tslib_1.__exportStar(require_shapes(), exports);
    tslib_1.__exportStar(require_signature(), exports);
    tslib_1.__exportStar(require_stream(), exports);
    tslib_1.__exportStar(require_token(), exports);
    tslib_1.__exportStar(require_transfer(), exports);
    tslib_1.__exportStar(require_util2(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseURL = void 0;
    var types_1 = require_dist_cjs28();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443,
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === 'object' && 'hostname' in value) {
            const {
              hostname: hostname2,
              port,
              protocol: protocol2 = '',
              path = '',
              query = {},
            } = value;
            const url2 = new URL(
              `${protocol2}//${hostname2}${port ? `:${port}` : ''}${path}`
            );
            url2.search = Object.entries(query)
              .map(([k, v]) => `${k}=${v}`)
              .join('&');
            return url2;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(
          `Unable to parse ${JSON.stringify(value)} as a whatwg URL.`
        );
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort =
        urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||
        (typeof value === 'string' &&
          value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));
      const authority = `${host}${
        inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``
      }`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith('/') ? pathname : `${pathname}/`,
        isIp,
      };
    };
    exports.parseURL = parseURL;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports.stringEquals = stringEquals;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports.substring = substring;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.uriEncode = void 0;
    var uriEncode = (value) =>
      encodeURIComponent(value).replace(
        /[!*'()]/g,
        (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`
      );
    exports.uriEncode = uriEncode;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports);
    tslib_1.__exportStar(require_getAttr(), exports);
    tslib_1.__exportStar(require_isSet(), exports);
    tslib_1.__exportStar(require_isValidHostLabel(), exports);
    tslib_1.__exportStar(require_not(), exports);
    tslib_1.__exportStar(require_parseURL(), exports);
    tslib_1.__exportStar(require_stringEquals(), exports);
    tslib_1.__exportStar(require_substring(), exports);
    tslib_1.__exportStar(require_uriEncode(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord,
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf('{', currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(
          template.slice(currentIndex, openingBraceIndex)
        );
        const closingBraceIndex = template.indexOf('}', openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (
          template[openingBraceIndex + 1] === '{' &&
          template[closingBraceIndex + 1] === '}'
        ) {
          evaluatedTemplateArr.push(
            template.slice(openingBraceIndex + 1, closingBraceIndex)
          );
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(
          openingBraceIndex + 1,
          closingBraceIndex
        );
        if (parameterName.includes('#')) {
          const [refName, attrName] = parameterName.split('#');
          evaluatedTemplateArr.push(
            (0, lib_1.getAttr)(templateContext[refName], attrName)
          );
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join('');
    };
    exports.evaluateTemplate = evaluateTemplate;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord,
      };
      return referenceRecord[ref];
    };
    exports.getReferenceValue = getReferenceValue;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateExpression = void 0;
    var types_1 = require_types3();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === 'string') {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj['fn']) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj['ref']) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(
        `'${keyName}': ${String(obj)} is not a string, function or reference.`
      );
    };
    exports.evaluateExpression = evaluateExpression;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) =>
        ['boolean', 'number'].includes(typeof arg)
          ? arg
          : (0, evaluateExpression_1.evaluateExpression)(arg, 'arg', options)
      );
      return fn.split('.').reduce((acc, key) => acc[key], lib)(
        ...evaluatedArgs
      );
    };
    exports.callFunction = callFunction;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types3();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(
          `'${assign}' is already defined in Reference Record.`
        );
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b =
        (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) ===
        null || _b === void 0
        ? void 0
        : _b.call(
            _a,
            debug_1.debugId,
            `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0,
            debug_1.toDebugString)(value)}`
          );
      return {
        result: value === '' ? true : !!value,
        ...(assign != null && { toAssign: { name: assign, value } }),
      };
    };
    exports.evaluateCondition = evaluateCondition;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(
          condition,
          {
            ...options,
            referenceRecord: {
              ...options.referenceRecord,
              ...conditionsReferenceRecord,
            },
          }
        );
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b =
            (_a = options.logger) === null || _a === void 0
              ? void 0
              : _a.debug) === null || _b === void 0
            ? void 0
            : _b.call(
                _a,
                debug_1.debugId,
                `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(
                  toAssign.value
                )}`
              );
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports.evaluateConditions = evaluateConditions;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointHeaders = void 0;
    var types_1 = require_types3();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) =>
      Object.entries(headers).reduce(
        (acc, [headerKey, headerVal]) => ({
          ...acc,
          [headerKey]: headerVal.map((headerValEntry) => {
            const processedExpr = (0, evaluateExpression_1.evaluateExpression)(
              headerValEntry,
              'Header value entry',
              options
            );
            if (typeof processedExpr !== 'string') {
              throw new types_1.EndpointError(
                `Header '${headerKey}' value '${processedExpr}' is not a string`
              );
            }
            return processedExpr;
          }),
        }),
        {}
      );
    exports.getEndpointHeaders = getEndpointHeaders;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointProperty = void 0;
    var types_1 = require_types3();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) =>
          (0, exports.getEndpointProperty)(propertyEntry, options)
        );
      }
      switch (typeof property) {
        case 'string':
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case 'object':
          if (property === null) {
            throw new types_1.EndpointError(
              `Unexpected endpoint property: ${property}`
            );
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(
            property,
            options
          );
        case 'boolean':
          return property;
        default:
          throw new types_1.EndpointError(
            `Unexpected endpoint property type: ${typeof property}`
          );
      }
    };
    exports.getEndpointProperty = getEndpointProperty;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) =>
      Object.entries(properties).reduce(
        (acc, [propertyKey, propertyVal]) => ({
          ...acc,
          [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(
            propertyVal,
            options
          ),
        }),
        {}
      );
    exports.getEndpointProperties = getEndpointProperties;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointUrl = void 0;
    var types_1 = require_types3();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(
        endpointUrl,
        'Endpoint URL',
        options
      );
      if (typeof expression === 'string') {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(
        `Endpoint URL must be a string, got ${typeof expression}`
      );
    };
    exports.getEndpointUrl = getEndpointUrl;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0,
      evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
      };
      const { url: url2, properties, headers } = endpoint;
      (_b =
        (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) ===
        null || _b === void 0
        ? void 0
        : _b.call(
            _a,
            debug_1.debugId,
            `Resolving endpoint from template: ${(0, debug_1.toDebugString)(
              endpoint
            )}`
          );
      return {
        ...(headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(
            headers,
            endpointRuleOptions
          ),
        }),
        ...(properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(
            properties,
            endpointRuleOptions
          ),
        }),
        url: (0, getEndpointUrl_1.getEndpointUrl)(url2, endpointRuleOptions),
      };
    };
    exports.evaluateEndpointRule = evaluateEndpointRule;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateErrorRule = void 0;
    var types_1 = require_types3();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0,
      evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError(
        (0, evaluateExpression_1.evaluateExpression)(error, 'Error', {
          ...options,
          referenceRecord: { ...options.referenceRecord, ...referenceRecord },
        })
      );
    };
    exports.evaluateErrorRule = evaluateErrorRule;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0,
      evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
      });
    };
    exports.evaluateTreeRule = evaluateTreeRule;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateRules = void 0;
    var types_1 = require_types3();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === 'endpoint') {
          const endpointOrUndefined = (0,
          evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === 'error') {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === 'tree') {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(
            rule,
            options
          );
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports.evaluateRules = evaluateRules;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types3();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b =
        (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) ===
        null || _b === void 0
        ? void 0
        : _b.call(
            _a,
            debug_1.debugId,
            `Initial EndpointParams: ${(0, debug_1.toDebugString)(
              endpointParams
            )}`
          );
      const paramsWithDefault = Object.entries(parameters)
        .filter(([, v]) => v.default != null)
        .map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] =
            (_c = endpointParams[paramKey]) !== null && _c !== void 0
              ? _c
              : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters)
        .filter(([, v]) => v.required)
        .map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(
            `Missing required parameter: '${requiredParam}'`
          );
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, {
        endpointParams,
        logger,
        referenceRecord: {},
      });
      if (
        (_d = options.endpointParams) === null || _d === void 0
          ? void 0
          : _d.Endpoint
      ) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {}
      }
      (_f =
        (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) ===
        null || _f === void 0
        ? void 0
        : _f.call(
            _e,
            debug_1.debugId,
            `Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`
          );
      return endpoint;
    };
    exports.resolveEndpoint = resolveEndpoint;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports);
    tslib_1.__exportStar(require_resolveEndpoint(), exports);
    tslib_1.__exportStar(require_types3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UA_ESCAPE_REGEX =
      exports.SPACE =
      exports.X_AMZ_USER_AGENT =
      exports.USER_AGENT =
        void 0;
    exports.USER_AGENT = 'user-agent';
    exports.X_AMZ_USER_AGENT = 'x-amz-user-agent';
    exports.SPACE = ' ';
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUserAgentPlugin =
      exports.getUserAgentMiddlewareOptions =
      exports.userAgentMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var util_endpoints_1 = require_dist_cjs29();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request)) return next(args);
      const { headers } = request;
      const userAgent =
        ((_a =
          context === null || context === void 0
            ? void 0
            : context.userAgent) === null || _a === void 0
          ? void 0
          : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(
        escapeUserAgent
      );
      const customUserAgent =
        ((_b =
          options === null || options === void 0
            ? void 0
            : options.customUserAgent) === null || _b === void 0
          ? void 0
          : _b.map(escapeUserAgent)) || [];
      const prefix = (0, util_endpoints_1.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : [])
        .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])
        .join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith('aws-sdk-')),
        ...customUserAgent,
      ].join(constants_1.SPACE);
      if (options.runtime !== 'browser') {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[
            constants_1.X_AMZ_USER_AGENT
          ]
            ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}`
            : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request,
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version2]) => {
      const prefixSeparatorIndex = name.indexOf('/');
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === 'api') {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2]
        .filter((item) => item && item.length > 0)
        .map((item) =>
          item === null || item === void 0
            ? void 0
            : item.replace(constants_1.UA_ESCAPE_REGEX, '_')
        )
        .join('/');
    };
    exports.getUserAgentMiddlewareOptions = {
      name: 'getUserAgentMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['SET_USER_AGENT', 'USER_AGENT'],
      override: true,
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.userAgentMiddleware)(config),
          exports.getUserAgentMiddlewareOptions
        );
      },
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations4(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/EndpointParameters.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: 'dynamodb',
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  },
});

// node_modules/@aws-sdk/client-dynamodb/package.json
var require_package = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-dynamodb',
      description:
        'AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native',
      version: '3.326.0',
      scripts: {
        build:
          "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps':
          'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client':
          'node ../../scripts/generate-clients/single-service --solo dynamodb',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '3.0.0',
        '@aws-crypto/sha256-js': '3.0.0',
        '@aws-sdk/client-sts': '3.326.0',
        '@aws-sdk/config-resolver': '3.310.0',
        '@aws-sdk/credential-provider-node': '3.326.0',
        '@aws-sdk/fetch-http-handler': '3.310.0',
        '@aws-sdk/hash-node': '3.310.0',
        '@aws-sdk/invalid-dependency': '3.310.0',
        '@aws-sdk/middleware-content-length': '3.325.0',
        '@aws-sdk/middleware-endpoint': '3.325.0',
        '@aws-sdk/middleware-endpoint-discovery': '3.326.0',
        '@aws-sdk/middleware-host-header': '3.325.0',
        '@aws-sdk/middleware-logger': '3.325.0',
        '@aws-sdk/middleware-recursion-detection': '3.325.0',
        '@aws-sdk/middleware-retry': '3.325.0',
        '@aws-sdk/middleware-serde': '3.325.0',
        '@aws-sdk/middleware-signing': '3.325.0',
        '@aws-sdk/middleware-stack': '3.325.0',
        '@aws-sdk/middleware-user-agent': '3.325.0',
        '@aws-sdk/node-config-provider': '3.310.0',
        '@aws-sdk/node-http-handler': '3.321.1',
        '@aws-sdk/protocol-http': '3.310.0',
        '@aws-sdk/smithy-client': '3.325.0',
        '@aws-sdk/types': '3.310.0',
        '@aws-sdk/url-parser': '3.310.0',
        '@aws-sdk/util-base64': '3.310.0',
        '@aws-sdk/util-body-length-browser': '3.310.0',
        '@aws-sdk/util-body-length-node': '3.310.0',
        '@aws-sdk/util-defaults-mode-browser': '3.325.0',
        '@aws-sdk/util-defaults-mode-node': '3.325.0',
        '@aws-sdk/util-endpoints': '3.319.0',
        '@aws-sdk/util-retry': '3.310.0',
        '@aws-sdk/util-user-agent-browser': '3.310.0',
        '@aws-sdk/util-user-agent-node': '3.310.0',
        '@aws-sdk/util-utf8': '3.310.0',
        '@aws-sdk/util-waiter': '3.310.0',
        tslib: '^2.5.0',
        uuid: '^8.3.2',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.310.0',
        '@tsconfig/node14': '1.0.3',
        '@types/node': '^14.14.31',
        '@types/uuid': '^8.3.0',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typedoc: '0.23.23',
        typescript: '~4.9.5',
      },
      engines: {
        node: '>=14.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage:
        'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-dynamodb',
      },
    };
  },
});

// node_modules/fast-xml-parser/src/util.js
var require_util3 = __commonJS({
  'node_modules/fast-xml-parser/src/util.js'(exports) {
    'use strict';
    var nameStartChar =
      ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    var nameChar =
      nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';
    var regexName = new RegExp('^' + nameRegexp + '$');
    var getAllMatches = function (string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function (string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === 'undefined');
    };
    exports.isExist = function (v) {
      return typeof v !== 'undefined';
    };
    exports.isEmptyObject = function (obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function (target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === 'strict') {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function (v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return '';
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  },
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  'node_modules/fast-xml-parser/src/validator.js'(exports) {
    'use strict';
    var util2 = require_util3();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: [],
    };
    exports.validate = function (xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === '\uFEFF') {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === '<' && xmlData[i + 1] === '?') {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err) return i;
        } else if (xmlData[i] === '<') {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === '!') {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === '/') {
              closingTag = true;
              i++;
            }
            let tagName = '';
            for (
              ;
              i < xmlData.length &&
              xmlData[i] !== '>' &&
              xmlData[i] !== ' ' &&
              xmlData[i] !== '	' &&
              xmlData[i] !== '\n' &&
              xmlData[i] !== '\r';
              i++
            ) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === '/') {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject(
                'InvalidTag',
                msg,
                getLineNumberForPosition(xmlData, i)
              );
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject(
                'InvalidAttr',
                "Attributes for '" + tagName + "' have open quote.",
                getLineNumberForPosition(xmlData, i)
              );
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === '/') {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(
                  isValid.err.code,
                  isValid.err.msg,
                  getLineNumberForPosition(
                    xmlData,
                    attrStrStart + isValid.err.line
                  )
                );
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject(
                  'InvalidTag',
                  "Closing tag '" + tagName + "' doesn't have proper closing.",
                  getLineNumberForPosition(xmlData, i)
                );
              } else if (attrStr.trim().length > 0) {
                return getErrorObject(
                  'InvalidTag',
                  "Closing tag '" +
                    tagName +
                    "' can't have attributes or invalid starting.",
                  getLineNumberForPosition(xmlData, tagStartPos)
                );
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(
                    xmlData,
                    otg.tagStartPos
                  );
                  return getErrorObject(
                    'InvalidTag',
                    "Expected closing tag '" +
                      otg.tagName +
                      "' (opened in line " +
                      openPos.line +
                      ', col ' +
                      openPos.col +
                      ") instead of closing tag '" +
                      tagName +
                      "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(
                  isValid.err.code,
                  isValid.err.msg,
                  getLineNumberForPosition(
                    xmlData,
                    i - attrStr.length + isValid.err.line
                  )
                );
              }
              if (reachedRoot === true) {
                return getErrorObject(
                  'InvalidXml',
                  'Multiple possible root nodes found.',
                  getLineNumberForPosition(xmlData, i)
                );
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === '<') {
                if (xmlData[i + 1] === '!') {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === '?') {
                  i = readPI(xmlData, ++i);
                  if (i.err) return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === '&') {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject(
                    'InvalidChar',
                    "char '&' is not expected.",
                    getLineNumberForPosition(xmlData, i)
                  );
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject(
                    'InvalidXml',
                    'Extra text at the end',
                    getLineNumberForPosition(xmlData, i)
                  );
                }
              }
            }
            if (xmlData[i] === '<') {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject(
            'InvalidChar',
            "char '" + xmlData[i] + "' is not expected.",
            getLineNumberForPosition(xmlData, i)
          );
        }
      }
      if (!tagFound) {
        return getErrorObject('InvalidXml', 'Start tag expected.', 1);
      } else if (tags.length == 1) {
        return getErrorObject(
          'InvalidTag',
          "Unclosed tag '" + tags[0].tagName + "'.",
          getLineNumberForPosition(xmlData, tags[0].tagStartPos)
        );
      } else if (tags.length > 0) {
        return getErrorObject(
          'InvalidXml',
          "Invalid '" +
            JSON.stringify(
              tags.map((t) => t.tagName),
              null,
              4
            ).replace(/\r?\n/g, '') +
            "' found.",
          { line: 1, col: 1 }
        );
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === ' ' || char === '	' || char === '\n' || char === '\r';
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == '?' || xmlData[i] == ' ') {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === 'xml') {
            return getErrorObject(
              'InvalidXml',
              'XML declaration allowed only at the start of the document.',
              getLineNumberForPosition(xmlData, i)
            );
          } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (
        xmlData.length > i + 5 &&
        xmlData[i + 1] === '-' &&
        xmlData[i + 2] === '-'
      ) {
        for (i += 3; i < xmlData.length; i++) {
          if (
            xmlData[i] === '-' &&
            xmlData[i + 1] === '-' &&
            xmlData[i + 2] === '>'
          ) {
            i += 2;
            break;
          }
        }
      } else if (
        xmlData.length > i + 8 &&
        xmlData[i + 1] === 'D' &&
        xmlData[i + 2] === 'O' &&
        xmlData[i + 3] === 'C' &&
        xmlData[i + 4] === 'T' &&
        xmlData[i + 5] === 'Y' &&
        xmlData[i + 6] === 'P' &&
        xmlData[i + 7] === 'E'
      ) {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === '<') {
            angleBracketsCount++;
          } else if (xmlData[i] === '>') {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (
        xmlData.length > i + 9 &&
        xmlData[i + 1] === '[' &&
        xmlData[i + 2] === 'C' &&
        xmlData[i + 3] === 'D' &&
        xmlData[i + 4] === 'A' &&
        xmlData[i + 5] === 'T' &&
        xmlData[i + 6] === 'A' &&
        xmlData[i + 7] === '['
      ) {
        for (i += 8; i < xmlData.length; i++) {
          if (
            xmlData[i] === ']' &&
            xmlData[i + 1] === ']' &&
            xmlData[i + 2] === '>'
          ) {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = '';
      let startChar = '';
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === '') {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = '';
          }
        } else if (xmlData[i] === '>') {
          if (startChar === '') {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== '') {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed,
      };
    }
    var validAttrStrRegxp = new RegExp(
      `(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`,
      'g'
    );
    function validateAttributeString(attrStr, options) {
      const matches = util2.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + matches[i][2] + "' has no space in starting.",
            getPositionFromMatch(matches[i])
          );
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + matches[i][2] + "' is without value.",
            getPositionFromMatch(matches[i])
          );
        } else if (
          matches[i][3] === void 0 &&
          !options.allowBooleanAttributes
        ) {
          return getErrorObject(
            'InvalidAttr',
            "boolean attribute '" + matches[i][2] + "' is not allowed.",
            getPositionFromMatch(matches[i])
          );
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + attrName + "' is an invalid name.",
            getPositionFromMatch(matches[i])
          );
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + attrName + "' is repeated.",
            getPositionFromMatch(matches[i])
          );
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === 'x') {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ';') return i;
        if (!xmlData[i].match(re)) break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ';') return -1;
      if (xmlData[i] === '#') {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20) continue;
        if (xmlData[i] === ';') break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col,
        },
      };
    }
    function validateAttrName(attrName) {
      return util2.isName(attrName);
    }
    function validateTagName(tagname) {
      return util2.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1,
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  },
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js'(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: '@_',
      attributesGroupName: false,
      textNodeName: '#text',
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true,
      },
      tagValueProcessor: function (tagName, val) {
        return val;
      },
      attributeValueProcessor: function (attrName, val) {
        return val;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
    };
    var buildOptions = function (options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/xmlNode.js'(exports, module2) {
    'use strict';
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[':@'] = {};
      }
      add(key, val) {
        if (key === '__proto__') key = '#__proto__';
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node.tagname === '__proto__') node.tagname = '#__proto__';
        if (node[':@'] && Object.keys(node[':@']).length > 0) {
          this.child.push({ [node.tagname]: node.child, [':@']: node[':@'] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js'(
    exports,
    module2
  ) {
    function readDocType(xmlData, i) {
      const entities = {};
      if (
        xmlData[i + 3] === 'O' &&
        xmlData[i + 4] === 'C' &&
        xmlData[i + 5] === 'T' &&
        xmlData[i + 6] === 'Y' &&
        xmlData[i + 7] === 'P' &&
        xmlData[i + 8] === 'E'
      ) {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false,
          entity = false,
          comment = false;
        let exp = '';
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === '<' && !comment) {
            if (
              hasBody &&
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === 'E' &&
              xmlData[i + 3] === 'N' &&
              xmlData[i + 4] === 'T' &&
              xmlData[i + 5] === 'I' &&
              xmlData[i + 6] === 'T' &&
              xmlData[i + 7] === 'Y'
            ) {
              i += 7;
              entity = true;
            } else if (
              hasBody &&
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === 'E' &&
              xmlData[i + 3] === 'L' &&
              xmlData[i + 4] === 'E' &&
              xmlData[i + 5] === 'M' &&
              xmlData[i + 6] === 'E' &&
              xmlData[i + 7] === 'N' &&
              xmlData[i + 8] === 'T'
            ) {
              i += 8;
            } else if (
              hasBody &&
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === 'A' &&
              xmlData[i + 3] === 'T' &&
              xmlData[i + 4] === 'T' &&
              xmlData[i + 5] === 'L' &&
              xmlData[i + 6] === 'I' &&
              xmlData[i + 7] === 'S' &&
              xmlData[i + 8] === 'T'
            ) {
              i += 8;
            } else if (
              hasBody &&
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === 'N' &&
              xmlData[i + 3] === 'O' &&
              xmlData[i + 4] === 'T' &&
              xmlData[i + 5] === 'A' &&
              xmlData[i + 6] === 'T' &&
              xmlData[i + 7] === 'I' &&
              xmlData[i + 8] === 'O' &&
              xmlData[i + 9] === 'N'
            ) {
              i += 9;
            } else if (
              //comment
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === '-' &&
              xmlData[i + 3] === '-'
            ) {
              comment = true;
            } else {
              throw new Error('Invalid DOCTYPE');
            }
            angleBracketsCount++;
            exp = '';
          } else if (xmlData[i] === '>') {
            if (comment) {
              if (xmlData[i - 1] === '-' && xmlData[i - 2] === '-') {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              if (entity) {
                parseEntityExp(exp, entities);
                entity = false;
              }
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === '[') {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    var entityRegex = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function parseEntityExp(exp, entities) {
      const match = entityRegex.exec(exp);
      if (match) {
        entities[match[1]] = {
          regx: RegExp(`&${match[1]};`, 'g'),
          val: match[3],
        };
      }
    }
    module2.exports = readDocType;
  },
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  'node_modules/strnum/strnum.js'(exports, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex =
      /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: '.',
      eNotation: true,
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== 'string') return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (
            !options.leadingZeros &&
            leadingZeros.length > 0 &&
            sign &&
            trimmedStr[2] !== '.'
          )
            return str;
          else if (
            !options.leadingZeros &&
            leadingZeros.length > 0 &&
            !sign &&
            trimmedStr[1] !== '.'
          )
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = '' + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation) return num;
              else return str;
            } else if (eNotation) {
              if (options.eNotation) return num;
              else return str;
            } else if (trimmedStr.indexOf('.') !== -1) {
              if (numStr === '0' && numTrimmedByZeros === '') return num;
              else if (numStr === numTrimmedByZeros) return num;
              else if (sign && numStr === '-' + numTrimmedByZeros) return num;
              else return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr) return num;
              else if (sign + numTrimmedByZeros === numStr) return num;
              else return str;
            }
            if (trimmedStr === numStr) return num;
            else if (trimmedStr === sign + numStr) return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf('.') !== -1) {
        numStr = numStr.replace(/0+$/, '');
        if (numStr === '.') numStr = '0';
        else if (numStr[0] === '.') numStr = '0' + numStr;
        else if (numStr[numStr.length - 1] === '.')
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js'(
    exports,
    module2
  ) {
    'use strict';
    var util2 = require_util3();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx =
      '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'.replace(
        /NAME/g,
        util2.nameRegexp
      );
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          apos: { regex: /&(apos|#39|#x27);/g, val: "'" },
          gt: { regex: /&(gt|#62|#x3E);/g, val: '>' },
          lt: { regex: /&(lt|#60|#x3C);/g, val: '<' },
          quot: { regex: /&(quot|#34|#x22);/g, val: '"' },
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: '&' };
        this.htmlEntities = {
          space: { regex: /&(nbsp|#160);/g, val: ' ' },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          cent: { regex: /&(cent|#162);/g, val: '\xA2' },
          pound: { regex: /&(pound|#163);/g, val: '\xA3' },
          yen: { regex: /&(yen|#165);/g, val: '\xA5' },
          euro: { regex: /&(euro|#8364);/g, val: '\u20AC' },
          copyright: { regex: /&(copy|#169);/g, val: '\xA9' },
          reg: { regex: /&(reg|#174);/g, val: '\xAE' },
          inr: { regex: /&(inr|#8377);/g, val: '\u20B9' },
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp('&' + ent + ';', 'g'),
          val: externalEntities[ent],
        };
      }
    }
    function parseTextData(
      val,
      tagName,
      jPath,
      dontTrim,
      hasAttributes,
      isLeafNode,
      escapeEntities
    ) {
      if (val !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val = val.trim();
        }
        if (val.length > 0) {
          if (!escapeEntities) val = this.replaceEntitiesValue(val);
          const newval = this.options.tagValueProcessor(
            tagName,
            val,
            jPath,
            hasAttributes,
            isLeafNode
          );
          if (newval === null || newval === void 0) {
            return val;
          } else if (typeof newval !== typeof val || newval !== val) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(
              val,
              this.options.parseTagValue,
              this.options.numberParseOptions
            );
          } else {
            const trimmedVal = val.trim();
            if (trimmedVal === val) {
              return parseValue(
                val,
                this.options.parseTagValue,
                this.options.numberParseOptions
              );
            } else {
              return val;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(':');
        const prefix = tagname.charAt(0) === '/' ? '/' : '';
        if (tags[0] === 'xmlns') {
          return '';
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(
      `([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`,
      'gm'
    );
    function buildAttributesMap(attrStr, jPath) {
      if (!this.options.ignoreAttributes && typeof attrStr === 'string') {
        const matches = util2.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === '__proto__') aName = '#__proto__';
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(
                attrName,
                oldVal,
                jPath
              );
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function (xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, '\n');
      const xmlObj = new xmlNode('!xml');
      let currentNode = xmlObj;
      let textData = '';
      let jPath = '';
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === '<') {
          if (xmlData[i + 1] === '/') {
            const closeIndex = findClosingIndex(
              xmlData,
              '>',
              i,
              'Closing Tag is not closed.'
            );
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(':');
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf('.'));
            currentNode = this.tagsNodeStack.pop();
            textData = '';
            i = closeIndex;
          } else if (xmlData[i + 1] === '?') {
            let tagData = readTagExp(xmlData, i, false, '?>');
            if (!tagData) throw new Error('Pi Tag is not closed.');
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (
              (this.options.ignoreDeclaration && tagData.tagName === '?xml') ||
              this.options.ignorePiTags
            ) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, '');
              if (
                tagData.tagName !== tagData.tagExp &&
                tagData.attrExpPresent
              ) {
                childNode[':@'] = this.buildAttributesMap(
                  tagData.tagExp,
                  jPath
                );
              }
              currentNode.addChild(childNode);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === '!--') {
            const endIndex = findClosingIndex(
              xmlData,
              '-->',
              i + 4,
              'Comment is not closed.'
            );
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [
                { [this.options.textNodeName]: comment },
              ]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === '!D') {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === '![') {
            const closeIndex =
              findClosingIndex(xmlData, ']]>', i, 'CDATA is not closed.') - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [
                { [this.options.textNodeName]: tagExp },
              ]);
            } else {
              let val = this.parseTextData(
                tagExp,
                currentNode.tagname,
                jPath,
                true,
                false,
                true
              );
              if (val == void 0) val = '';
              currentNode.add(this.options.textNodeName, val);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== '!xml') {
                textData = this.saveTextToParentTag(
                  textData,
                  currentNode,
                  jPath,
                  false
                );
              }
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? '.' + tagName : tagName;
            }
            const lastTag = currentNode;
            if (
              lastTag &&
              this.options.unpairedTags.indexOf(lastTag.tagname) !== -1
            ) {
              currentNode = this.tagsNodeStack.pop();
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = '';
              if (
                tagExp.length > 0 &&
                tagExp.lastIndexOf('/') === tagExp.length - 1
              ) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(
                  xmlData,
                  tagName,
                  closeIndex + 1
                );
                if (!result2) throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[':@'] = this.buildAttributesMap(tagExp, jPath);
              }
              if (tagContent) {
                tagContent = this.parseTextData(
                  tagContent,
                  tagName,
                  jPath,
                  true,
                  attrExpPresent,
                  true,
                  true
                );
              }
              jPath = jPath.substr(0, jPath.lastIndexOf('.'));
              childNode.add(this.options.textNodeName, tagContent);
              currentNode.addChild(childNode);
            } else {
              if (
                tagExp.length > 0 &&
                tagExp.lastIndexOf('/') === tagExp.length - 1
              ) {
                if (tagName[tagName.length - 1] === '/') {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[':@'] = this.buildAttributesMap(tagExp, jPath);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf('.'));
                currentNode.addChild(childNode);
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[':@'] = this.buildAttributesMap(tagExp, jPath);
                }
                currentNode.addChild(childNode);
                currentNode = childNode;
              }
              textData = '';
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    var replaceEntitiesValue = function (val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[':@']
            ? Object.keys(currentNode[':@']).length !== 0
            : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== '')
          currentNode.add(this.options.textNodeName, textData);
        textData = '';
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = '*.' + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = '>') {
      let attrBoundary;
      let tagExp = '';
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary) attrBoundary = '';
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index,
              };
            }
          } else {
            return {
              data: tagExp,
              index,
            };
          }
        } else if (ch === '	') {
          ch = ' ';
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = '>') {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result) return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(':');
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent,
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === '<') {
          if (xmlData[i + 1] === '/') {
            const closeIndex = findClosingIndex(
              xmlData,
              '>',
              i,
              `${tagName} is not closed`
            );
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex,
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === '?') {
            const closeIndex = findClosingIndex(
              xmlData,
              '?>',
              i + 1,
              'StopNode is not closed.'
            );
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === '!--') {
            const closeIndex = findClosingIndex(
              xmlData,
              '-->',
              i + 3,
              'StopNode is not closed.'
            );
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === '![') {
            const closeIndex =
              findClosingIndex(xmlData, ']]>', i, 'StopNode is not closed.') -
              2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, '>');
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (
                openTagName === tagName &&
                tagData.tagExp[tagData.tagExp.length - 1] !== '/'
              ) {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val, shouldParse, options) {
      if (shouldParse && typeof val === 'string') {
        const newval = val.trim();
        if (newval === 'true') return true;
        else if (newval === 'false') return false;
        else return toNumber(val, options);
      } else {
        if (util2.isExist(val)) {
          return val;
        } else {
          return '';
        }
      }
    }
    module2.exports = OrderedObjParser;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/node2json.js'(exports) {
    'use strict';
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = '';
        if (jPath === void 0) newJpath = property;
        else newJpath = jPath + '.' + property;
        if (property === options.textNodeName) {
          if (text === void 0) text = tagObj[property];
          else text += '' + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val, options);
          if (tagObj[':@']) {
            assignAttributes(val, tagObj[':@'], newJpath, options);
          } else if (
            Object.keys(val).length === 1 &&
            val[options.textNodeName] !== void 0 &&
            !options.alwaysCreateTextNode
          ) {
            val = val[options.textNodeName];
          } else if (Object.keys(val).length === 0) {
            if (options.alwaysCreateTextNode) val[options.textNodeName] = '';
            else val = '';
          }
          if (
            compressedObj[property] !== void 0 &&
            compressedObj.hasOwnProperty(property)
          ) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val];
            } else {
              compressedObj[property] = val;
            }
          }
        }
      }
      if (typeof text === 'string') {
        if (text.length > 0) compressedObj[options.textNodeName] = text;
      } else if (text !== void 0) compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ':@') return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + '.' + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const propCount = Object.keys(obj).length;
      if (propCount === 0 || (propCount === 1 && obj[options.textNodeName]))
        return true;
      return false;
    }
    exports.prettify = prettify;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/XMLParser.js'(exports, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object
       * @param {string|Buffer} xmlData
       * @param {boolean|Object} validationOption
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === 'string') {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error('XML data is accepted in String or Bytes[] form.');
        }
        if (validationOption) {
          if (validationOption === true) validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(
              `${result.err.msg}:${result.err.line}:${result.err.col}`
            );
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key
       * @param {string} value
       */
      addEntity(key, value) {
        if (value.indexOf('&') !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf('&') !== -1 || key.indexOf(';') !== -1) {
          throw new Error(
            "An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'"
          );
        } else if (value === '&') {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  },
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  'node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js'(
    exports,
    module2
  ) {
    var EOL = '\n';
    function toXml(jArray, options) {
      let indentation = '';
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, '', indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = '';
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = '';
        if (jPath.length === 0) newJPath = tagName;
        else newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr +=
            indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === '?') {
          const attStr2 = attr_to_str(tagObj[':@'], options);
          const tempInd = tagName === '?xml' ? '' : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName =
            piTextNodeName.length !== 0 ? ' ' + piTextNodeName : '';
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== '') {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[':@'], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(
          tagObj[tagName],
          options,
          newJPath,
          newIdentation
        );
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode) xmlStr += tagStart + '>';
          else xmlStr += tagStart + '/>';
        } else if (
          (!tagValue || tagValue.length === 0) &&
          options.suppressEmptyNode
        ) {
          xmlStr += tagStart + '/>';
        } else if (tagValue && tagValue.endsWith('>')) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + '>';
          if (
            tagValue &&
            indentation !== '' &&
            (tagValue.includes('/>') || tagValue.includes('</'))
          ) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ':@') return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = '';
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(
              options.attributeNamePrefix.length
            )}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf('.') + 1);
      for (let index in options.stopNodes) {
        if (
          options.stopNodes[index] === jPath ||
          options.stopNodes[index] === '*.' + tagName
        )
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  },
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  'node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js'(exports, module2) {
    'use strict';
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: '@_',
      attributesGroupName: false,
      textNodeName: '#text',
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: '  ',
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function (key, a) {
        return a;
      },
      attributeValueProcessor: function (attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp('&', 'g'), val: '&amp;' },
        //it must be on top
        { regex: new RegExp('>', 'g'), val: '&gt;' },
        { regex: new RegExp('<', 'g'), val: '&lt;' },
        { regex: new RegExp("'", 'g'), val: '&apos;' },
        { regex: new RegExp('"', 'g'), val: '&quot;' },
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function () {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = '>\n';
        this.newLine = '\n';
      } else {
        this.indentate = function () {
          return '';
        };
        this.tagEndChar = '>';
        this.newLine = '';
      }
    }
    Builder.prototype.build = function (jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (
          Array.isArray(jObj) &&
          this.options.arrayNodeName &&
          this.options.arrayNodeName.length > 1
        ) {
          jObj = {
            [this.options.arrayNodeName]: jObj,
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function (jObj, level) {
      let attrStr = '';
      let val = '';
      for (let key in jObj) {
        if (typeof jObj[key] === 'undefined') {
        } else if (jObj[key] === null) {
          if (key[0] === '?')
            val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;
          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextValNode(jObj[key], key, '', level);
        } else if (typeof jObj[key] !== 'object') {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, '' + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextValNode(jObj[key], key, '', level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === 'undefined') {
            } else if (item === null) {
              if (key[0] === '?')
                val +=
                  this.indentate(level) + '<' + key + '?' + this.tagEndChar;
              else
                val +=
                  this.indentate(level) + '<' + key + '/' + this.tagEndChar;
            } else if (typeof item === 'object') {
              val += this.processTextOrObjNode(item, key, level);
            } else {
              val += this.buildTextValNode(item, key, '', level);
            }
          }
        } else {
          if (
            this.options.attributesGroupName &&
            key === this.options.attributesGroupName
          ) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val };
    };
    Builder.prototype.buildAttrPairStr = function (attrName, val) {
      val = this.options.attributeValueProcessor(attrName, '' + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === 'true') {
        return ' ' + attrName;
      } else return ' ' + attrName + '="' + val + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (
        object[this.options.textNodeName] !== void 0 &&
        Object.keys(object).length === 1
      ) {
        return this.buildTextValNode(
          object[this.options.textNodeName],
          key,
          result.attrStr,
          level
        );
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function (val, key, attrStr, level) {
      if (val === '') {
        if (key[0] === '?')
          return (
            this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar
          );
        else {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            this.closeTag(key) +
            this.tagEndChar
          );
        }
      } else {
        let tagEndExp = '</' + key + this.tagEndChar;
        let piClosingChar = '';
        if (key[0] === '?') {
          piClosingChar = '?';
          tagEndExp = '';
        }
        if (attrStr && val.indexOf('<') === -1) {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            piClosingChar +
            '>' +
            val +
            tagEndExp
          );
        } else if (
          this.options.commentPropName !== false &&
          key === this.options.commentPropName &&
          piClosingChar.length === 0
        ) {
          return this.indentate(level) + `<!--${val}-->` + this.newLine;
        } else {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            piClosingChar +
            this.tagEndChar +
            val +
            this.indentate(level) +
            tagEndExp
          );
        }
      }
    };
    Builder.prototype.closeTag = function (key) {
      let closeTag = '';
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode) closeTag = '/';
      } else if (this.options.suppressEmptyNode) {
        closeTag = '/';
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function (val, key, attrStr, level) {
      if (
        this.options.cdataPropName !== false &&
        key === this.options.cdataPropName
      ) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (
        this.options.commentPropName !== false &&
        key === this.options.commentPropName
      ) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else if (key[0] === '?') {
        return (
          this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar
        );
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === '') {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            this.closeTag(key) +
            this.tagEndChar
          );
        } else {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            '>' +
            textValue +
            '</' +
            key +
            this.tagEndChar
          );
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function (textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  },
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  'node_modules/fast-xml-parser/src/fxp.js'(exports, module2) {
    'use strict';
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder,
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.InvalidAuthorizationMessageException =
      exports.IDPCommunicationErrorException =
      exports.InvalidIdentityTokenException =
      exports.IDPRejectedClaimException =
      exports.RegionDisabledException =
      exports.PackedPolicyTooLargeException =
      exports.MalformedPolicyDocumentException =
      exports.ExpiredTokenException =
        void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'ExpiredTokenException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExpiredTokenException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'MalformedPolicyDocumentException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'MalformedPolicyDocumentException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'PackedPolicyTooLargeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'PackedPolicyTooLargeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'RegionDisabledException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'RegionDisabledException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'IDPRejectedClaimException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IDPRejectedClaimException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'InvalidIdentityTokenException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidIdentityTokenException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'IDPCommunicationErrorException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IDPCommunicationErrorException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'InvalidAuthorizationMessageException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidAuthorizationMessageException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          InvalidAuthorizationMessageException.prototype
        );
      }
    };
    exports.InvalidAuthorizationMessageException =
      InvalidAuthorizationMessageException;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.de_GetSessionTokenCommand =
      exports.de_GetFederationTokenCommand =
      exports.de_GetCallerIdentityCommand =
      exports.de_GetAccessKeyInfoCommand =
      exports.de_DecodeAuthorizationMessageCommand =
      exports.de_AssumeRoleWithWebIdentityCommand =
      exports.de_AssumeRoleWithSAMLCommand =
      exports.de_AssumeRoleCommand =
      exports.se_GetSessionTokenCommand =
      exports.se_GetFederationTokenCommand =
      exports.se_GetCallerIdentityCommand =
      exports.se_GetAccessKeyInfoCommand =
      exports.se_DecodeAuthorizationMessageCommand =
      exports.se_AssumeRoleWithWebIdentityCommand =
      exports.se_AssumeRoleWithSAMLCommand =
      exports.se_AssumeRoleCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs2();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        Action: 'AssumeRole',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_AssumeRoleCommand = se_AssumeRoleCommand;
    var se_AssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        Action: 'AssumeRoleWithSAML',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_AssumeRoleWithSAMLCommand = se_AssumeRoleWithSAMLCommand;
    var se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        Action: 'AssumeRoleWithWebIdentity',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_AssumeRoleWithWebIdentityCommand =
      se_AssumeRoleWithWebIdentityCommand;
    var se_DecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        Action: 'DecodeAuthorizationMessage',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DecodeAuthorizationMessageCommand =
      se_DecodeAuthorizationMessageCommand;
    var se_GetAccessKeyInfoCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        Action: 'GetAccessKeyInfo',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetAccessKeyInfoCommand = se_GetAccessKeyInfoCommand;
    var se_GetCallerIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        Action: 'GetCallerIdentity',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetCallerIdentityCommand = se_GetCallerIdentityCommand;
    var se_GetFederationTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        Action: 'GetFederationToken',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetFederationTokenCommand = se_GetFederationTokenCommand;
    var se_GetSessionTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        Action: 'GetSessionToken',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetSessionTokenCommand = se_GetSessionTokenCommand;
    var de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_AssumeRoleCommand = de_AssumeRoleCommand;
    var de_AssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(
            parsedOutput,
            context
          );
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(
            parsedOutput,
            context
          );
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_AssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(
        data.AssumeRoleWithSAMLResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_AssumeRoleWithSAMLCommand = de_AssumeRoleWithSAMLCommand;
    var de_AssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'IDPRejectedClaim':
        case 'com.amazonaws.sts#IDPRejectedClaimException':
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case 'InvalidIdentityToken':
        case 'com.amazonaws.sts#InvalidIdentityTokenException':
          throw await de_InvalidIdentityTokenExceptionRes(
            parsedOutput,
            context
          );
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(
            parsedOutput,
            context
          );
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(
            parsedOutput,
            context
          );
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(
        data.AssumeRoleWithWebIdentityResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_AssumeRoleWithWebIdentityCommand =
      de_AssumeRoleWithWebIdentityCommand;
    var de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'IDPCommunicationError':
        case 'com.amazonaws.sts#IDPCommunicationErrorException':
          throw await de_IDPCommunicationErrorExceptionRes(
            parsedOutput,
            context
          );
        case 'IDPRejectedClaim':
        case 'com.amazonaws.sts#IDPRejectedClaimException':
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case 'InvalidIdentityToken':
        case 'com.amazonaws.sts#InvalidIdentityTokenException':
          throw await de_InvalidIdentityTokenExceptionRes(
            parsedOutput,
            context
          );
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(
            parsedOutput,
            context
          );
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(
            parsedOutput,
            context
          );
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_DecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(
        data.DecodeAuthorizationMessageResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DecodeAuthorizationMessageCommand =
      de_DecodeAuthorizationMessageCommand;
    var de_DecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidAuthorizationMessageException':
        case 'com.amazonaws.sts#InvalidAuthorizationMessageException':
          throw await de_InvalidAuthorizationMessageExceptionRes(
            parsedOutput,
            context
          );
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_GetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(
        data.GetAccessKeyInfoResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetAccessKeyInfoCommand = de_GetAccessKeyInfoCommand;
    var de_GetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
      });
    };
    var de_GetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(
        data.GetCallerIdentityResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetCallerIdentityCommand = de_GetCallerIdentityCommand;
    var de_GetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
      });
    };
    var de_GetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(
        data.GetFederationTokenResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetFederationTokenCommand = de_GetFederationTokenCommand;
    var de_GetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(
            parsedOutput,
            context
          );
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(
            parsedOutput,
            context
          );
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_GetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(
        data.GetSessionTokenResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetSessionTokenCommand = de_GetSessionTokenCommand;
    var de_GetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPCommunicationErrorExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(
        body.Error,
        context
      );
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAuthorizationMessageExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(
        body.Error,
        context
      );
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(
        body.Error,
        context
      );
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_MalformedPolicyDocumentExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(
        body.Error,
        context
      );
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(
        body.Error,
        context
      );
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AssumeRoleRequest = (input, context) => {
      var _a, _b, _c;
      const entries = {};
      if (input.RoleArn != null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries['RoleSessionName'] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(
          input.PolicyArns,
          context
        );
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = se_tagKeyListType(
          input.TransitiveTagKeys,
          context
        );
        if (
          ((_c = input.TransitiveTagKeys) == null ? void 0 : _c.length) === 0
        ) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries['ExternalId'] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries['SerialNumber'] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries['TokenCode'] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries['SourceIdentity'] = input.SourceIdentity;
      }
      return entries;
    };
    var se_AssumeRoleWithSAMLRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries['PrincipalArn'] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries['SAMLAssertion'] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(
          input.PolicyArns,
          context
        );
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      return entries;
    };
    var se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries['RoleSessionName'] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries['WebIdentityToken'] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries['ProviderId'] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(
          input.PolicyArns,
          context
        );
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      return entries;
    };
    var se_DecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries['EncodedMessage'] = input.EncodedMessage;
      }
      return entries;
    };
    var se_GetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries['AccessKeyId'] = input.AccessKeyId;
      }
      return entries;
    };
    var se_GetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var se_GetFederationTokenRequest = (input, context) => {
      var _a, _b;
      const entries = {};
      if (input.Name != null) {
        entries['Name'] = input.Name;
      }
      if (input.Policy != null) {
        entries['Policy'] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(
          input.PolicyArns,
          context
        );
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_GetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries['SerialNumber'] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries['TokenCode'] = input.TokenCode;
      }
      return entries;
    };
    var se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries['arn'] = input.arn;
      }
      return entries;
    };
    var se_Tag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries['Key'] = input.Key;
      }
      if (input.Value != null) {
        entries['Value'] = input.Value;
      }
      return entries;
    };
    var se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output['AssumedRoleId'] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(
          output['AssumedRoleId']
        );
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(
          output['AssumedRoleUser'],
          context
        );
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(
          output['PackedPolicySize']
        );
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(
          output['SourceIdentity']
        );
      }
      return contents;
    };
    var de_AssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(
          output['AssumedRoleUser'],
          context
        );
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(
          output['PackedPolicySize']
        );
      }
      if (output['Subject'] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output['Subject']);
      }
      if (output['SubjectType'] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(
          output['SubjectType']
        );
      }
      if (output['Issuer'] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output['Issuer']);
      }
      if (output['Audience'] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(
          output['Audience']
        );
      }
      if (output['NameQualifier'] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(
          output['NameQualifier']
        );
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(
          output['SourceIdentity']
        );
      }
      return contents;
    };
    var de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      if (output['SubjectFromWebIdentityToken'] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0,
        smithy_client_1.expectString)(output['SubjectFromWebIdentityToken']);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(
          output['AssumedRoleUser'],
          context
        );
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(
          output['PackedPolicySize']
        );
      }
      if (output['Provider'] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(
          output['Provider']
        );
      }
      if (output['Audience'] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(
          output['Audience']
        );
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(
          output['SourceIdentity']
        );
      }
      return contents;
    };
    var de_Credentials = (output, context) => {
      const contents = {};
      if (output['AccessKeyId'] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(
          output['AccessKeyId']
        );
      }
      if (output['SecretAccessKey'] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(
          output['SecretAccessKey']
        );
      }
      if (output['SessionToken'] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(
          output['SessionToken']
        );
      }
      if (output['Expiration'] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)(
          (0, smithy_client_1.parseRfc3339DateTimeWithOffset)(
            output['Expiration']
          )
        );
      }
      return contents;
    };
    var de_DecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {};
      if (output['DecodedMessage'] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(
          output['DecodedMessage']
        );
      }
      return contents;
    };
    var de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_FederatedUser = (output, context) => {
      const contents = {};
      if (output['FederatedUserId'] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(
          output['FederatedUserId']
        );
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var de_GetAccessKeyInfoResponse = (output, context) => {
      const contents = {};
      if (output['Account'] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output['Account']);
      }
      return contents;
    };
    var de_GetCallerIdentityResponse = (output, context) => {
      const contents = {};
      if (output['UserId'] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output['UserId']);
      }
      if (output['Account'] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output['Account']);
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var de_GetFederationTokenResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      if (output['FederatedUser'] !== void 0) {
        contents.FederatedUser = de_FederatedUser(
          output['FederatedUser'],
          context
        );
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(
          output['PackedPolicySize']
        );
      }
      return contents;
    };
    var de_GetSessionTokenResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      return contents;
    };
    var de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_InvalidAuthorizationMessageException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId:
        output.headers['x-amzn-requestid'] ??
        output.headers['x-amzn-request-id'] ??
        output.headers['x-amz-request-id'],
      extendedRequestId: output.headers['x-amz-id-2'],
      cfId: output.headers['x-amz-cf-id'],
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return (
        context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
      );
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) =>
        context.utf8Encoder(body)
      );
    var throwDefaultError = (0, smithy_client_1.withBaseException)(
      STSServiceException_1.STSServiceException
    );
    var buildHttpRpcRequest = async (
      context,
      headers,
      path,
      resolvedHostname,
      body
    ) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: 'POST',
        path: basePath.endsWith('/')
          ? basePath.slice(0, -1) + path
          : basePath + path,
        headers,
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var SHARED_HEADERS = {
      'content-type': 'application/x-www-form-urlencoded',
    };
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          const parser = new fast_xml_parser_1.XMLParser({
            attributeNamePrefix: '',
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_2, val) =>
              val.trim() === '' && val.includes('\n') ? '' : void 0,
          });
          parser.addEntity('#xD', '\r');
          parser.addEntity('#10', '\n');
          const parsedObj = parser.parse(encoded);
          const textNodeName = '#text';
          const key = Object.keys(parsedObj)[0];
          const parsedObjToReturn = parsedObj[key];
          if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
          }
          return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
        }
        return {};
      });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) =>
      Object.entries(formEntries)
        .map(
          ([key, value]) =>
            (0, smithy_client_1.extendedEncodeURIComponent)(key) +
            '=' +
            (0, smithy_client_1.extendedEncodeURIComponent)(value)
        )
        .join('&');
    var loadQueryErrorCode = (output, data) => {
      var _a;
      if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return 'NotFound';
      }
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            AssumeRoleCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleWithSAMLCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleWithWebIdentityCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithWebIdentityCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithWebIdentityCommand)(
          output,
          context
        );
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'DecodeAuthorizationMessageCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DecodeAuthorizationMessageCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DecodeAuthorizationMessageCommand)(
          output,
          context
        );
      }
    };
    exports.DecodeAuthorizationMessageCommand =
      DecodeAuthorizationMessageCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetAccessKeyInfoCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetAccessKeyInfoCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetCallerIdentityCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetCallerIdentityCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetFederationTokenCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetFederationTokenCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetSessionTokenCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetSessionTokenCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs27();
    var resolveStsAuthConfig = (input, { stsClientCtor }) =>
      (0, middleware_signing_1.resolveAwsAuthConfig)({
        ...input,
        stsClientCtor,
      });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: 'sts',
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  },
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sts',
      description:
        'AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native',
      version: '3.326.0',
      scripts: {
        build:
          "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps':
          'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client':
          'node ../../scripts/generate-clients/single-service --solo sts',
        test: 'yarn test:unit',
        'test:unit': 'jest',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '3.0.0',
        '@aws-crypto/sha256-js': '3.0.0',
        '@aws-sdk/config-resolver': '3.310.0',
        '@aws-sdk/credential-provider-node': '3.326.0',
        '@aws-sdk/fetch-http-handler': '3.310.0',
        '@aws-sdk/hash-node': '3.310.0',
        '@aws-sdk/invalid-dependency': '3.310.0',
        '@aws-sdk/middleware-content-length': '3.325.0',
        '@aws-sdk/middleware-endpoint': '3.325.0',
        '@aws-sdk/middleware-host-header': '3.325.0',
        '@aws-sdk/middleware-logger': '3.325.0',
        '@aws-sdk/middleware-recursion-detection': '3.325.0',
        '@aws-sdk/middleware-retry': '3.325.0',
        '@aws-sdk/middleware-sdk-sts': '3.326.0',
        '@aws-sdk/middleware-serde': '3.325.0',
        '@aws-sdk/middleware-signing': '3.325.0',
        '@aws-sdk/middleware-stack': '3.325.0',
        '@aws-sdk/middleware-user-agent': '3.325.0',
        '@aws-sdk/node-config-provider': '3.310.0',
        '@aws-sdk/node-http-handler': '3.321.1',
        '@aws-sdk/protocol-http': '3.310.0',
        '@aws-sdk/smithy-client': '3.325.0',
        '@aws-sdk/types': '3.310.0',
        '@aws-sdk/url-parser': '3.310.0',
        '@aws-sdk/util-base64': '3.310.0',
        '@aws-sdk/util-body-length-browser': '3.310.0',
        '@aws-sdk/util-body-length-node': '3.310.0',
        '@aws-sdk/util-defaults-mode-browser': '3.325.0',
        '@aws-sdk/util-defaults-mode-node': '3.325.0',
        '@aws-sdk/util-endpoints': '3.319.0',
        '@aws-sdk/util-retry': '3.310.0',
        '@aws-sdk/util-user-agent-browser': '3.310.0',
        '@aws-sdk/util-user-agent-node': '3.310.0',
        '@aws-sdk/util-utf8': '3.310.0',
        'fast-xml-parser': '4.1.2',
        tslib: '^2.5.0',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.310.0',
        '@tsconfig/node14': '1.0.3',
        '@types/node': '^14.14.31',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typedoc: '0.23.23',
        typescript: '~4.9.5',
      },
      engines: {
        node: '>=14.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage:
        'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sts',
      },
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateDefaultCredentialProvider =
      exports.getDefaultRoleAssumerWithWebIdentity =
      exports.getDefaultRoleAssumer =
        void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 =
      require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = 'us-east-1';
    var decorateDefaultRegion = (region) => {
      if (typeof region !== 'function') {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...(requestHandler ? { requestHandler } : {}),
          });
        }
        const { Credentials } = await stsClient.send(
          new AssumeRoleCommand_1.AssumeRoleCommand(params)
        );
        if (
          !Credentials ||
          !Credentials.AccessKeyId ||
          !Credentials.SecretAccessKey
        ) {
          throw new Error(
            `Invalid response from STS.assumeRole call with role ${params.RoleArn}`
          );
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...(requestHandler ? { requestHandler } : {}),
          });
        }
        const { Credentials } = await stsClient.send(
          new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(
            params
          )
        );
        if (
          !Credentials ||
          !Credentials.AccessKeyId ||
          !Credentials.SecretAccessKey
        ) {
          throw new Error(
            `Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`
          );
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity =
      getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) =>
      provider({
        roleAssumer: (0, exports.getDefaultRoleAssumer)(
          input,
          input.stsClientCtor
        ),
        roleAssumerWithWebIdentity: (0,
        exports.getDefaultRoleAssumerWithWebIdentity)(
          input,
          input.stsClientCtor
        ),
        ...input,
      });
    exports.decorateDefaultCredentialProvider =
      decorateDefaultCredentialProvider;
  },
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  'node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv =
      exports.ENV_EXPIRATION =
      exports.ENV_SESSION =
      exports.ENV_SECRET =
      exports.ENV_KEY =
        void 0;
    var property_provider_1 = require_dist_cjs20();
    exports.ENV_KEY = 'AWS_ACCESS_KEY_ID';
    exports.ENV_SECRET = 'AWS_SECRET_ACCESS_KEY';
    exports.ENV_SESSION = 'AWS_SESSION_TOKEN';
    exports.ENV_EXPIRATION = 'AWS_CREDENTIAL_EXPIRATION';
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...(sessionToken && { sessionToken }),
          ...(expiry && { expiration: new Date(expiry) }),
        };
      }
      throw new property_provider_1.CredentialsProviderError(
        'Unable to find environment variable credentials.'
      );
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports);
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require('os');
    var path_1 = require('path');
    var getHomeDir = () => {
      const {
        HOME,
        USERPROFILE,
        HOMEPATH,
        HOMEDRIVE = `C:${path_1.sep}`,
      } = process.env;
      if (HOME) return HOME;
      if (USERPROFILE) return USERPROFILE;
      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileName =
      exports.DEFAULT_PROFILE =
      exports.ENV_PROFILE =
        void 0;
    exports.ENV_PROFILE = 'AWS_PROFILE';
    exports.DEFAULT_PROFILE = 'default';
    var getProfileName = (init) =>
      init.profile ||
      process.env[exports.ENV_PROFILE] ||
      exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require('crypto');
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)('sha1');
      const cacheName = hasher.update(id).digest('hex');
      return (0, path_1.join)(
        (0, getHomeDir_1.getHomeDir)(),
        '.aws',
        'sso',
        'cache',
        `${cacheName}.json`
      );
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require('fs');
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(
        id
      );
      const ssoTokenText = await readFile(ssoTokenFilepath, 'utf8');
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = 'AWS_CONFIG_FILE';
    var getConfigFilepath = () =>
      process.env[exports.ENV_CONFIG_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'config');
    exports.getConfigFilepath = getConfigFilepath;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = 'AWS_SHARED_CREDENTIALS_FILE';
    var getCredentialsFilepath = () =>
      process.env[exports.ENV_CREDENTIALS_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'credentials');
    exports.getCredentialsFilepath = getCredentialsFilepath;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) =>
      Object.entries(data)
        .filter(([key]) => profileKeyRegex.test(key))
        .reduce(
          (acc, [key, value]) => ({
            ...acc,
            [profileKeyRegex.exec(key)[2]]: value,
          }),
          {
            ...(data.default && { default: data.default }),
          }
        );
    exports.getProfileData = getProfileData;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ['__proto__', 'profile __proto__'];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === '[' && line[line.length - 1] === ']';
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf('=');
          const start = 0;
          const end = line.length - 1;
          const isAssignment =
            indexOfEqualsSign !== -1 &&
            indexOfEqualsSign !== start &&
            indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim(),
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require('fs');
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (
        !filePromisesHash[path] ||
        (options === null || options === void 0 ? void 0 : options.ignoreCache)
      ) {
        filePromisesHash[path] = readFile(path, 'utf8');
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const {
        filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(),
        configFilepath = (0, getConfigFilepath_1.getConfigFilepath)(),
      } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
          ignoreCache: init.ignoreCache,
        })
          .then(parseIni_1.parseIni)
          .then(getProfileData_1.getProfileData)
          .catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
          ignoreCache: init.ignoreCache,
        })
          .then(parseIni_1.parseIni)
          .catch(swallowError),
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) =>
      Object.entries(data)
        .filter(([key]) => ssoSessionKeyRegex.test(key))
        .reduce(
          (acc, [key, value]) => ({
            ...acc,
            [ssoSessionKeyRegex.exec(key)[2]]: value,
          }),
          {}
        );
    exports.getSsoSessionData = getSsoSessionData;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)(
        (_a = init.configFilepath) !== null && _a !== void 0
          ? _a
          : (0, getConfigFilepath_1.getConfigFilepath)()
      )
        .then(parseIni_1.parseIni)
        .then(getSsoSessionData_1.getSsoSessionData)
        .catch(swallowError);
    };
    exports.loadSsoSessionData = loadSsoSessionData;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js
var require_mergeConfigFiles = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.mergeConfigFiles = void 0;
    var mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
    exports.mergeConfigFiles = mergeConfigFiles;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var mergeConfigFiles_1 = require_mergeConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0,
      loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return (0, mergeConfigFiles_1.mergeConfigFiles)(
        parsedFiles.configFile,
        parsedFiles.credentialsFile
      );
    };
    exports.parseKnownFiles = parseKnownFiles;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types4 = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types4(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs20();
    var buffer_1 = require('buffer');
    var http_1 = require('http');
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: 'GET',
          ...options,
          hostname:
            (_a = options.hostname) === null || _a === void 0
              ? void 0
              : _a.replace(/^\[(.+)\]$/, '$1'),
        });
        req.on('error', (err) => {
          reject(
            Object.assign(
              new property_provider_1.ProviderError(
                'Unable to connect to instance metadata service'
              ),
              err
            )
          );
          req.destroy();
        });
        req.on('timeout', () => {
          reject(
            new property_provider_1.ProviderError(
              'TimeoutError from instance metadata service'
            )
          );
          req.destroy();
        });
        req.on('response', (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(
                new property_provider_1.ProviderError(
                  'Error response received from instance metadata service'
                ),
                { statusCode }
              )
            );
            req.destroy();
          }
          const chunks = [];
          res.on('data', (chunk) => {
            chunks.push(chunk);
          });
          res.on('end', () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.AccessKeyId === 'string' &&
      typeof arg.SecretAccessKey === 'string' &&
      typeof arg.Token === 'string' &&
      typeof arg.Expiration === 'string';
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.providerConfigFromInit =
      exports.DEFAULT_MAX_RETRIES =
      exports.DEFAULT_TIMEOUT =
        void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({
      maxRetries = exports.DEFAULT_MAX_RETRIES,
      timeout = exports.DEFAULT_TIMEOUT,
    }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromContainerMetadata =
      exports.ENV_CMDS_AUTH_TOKEN =
      exports.ENV_CMDS_RELATIVE_URI =
      exports.ENV_CMDS_FULL_URI =
        void 0;
    var property_provider_1 = require_dist_cjs20();
    var url_1 = require('url');
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry2();
    exports.ENV_CMDS_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI';
    exports.ENV_CMDS_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI';
    exports.ENV_CMDS_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN';
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0,
      RemoteProviderInit_1.providerConfigFromInit)(init);
      return () =>
        (0, retry_1.retry)(async () => {
          const requestOptions = await getCmdsUri();
          const credsResponse = JSON.parse(
            await requestFromEcsImds(timeout, requestOptions)
          );
          if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
            throw new property_provider_1.CredentialsProviderError(
              'Invalid response received from instance metadata service.'
            );
          }
          return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
        }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN],
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout,
      });
      return buffer.toString();
    };
    var CMDS_IP = '169.254.170.2';
    var GREENGRASS_HOSTS = {
      localhost: true,
      '127.0.0.1': true,
    };
    var GREENGRASS_PROTOCOLS = {
      'http:': true,
      'https:': true,
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI],
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.hostname} is not a valid container metadata service hostname`,
            false
          );
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.protocol} is not a valid container metadata service protocol`,
            false
          );
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0,
        };
      }
      throw new property_provider_1.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`,
        false
      );
    };
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(
          e.message ||
            `Cannot load config from environment variables with getter: ${envVarSelector}`
        );
      }
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var fromSharedConfigFiles =
      (configSelector, { preferredFile = 'config', ...init } = {}) =>
      async () => {
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0,
        shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile =
          preferredFile === 'config'
            ? { ...profileFromCredentials, ...profileFromConfig }
            : { ...profileFromConfig, ...profileFromCredentials };
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            e.message ||
              `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`
          );
        }
      };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs20();
    var isFunction2 = (func) => typeof func === 'function';
    var fromStatic = (defaultValue) =>
      isFunction2(defaultValue)
        ? async () => await defaultValue()
        : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = (
      {
        environmentVariableSelector,
        configFileSelector,
        default: defaultValue,
      },
      configuration = {}
    ) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          (0, fromEnv_1.fromEnv)(environmentVariableSelector),
          (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(
            configFileSelector,
            configuration
          ),
          (0, fromStatic_1.fromStatic)(defaultValue)
        )
      );
    exports.loadConfig = loadConfig;
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function (Endpoint2) {
      Endpoint2['IPv4'] = 'http://169.254.169.254';
      Endpoint2['IPv6'] = 'http://[fd00:ec2::254]';
    })((Endpoint = exports.Endpoint || (exports.Endpoint = {})));
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS =
      exports.CONFIG_ENDPOINT_NAME =
      exports.ENV_ENDPOINT_NAME =
        void 0;
    exports.ENV_ENDPOINT_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT';
    exports.CONFIG_ENDPOINT_NAME = 'ec2_metadata_service_endpoint';
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0,
    };
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function (EndpointMode2) {
      EndpointMode2['IPv4'] = 'IPv4';
      EndpointMode2['IPv6'] = 'IPv6';
    })((EndpointMode = exports.EndpointMode || (exports.EndpointMode = {})));
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS =
      exports.CONFIG_ENDPOINT_MODE_NAME =
      exports.ENV_ENDPOINT_MODE_NAME =
        void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE';
    exports.CONFIG_ENDPOINT_MODE_NAME = 'ec2_metadata_service_endpoint_mode';
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) =>
        profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4,
    };
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs34();
    var url_parser_1 = require_dist_cjs4();
    var Endpoint_1 = require_Endpoint2();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () =>
      (0, url_parser_1.parseUrl)(
        (await getFromEndpointConfig()) || (await getFromEndpointModeConfig())
      );
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () =>
      (0, node_config_provider_1.loadConfig)(
        EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS
      )();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(
        EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS
      )();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(
            `Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(
              EndpointMode_1.EndpointMode
            )}`
          );
      }
    };
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL =
      'https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html';
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval =
        STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +
        Math.floor(
          Math.random() *
            STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS
        );
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn(
        'Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: ' +
          STATIC_STABILITY_DOC_URL
      );
      const originalExpiration =
        (_a = credentials.originalExpiration) !== null && _a !== void 0
          ? _a
          : credentials.expiration;
      return {
        ...credentials,
        ...(originalExpiration ? { originalExpiration } : {}),
        expiration: newExpiration,
      };
    };
    exports.getExtendedInstanceMetadataCredentials =
      getExtendedInstanceMetadataCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 =
      require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger =
        (options === null || options === void 0 ? void 0 : options.logger) ||
        console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (
            credentials.expiration &&
            credentials.expiration.getTime() < Date.now()
          ) {
            credentials = (0,
            getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              credentials,
              logger
            );
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn('Credential renew failed: ', e);
            credentials = (0,
            getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              pastCredentials,
              logger
            );
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs20();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry2();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = '/latest/meta-data/iam/security-credentials/';
    var IMDS_TOKEN_PATH = '/latest/api/token';
    var fromInstanceMetadata = (init = {}) =>
      (0, staticStabilityProvider_1.staticStabilityProvider)(
        getInstanceImdsProvider(init),
        { logger: init.logger }
      );
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0,
      RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (
          await (0, retry_1.retry)(async () => {
            let profile2;
            try {
              profile2 = await getProfile(options);
            } catch (err) {
              if (err.statusCode === 401) {
                disableFetchToken = false;
              }
              throw err;
            }
            return profile2;
          }, maxRetries2)
        ).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0,
        getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (
              await getMetadataToken({ ...endpoint, timeout })
            ).toString();
          } catch (error) {
            if (
              (error === null || error === void 0
                ? void 0
                : error.statusCode) === 400
            ) {
              throw Object.assign(error, {
                message: 'EC2 Metadata token request returned error',
              });
            } else if (
              error.message === 'TimeoutError' ||
              [403, 404, 405].includes(error.statusCode)
            ) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              'x-aws-ec2-metadata-token': token,
            },
            timeout,
          });
        }
      };
    };
    var getMetadataToken = async (options) =>
      (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_TOKEN_PATH,
        method: 'PUT',
        headers: {
          'x-aws-ec2-metadata-token-ttl-seconds': '21600',
        },
      });
    var getProfile = async (options) =>
      (
        await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })
      ).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse(
        (
          await (0, httpRequest_1.httpRequest)({
            ...options,
            path: IMDS_PATH + profile,
          })
        ).toString()
      );
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError(
          'Invalid response received from instance metadata service.'
        );
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types5 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types5(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, 'httpRequest', {
      enumerable: true,
      get: function () {
        return httpRequest_1.httpRequest;
      },
    });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, 'getInstanceMetadataEndpoint', {
      enumerable: true,
      get: function () {
        return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
      },
    });
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs32();
    var credential_provider_imds_1 = require_dist_cjs35();
    var property_provider_1 = require_dist_cjs20();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv,
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`
        );
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.role_arn === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1 &&
      ['undefined', 'string'].indexOf(typeof arg.external_id) > -1 &&
      ['undefined', 'string'].indexOf(typeof arg.mfa_serial) > -1 &&
      (isAssumeRoleWithSourceProfile(arg) ||
        isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) =>
      typeof arg.source_profile === 'string' &&
      typeof arg.credential_source === 'undefined';
    var isAssumeRoleWithProviderProfile = (arg) =>
      typeof arg.credential_source === 'string' &&
      typeof arg.source_profile === 'undefined';
    var resolveAssumeRoleCredentials = async (
      profileName,
      profiles,
      options,
      visitedProfiles = {}
    ) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(
          `Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`,
          false
        );
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0,
          shared_ini_file_loader_1.getProfileName)(
            options
          )}. Profiles visited: ` + Object.keys(visitedProfiles).join(', '),
          false
        );
      }
      const sourceCredsProvider = source_profile
        ? (0, resolveProfileData_1.resolveProfileData)(
            source_profile,
            profiles,
            options,
            {
              ...visitedProfiles,
              [source_profile]: true,
            }
          )
        : (0, resolveCredentialSource_1.resolveCredentialSource)(
            data.credential_source,
            profileName
          )();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(
            `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
            false
          );
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(
          `Profile ${profileName} credential_process did not return Version 1.`
        );
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(
          `Profile ${profileName} credential_process returned invalid credentials.`
        );
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(
            `Profile ${profileName} credential_process returned expired credentials.`
          );
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...(data.SessionToken && { sessionToken: data.SessionToken }),
        ...(data.Expiration && { expiration: new Date(data.Expiration) }),
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs20();
    var child_process_1 = require('child_process');
    var util_1 = require('util');
    var getValidatedProcessCredentials_1 =
      require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile['credential_process'];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(
                `Profile ${profileName} credential_process returned invalid JSON.`
              );
            }
            return (0,
            getValidatedProcessCredentials_1.getValidatedProcessCredentials)(
              profileName,
              data
            );
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(
              error.message
            );
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(
            `Profile ${profileName} did not contain credential_process.`
          );
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `Profile ${profileName} could not be found in shared credentials file.`
        );
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(
          init
        );
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(
          (0, shared_ini_file_loader_1.getProfileName)(init),
          profiles
        );
      };
    exports.fromProcess = fromProcess;
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProcessCredentials = exports.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs36();
    var isProcessProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.credential_process === 'string';
    exports.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) =>
      (0, credential_provider_process_1.fromProcess)({
        ...options,
        profile,
      })();
    exports.resolveProcessCredentials = resolveProcessCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) =>
      arg &&
      (typeof arg.sso_start_url === 'string' ||
        typeof arg.sso_account_id === 'string' ||
        typeof arg.sso_session === 'string' ||
        typeof arg.sso_region === 'string' ||
        typeof arg.sso_role_name === 'string');
    exports.isSsoProfile = isSsoProfile;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LogoutRequestFilterSensitiveLog =
      exports.ListAccountsRequestFilterSensitiveLog =
      exports.ListAccountRolesRequestFilterSensitiveLog =
      exports.GetRoleCredentialsResponseFilterSensitiveLog =
      exports.RoleCredentialsFilterSensitiveLog =
      exports.GetRoleCredentialsRequestFilterSensitiveLog =
      exports.UnauthorizedException =
      exports.TooManyRequestsException =
      exports.ResourceNotFoundException =
      exports.InvalidRequestException =
        void 0;
    var smithy_client_1 = require_dist_cjs2();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'InvalidRequestException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidRequestException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'ResourceNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'TooManyRequestsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TooManyRequestsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'UnauthorizedException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'UnauthorizedException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.GetRoleCredentialsRequestFilterSensitiveLog =
      GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.secretAccessKey && {
        secretAccessKey: smithy_client_1.SENSITIVE_STRING,
      }),
      ...(obj.sessionToken && {
        sessionToken: smithy_client_1.SENSITIVE_STRING,
      }),
    });
    exports.RoleCredentialsFilterSensitiveLog =
      RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.roleCredentials && {
        roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(
          obj.roleCredentials
        ),
      }),
    });
    exports.GetRoleCredentialsResponseFilterSensitiveLog =
      GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.ListAccountRolesRequestFilterSensitiveLog =
      ListAccountRolesRequestFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.ListAccountsRequestFilterSensitiveLog =
      ListAccountsRequestFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.de_LogoutCommand =
      exports.de_ListAccountsCommand =
      exports.de_ListAccountRolesCommand =
      exports.de_GetRoleCredentialsCommand =
      exports.se_LogoutCommand =
      exports.se_ListAccountsCommand =
      exports.se_ListAccountRolesCommand =
      exports.se_GetRoleCredentialsCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var se_GetRoleCredentialsCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        'x-amz-sso_bearer_token': input.accessToken,
      });
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/federation/credentials`;
      const query = (0, smithy_client_1.map)({
        role_name: [
          ,
          (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`),
        ],
        account_id: [
          ,
          (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`),
        ],
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.se_GetRoleCredentialsCommand = se_GetRoleCredentialsCommand;
    var se_ListAccountRolesCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        'x-amz-sso_bearer_token': input.accessToken,
      });
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/assignment/roles`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [
          () => input.maxResults !== void 0,
          () => input.maxResults.toString(),
        ],
        account_id: [
          ,
          (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`),
        ],
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.se_ListAccountRolesCommand = se_ListAccountRolesCommand;
    var se_ListAccountsCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        'x-amz-sso_bearer_token': input.accessToken,
      });
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/assignment/accounts`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [
          () => input.maxResults !== void 0,
          () => input.maxResults.toString(),
        ],
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.se_ListAccountsCommand = se_ListAccountsCommand;
    var se_LogoutCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        'x-amz-sso_bearer_token': input.accessToken,
      });
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.se_LogoutCommand = se_LogoutCommand;
    var de_GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoleCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        roleCredentials: smithy_client_1._json,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetRoleCredentialsCommand = de_GetRoleCredentialsCommand;
    var de_GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountRolesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        nextToken: smithy_client_1.expectString,
        roleList: smithy_client_1._json,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountRolesCommand = de_ListAccountRolesCommand;
    var de_ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        accountList: smithy_client_1._json,
        nextToken: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountsCommand = de_ListAccountsCommand;
    var de_ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_LogoutCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.de_LogoutCommand = de_LogoutCommand;
    var de_LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(
      SSOServiceException_1.SSOServiceException
    );
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId:
        output.headers['x-amzn-requestid'] ??
        output.headers['x-amzn-request-id'] ??
        output.headers['x-amz-request-id'],
      extendedRequestId: output.headers['x-amz-id-2'],
      cfId: output.headers['x-amz-cf-id'],
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return (
        context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
      );
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) =>
        context.utf8Encoder(body)
      );
    var isSerializableHeaderValue = (value) =>
      value !== void 0 &&
      value !== null &&
      value !== '' &&
      (!Object.getOwnPropertyNames(value).includes('length') ||
        value.length != 0) &&
      (!Object.getOwnPropertyNames(value).includes('size') || value.size != 0);
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          return JSON.parse(encoded);
        }
        return {};
      });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey2 = (object, key) =>
        Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(',') >= 0) {
          cleanValue = cleanValue.split(',')[0];
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      const headerKey = findKey2(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data['__type'] !== void 0) {
        return sanitizeErrorCode(data['__type']);
      }
    };
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetRoleCredentialsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'GetRoleCredentialsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog:
            models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog:
            models_0_1.GetRoleCredentialsResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRoleCredentialsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRoleCredentialsCommand)(
          output,
          context
        );
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListAccountRolesCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'ListAccountRolesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog:
            models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListAccountsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'ListAccountsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog:
            models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LogoutCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            LogoutCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'LogoutCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: 'awsssoportal',
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  },
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sso',
      description:
        'AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native',
      version: '3.326.0',
      scripts: {
        build:
          "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps':
          'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client':
          'node ../../scripts/generate-clients/single-service --solo sso',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '3.0.0',
        '@aws-crypto/sha256-js': '3.0.0',
        '@aws-sdk/config-resolver': '3.310.0',
        '@aws-sdk/fetch-http-handler': '3.310.0',
        '@aws-sdk/hash-node': '3.310.0',
        '@aws-sdk/invalid-dependency': '3.310.0',
        '@aws-sdk/middleware-content-length': '3.325.0',
        '@aws-sdk/middleware-endpoint': '3.325.0',
        '@aws-sdk/middleware-host-header': '3.325.0',
        '@aws-sdk/middleware-logger': '3.325.0',
        '@aws-sdk/middleware-recursion-detection': '3.325.0',
        '@aws-sdk/middleware-retry': '3.325.0',
        '@aws-sdk/middleware-serde': '3.325.0',
        '@aws-sdk/middleware-stack': '3.325.0',
        '@aws-sdk/middleware-user-agent': '3.325.0',
        '@aws-sdk/node-config-provider': '3.310.0',
        '@aws-sdk/node-http-handler': '3.321.1',
        '@aws-sdk/protocol-http': '3.310.0',
        '@aws-sdk/smithy-client': '3.325.0',
        '@aws-sdk/types': '3.310.0',
        '@aws-sdk/url-parser': '3.310.0',
        '@aws-sdk/util-base64': '3.310.0',
        '@aws-sdk/util-body-length-browser': '3.310.0',
        '@aws-sdk/util-body-length-node': '3.310.0',
        '@aws-sdk/util-defaults-mode-browser': '3.325.0',
        '@aws-sdk/util-defaults-mode-node': '3.325.0',
        '@aws-sdk/util-endpoints': '3.319.0',
        '@aws-sdk/util-retry': '3.310.0',
        '@aws-sdk/util-user-agent-browser': '3.310.0',
        '@aws-sdk/util-user-agent-node': '3.310.0',
        '@aws-sdk/util-utf8': '3.310.0',
        tslib: '^2.5.0',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.310.0',
        '@tsconfig/node14': '1.0.3',
        '@types/node': '^14.14.31',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typedoc: '0.23.23',
        typescript: '~4.9.5',
      },
      engines: {
        node: '>=14.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage:
        'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sso',
      },
    };
  },
});

// node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  'node_modules/@aws-sdk/hash-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var util_utf8_1 = require_dist_cjs24();
    var buffer_1 = require('buffer');
    var crypto_1 = require('crypto');
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update(
          (0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding))
        );
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret
          ? (0, crypto_1.createHmac)(
              this.algorithmIdentifier,
              castSourceData(this.secret)
            )
          : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === 'string') {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(
          toCast.buffer,
          toCast.byteOffset,
          toCast.byteLength
        );
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  },
});

// node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  'node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs25();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === 'string') {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join('&');
    }
    exports.buildQueryString = buildQueryString;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'EPIPE', 'ETIMEDOUT'];
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues)
          ? headerValues.join(',')
          : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on('socket', (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(
              Object.assign(
                new Error(
                  `Socket timed out without establishing a connection within ${timeoutInMs} ms`
                ),
                {
                  name: 'TimeoutError',
                }
              )
            );
          }, timeoutInMs);
          socket.on('connect', () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(
          Object.assign(
            new Error(`Connection timed out after ${timeoutInMs} ms`),
            { name: 'TimeoutError' }
          )
        );
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require('stream');
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers['Expect'] || request.headers['expect'];
      if (expect === '100-continue') {
        httpRequest.on('continue', () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttpHandler = exports.DEFAULT_REQUEST_TIMEOUT = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs38();
    var http_1 = require('http');
    var https_1 = require('https');
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    exports.DEFAULT_REQUEST_TIMEOUT = 0;
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'http/1.1' };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((_options) => {
                resolve(this.resolveDefaultConfig(_options));
              })
              .catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const {
          requestTimeout,
          connectionTimeout,
          socketTimeout,
          httpAgent,
          httpsAgent,
        } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout:
            requestTimeout !== null && requestTimeout !== void 0
              ? requestTimeout
              : socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent:
            httpsAgent || new https_1.Agent({ keepAlive, maxSockets }),
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b =
          (_a = this.config) === null || _a === void 0
            ? void 0
            : _a.httpAgent) === null || _b === void 0
          ? void 0
          : _b.destroy();
        (_d =
          (_c = this.config) === null || _c === void 0
            ? void 0
            : _c.httpsAgent) === null || _d === void 0
          ? void 0
          : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error('Node HTTP request handler config is not resolved');
          }
          if (
            abortSignal === null || abortSignal === void 0
              ? void 0
              : abortSignal.aborted
          ) {
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === 'https:';
          const queryString = (0, querystring_builder_1.buildQueryString)(
            request.query || {}
          );
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(
                res.headers
              ),
              body: res,
            });
            resolve({ response: httpResponse });
          });
          req.on('error', (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: 'TimeoutError' }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(
            req,
            reject,
            this.config.connectionTimeout
          );
          (0, set_socket_timeout_1.setSocketTimeout)(
            req,
            reject,
            this.config.requestTimeout
          );
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-connection-pool.js
var require_node_http2_connection_pool = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-connection-pool.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2ConnectionPool = void 0;
    var NodeHttp2ConnectionPool = class {
      constructor(sessions) {
        this.sessions = [];
        this.sessions =
          sessions !== null && sessions !== void 0 ? sessions : [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    exports.NodeHttp2ConnectionPool = NodeHttp2ConnectionPool;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-connection-manager.js
var require_node_http2_connection_manager = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-connection-manager.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2ConnectionManager = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var http2_1 = tslib_1.__importDefault(require('http2'));
    var node_http2_connection_pool_1 = require_node_http2_connection_pool();
    var NodeHttp2ConnectionManager = class {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError('maxConcurrency must be greater than zero.');
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url2 = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url2);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = http2_1.default.connect(url2);
        if (this.config.maxConcurrency) {
          session.settings(
            { maxConcurrentStreams: this.config.maxConcurrency },
            (err) => {
              if (err) {
                throw new Error(
                  'Fail to set maxConcurrentStreams to ' +
                    this.config.maxConcurrency +
                    'when creating new session for ' +
                    requestContext.destination.toString()
                );
              }
            }
          );
        }
        session.unref();
        const destroySessionCb = () => {
          session.destroy();
          this.deleteSession(url2, session);
        };
        session.on('goaway', destroySessionCb);
        session.on('error', destroySessionCb);
        session.on('frameError', destroySessionCb);
        session.on('close', () => this.deleteSession(url2, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(
            connectionConfiguration.requestTimeout,
            destroySessionCb
          );
        }
        const connectionPool =
          this.sessionCache.get(url2) ||
          new node_http2_connection_pool_1.NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url2, connectionPool);
        return session;
      }
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) === null || _a === void 0
          ? void 0
          : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError(
            'maxConcurrentStreams must be greater than zero.'
          );
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    exports.NodeHttp2ConnectionManager = NodeHttp2ConnectionManager;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs38();
    var http2_1 = require('http2');
    var get_transformed_headers_1 = require_get_transformed_headers();
    var node_http2_connection_manager_1 =
      require_node_http2_connection_manager();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'h2' };
        this.connectionManager =
          new node_http2_connection_manager_1.NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((opts) => {
                resolve(opts || {});
              })
              .catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(
            this.config.disableConcurrentStreams || false
          );
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(
              this.config.maxConcurrentStreams
            );
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          var _a;
          let fulfilled = false;
          if (
            abortSignal === null || abortSignal === void 0
              ? void 0
              : abortSignal.aborted
          ) {
            fulfilled = true;
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ''}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout:
              (_a = this.config) === null || _a === void 0
                ? void 0
                : _a.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false,
          });
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(
            query || {}
          );
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString
              ? `${path}?${queryString}`
              : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method,
          });
          session.ref();
          req.on('response', (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[':status'] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(
                headers
              ),
              body: req,
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(
                `Stream timed out because of no activity for ${requestTimeout} ms`
              );
              timeoutError.name = 'TimeoutError';
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          req.on('frameError', (type, code, id) => {
            reject(
              new Error(
                `Frame type id ${type} in stream id ${id} has failed with code ${code}.`
              )
            );
          });
          req.on('error', reject);
          req.on('aborted', () => {
            reject(
              new Error(
                `HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`
              )
            );
          });
          req.on('close', () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(
                new Error(
                  'Unexpected error: http2 request did not get a response'
                )
              );
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Collector = void 0;
    var stream_1 = require('stream');
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream4) =>
      new Promise((resolve, reject) => {
        const collector = new collector_1.Collector();
        stream4.pipe(collector);
        stream4.on('error', (err) => {
          collector.end();
          reject(err);
        });
        collector.on('error', reject);
        collector.on('finish', function () {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    exports.streamCollector = streamCollector;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  },
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  'node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require('fs');
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === 'string') {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === 'number') {
        return body.byteLength;
      } else if (typeof body.size === 'number') {
        return body.size;
      } else if (typeof body.path === 'string' || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === 'number') {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  },
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  'node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  },
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  'node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js'(
    exports,
    module2
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (
          typeof require === 'function' &&
          typeof module2 !== 'undefined' &&
          require('aws-crt')
        ) {
          return ['md/crt-avail'];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  },
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  'node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultUserAgent =
      exports.UA_APP_ID_INI_NAME =
      exports.UA_APP_ID_ENV_NAME =
        void 0;
    var node_config_provider_1 = require_dist_cjs34();
    var os_1 = require('os');
    var process_1 = require('process');
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = 'AWS_SDK_UA_APP_ID';
    exports.UA_APP_ID_INI_NAME = 'sdk-ua-app-id';
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ['aws-sdk-js', clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ['lang/js'],
        ['md/nodejs', `${process_1.versions.node}`],
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0,
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId
            ? [...sections, [`app/${appId}`]]
            : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  },
});

// node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  'node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if ((input.length * 3) % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, 'base64');
      return new Uint8Array(
        buffer.buffer,
        buffer.byteOffset,
        buffer.byteLength
      );
    };
    exports.fromBase64 = fromBase64;
  },
});

// node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  'node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var toBase64 = (input) =>
      (0, util_buffer_from_1.fromArrayBuffer)(
        input.buffer,
        input.byteOffset,
        input.byteLength
      ).toString('base64');
    exports.toBase64 = toBase64;
  },
});

// node_modules/@aws-sdk/util-base64/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  'node_modules/@aws-sdk/util-base64/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports);
    tslib_1.__exportStar(require_toBase64(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var p = 'required';
    var q = 'fn';
    var r = 'argv';
    var s = 'ref';
    var a = 'PartitionResult';
    var b = 'tree';
    var c = 'error';
    var d = 'endpoint';
    var e = { [p]: false, type: 'String' };
    var f = { [p]: true, default: false, type: 'Boolean' };
    var g = { [s]: 'Endpoint' };
    var h = { [q]: 'booleanEquals', [r]: [{ [s]: 'UseFIPS' }, true] };
    var i = { [q]: 'booleanEquals', [r]: [{ [s]: 'UseDualStack' }, true] };
    var j = {};
    var k = {
      [q]: 'booleanEquals',
      [r]: [true, { [q]: 'getAttr', [r]: [{ [s]: a }, 'supportsFIPS'] }],
    };
    var l = {
      [q]: 'booleanEquals',
      [r]: [true, { [q]: 'getAttr', [r]: [{ [s]: a }, 'supportsDualStack'] }],
    };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = {
      version: '1.0',
      parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e },
      rules: [
        {
          conditions: [
            { [q]: 'aws.partition', [r]: [{ [s]: 'Region' }], assign: a },
          ],
          type: b,
          rules: [
            {
              conditions: [
                { [q]: 'isSet', [r]: m },
                { [q]: 'parseURL', [r]: m, assign: 'url' },
              ],
              type: b,
              rules: [
                {
                  conditions: n,
                  error:
                    'Invalid Configuration: FIPS and custom endpoint are not supported',
                  type: c,
                },
                {
                  type: b,
                  rules: [
                    {
                      conditions: o,
                      error:
                        'Invalid Configuration: Dualstack and custom endpoint are not supported',
                      type: c,
                    },
                    {
                      endpoint: { url: g, properties: j, headers: j },
                      type: d,
                    },
                  ],
                },
              ],
            },
            {
              conditions: [h, i],
              type: b,
              rules: [
                {
                  conditions: [k, l],
                  type: b,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        properties: j,
                        headers: j,
                      },
                      type: d,
                    },
                  ],
                },
                {
                  error:
                    'FIPS and DualStack are enabled, but this partition does not support one or both',
                  type: c,
                },
              ],
            },
            {
              conditions: n,
              type: b,
              rules: [
                {
                  conditions: [k],
                  type: b,
                  rules: [
                    {
                      type: b,
                      rules: [
                        {
                          endpoint: {
                            url: 'https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}',
                            properties: j,
                            headers: j,
                          },
                          type: d,
                        },
                      ],
                    },
                  ],
                },
                {
                  error:
                    'FIPS is enabled but this partition does not support FIPS',
                  type: c,
                },
              ],
            },
            {
              conditions: o,
              type: b,
              rules: [
                {
                  conditions: [l],
                  type: b,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        properties: j,
                        headers: j,
                      },
                      type: d,
                    },
                  ],
                },
                {
                  error:
                    'DualStack is enabled but this partition does not support DualStack',
                  type: c,
                },
              ],
            },
            {
              endpoint: {
                url: 'https://portal.sso.{Region}.{PartitionResult#dnsSuffix}',
                properties: j,
                headers: j,
              },
              type: d,
            },
          ],
        },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs29();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger,
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var url_parser_1 = require_dist_cjs4();
    var util_base64_1 = require_dist_cjs42();
    var util_utf8_1 = require_dist_cjs24();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: '2019-06-10',
      base64Decoder:
        (config == null ? void 0 : config.base64Decoder) ??
        util_base64_1.fromBase64,
      base64Encoder:
        (config == null ? void 0 : config.base64Encoder) ??
        util_base64_1.toBase64,
      disableHostPrefix:
        (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider:
        (config == null ? void 0 : config.endpointProvider) ??
        endpointResolver_1.defaultEndpointResolver,
      logger:
        (config == null ? void 0 : config.logger) ??
        new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? 'SSO',
      urlParser:
        (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder:
        (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder:
        (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.IMDS_REGION_PATH =
      exports.DEFAULTS_MODE_OPTIONS =
      exports.ENV_IMDS_DISABLED =
      exports.AWS_DEFAULT_REGION_ENV =
      exports.AWS_REGION_ENV =
      exports.AWS_EXECUTION_ENV =
        void 0;
    exports.AWS_EXECUTION_ENV = 'AWS_EXECUTION_ENV';
    exports.AWS_REGION_ENV = 'AWS_REGION';
    exports.AWS_DEFAULT_REGION_ENV = 'AWS_DEFAULT_REGION';
    exports.ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    exports.DEFAULTS_MODE_OPTIONS = [
      'in-region',
      'cross-region',
      'mobile',
      'standard',
      'legacy',
    ];
    exports.IMDS_REGION_PATH = '/latest/meta-data/placement/region';
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = 'AWS_DEFAULTS_MODE';
    var AWS_DEFAULTS_MODE_CONFIG = 'defaults_mode';
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: 'legacy',
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_imds_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs34();
    var property_provider_1 = require_dist_cjs20();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({
      region = (0, node_config_provider_1.loadConfig)(
        config_resolver_1.NODE_REGION_CONFIG_OPTIONS
      ),
      defaultsMode = (0, node_config_provider_1.loadConfig)(
        defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS
      ),
    } = {}) =>
      (0, property_provider_1.memoize)(async () => {
        const mode =
          typeof defaultsMode === 'function'
            ? await defaultsMode()
            : defaultsMode;
        switch (
          mode === null || mode === void 0 ? void 0 : mode.toLowerCase()
        ) {
          case 'auto':
            return resolveNodeDefaultsModeAuto(region);
          case 'in-region':
          case 'cross-region':
          case 'mobile':
          case 'standard':
          case 'legacy':
            return Promise.resolve(
              mode === null || mode === void 0
                ? void 0
                : mode.toLocaleLowerCase()
            );
          case void 0:
            return Promise.resolve('legacy');
          default:
            throw new Error(
              `Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(
                ', '
              )}, got ${mode}`
            );
        }
      });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion =
          typeof clientRegion === 'function'
            ? await clientRegion()
            : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return 'standard';
        }
        if (resolvedRegion === inferredRegion) {
          return 'in-region';
        } else {
          return 'cross-region';
        }
      }
      return 'standard';
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (
        process.env[constants_1.AWS_EXECUTION_ENV] &&
        (process.env[constants_1.AWS_REGION_ENV] ||
          process.env[constants_1.AWS_DEFAULT_REGION_ENV])
      ) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null &&
          _a !== void 0
          ? _a
          : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0,
          credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (
            await (0, credential_provider_imds_1.httpRequest)({
              ...endpoint,
              path: constants_1.IMDS_REGION_PATH,
            })
          ).toString();
        } catch (e) {}
      }
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs10();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs19();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs39();
    var util_body_length_node_1 = require_dist_cjs40();
    var util_retry_1 = require_dist_cjs18();
    var util_user_agent_node_1 = require_dist_cjs41();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs2();
    var util_defaults_mode_node_1 = require_dist_cjs43();
    var smithy_client_2 = require_dist_cjs2();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0,
      util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () =>
        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(
        config
      );
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        bodyLengthChecker:
          (config == null ? void 0 : config.bodyLengthChecker) ??
          util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider:
          (config == null ? void 0 : config.defaultUserAgentProvider) ??
          (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version,
          }),
        maxAttempts:
          (config == null ? void 0 : config.maxAttempts) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS
          ),
        region:
          (config == null ? void 0 : config.region) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
          ),
        requestHandler:
          (config == null ? void 0 : config.requestHandler) ??
          new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (config == null ? void 0 : config.retryMode) ??
          (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async () =>
              (await defaultConfigProvider()).retryMode ||
              util_retry_1.DEFAULT_RETRY_MODE,
          }),
        sha256:
          (config == null ? void 0 : config.sha256) ??
          hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (config == null ? void 0 : config.streamCollector) ??
          node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (config == null ? void 0 : config.useDualstackEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS
          ),
        useFipsEndpoint:
          (config == null ? void 0 : config.useFipsEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS
          ),
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs14();
    var middleware_logger_1 = require_dist_cjs15();
    var middleware_recursion_detection_1 = require_dist_cjs16();
    var middleware_retry_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs2();
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0,
        EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(
          _config_2
        );
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(
          _config_4
        );
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(
          _config_5
        );
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use(
          (0, middleware_retry_1.getRetryPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_host_header_1.getHostHeaderPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_logger_1.getLoggerPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(
            this.config
          )
        );
        this.middlewareStack.use(
          (0, middleware_user_agent_1.getUserAgentPlugin)(this.config)
        );
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSO = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var commands = {
      GetRoleCredentialsCommand:
        GetRoleCredentialsCommand_1.GetRoleCredentialsCommand,
      ListAccountRolesCommand:
        ListAccountRolesCommand_1.ListAccountRolesCommand,
      ListAccountsCommand: ListAccountsCommand_1.ListAccountsCommand,
      LogoutCommand: LogoutCommand_1.LogoutCommand,
    };
    var SSO = class extends SSOClient_1.SSOClient {};
    exports.SSO = SSO;
    (0, smithy_client_1.createAggregatedClient)(commands, SSO);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListAccountRolesCommand_1.ListAccountRolesCommand(input),
        ...args
      );
    };
    async function* paginateListAccountRoles(
      config,
      input,
      ...additionalArguments
    ) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input['maxResults'] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected SSO | SSOClient');
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListAccountsCommand_1.ListAccountsCommand(input),
        ...args
      );
    };
    async function* paginateListAccounts(
      config,
      input,
      ...additionalArguments
    ) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input['maxResults'] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected SSO | SSOClient');
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, 'SSOServiceException', {
      enumerable: true,
      get: function () {
        return SSOServiceException_1.SSOServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/constants.js
var require_constants8 = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.REFRESH_MESSAGE = exports.EXPIRE_WINDOW_MS = void 0;
    exports.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js
var require_SSOOIDCServiceException = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOOIDCServiceException = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var SSOOIDCServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);
      }
    };
    exports.SSOOIDCServiceException = SSOOIDCServiceException;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js
var require_models_04 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.InvalidClientMetadataException =
      exports.UnsupportedGrantTypeException =
      exports.UnauthorizedClientException =
      exports.SlowDownException =
      exports.InvalidScopeException =
      exports.InvalidRequestException =
      exports.InvalidGrantException =
      exports.InvalidClientException =
      exports.InternalServerException =
      exports.ExpiredTokenException =
      exports.AuthorizationPendingException =
      exports.AccessDeniedException =
        void 0;
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var AccessDeniedException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'AccessDeniedException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'AccessDeniedException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'AuthorizationPendingException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'AuthorizationPendingException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'ExpiredTokenException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExpiredTokenException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InternalServerException',
          $fault: 'server',
          ...opts,
        });
        this.name = 'InternalServerException';
        this.$fault = 'server';
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InternalServerException = InternalServerException;
    var InvalidClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidClientException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidClientException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidGrantException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidGrantException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidGrantException = InvalidGrantException;
    var InvalidRequestException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidRequestException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidRequestException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidScopeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidScopeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'SlowDownException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'SlowDownException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'UnauthorizedClientException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'UnauthorizedClientException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'UnsupportedGrantTypeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'UnsupportedGrantTypeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidClientMetadataException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidClientMetadataException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientMetadataException = InvalidClientMetadataException;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson12 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.de_StartDeviceAuthorizationCommand =
      exports.de_RegisterClientCommand =
      exports.de_CreateTokenCommand =
      exports.se_StartDeviceAuthorizationCommand =
      exports.se_RegisterClientCommand =
      exports.se_CreateTokenCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_04();
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var se_CreateTokenCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = {
        'content-type': 'application/json',
      };
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/token`;
      let body;
      body = JSON.stringify(
        (0, smithy_client_1.take)(input, {
          clientId: [],
          clientSecret: [],
          code: [],
          deviceCode: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          scope: (_2) => (0, smithy_client_1._json)(_2),
        })
      );
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.se_CreateTokenCommand = se_CreateTokenCommand;
    var se_RegisterClientCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = {
        'content-type': 'application/json',
      };
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/client/register`;
      let body;
      body = JSON.stringify(
        (0, smithy_client_1.take)(input, {
          clientName: [],
          clientType: [],
          scopes: (_2) => (0, smithy_client_1._json)(_2),
        })
      );
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.se_RegisterClientCommand = se_RegisterClientCommand;
    var se_StartDeviceAuthorizationCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = {
        'content-type': 'application/json',
      };
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/device_authorization`;
      let body;
      body = JSON.stringify(
        (0, smithy_client_1.take)(input, {
          clientId: [],
          clientSecret: [],
          startUrl: [],
        })
      );
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.se_StartDeviceAuthorizationCommand =
      se_StartDeviceAuthorizationCommand;
    var de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateTokenCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        accessToken: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        idToken: smithy_client_1.expectString,
        refreshToken: smithy_client_1.expectString,
        tokenType: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateTokenCommand = de_CreateTokenCommand;
    var de_CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'AccessDeniedException':
        case 'com.amazonaws.ssooidc#AccessDeniedException':
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case 'AuthorizationPendingException':
        case 'com.amazonaws.ssooidc#AuthorizationPendingException':
          throw await de_AuthorizationPendingExceptionRes(
            parsedOutput,
            context
          );
        case 'ExpiredTokenException':
        case 'com.amazonaws.ssooidc#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'InternalServerException':
        case 'com.amazonaws.ssooidc#InternalServerException':
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case 'InvalidClientException':
        case 'com.amazonaws.ssooidc#InvalidClientException':
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case 'InvalidGrantException':
        case 'com.amazonaws.ssooidc#InvalidGrantException':
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case 'InvalidRequestException':
        case 'com.amazonaws.ssooidc#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'InvalidScopeException':
        case 'com.amazonaws.ssooidc#InvalidScopeException':
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case 'SlowDownException':
        case 'com.amazonaws.ssooidc#SlowDownException':
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case 'UnauthorizedClientException':
        case 'com.amazonaws.ssooidc#UnauthorizedClientException':
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case 'UnsupportedGrantTypeException':
        case 'com.amazonaws.ssooidc#UnsupportedGrantTypeException':
          throw await de_UnsupportedGrantTypeExceptionRes(
            parsedOutput,
            context
          );
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegisterClientCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        authorizationEndpoint: smithy_client_1.expectString,
        clientId: smithy_client_1.expectString,
        clientIdIssuedAt: smithy_client_1.expectLong,
        clientSecret: smithy_client_1.expectString,
        clientSecretExpiresAt: smithy_client_1.expectLong,
        tokenEndpoint: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_RegisterClientCommand = de_RegisterClientCommand;
    var de_RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerException':
        case 'com.amazonaws.ssooidc#InternalServerException':
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case 'InvalidClientMetadataException':
        case 'com.amazonaws.ssooidc#InvalidClientMetadataException':
          throw await de_InvalidClientMetadataExceptionRes(
            parsedOutput,
            context
          );
        case 'InvalidRequestException':
        case 'com.amazonaws.ssooidc#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'InvalidScopeException':
        case 'com.amazonaws.ssooidc#InvalidScopeException':
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        deviceCode: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        interval: smithy_client_1.expectInt32,
        userCode: smithy_client_1.expectString,
        verificationUri: smithy_client_1.expectString,
        verificationUriComplete: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_StartDeviceAuthorizationCommand =
      de_StartDeviceAuthorizationCommand;
    var de_StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerException':
        case 'com.amazonaws.ssooidc#InternalServerException':
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case 'InvalidClientException':
        case 'com.amazonaws.ssooidc#InvalidClientException':
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case 'InvalidRequestException':
        case 'com.amazonaws.ssooidc#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'SlowDownException':
        case 'com.amazonaws.ssooidc#SlowDownException':
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case 'UnauthorizedClientException':
        case 'com.amazonaws.ssooidc#UnauthorizedClientException':
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(
      SSOOIDCServiceException_1.SSOOIDCServiceException
    );
    var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidClientMetadataExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId:
        output.headers['x-amzn-requestid'] ??
        output.headers['x-amzn-request-id'] ??
        output.headers['x-amz-request-id'],
      extendedRequestId: output.headers['x-amz-id-2'],
      cfId: output.headers['x-amz-cf-id'],
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return (
        context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
      );
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) =>
        context.utf8Encoder(body)
      );
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          return JSON.parse(encoded);
        }
        return {};
      });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey2 = (object, key) =>
        Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(',') >= 0) {
          cleanValue = cleanValue.split(',')[0];
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      const headerKey = findKey2(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data['__type'] !== void 0) {
        return sanitizeErrorCode(data['__type']);
      }
    };
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js
var require_CreateTokenCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var CreateTokenCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            CreateTokenCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOOIDCClient';
        const commandName = 'CreateTokenCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateTokenCommand)(output, context);
      }
    };
    exports.CreateTokenCommand = CreateTokenCommand;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js
var require_RegisterClientCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RegisterClientCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var RegisterClientCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            RegisterClientCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOOIDCClient';
        const commandName = 'RegisterClientCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RegisterClientCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RegisterClientCommand)(output, context);
      }
    };
    exports.RegisterClientCommand = RegisterClientCommand;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js
var require_StartDeviceAuthorizationCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StartDeviceAuthorizationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var StartDeviceAuthorizationCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            StartDeviceAuthorizationCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOOIDCClient';
        const commandName = 'StartDeviceAuthorizationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_StartDeviceAuthorizationCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_StartDeviceAuthorizationCommand)(
          output,
          context
        );
      }
    };
    exports.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters4 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: 'awsssooidc',
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package4 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sso-oidc',
      description:
        'AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native',
      version: '3.326.0',
      scripts: {
        build:
          "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps':
          'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client':
          'node ../../scripts/generate-clients/single-service --solo sso-oidc',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '3.0.0',
        '@aws-crypto/sha256-js': '3.0.0',
        '@aws-sdk/config-resolver': '3.310.0',
        '@aws-sdk/fetch-http-handler': '3.310.0',
        '@aws-sdk/hash-node': '3.310.0',
        '@aws-sdk/invalid-dependency': '3.310.0',
        '@aws-sdk/middleware-content-length': '3.325.0',
        '@aws-sdk/middleware-endpoint': '3.325.0',
        '@aws-sdk/middleware-host-header': '3.325.0',
        '@aws-sdk/middleware-logger': '3.325.0',
        '@aws-sdk/middleware-recursion-detection': '3.325.0',
        '@aws-sdk/middleware-retry': '3.325.0',
        '@aws-sdk/middleware-serde': '3.325.0',
        '@aws-sdk/middleware-stack': '3.325.0',
        '@aws-sdk/middleware-user-agent': '3.325.0',
        '@aws-sdk/node-config-provider': '3.310.0',
        '@aws-sdk/node-http-handler': '3.321.1',
        '@aws-sdk/protocol-http': '3.310.0',
        '@aws-sdk/smithy-client': '3.325.0',
        '@aws-sdk/types': '3.310.0',
        '@aws-sdk/url-parser': '3.310.0',
        '@aws-sdk/util-base64': '3.310.0',
        '@aws-sdk/util-body-length-browser': '3.310.0',
        '@aws-sdk/util-body-length-node': '3.310.0',
        '@aws-sdk/util-defaults-mode-browser': '3.325.0',
        '@aws-sdk/util-defaults-mode-node': '3.325.0',
        '@aws-sdk/util-endpoints': '3.319.0',
        '@aws-sdk/util-retry': '3.310.0',
        '@aws-sdk/util-user-agent-browser': '3.310.0',
        '@aws-sdk/util-user-agent-node': '3.310.0',
        '@aws-sdk/util-utf8': '3.310.0',
        tslib: '^2.5.0',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.310.0',
        '@tsconfig/node14': '1.0.3',
        '@types/node': '^14.14.31',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typedoc: '0.23.23',
        typescript: '~4.9.5',
      },
      engines: {
        node: '>=14.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage:
        'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sso-oidc',
      },
    };
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var p = 'required';
    var q = 'fn';
    var r = 'argv';
    var s = 'ref';
    var a = 'PartitionResult';
    var b = 'tree';
    var c = 'error';
    var d = 'endpoint';
    var e = { [p]: false, type: 'String' };
    var f = { [p]: true, default: false, type: 'Boolean' };
    var g = { [s]: 'Endpoint' };
    var h = { [q]: 'booleanEquals', [r]: [{ [s]: 'UseFIPS' }, true] };
    var i = { [q]: 'booleanEquals', [r]: [{ [s]: 'UseDualStack' }, true] };
    var j = {};
    var k = {
      [q]: 'booleanEquals',
      [r]: [true, { [q]: 'getAttr', [r]: [{ [s]: a }, 'supportsFIPS'] }],
    };
    var l = {
      [q]: 'booleanEquals',
      [r]: [true, { [q]: 'getAttr', [r]: [{ [s]: a }, 'supportsDualStack'] }],
    };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = {
      version: '1.0',
      parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e },
      rules: [
        {
          conditions: [
            { [q]: 'aws.partition', [r]: [{ [s]: 'Region' }], assign: a },
          ],
          type: b,
          rules: [
            {
              conditions: [
                { [q]: 'isSet', [r]: m },
                { [q]: 'parseURL', [r]: m, assign: 'url' },
              ],
              type: b,
              rules: [
                {
                  conditions: n,
                  error:
                    'Invalid Configuration: FIPS and custom endpoint are not supported',
                  type: c,
                },
                {
                  type: b,
                  rules: [
                    {
                      conditions: o,
                      error:
                        'Invalid Configuration: Dualstack and custom endpoint are not supported',
                      type: c,
                    },
                    {
                      endpoint: { url: g, properties: j, headers: j },
                      type: d,
                    },
                  ],
                },
              ],
            },
            {
              conditions: [h, i],
              type: b,
              rules: [
                {
                  conditions: [k, l],
                  type: b,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        properties: j,
                        headers: j,
                      },
                      type: d,
                    },
                  ],
                },
                {
                  error:
                    'FIPS and DualStack are enabled, but this partition does not support one or both',
                  type: c,
                },
              ],
            },
            {
              conditions: n,
              type: b,
              rules: [
                {
                  conditions: [k],
                  type: b,
                  rules: [
                    {
                      type: b,
                      rules: [
                        {
                          endpoint: {
                            url: 'https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}',
                            properties: j,
                            headers: j,
                          },
                          type: d,
                        },
                      ],
                    },
                  ],
                },
                {
                  error:
                    'FIPS is enabled but this partition does not support FIPS',
                  type: c,
                },
              ],
            },
            {
              conditions: o,
              type: b,
              rules: [
                {
                  conditions: [l],
                  type: b,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        properties: j,
                        headers: j,
                      },
                      type: d,
                    },
                  ],
                },
                {
                  error:
                    'DualStack is enabled but this partition does not support DualStack',
                  type: c,
                },
              ],
            },
            {
              endpoint: {
                url: 'https://oidc.{Region}.{PartitionResult#dnsSuffix}',
                properties: j,
                headers: j,
              },
              type: d,
            },
          ],
        },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs29();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger,
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var url_parser_1 = require_dist_cjs4();
    var util_base64_1 = require_dist_cjs42();
    var util_utf8_1 = require_dist_cjs24();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: '2019-06-10',
      base64Decoder:
        (config == null ? void 0 : config.base64Decoder) ??
        util_base64_1.fromBase64,
      base64Encoder:
        (config == null ? void 0 : config.base64Encoder) ??
        util_base64_1.toBase64,
      disableHostPrefix:
        (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider:
        (config == null ? void 0 : config.endpointProvider) ??
        endpointResolver_1.defaultEndpointResolver,
      logger:
        (config == null ? void 0 : config.logger) ??
        new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? 'SSO OIDC',
      urlParser:
        (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder:
        (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder:
        (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var config_resolver_1 = require_dist_cjs10();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs19();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs39();
    var util_body_length_node_1 = require_dist_cjs40();
    var util_retry_1 = require_dist_cjs18();
    var util_user_agent_node_1 = require_dist_cjs41();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs2();
    var util_defaults_mode_node_1 = require_dist_cjs43();
    var smithy_client_2 = require_dist_cjs2();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0,
      util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () =>
        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(
        config
      );
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        bodyLengthChecker:
          (config == null ? void 0 : config.bodyLengthChecker) ??
          util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider:
          (config == null ? void 0 : config.defaultUserAgentProvider) ??
          (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version,
          }),
        maxAttempts:
          (config == null ? void 0 : config.maxAttempts) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS
          ),
        region:
          (config == null ? void 0 : config.region) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
          ),
        requestHandler:
          (config == null ? void 0 : config.requestHandler) ??
          new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (config == null ? void 0 : config.retryMode) ??
          (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async () =>
              (await defaultConfigProvider()).retryMode ||
              util_retry_1.DEFAULT_RETRY_MODE,
          }),
        sha256:
          (config == null ? void 0 : config.sha256) ??
          hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (config == null ? void 0 : config.streamCollector) ??
          node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (config == null ? void 0 : config.useDualstackEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS
          ),
        useFipsEndpoint:
          (config == null ? void 0 : config.useFipsEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS
          ),
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js
var require_SSOOIDCClient = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOOIDCClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs14();
    var middleware_logger_1 = require_dist_cjs15();
    var middleware_recursion_detection_1 = require_dist_cjs16();
    var middleware_retry_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs2();
    var EndpointParameters_1 = require_EndpointParameters4();
    var runtimeConfig_1 = require_runtimeConfig2();
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0,
        EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(
          _config_2
        );
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(
          _config_4
        );
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(
          _config_5
        );
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use(
          (0, middleware_retry_1.getRetryPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_host_header_1.getHostHeaderPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_logger_1.getLoggerPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(
            this.config
          )
        );
        this.middlewareStack.use(
          (0, middleware_user_agent_1.getUserAgentPlugin)(this.config)
        );
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOOIDCClient = SSOOIDCClient;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js
var require_SSOOIDC = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOOIDC = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var CreateTokenCommand_1 = require_CreateTokenCommand();
    var RegisterClientCommand_1 = require_RegisterClientCommand();
    var StartDeviceAuthorizationCommand_1 =
      require_StartDeviceAuthorizationCommand();
    var SSOOIDCClient_1 = require_SSOOIDCClient();
    var commands = {
      CreateTokenCommand: CreateTokenCommand_1.CreateTokenCommand,
      RegisterClientCommand: RegisterClientCommand_1.RegisterClientCommand,
      StartDeviceAuthorizationCommand:
        StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand,
    };
    var SSOOIDC = class extends SSOOIDCClient_1.SSOOIDCClient {};
    exports.SSOOIDC = SSOOIDC;
    (0, smithy_client_1.createAggregatedClient)(commands, SSOOIDC);
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CreateTokenCommand(), exports);
    tslib_1.__exportStar(require_RegisterClientCommand(), exports);
    tslib_1.__exportStar(require_StartDeviceAuthorizationCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js
var require_models2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_04(), exports);
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOOIDCServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOOIDC(), exports);
    tslib_1.__exportStar(require_SSOOIDCClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    Object.defineProperty(exports, 'SSOOIDCServiceException', {
      enumerable: true,
      get: function () {
        return SSOOIDCServiceException_1.SSOOIDCServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js
var require_getSsoOidcClient = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSsoOidcClient = void 0;
    var client_sso_oidc_1 = require_dist_cjs45();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({
        region: ssoRegion,
      });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports.getSsoOidcClient = getSsoOidcClient;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js
var require_getNewSsoOidcToken = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getNewSsoOidcToken = void 0;
    var client_sso_oidc_1 = require_dist_cjs45();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(
        new client_sso_oidc_1.CreateTokenCommand({
          clientId: ssoToken.clientId,
          clientSecret: ssoToken.clientSecret,
          refreshToken: ssoToken.refreshToken,
          grantType: 'refresh_token',
        })
      );
    };
    exports.getNewSsoOidcToken = getNewSsoOidcToken;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js
var require_validateTokenExpiry = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs20();
    var constants_1 = require_constants8();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(
          `Token is expired. ${constants_1.REFRESH_MESSAGE}`,
          false
        );
      }
    };
    exports.validateTokenExpiry = validateTokenExpiry;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js
var require_validateTokenKey = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs20();
    var constants_1 = require_constants8();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === 'undefined') {
        throw new property_provider_1.TokenProviderError(
          `Value not present for '${key}' in SSO Token${
            forRefresh ? '. Cannot refresh' : ''
          }. ${constants_1.REFRESH_MESSAGE}`,
          false
        );
      }
    };
    exports.validateTokenKey = validateTokenKey;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js
var require_writeSSOTokenToFile = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var fs_1 = require('fs');
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(
        id
      );
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports.writeSSOTokenToFile = writeSSOTokenToFile;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js
var require_fromSso = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSso = void 0;
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var constants_1 = require_constants8();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(
          init
        );
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.TokenProviderError(
            `Profile '${profileName}' could not be found in shared credentials file.`,
            false
          );
        } else if (!profile['sso_session']) {
          throw new property_provider_1.TokenProviderError(
            `Profile '${profileName}' is missing required property 'sso_session'.`
          );
        }
        const ssoSessionName = profile['sso_session'];
        const ssoSessions = await (0,
        shared_ini_file_loader_1.loadSsoSessionData)(init);
        const ssoSession = ssoSessions[ssoSessionName];
        if (!ssoSession) {
          throw new property_provider_1.TokenProviderError(
            `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,
            false
          );
        }
        for (const ssoSessionRequiredKey of ['sso_start_url', 'sso_region']) {
          if (!ssoSession[ssoSessionRequiredKey]) {
            throw new property_provider_1.TokenProviderError(
              `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,
              false
            );
          }
        }
        const ssoStartUrl = ssoSession['sso_start_url'];
        const ssoRegion = ssoSession['sso_region'];
        let ssoToken;
        try {
          ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(
            ssoSessionName
          );
        } catch (e) {
          throw new property_provider_1.TokenProviderError(
            `The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`,
            false
          );
        }
        (0, validateTokenKey_1.validateTokenKey)(
          'accessToken',
          ssoToken.accessToken
        );
        (0, validateTokenKey_1.validateTokenKey)(
          'expiresAt',
          ssoToken.expiresAt
        );
        const { accessToken, expiresAt } = ssoToken;
        const existingToken = {
          token: accessToken,
          expiration: new Date(expiresAt),
        };
        if (
          existingToken.expiration.getTime() - Date.now() >
          constants_1.EXPIRE_WINDOW_MS
        ) {
          return existingToken;
        }
        if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
          (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
          return existingToken;
        }
        (0, validateTokenKey_1.validateTokenKey)(
          'clientId',
          ssoToken.clientId,
          true
        );
        (0, validateTokenKey_1.validateTokenKey)(
          'clientSecret',
          ssoToken.clientSecret,
          true
        );
        (0, validateTokenKey_1.validateTokenKey)(
          'refreshToken',
          ssoToken.refreshToken,
          true
        );
        try {
          lastRefreshAttemptTime.setTime(Date.now());
          const newSsoOidcToken = await (0,
          getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
          (0, validateTokenKey_1.validateTokenKey)(
            'accessToken',
            newSsoOidcToken.accessToken
          );
          (0, validateTokenKey_1.validateTokenKey)(
            'expiresIn',
            newSsoOidcToken.expiresIn
          );
          const newTokenExpiration = new Date(
            Date.now() + newSsoOidcToken.expiresIn * 1e3
          );
          try {
            await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(
              ssoSessionName,
              {
                ...ssoToken,
                accessToken: newSsoOidcToken.accessToken,
                expiresAt: newTokenExpiration.toISOString(),
                refreshToken: newSsoOidcToken.refreshToken,
              }
            );
          } catch (error) {}
          return {
            token: newSsoOidcToken.accessToken,
            expiration: newTokenExpiration,
          };
        } catch (error) {
          (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
          return existingToken;
        }
      };
    exports.fromSso = fromSso;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromStatic =
      ({ token }) =>
      async () => {
        if (!token || !token.token) {
          throw new property_provider_1.TokenProviderError(
            `Please pass a valid token to fromStatic`,
            false
          );
        }
        return token;
      };
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js
var require_nodeProvider = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          (0, fromSso_1.fromSso)(init),
          async () => {
            throw new property_provider_1.TokenProviderError(
              'Could not load token from any providers',
              false
            );
          }
        ),
        (token) =>
          token.expiration !== void 0 &&
          token.expiration.getTime() - Date.now() < 3e5,
        (token) => token.expiration !== void 0
      );
    exports.nodeProvider = nodeProvider;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSso(), exports);
    tslib_1.__exportStar(require_fromStatic3(), exports);
    tslib_1.__exportStar(require_nodeProvider(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs44();
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var token_providers_1 = require_dist_cjs46();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({
      ssoStartUrl,
      ssoSession,
      ssoAccountId,
      ssoRegion,
      ssoRoleName,
      ssoClient,
      profile,
    }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString(),
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            e.message,
            SHOULD_FAIL_CREDENTIAL_CHAIN
          );
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(
            ssoStartUrl
          );
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            `The SSO session associated with this profile is invalid. ${refreshMessage}`,
            SHOULD_FAIL_CREDENTIAL_CHAIN
          );
        }
      }
      if (
        new Date(token.expiresAt).getTime() - Date.now() <=
        EXPIRE_WINDOW_MS
      ) {
        throw new property_provider_1.CredentialsProviderError(
          `The SSO session associated with this profile has expired. ${refreshMessage}`,
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      const { accessToken } = token;
      const sso =
        ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(
          new client_sso_1.GetRoleCredentialsCommand({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken,
          })
        );
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(
          e,
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      const {
        roleCredentials: {
          accessKeyId,
          secretAccessKey,
          sessionToken,
          expiration,
        } = {},
      } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError(
          'SSO returns an invalid temporary credential.',
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      return {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration),
      };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs20();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } =
        profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(
            profile
          ).join(', ')}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          false
        );
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO =
      (init = {}) =>
      async () => {
        const {
          ssoStartUrl,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          ssoSession,
        } = init;
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        if (
          !ssoStartUrl &&
          !ssoAccountId &&
          !ssoRegion &&
          !ssoRoleName &&
          !ssoSession
        ) {
          const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(
            init
          );
          const profile = profiles[profileName];
          if (!profile) {
            throw new property_provider_1.CredentialsProviderError(
              `Profile ${profileName} was not found.`
            );
          }
          if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
            throw new property_provider_1.CredentialsProviderError(
              `Profile ${profileName} is not configured with SSO credentials.`
            );
          }
          if (
            profile === null || profile === void 0
              ? void 0
              : profile.sso_session
          ) {
            const ssoSessions = await (0,
            shared_ini_file_loader_1.loadSsoSessionData)(init);
            const session = ssoSessions[profile.sso_session];
            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
            if (ssoRegion && ssoRegion !== session.sso_region) {
              throw new property_provider_1.CredentialsProviderError(
                `Conflicting SSO region` + conflictMsg,
                false
              );
            }
            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
              throw new property_provider_1.CredentialsProviderError(
                `Conflicting SSO start_url` + conflictMsg,
                false
              );
            }
            profile.sso_region = session.sso_region;
            profile.sso_start_url = session.sso_start_url;
          }
          const {
            sso_start_url,
            sso_account_id,
            sso_region,
            sso_role_name,
            sso_session,
          } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
          return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
            ssoStartUrl: sso_start_url,
            ssoSession: sso_session,
            ssoAccountId: sso_account_id,
            ssoRegion: sso_region,
            ssoRoleName: sso_role_name,
            ssoClient,
            profile: profileName,
          });
        } else if (
          !ssoStartUrl ||
          !ssoAccountId ||
          !ssoRegion ||
          !ssoRoleName
        ) {
          throw new property_provider_1.CredentialsProviderError(
            'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"'
          );
        } else {
          return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
            ssoStartUrl,
            ssoSession,
            ssoAccountId,
            ssoRegion,
            ssoRoleName,
            ssoClient,
            profile: profileName,
          });
        }
      };
    exports.fromSSO = fromSSO;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types6 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types6(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs47();
    var credential_provider_sso_2 = require_dist_cjs47();
    Object.defineProperty(exports, 'isSsoProfile', {
      enumerable: true,
      get: function () {
        return credential_provider_sso_2.isSsoProfile;
      },
    });
    var resolveSsoCredentials = (data) => {
      const {
        sso_start_url,
        sso_account_id,
        sso_session,
        sso_region,
        sso_role_name,
      } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name,
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.aws_access_key_id === 'string' &&
      typeof arg.aws_secret_access_key === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) =>
      Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
      });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromWebToken = (init) => () => {
      const {
        roleArn,
        roleSessionName,
        webIdentityToken,
        providerId,
        policyArns,
        policy,
        durationSeconds,
        roleAssumerWithWebIdentity,
      } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(
          `Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`,
          false
        );
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName:
          roleSessionName !== null && roleSessionName !== void 0
            ? roleSessionName
            : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds,
      });
    };
    exports.fromWebToken = fromWebToken;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fs_1 = require('fs');
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = 'AWS_WEB_IDENTITY_TOKEN_FILE';
    var ENV_ROLE_ARN = 'AWS_ROLE_ARN';
    var ENV_ROLE_SESSION_NAME = 'AWS_ROLE_SESSION_NAME';
    var fromTokenFile =
      (init = {}) =>
      async () => {
        return resolveTokenFile(init);
      };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile =
        (_a =
          init === null || init === void 0
            ? void 0
            : init.webIdentityTokenFile) !== null && _a !== void 0
          ? _a
          : process.env[ENV_TOKEN_FILE];
      const roleArn =
        (_b = init === null || init === void 0 ? void 0 : init.roleArn) !==
          null && _b !== void 0
          ? _b
          : process.env[ENV_ROLE_ARN];
      const roleSessionName =
        (_c =
          init === null || init === void 0 ? void 0 : init.roleSessionName) !==
          null && _c !== void 0
          ? _c
          : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError(
          'Web identity configuration not specified'
        );
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, {
          encoding: 'ascii',
        }),
        roleArn,
        roleSessionName,
      })();
    };
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile =
      void 0;
    var credential_provider_web_identity_1 = require_dist_cjs48();
    var isWebIdentityProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.web_identity_token_file === 'string' &&
      typeof arg.role_arn === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) =>
      (0, credential_provider_web_identity_1.fromTokenFile)({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
      })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs20();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 =
      require_resolveWebIdentityCredentials();
    var resolveProfileData = async (
      profileName,
      profiles,
      options,
      visitedProfiles = {}
    ) => {
      const data = profiles[profileName];
      if (
        Object.keys(visitedProfiles).length > 0 &&
        (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)
      ) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(
          profileName,
          profiles,
          options,
          visitedProfiles
        );
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0,
        resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(
          data,
          options
        );
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(
          options,
          profileName
        );
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(
        `Profile ${profileName} could not be found or parsed in shared credentials file.`
      );
    };
    exports.resolveProfileData = resolveProfileData;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(
          init
        );
        return (0, resolveProfileData_1.resolveProfileData)(
          (0, shared_ini_file_loader_1.getProfileName)(init),
          profiles,
          init
        );
      };
    exports.fromIni = fromIni;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  'node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs35();
    var property_provider_1 = require_dist_cjs20();
    exports.ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    var remoteProvider = (init) => {
      if (
        process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] ||
        process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]
      ) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError(
            'EC2 Instance Metadata Service access disabled'
          );
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  },
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  'node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs32();
    var credential_provider_ini_1 = require_dist_cjs49();
    var credential_provider_process_1 = require_dist_cjs36();
    var credential_provider_sso_1 = require_dist_cjs47();
    var credential_provider_web_identity_1 = require_dist_cjs48();
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          ...(init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE]
            ? []
            : [(0, credential_provider_env_1.fromEnv)()]),
          (0, credential_provider_sso_1.fromSSO)(init),
          (0, credential_provider_ini_1.fromIni)(init),
          (0, credential_provider_process_1.fromProcess)(init),
          (0, credential_provider_web_identity_1.fromTokenFile)(init),
          (0, remoteProvider_1.remoteProvider)(init),
          async () => {
            throw new property_provider_1.CredentialsProviderError(
              'Could not load credentials from any providers',
              false
            );
          }
        ),
        (credentials) =>
          credentials.expiration !== void 0 &&
          credentials.expiration.getTime() - Date.now() < 3e5,
        (credentials) => credentials.expiration !== void 0
      );
    exports.defaultProvider = defaultProvider;
  },
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var G = 'required';
    var H = 'type';
    var I = 'fn';
    var J = 'argv';
    var K = 'ref';
    var L = 'properties';
    var M = 'headers';
    var a = false;
    var b = true;
    var c = 'PartitionResult';
    var d = 'tree';
    var e = 'booleanEquals';
    var f = 'stringEquals';
    var g = 'sigv4';
    var h = 'us-east-1';
    var i = 'sts';
    var j = 'endpoint';
    var k = 'https://sts.{Region}.{PartitionResult#dnsSuffix}';
    var l = 'error';
    var m = 'getAttr';
    var n = { [G]: false, [H]: 'String' };
    var o = { [G]: true, default: false, [H]: 'Boolean' };
    var p = { [K]: 'Region' };
    var q = { [K]: 'UseFIPS' };
    var r = { [K]: 'UseDualStack' };
    var s = { [I]: 'isSet', [J]: [{ [K]: 'Endpoint' }] };
    var t = { [K]: 'Endpoint' };
    var u = {
      url: 'https://sts.amazonaws.com',
      [L]: { authSchemes: [{ name: g, signingRegion: h, signingName: i }] },
      [M]: {},
    };
    var v = {};
    var w = {
      conditions: [{ [I]: f, [J]: [p, 'aws-global'] }],
      [j]: u,
      [H]: j,
    };
    var x = { [I]: e, [J]: [q, true] };
    var y = { [I]: e, [J]: [r, true] };
    var z = {
      [I]: e,
      [J]: [true, { [I]: m, [J]: [{ [K]: c }, 'supportsFIPS'] }],
    };
    var A = { [K]: c };
    var B = { [I]: e, [J]: [true, { [I]: m, [J]: [A, 'supportsDualStack'] }] };
    var C = { url: k, [L]: {}, [M]: {} };
    var D = [t];
    var E = [x];
    var F = [y];
    var _data = {
      version: '1.0',
      parameters: {
        Region: n,
        UseDualStack: o,
        UseFIPS: o,
        Endpoint: n,
        UseGlobalEndpoint: o,
      },
      rules: [
        {
          conditions: [{ [I]: 'aws.partition', [J]: [p], assign: c }],
          [H]: d,
          rules: [
            {
              conditions: [
                { [I]: e, [J]: [{ [K]: 'UseGlobalEndpoint' }, b] },
                { [I]: e, [J]: [q, a] },
                { [I]: e, [J]: [r, a] },
                { [I]: 'not', [J]: [s] },
              ],
              [H]: d,
              rules: [
                {
                  conditions: [{ [I]: f, [J]: [p, 'ap-northeast-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'ap-south-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'ap-southeast-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'ap-southeast-2'] }],
                  endpoint: u,
                  [H]: j,
                },
                w,
                {
                  conditions: [{ [I]: f, [J]: [p, 'ca-central-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-central-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-north-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-west-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-west-2'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-west-3'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'sa-east-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                { conditions: [{ [I]: f, [J]: [p, h] }], endpoint: u, [H]: j },
                {
                  conditions: [{ [I]: f, [J]: [p, 'us-east-2'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'us-west-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'us-west-2'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  endpoint: {
                    url: k,
                    [L]: {
                      authSchemes: [
                        { name: g, signingRegion: '{Region}', signingName: i },
                      ],
                    },
                    [M]: v,
                  },
                  [H]: j,
                },
              ],
            },
            {
              conditions: [s, { [I]: 'parseURL', [J]: D, assign: 'url' }],
              [H]: d,
              rules: [
                {
                  conditions: E,
                  error:
                    'Invalid Configuration: FIPS and custom endpoint are not supported',
                  [H]: l,
                },
                {
                  [H]: d,
                  rules: [
                    {
                      conditions: F,
                      error:
                        'Invalid Configuration: Dualstack and custom endpoint are not supported',
                      [H]: l,
                    },
                    { endpoint: { url: t, [L]: v, [M]: v }, [H]: j },
                  ],
                },
              ],
            },
            {
              conditions: [x, y],
              [H]: d,
              rules: [
                {
                  conditions: [z, B],
                  [H]: d,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        [L]: v,
                        [M]: v,
                      },
                      [H]: j,
                    },
                  ],
                },
                {
                  error:
                    'FIPS and DualStack are enabled, but this partition does not support one or both',
                  [H]: l,
                },
              ],
            },
            {
              conditions: E,
              [H]: d,
              rules: [
                {
                  conditions: [z],
                  [H]: d,
                  rules: [
                    {
                      [H]: d,
                      rules: [
                        {
                          conditions: [
                            {
                              [I]: f,
                              [J]: ['aws-us-gov', { [I]: m, [J]: [A, 'name'] }],
                            },
                          ],
                          endpoint: C,
                          [H]: j,
                        },
                        {
                          endpoint: {
                            url: 'https://sts-fips.{Region}.{PartitionResult#dnsSuffix}',
                            [L]: v,
                            [M]: v,
                          },
                          [H]: j,
                        },
                      ],
                    },
                  ],
                },
                {
                  error:
                    'FIPS is enabled but this partition does not support FIPS',
                  [H]: l,
                },
              ],
            },
            {
              conditions: F,
              [H]: d,
              rules: [
                {
                  conditions: [B],
                  [H]: d,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        [L]: v,
                        [M]: v,
                      },
                      [H]: j,
                    },
                  ],
                },
                {
                  error:
                    'DualStack is enabled but this partition does not support DualStack',
                  [H]: l,
                },
              ],
            },
            { [H]: d, rules: [w, { endpoint: C, [H]: j }] },
          ],
        },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs29();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger,
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var url_parser_1 = require_dist_cjs4();
    var util_base64_1 = require_dist_cjs42();
    var util_utf8_1 = require_dist_cjs24();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: '2011-06-15',
      base64Decoder:
        (config == null ? void 0 : config.base64Decoder) ??
        util_base64_1.fromBase64,
      base64Encoder:
        (config == null ? void 0 : config.base64Encoder) ??
        util_base64_1.toBase64,
      disableHostPrefix:
        (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider:
        (config == null ? void 0 : config.endpointProvider) ??
        endpointResolver_1.defaultEndpointResolver,
      logger:
        (config == null ? void 0 : config.logger) ??
        new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? 'STS',
      urlParser:
        (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder:
        (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder:
        (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs50();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs19();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs39();
    var util_body_length_node_1 = require_dist_cjs40();
    var util_retry_1 = require_dist_cjs18();
    var util_user_agent_node_1 = require_dist_cjs41();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs2();
    var util_defaults_mode_node_1 = require_dist_cjs43();
    var smithy_client_2 = require_dist_cjs2();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0,
      util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () =>
        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(
        config
      );
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        bodyLengthChecker:
          (config == null ? void 0 : config.bodyLengthChecker) ??
          util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider:
          (config == null ? void 0 : config.credentialDefaultProvider) ??
          (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(
            credential_provider_node_1.defaultProvider
          ),
        defaultUserAgentProvider:
          (config == null ? void 0 : config.defaultUserAgentProvider) ??
          (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version,
          }),
        maxAttempts:
          (config == null ? void 0 : config.maxAttempts) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS
          ),
        region:
          (config == null ? void 0 : config.region) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
          ),
        requestHandler:
          (config == null ? void 0 : config.requestHandler) ??
          new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (config == null ? void 0 : config.retryMode) ??
          (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async () =>
              (await defaultConfigProvider()).retryMode ||
              util_retry_1.DEFAULT_RETRY_MODE,
          }),
        sha256:
          (config == null ? void 0 : config.sha256) ??
          hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (config == null ? void 0 : config.streamCollector) ??
          node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (config == null ? void 0 : config.useDualstackEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS
          ),
        useFipsEndpoint:
          (config == null ? void 0 : config.useFipsEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS
          ),
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs14();
    var middleware_logger_1 = require_dist_cjs15();
    var middleware_recursion_detection_1 = require_dist_cjs16();
    var middleware_retry_1 = require_dist_cjs19();
    var middleware_sdk_sts_1 = require_dist_cjs31();
    var middleware_user_agent_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs2();
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig3();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0,
        EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(
          _config_2
        );
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(
          _config_4
        );
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(
          _config_5,
          { stsClientCtor: STSClient }
        );
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(
          _config_6
        );
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use(
          (0, middleware_retry_1.getRetryPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_host_header_1.getHostHeaderPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_logger_1.getLoggerPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(
            this.config
          )
        );
        this.middlewareStack.use(
          (0, middleware_user_agent_1.getUserAgentPlugin)(this.config)
        );
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/STS.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STS = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 =
      require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 =
      require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var commands = {
      AssumeRoleCommand: AssumeRoleCommand_1.AssumeRoleCommand,
      AssumeRoleWithSAMLCommand:
        AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand:
        AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand:
        DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand:
        GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand,
      GetCallerIdentityCommand:
        GetCallerIdentityCommand_1.GetCallerIdentityCommand,
      GetFederationTokenCommand:
        GetFederationTokenCommand_1.GetFederationTokenCommand,
      GetSessionTokenCommand: GetSessionTokenCommand_1.GetSessionTokenCommand,
    };
    var STS = class extends STSClient_1.STSClient {};
    exports.STS = STS;
    (0, smithy_client_1.createAggregatedClient)(commands, STS);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateDefaultCredentialProvider =
      exports.getDefaultRoleAssumerWithWebIdentity =
      exports.getDefaultRoleAssumer =
        void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations) return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) =>
      (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(
        stsOptions,
        getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins)
      );
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) =>
      (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(
        stsOptions,
        getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins)
      );
    exports.getDefaultRoleAssumerWithWebIdentity =
      getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) =>
      provider({
        roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
        roleAssumerWithWebIdentity: (0,
        exports.getDefaultRoleAssumerWithWebIdentity)(input),
        ...input,
      });
    exports.decorateDefaultCredentialProvider =
      decorateDefaultCredentialProvider;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, 'STSServiceException', {
      enumerable: true,
      get: function () {
        return STSServiceException_1.STSServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var u = 'required';
    var v = 'fn';
    var w = 'argv';
    var x = 'ref';
    var a = 'isSet';
    var b = 'tree';
    var c = 'error';
    var d = 'endpoint';
    var e = 'PartitionResult';
    var f = 'getAttr';
    var g = 'stringEquals';
    var h = { [u]: false, type: 'String' };
    var i = { [u]: true, default: false, type: 'Boolean' };
    var j = { [x]: 'Endpoint' };
    var k = { [v]: 'booleanEquals', [w]: [{ [x]: 'UseFIPS' }, true] };
    var l = { [v]: 'booleanEquals', [w]: [{ [x]: 'UseDualStack' }, true] };
    var m = {};
    var n = { [x]: 'Region' };
    var o = {
      [v]: 'booleanEquals',
      [w]: [true, { [v]: f, [w]: [{ [x]: e }, 'supportsFIPS'] }],
    };
    var p = { [x]: e };
    var q = {
      [v]: 'booleanEquals',
      [w]: [true, { [v]: f, [w]: [p, 'supportsDualStack'] }],
    };
    var r = [k];
    var s = [l];
    var t = [n];
    var _data = {
      version: '1.0',
      parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h },
      rules: [
        {
          conditions: [{ [v]: a, [w]: [j] }],
          type: b,
          rules: [
            {
              conditions: r,
              error:
                'Invalid Configuration: FIPS and custom endpoint are not supported',
              type: c,
            },
            {
              type: b,
              rules: [
                {
                  conditions: s,
                  error:
                    'Invalid Configuration: Dualstack and custom endpoint are not supported',
                  type: c,
                },
                { endpoint: { url: j, properties: m, headers: m }, type: d },
              ],
            },
          ],
        },
        {
          type: b,
          rules: [
            {
              conditions: [{ [v]: a, [w]: t }],
              type: b,
              rules: [
                {
                  conditions: [{ [v]: 'aws.partition', [w]: t, assign: e }],
                  type: b,
                  rules: [
                    {
                      conditions: [k, l],
                      type: b,
                      rules: [
                        {
                          conditions: [o, q],
                          type: b,
                          rules: [
                            {
                              type: b,
                              rules: [
                                {
                                  endpoint: {
                                    url: 'https://dynamodb-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                                    properties: m,
                                    headers: m,
                                  },
                                  type: d,
                                },
                              ],
                            },
                          ],
                        },
                        {
                          error:
                            'FIPS and DualStack are enabled, but this partition does not support one or both',
                          type: c,
                        },
                      ],
                    },
                    {
                      conditions: r,
                      type: b,
                      rules: [
                        {
                          conditions: [o],
                          type: b,
                          rules: [
                            {
                              type: b,
                              rules: [
                                {
                                  conditions: [
                                    {
                                      [v]: g,
                                      [w]: [
                                        'aws-us-gov',
                                        { [v]: f, [w]: [p, 'name'] },
                                      ],
                                    },
                                  ],
                                  endpoint: {
                                    url: 'https://dynamodb.{Region}.amazonaws.com',
                                    properties: m,
                                    headers: m,
                                  },
                                  type: d,
                                },
                                {
                                  endpoint: {
                                    url: 'https://dynamodb-fips.{Region}.{PartitionResult#dnsSuffix}',
                                    properties: m,
                                    headers: m,
                                  },
                                  type: d,
                                },
                              ],
                            },
                          ],
                        },
                        {
                          error:
                            'FIPS is enabled but this partition does not support FIPS',
                          type: c,
                        },
                      ],
                    },
                    {
                      conditions: s,
                      type: b,
                      rules: [
                        {
                          conditions: [q],
                          type: b,
                          rules: [
                            {
                              type: b,
                              rules: [
                                {
                                  endpoint: {
                                    url: 'https://dynamodb.{Region}.{PartitionResult#dualStackDnsSuffix}',
                                    properties: m,
                                    headers: m,
                                  },
                                  type: d,
                                },
                              ],
                            },
                          ],
                        },
                        {
                          error:
                            'DualStack is enabled but this partition does not support DualStack',
                          type: c,
                        },
                      ],
                    },
                    {
                      type: b,
                      rules: [
                        {
                          conditions: [{ [v]: g, [w]: [n, 'local'] }],
                          endpoint: {
                            url: 'http://localhost:8000',
                            properties: {
                              authSchemes: [
                                {
                                  name: 'sigv4',
                                  signingName: 'dynamodb',
                                  signingRegion: 'us-east-1',
                                },
                              ],
                            },
                            headers: m,
                          },
                          type: d,
                        },
                        {
                          endpoint: {
                            url: 'https://dynamodb.{Region}.{PartitionResult#dnsSuffix}',
                            properties: m,
                            headers: m,
                          },
                          type: d,
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            { error: 'Invalid Configuration: Missing Region', type: c },
          ],
        },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs29();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger,
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var url_parser_1 = require_dist_cjs4();
    var util_base64_1 = require_dist_cjs42();
    var util_utf8_1 = require_dist_cjs24();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => ({
      apiVersion: '2012-08-10',
      base64Decoder:
        (config == null ? void 0 : config.base64Decoder) ??
        util_base64_1.fromBase64,
      base64Encoder:
        (config == null ? void 0 : config.base64Encoder) ??
        util_base64_1.toBase64,
      disableHostPrefix:
        (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider:
        (config == null ? void 0 : config.endpointProvider) ??
        endpointResolver_1.defaultEndpointResolver,
      logger:
        (config == null ? void 0 : config.logger) ??
        new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? 'DynamoDB',
      urlParser:
        (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder:
        (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder:
        (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs51();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs50();
    var hash_node_1 = require_dist_cjs37();
    var middleware_endpoint_discovery_1 = require_dist_cjs13();
    var middleware_retry_1 = require_dist_cjs19();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs39();
    var util_body_length_node_1 = require_dist_cjs40();
    var util_retry_1 = require_dist_cjs18();
    var util_user_agent_node_1 = require_dist_cjs41();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs2();
    var util_defaults_mode_node_1 = require_dist_cjs43();
    var smithy_client_2 = require_dist_cjs2();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0,
      util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () =>
        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(
        config
      );
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        bodyLengthChecker:
          (config == null ? void 0 : config.bodyLengthChecker) ??
          util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider:
          (config == null ? void 0 : config.credentialDefaultProvider) ??
          (0, client_sts_1.decorateDefaultCredentialProvider)(
            credential_provider_node_1.defaultProvider
          ),
        defaultUserAgentProvider:
          (config == null ? void 0 : config.defaultUserAgentProvider) ??
          (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version,
          }),
        endpointDiscoveryEnabledProvider:
          (config == null ? void 0 : config.endpointDiscoveryEnabledProvider) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_endpoint_discovery_1.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS
          ),
        maxAttempts:
          (config == null ? void 0 : config.maxAttempts) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS
          ),
        region:
          (config == null ? void 0 : config.region) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
          ),
        requestHandler:
          (config == null ? void 0 : config.requestHandler) ??
          new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (config == null ? void 0 : config.retryMode) ??
          (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async () =>
              (await defaultConfigProvider()).retryMode ||
              util_retry_1.DEFAULT_RETRY_MODE,
          }),
        sha256:
          (config == null ? void 0 : config.sha256) ??
          hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (config == null ? void 0 : config.streamCollector) ??
          node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (config == null ? void 0 : config.useDualstackEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS
          ),
        useFipsEndpoint:
          (config == null ? void 0 : config.useFipsEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS
          ),
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js
var require_DynamoDBClient = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_endpoint_discovery_1 = require_dist_cjs13();
    var middleware_host_header_1 = require_dist_cjs14();
    var middleware_logger_1 = require_dist_cjs15();
    var middleware_recursion_detection_1 = require_dist_cjs16();
    var middleware_retry_1 = require_dist_cjs19();
    var middleware_signing_1 = require_dist_cjs27();
    var middleware_user_agent_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs2();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig4();
    var DynamoDBClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0,
        EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(
          _config_2
        );
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(
          _config_4
        );
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(
          _config_5
        );
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(
          _config_6
        );
        const _config_8 = (0,
        middleware_endpoint_discovery_1.resolveEndpointDiscoveryConfig)(
          _config_7,
          {
            endpointDiscoveryCommandCtor:
              DescribeEndpointsCommand_1.DescribeEndpointsCommand,
          }
        );
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use(
          (0, middleware_retry_1.getRetryPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_host_header_1.getHostHeaderPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_logger_1.getLoggerPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(
            this.config
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_user_agent_1.getUserAgentPlugin)(this.config)
        );
      }
      destroy() {
        super.destroy();
      }
    };
    exports.DynamoDBClient = DynamoDBClient;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js
var require_DynamoDB = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDB = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand();
    var BatchGetItemCommand_1 = require_BatchGetItemCommand();
    var BatchWriteItemCommand_1 = require_BatchWriteItemCommand();
    var CreateBackupCommand_1 = require_CreateBackupCommand();
    var CreateGlobalTableCommand_1 = require_CreateGlobalTableCommand();
    var CreateTableCommand_1 = require_CreateTableCommand();
    var DeleteBackupCommand_1 = require_DeleteBackupCommand();
    var DeleteItemCommand_1 = require_DeleteItemCommand();
    var DeleteTableCommand_1 = require_DeleteTableCommand();
    var DescribeBackupCommand_1 = require_DescribeBackupCommand();
    var DescribeContinuousBackupsCommand_1 =
      require_DescribeContinuousBackupsCommand();
    var DescribeContributorInsightsCommand_1 =
      require_DescribeContributorInsightsCommand();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var DescribeExportCommand_1 = require_DescribeExportCommand();
    var DescribeGlobalTableCommand_1 = require_DescribeGlobalTableCommand();
    var DescribeGlobalTableSettingsCommand_1 =
      require_DescribeGlobalTableSettingsCommand();
    var DescribeImportCommand_1 = require_DescribeImportCommand();
    var DescribeKinesisStreamingDestinationCommand_1 =
      require_DescribeKinesisStreamingDestinationCommand();
    var DescribeLimitsCommand_1 = require_DescribeLimitsCommand();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var DescribeTableReplicaAutoScalingCommand_1 =
      require_DescribeTableReplicaAutoScalingCommand();
    var DescribeTimeToLiveCommand_1 = require_DescribeTimeToLiveCommand();
    var DisableKinesisStreamingDestinationCommand_1 =
      require_DisableKinesisStreamingDestinationCommand();
    var EnableKinesisStreamingDestinationCommand_1 =
      require_EnableKinesisStreamingDestinationCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand();
    var ExportTableToPointInTimeCommand_1 =
      require_ExportTableToPointInTimeCommand();
    var GetItemCommand_1 = require_GetItemCommand();
    var ImportTableCommand_1 = require_ImportTableCommand();
    var ListBackupsCommand_1 = require_ListBackupsCommand();
    var ListContributorInsightsCommand_1 =
      require_ListContributorInsightsCommand();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var ListGlobalTablesCommand_1 = require_ListGlobalTablesCommand();
    var ListImportsCommand_1 = require_ListImportsCommand();
    var ListTablesCommand_1 = require_ListTablesCommand();
    var ListTagsOfResourceCommand_1 = require_ListTagsOfResourceCommand();
    var PutItemCommand_1 = require_PutItemCommand();
    var QueryCommand_1 = require_QueryCommand();
    var RestoreTableFromBackupCommand_1 =
      require_RestoreTableFromBackupCommand();
    var RestoreTableToPointInTimeCommand_1 =
      require_RestoreTableToPointInTimeCommand();
    var ScanCommand_1 = require_ScanCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var TransactGetItemsCommand_1 = require_TransactGetItemsCommand();
    var TransactWriteItemsCommand_1 = require_TransactWriteItemsCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateContinuousBackupsCommand_1 =
      require_UpdateContinuousBackupsCommand();
    var UpdateContributorInsightsCommand_1 =
      require_UpdateContributorInsightsCommand();
    var UpdateGlobalTableCommand_1 = require_UpdateGlobalTableCommand();
    var UpdateGlobalTableSettingsCommand_1 =
      require_UpdateGlobalTableSettingsCommand();
    var UpdateItemCommand_1 = require_UpdateItemCommand();
    var UpdateTableCommand_1 = require_UpdateTableCommand();
    var UpdateTableReplicaAutoScalingCommand_1 =
      require_UpdateTableReplicaAutoScalingCommand();
    var UpdateTimeToLiveCommand_1 = require_UpdateTimeToLiveCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var commands = {
      BatchExecuteStatementCommand:
        BatchExecuteStatementCommand_1.BatchExecuteStatementCommand,
      BatchGetItemCommand: BatchGetItemCommand_1.BatchGetItemCommand,
      BatchWriteItemCommand: BatchWriteItemCommand_1.BatchWriteItemCommand,
      CreateBackupCommand: CreateBackupCommand_1.CreateBackupCommand,
      CreateGlobalTableCommand:
        CreateGlobalTableCommand_1.CreateGlobalTableCommand,
      CreateTableCommand: CreateTableCommand_1.CreateTableCommand,
      DeleteBackupCommand: DeleteBackupCommand_1.DeleteBackupCommand,
      DeleteItemCommand: DeleteItemCommand_1.DeleteItemCommand,
      DeleteTableCommand: DeleteTableCommand_1.DeleteTableCommand,
      DescribeBackupCommand: DescribeBackupCommand_1.DescribeBackupCommand,
      DescribeContinuousBackupsCommand:
        DescribeContinuousBackupsCommand_1.DescribeContinuousBackupsCommand,
      DescribeContributorInsightsCommand:
        DescribeContributorInsightsCommand_1.DescribeContributorInsightsCommand,
      DescribeEndpointsCommand:
        DescribeEndpointsCommand_1.DescribeEndpointsCommand,
      DescribeExportCommand: DescribeExportCommand_1.DescribeExportCommand,
      DescribeGlobalTableCommand:
        DescribeGlobalTableCommand_1.DescribeGlobalTableCommand,
      DescribeGlobalTableSettingsCommand:
        DescribeGlobalTableSettingsCommand_1.DescribeGlobalTableSettingsCommand,
      DescribeImportCommand: DescribeImportCommand_1.DescribeImportCommand,
      DescribeKinesisStreamingDestinationCommand:
        DescribeKinesisStreamingDestinationCommand_1.DescribeKinesisStreamingDestinationCommand,
      DescribeLimitsCommand: DescribeLimitsCommand_1.DescribeLimitsCommand,
      DescribeTableCommand: DescribeTableCommand_1.DescribeTableCommand,
      DescribeTableReplicaAutoScalingCommand:
        DescribeTableReplicaAutoScalingCommand_1.DescribeTableReplicaAutoScalingCommand,
      DescribeTimeToLiveCommand:
        DescribeTimeToLiveCommand_1.DescribeTimeToLiveCommand,
      DisableKinesisStreamingDestinationCommand:
        DisableKinesisStreamingDestinationCommand_1.DisableKinesisStreamingDestinationCommand,
      EnableKinesisStreamingDestinationCommand:
        EnableKinesisStreamingDestinationCommand_1.EnableKinesisStreamingDestinationCommand,
      ExecuteStatementCommand:
        ExecuteStatementCommand_1.ExecuteStatementCommand,
      ExecuteTransactionCommand:
        ExecuteTransactionCommand_1.ExecuteTransactionCommand,
      ExportTableToPointInTimeCommand:
        ExportTableToPointInTimeCommand_1.ExportTableToPointInTimeCommand,
      GetItemCommand: GetItemCommand_1.GetItemCommand,
      ImportTableCommand: ImportTableCommand_1.ImportTableCommand,
      ListBackupsCommand: ListBackupsCommand_1.ListBackupsCommand,
      ListContributorInsightsCommand:
        ListContributorInsightsCommand_1.ListContributorInsightsCommand,
      ListExportsCommand: ListExportsCommand_1.ListExportsCommand,
      ListGlobalTablesCommand:
        ListGlobalTablesCommand_1.ListGlobalTablesCommand,
      ListImportsCommand: ListImportsCommand_1.ListImportsCommand,
      ListTablesCommand: ListTablesCommand_1.ListTablesCommand,
      ListTagsOfResourceCommand:
        ListTagsOfResourceCommand_1.ListTagsOfResourceCommand,
      PutItemCommand: PutItemCommand_1.PutItemCommand,
      QueryCommand: QueryCommand_1.QueryCommand,
      RestoreTableFromBackupCommand:
        RestoreTableFromBackupCommand_1.RestoreTableFromBackupCommand,
      RestoreTableToPointInTimeCommand:
        RestoreTableToPointInTimeCommand_1.RestoreTableToPointInTimeCommand,
      ScanCommand: ScanCommand_1.ScanCommand,
      TagResourceCommand: TagResourceCommand_1.TagResourceCommand,
      TransactGetItemsCommand:
        TransactGetItemsCommand_1.TransactGetItemsCommand,
      TransactWriteItemsCommand:
        TransactWriteItemsCommand_1.TransactWriteItemsCommand,
      UntagResourceCommand: UntagResourceCommand_1.UntagResourceCommand,
      UpdateContinuousBackupsCommand:
        UpdateContinuousBackupsCommand_1.UpdateContinuousBackupsCommand,
      UpdateContributorInsightsCommand:
        UpdateContributorInsightsCommand_1.UpdateContributorInsightsCommand,
      UpdateGlobalTableCommand:
        UpdateGlobalTableCommand_1.UpdateGlobalTableCommand,
      UpdateGlobalTableSettingsCommand:
        UpdateGlobalTableSettingsCommand_1.UpdateGlobalTableSettingsCommand,
      UpdateItemCommand: UpdateItemCommand_1.UpdateItemCommand,
      UpdateTableCommand: UpdateTableCommand_1.UpdateTableCommand,
      UpdateTableReplicaAutoScalingCommand:
        UpdateTableReplicaAutoScalingCommand_1.UpdateTableReplicaAutoScalingCommand,
      UpdateTimeToLiveCommand:
        UpdateTimeToLiveCommand_1.UpdateTimeToLiveCommand,
    };
    var DynamoDB = class extends DynamoDBClient_1.DynamoDBClient {};
    exports.DynamoDB = DynamoDB;
    (0, smithy_client_1.createAggregatedClient)(commands, DynamoDB);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_BatchExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_BatchGetItemCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteItemCommand(), exports);
    tslib_1.__exportStar(require_CreateBackupCommand(), exports);
    tslib_1.__exportStar(require_CreateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_CreateTableCommand(), exports);
    tslib_1.__exportStar(require_DeleteBackupCommand(), exports);
    tslib_1.__exportStar(require_DeleteItemCommand(), exports);
    tslib_1.__exportStar(require_DeleteTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeBackupCommand(), exports);
    tslib_1.__exportStar(require_DescribeContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEndpointsCommand(), exports);
    tslib_1.__exportStar(require_DescribeExportCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_DescribeImportCommand(), exports);
    tslib_1.__exportStar(
      require_DescribeKinesisStreamingDestinationCommand(),
      exports
    );
    tslib_1.__exportStar(require_DescribeLimitsCommand(), exports);
    tslib_1.__exportStar(require_DescribeTableCommand(), exports);
    tslib_1.__exportStar(
      require_DescribeTableReplicaAutoScalingCommand(),
      exports
    );
    tslib_1.__exportStar(require_DescribeTimeToLiveCommand(), exports);
    tslib_1.__exportStar(
      require_DisableKinesisStreamingDestinationCommand(),
      exports
    );
    tslib_1.__exportStar(
      require_EnableKinesisStreamingDestinationCommand(),
      exports
    );
    tslib_1.__exportStar(require_ExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand(), exports);
    tslib_1.__exportStar(require_ExportTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_GetItemCommand(), exports);
    tslib_1.__exportStar(require_ImportTableCommand(), exports);
    tslib_1.__exportStar(require_ListBackupsCommand(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_ListExportsCommand(), exports);
    tslib_1.__exportStar(require_ListGlobalTablesCommand(), exports);
    tslib_1.__exportStar(require_ListImportsCommand(), exports);
    tslib_1.__exportStar(require_ListTablesCommand(), exports);
    tslib_1.__exportStar(require_ListTagsOfResourceCommand(), exports);
    tslib_1.__exportStar(require_PutItemCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableFromBackupCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_ScanCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_TransactGetItemsCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteItemsCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_UpdateContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdateItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateTableCommand(), exports);
    tslib_1.__exportStar(
      require_UpdateTableReplicaAutoScalingCommand(),
      exports
    );
    tslib_1.__exportStar(require_UpdateTimeToLiveCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js
var require_models4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js
var require_ListContributorInsightsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListContributorInsights = void 0;
    var ListContributorInsightsCommand_1 =
      require_ListContributorInsightsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListContributorInsightsCommand_1.ListContributorInsightsCommand(
          input
        ),
        ...args
      );
    };
    async function* paginateListContributorInsights(
      config,
      input,
      ...additionalArguments
    ) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input['MaxResults'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListContributorInsights = paginateListContributorInsights;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js
var require_ListExportsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListExports = void 0;
    var ListExportsCommand_1 = require_ListExportsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListExportsCommand_1.ListExportsCommand(input),
        ...args
      );
    };
    async function* paginateListExports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input['MaxResults'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListExports = paginateListExports;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListImportsPaginator.js
var require_ListImportsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListImportsPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListImports = void 0;
    var ListImportsCommand_1 = require_ListImportsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListImportsCommand_1.ListImportsCommand(input),
        ...args
      );
    };
    async function* paginateListImports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input['PageSize'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListImports = paginateListImports;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js
var require_ListTablesPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListTables = void 0;
    var ListTablesCommand_1 = require_ListTablesCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListTablesCommand_1.ListTablesCommand(input),
        ...args
      );
    };
    async function* paginateListTables(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartTableName = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedTableName;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListTables = paginateListTables;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsPaginator(), exports);
    tslib_1.__exportStar(require_ListExportsPaginator(), exports);
    tslib_1.__exportStar(require_ListImportsPaginator(), exports);
    tslib_1.__exportStar(require_ListTablesPaginator(), exports);
    tslib_1.__exportStar(require_QueryPaginator(), exports);
    tslib_1.__exportStar(require_ScanPaginator(), exports);
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.checkExceptions =
      exports.WaiterState =
      exports.waiterServiceDefaults =
        void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120,
    };
    var WaiterState;
    (function (WaiterState2) {
      WaiterState2['ABORTED'] = 'ABORTED';
      WaiterState2['FAILURE'] = 'FAILURE';
      WaiterState2['SUCCESS'] = 'SUCCESS';
      WaiterState2['RETRY'] = 'RETRY';
      WaiterState2['TIMEOUT'] = 'TIMEOUT';
    })((WaiterState = exports.WaiterState || (exports.WaiterState = {})));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(
          `${JSON.stringify({
            ...result,
            reason: 'Request was aborted',
          })}`
        );
        abortError.name = 'AbortError';
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(
          `${JSON.stringify({
            ...result,
            reason: 'Waiter has timed out',
          })}`
        );
        timeoutError.name = 'TimeoutError';
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter2();
    var exponentialBackoffWithJitter = (
      minDelay,
      maxDelay,
      attemptCeiling,
      attempt
    ) => {
      if (attempt > attemptCeiling) return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async (
      { minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal },
      input,
      acceptorChecks
    ) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (
          ((_a =
            abortController === null || abortController === void 0
              ? void 0
              : abortController.signal) === null || _a === void 0
            ? void 0
            : _a.aborted) ||
          (abortSignal === null || abortSignal === void 0
            ? void 0
            : abortSignal.aborted)
        ) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(
          minDelay,
          maxDelay,
          attemptCeiling,
          currentAttempt
        );
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(
          client,
          input
        );
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime must be greater than 0`
        );
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate(), exports);
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter2();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () =>
          resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options,
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [
        (0, poller_1.runPolling)(params, input, acceptorChecks),
      ];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter2(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js
var require_waitForTableExists = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.waitUntilTableExists = exports.waitForTableExists = void 0;
    var util_waiter_1 = require_dist_cjs52();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(
          new DescribeTableCommand_1.DescribeTableCommand(input)
        );
        reason = result;
        try {
          const returnComparator = () => {
            return result.Table.TableStatus;
          };
          if (returnComparator() === 'ACTIVE') {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {}
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == 'ResourceNotFoundException') {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(
        { ...serviceDefaults, ...params },
        input,
        checkState
      );
    };
    exports.waitForTableExists = waitForTableExists;
    var waitUntilTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(
        { ...serviceDefaults, ...params },
        input,
        checkState
      );
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableExists = waitUntilTableExists;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js
var require_waitForTableNotExists = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.waitUntilTableNotExists = exports.waitForTableNotExists = void 0;
    var util_waiter_1 = require_dist_cjs52();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(
          new DescribeTableCommand_1.DescribeTableCommand(input)
        );
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == 'ResourceNotFoundException') {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(
        { ...serviceDefaults, ...params },
        input,
        checkState
      );
    };
    exports.waitForTableNotExists = waitForTableNotExists;
    var waitUntilTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(
        { ...serviceDefaults, ...params },
        input,
        checkState
      );
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableNotExists = waitUntilTableNotExists;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForTableExists(), exports);
    tslib_1.__exportStar(require_waitForTableNotExists(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DynamoDB(), exports);
    tslib_1.__exportStar(require_DynamoDBClient(), exports);
    tslib_1.__exportStar(require_commands4(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    Object.defineProperty(exports, 'DynamoDBServiceException', {
      enumerable: true,
      get: function () {
        return DynamoDBServiceException_1.DynamoDBServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js
var require_convertToAttr = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.convertToAttr = void 0;
    var convertToAttr = (data, options) => {
      var _a, _b, _c, _d, _e, _f;
      if (data === void 0) {
        throw new Error(
          `Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`
        );
      } else if (data === null && typeof data === 'object') {
        return convertToNullAttr();
      } else if (Array.isArray(data)) {
        return convertToListAttr(data, options);
      } else if (
        ((_a = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _a === void 0
          ? void 0
          : _a.name) === 'Set'
      ) {
        return convertToSetAttr(data, options);
      } else if (
        ((_b = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _b === void 0
          ? void 0
          : _b.name) === 'Map'
      ) {
        return convertToMapAttrFromIterable(data, options);
      } else if (
        ((_c = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _c === void 0
          ? void 0
          : _c.name) === 'Object' ||
        (!data.constructor && typeof data === 'object')
      ) {
        return convertToMapAttrFromEnumerableProps(data, options);
      } else if (isBinary(data)) {
        if (
          data.length === 0 &&
          (options === null || options === void 0
            ? void 0
            : options.convertEmptyValues)
        ) {
          return convertToNullAttr();
        }
        return convertToBinaryAttr(data);
      } else if (
        typeof data === 'boolean' ||
        ((_d = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _d === void 0
          ? void 0
          : _d.name) === 'Boolean'
      ) {
        return { BOOL: data.valueOf() };
      } else if (
        typeof data === 'number' ||
        ((_e = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _e === void 0
          ? void 0
          : _e.name) === 'Number'
      ) {
        return convertToNumberAttr(data);
      } else if (typeof data === 'bigint') {
        return convertToBigIntAttr(data);
      } else if (
        typeof data === 'string' ||
        ((_f = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _f === void 0
          ? void 0
          : _f.name) === 'String'
      ) {
        if (
          data.length === 0 &&
          (options === null || options === void 0
            ? void 0
            : options.convertEmptyValues)
        ) {
          return convertToNullAttr();
        }
        return convertToStringAttr(data);
      } else if (
        (options === null || options === void 0
          ? void 0
          : options.convertClassInstanceToMap) &&
        typeof data === 'object'
      ) {
        return convertToMapAttrFromEnumerableProps(data, options);
      }
      throw new Error(
        `Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`
      );
    };
    exports.convertToAttr = convertToAttr;
    var convertToListAttr = (data, options) => ({
      L: data
        .filter(
          (item) =>
            !(options === null || options === void 0
              ? void 0
              : options.removeUndefinedValues) ||
            ((options === null || options === void 0
              ? void 0
              : options.removeUndefinedValues) &&
              item !== void 0)
        )
        .map((item) => (0, exports.convertToAttr)(item, options)),
    });
    var convertToSetAttr = (set, options) => {
      const setToOperate = (
        options === null || options === void 0
          ? void 0
          : options.removeUndefinedValues
      )
        ? new Set([...set].filter((value) => value !== void 0))
        : set;
      if (
        !(options === null || options === void 0
          ? void 0
          : options.removeUndefinedValues) &&
        setToOperate.has(void 0)
      ) {
        throw new Error(
          `Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`
        );
      }
      if (setToOperate.size === 0) {
        if (
          options === null || options === void 0
            ? void 0
            : options.convertEmptyValues
        ) {
          return convertToNullAttr();
        }
        throw new Error(
          `Pass a non-empty set, or options.convertEmptyValues=true.`
        );
      }
      const item = setToOperate.values().next().value;
      if (typeof item === 'number') {
        return {
          NS: Array.from(setToOperate)
            .map(convertToNumberAttr)
            .map((item2) => item2.N),
        };
      } else if (typeof item === 'bigint') {
        return {
          NS: Array.from(setToOperate)
            .map(convertToBigIntAttr)
            .map((item2) => item2.N),
        };
      } else if (typeof item === 'string') {
        return {
          SS: Array.from(setToOperate)
            .map(convertToStringAttr)
            .map((item2) => item2.S),
        };
      } else if (isBinary(item)) {
        return {
          BS: Array.from(setToOperate)
            .map(convertToBinaryAttr)
            .map((item2) => item2.B),
        };
      } else {
        throw new Error(
          `Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`
        );
      }
    };
    var convertToMapAttrFromIterable = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const [key, value] of data2) {
          if (
            typeof value !== 'function' &&
            (value !== void 0 ||
              !(options === null || options === void 0
                ? void 0
                : options.removeUndefinedValues))
          ) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data),
    });
    var convertToMapAttrFromEnumerableProps = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const key in data2) {
          const value = data2[key];
          if (
            typeof value !== 'function' &&
            (value !== void 0 ||
              !(options === null || options === void 0
                ? void 0
                : options.removeUndefinedValues))
          ) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data),
    });
    var convertToNullAttr = () => ({ NULL: true });
    var convertToBinaryAttr = (data) => ({ B: data });
    var convertToStringAttr = (data) => ({ S: data.toString() });
    var convertToBigIntAttr = (data) => ({ N: data.toString() });
    var validateBigIntAndThrow = (errorPrefix) => {
      throw new Error(
        `${errorPrefix} ${
          typeof BigInt === 'function'
            ? 'Use BigInt.'
            : 'Pass string value instead.'
        } `
      );
    };
    var convertToNumberAttr = (num) => {
      if (
        [Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY]
          .map((val) => val.toString())
          .includes(num.toString())
      ) {
        throw new Error(
          `Special numeric value ${num.toString()} is not allowed`
        );
      } else if (num > Number.MAX_SAFE_INTEGER) {
        validateBigIntAndThrow(
          `Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`
        );
      } else if (num < Number.MIN_SAFE_INTEGER) {
        validateBigIntAndThrow(
          `Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`
        );
      }
      return { N: num.toString() };
    };
    var isBinary = (data) => {
      const binaryTypes = [
        'ArrayBuffer',
        'Blob',
        'Buffer',
        'DataView',
        'File',
        'Int8Array',
        'Uint8Array',
        'Uint8ClampedArray',
        'Int16Array',
        'Uint16Array',
        'Int32Array',
        'Uint32Array',
        'Float32Array',
        'Float64Array',
        'BigInt64Array',
        'BigUint64Array',
      ];
      if (data === null || data === void 0 ? void 0 : data.constructor) {
        return binaryTypes.includes(data.constructor.name);
      }
      return false;
    };
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js
var require_convertToNative = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.convertToNative = void 0;
    var convertToNative = (data, options) => {
      for (const [key, value] of Object.entries(data)) {
        if (value !== void 0) {
          switch (key) {
            case 'NULL':
              return null;
            case 'BOOL':
              return Boolean(value);
            case 'N':
              return convertNumber(value, options);
            case 'B':
              return convertBinary(value);
            case 'S':
              return convertString(value);
            case 'L':
              return convertList(value, options);
            case 'M':
              return convertMap(value, options);
            case 'NS':
              return new Set(value.map((item) => convertNumber(item, options)));
            case 'BS':
              return new Set(value.map(convertBinary));
            case 'SS':
              return new Set(value.map(convertString));
            default:
              throw new Error(`Unsupported type passed: ${key}`);
          }
        }
      }
      throw new Error(`No value defined: ${JSON.stringify(data)}`);
    };
    exports.convertToNative = convertToNative;
    var convertNumber = (numString, options) => {
      if (
        options === null || options === void 0 ? void 0 : options.wrapNumbers
      ) {
        return { value: numString };
      }
      const num = Number(numString);
      const infinityValues = [
        Number.POSITIVE_INFINITY,
        Number.NEGATIVE_INFINITY,
      ];
      if (
        (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) &&
        !infinityValues.includes(num)
      ) {
        if (typeof BigInt === 'function') {
          try {
            return BigInt(numString);
          } catch (error) {
            throw new Error(
              `${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`
            );
          }
        } else {
          throw new Error(
            `${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`
          );
        }
      }
      return num;
    };
    var convertString = (stringValue) => stringValue;
    var convertBinary = (binaryValue) => binaryValue;
    var convertList = (list, options) =>
      list.map((item) => (0, exports.convertToNative)(item, options));
    var convertMap = (map, options) =>
      Object.entries(map).reduce(
        (acc, [key, value]) => (
          (acc[key] = (0, exports.convertToNative)(value, options)), acc
        ),
        {}
      );
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js
var require_marshall = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.marshall = void 0;
    var convertToAttr_1 = require_convertToAttr();
    function marshall(data, options) {
      const attributeValue = (0, convertToAttr_1.convertToAttr)(data, options);
      const [key, value] = Object.entries(attributeValue)[0];
      switch (key) {
        case 'M':
        case 'L':
          return value;
        case 'SS':
        case 'NS':
        case 'BS':
        case 'S':
        case 'N':
        case 'B':
        case 'NULL':
        case 'BOOL':
        case '$unknown':
        default:
          return attributeValue;
      }
    }
    exports.marshall = marshall;
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js
var require_models5 = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js
var require_unmarshall = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.unmarshall = void 0;
    var convertToNative_1 = require_convertToNative();
    var unmarshall = (data, options) =>
      (0, convertToNative_1.convertToNative)({ M: data }, options);
    exports.unmarshall = unmarshall;
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_convertToAttr(), exports);
    tslib_1.__exportStar(require_convertToNative(), exports);
    tslib_1.__exportStar(require_marshall(), exports);
    tslib_1.__exportStar(require_models5(), exports);
    tslib_1.__exportStar(require_unmarshall(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/utils.js
var require_utils3 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.unmarshallOutput = exports.marshallInput = void 0;
    var util_dynamodb_1 = require_dist_cjs54();
    var processObj = (obj, processFunc, children) => {
      if (obj !== void 0) {
        if (!children || (Array.isArray(children) && children.length === 0)) {
          return processFunc(obj);
        } else {
          if (Array.isArray(children)) {
            return processKeysInObj(obj, processFunc, children);
          } else {
            return processAllKeysInObj(obj, processFunc, children.children);
          }
        }
      }
      return void 0;
    };
    var processKeyInObj = (obj, processFunc, children) => {
      if (Array.isArray(obj)) {
        return obj.map((item) => processObj(item, processFunc, children));
      }
      return processObj(obj, processFunc, children);
    };
    var processKeysInObj = (obj, processFunc, keyNodes) => {
      const accumulator = { ...obj };
      return keyNodes.reduce((acc, { key, children }) => {
        acc[key] = processKeyInObj(acc[key], processFunc, children);
        return acc;
      }, accumulator);
    };
    var processAllKeysInObj = (obj, processFunc, children) =>
      Object.entries(obj).reduce((acc, [key, value]) => {
        acc[key] = processKeyInObj(value, processFunc, children);
        return acc;
      }, {});
    var marshallInput = (obj, keyNodes, options) => {
      const marshallFunc = (toMarshall) =>
        (0, util_dynamodb_1.marshall)(toMarshall, options);
      return processKeysInObj(obj, marshallFunc, keyNodes);
    };
    exports.marshallInput = marshallInput;
    var unmarshallOutput = (obj, keyNodes, options) => {
      const unmarshallFunc = (toMarshall) =>
        (0, util_dynamodb_1.unmarshall)(toMarshall, options);
      return processKeysInObj(obj, unmarshallFunc, keyNodes);
    };
    exports.unmarshallOutput = unmarshallOutput;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/baseCommand/DynamoDBDocumentClientCommand.js
var require_DynamoDBDocumentClientCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/baseCommand/DynamoDBDocumentClientCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocumentClientCommand = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var utils_1 = require_utils3();
    var DynamoDBDocumentClientCommand = class extends smithy_client_1.Command {
      addMarshallingMiddleware(configuration) {
        const { marshallOptions, unmarshallOptions } =
          configuration.translateConfig || {};
        this.clientCommand.middlewareStack.addRelativeTo(
          (next, context) => async (args) => {
            args.input = (0, utils_1.marshallInput)(
              this.input,
              this.inputKeyNodes,
              marshallOptions
            );
            context.dynamoDbDocumentClientOptions =
              context.dynamoDbDocumentClientOptions ||
              DynamoDBDocumentClientCommand.defaultLogFilterOverrides;
            const input = args.input;
            context.dynamoDbDocumentClientOptions.overrideInputFilterSensitiveLog =
              () => {
                var _a;
                return (_a = context.inputFilterSensitiveLog) === null ||
                  _a === void 0
                  ? void 0
                  : _a.call(context, input);
              };
            return next(args);
          },
          {
            name: 'DocumentMarshall',
            relation: 'before',
            toMiddleware: 'serializerMiddleware',
            override: true,
          }
        );
        this.clientCommand.middlewareStack.addRelativeTo(
          (next, context) => async (args) => {
            const deserialized = await next(args);
            const output = deserialized.output;
            context.dynamoDbDocumentClientOptions =
              context.dynamoDbDocumentClientOptions ||
              DynamoDBDocumentClientCommand.defaultLogFilterOverrides;
            context.dynamoDbDocumentClientOptions.overrideOutputFilterSensitiveLog =
              () => {
                var _a;
                return (_a = context.outputFilterSensitiveLog) === null ||
                  _a === void 0
                  ? void 0
                  : _a.call(context, output);
              };
            deserialized.output = (0, utils_1.unmarshallOutput)(
              deserialized.output,
              this.outputKeyNodes,
              unmarshallOptions
            );
            return deserialized;
          },
          {
            name: 'DocumentUnmarshall',
            relation: 'before',
            toMiddleware: 'deserializerMiddleware',
            override: true,
          }
        );
      }
    };
    exports.DynamoDBDocumentClientCommand = DynamoDBDocumentClientCommand;
    DynamoDBDocumentClientCommand.defaultLogFilterOverrides = {
      overrideInputFilterSensitiveLog(...args) {},
      overrideOutputFilterSensitiveLog(...args) {},
    };
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchExecuteStatementCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var BatchExecuteStatementCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Statements', children: [{ key: 'Parameters' }] },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: [{ key: 'Item' }] },
        ];
        this.clientCommand = new client_dynamodb_1.BatchExecuteStatementCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchGetCommand.js
var require_BatchGetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchGetCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchGetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var BatchGetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'RequestItems',
            children: {
              children: [{ key: 'Keys' }],
            },
          },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: {} },
          {
            key: 'UnprocessedKeys',
            children: {
              children: [{ key: 'Keys' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.BatchGetItemCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchGetCommand = BatchGetCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchWriteCommand.js
var require_BatchWriteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchWriteCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchWriteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var BatchWriteCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'RequestItems',
            children: {
              children: [
                { key: 'PutRequest', children: [{ key: 'Item' }] },
                { key: 'DeleteRequest', children: [{ key: 'Key' }] },
              ],
            },
          },
        ];
        this.outputKeyNodes = [
          {
            key: 'UnprocessedItems',
            children: {
              children: [
                { key: 'PutRequest', children: [{ key: 'Item' }] },
                { key: 'DeleteRequest', children: [{ key: 'Key' }] },
              ],
            },
          },
          {
            key: 'ItemCollectionMetrics',
            children: {
              children: [{ key: 'ItemCollectionKey' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.BatchWriteItemCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchWriteCommand = BatchWriteCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/DeleteCommand.js
var require_DeleteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/DeleteCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var DeleteCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Key' },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          {
            key: 'ItemCollectionMetrics',
            children: [{ key: 'ItemCollectionKey' }],
          },
        ];
        this.clientCommand = new client_dynamodb_1.DeleteItemCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.DeleteCommand = DeleteCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteStatementCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var ExecuteStatementCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'Parameters' }];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.ExecuteStatementCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteTransactionCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var ExecuteTransactionCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'TransactStatements', children: [{ key: 'Parameters' }] },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: [{ key: 'Item' }] },
        ];
        this.clientCommand = new client_dynamodb_1.ExecuteTransactionCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/GetCommand.js
var require_GetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/GetCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var GetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'Key' }];
        this.outputKeyNodes = [{ key: 'Item' }];
        this.clientCommand = new client_dynamodb_1.GetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.GetCommand = GetCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/PutCommand.js
var require_PutCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/PutCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.PutCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var PutCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Item' },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          {
            key: 'ItemCollectionMetrics',
            children: [{ key: 'ItemCollectionKey' }],
          },
        ];
        this.clientCommand = new client_dynamodb_1.PutItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.PutCommand = PutCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/QueryCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.QueryCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var QueryCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'KeyConditions',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          {
            key: 'QueryFilter',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          { key: 'ExclusiveStartKey' },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.QueryCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.QueryCommand = QueryCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ScanCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ScanCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var ScanCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'ScanFilter',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          { key: 'ExclusiveStartKey' },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.ScanCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ScanCommand = ScanCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactGetCommand.js
var require_TransactGetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactGetCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactGetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var TransactGetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'TransactItems',
            children: [{ key: 'Get', children: [{ key: 'Key' }] }],
          },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: [{ key: 'Item' }] },
        ];
        this.clientCommand = new client_dynamodb_1.TransactGetItemsCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.TransactGetCommand = TransactGetCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactWriteCommand.js
var require_TransactWriteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactWriteCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactWriteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var TransactWriteCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'TransactItems',
            children: [
              {
                key: 'ConditionCheck',
                children: [
                  { key: 'Key' },
                  { key: 'ExpressionAttributeValues' },
                ],
              },
              {
                key: 'Put',
                children: [
                  { key: 'Item' },
                  { key: 'ExpressionAttributeValues' },
                ],
              },
              {
                key: 'Delete',
                children: [
                  { key: 'Key' },
                  { key: 'ExpressionAttributeValues' },
                ],
              },
              {
                key: 'Update',
                children: [
                  { key: 'Key' },
                  { key: 'ExpressionAttributeValues' },
                ],
              },
            ],
          },
        ];
        this.outputKeyNodes = [
          {
            key: 'ItemCollectionMetrics',
            children: {
              children: [{ key: 'ItemCollectionKey' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.TransactWriteItemsCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.TransactWriteCommand = TransactWriteCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/UpdateCommand.js
var require_UpdateCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/UpdateCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var UpdateCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Key' },
          {
            key: 'AttributeUpdates',
            children: {
              children: [{ key: 'Value' }],
            },
          },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          {
            key: 'ItemCollectionMetrics',
            children: [{ key: 'ItemCollectionKey' }],
          },
        ];
        this.clientCommand = new client_dynamodb_1.UpdateItemCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.UpdateCommand = UpdateCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocumentClient.js
var require_DynamoDBDocumentClient = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocumentClient.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocumentClient = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var DynamoDBDocumentClient2 = class extends smithy_client_1.Client {
      constructor(client, translateConfig) {
        super(client.config);
        this.config = client.config;
        this.config.translateConfig = translateConfig;
        this.middlewareStack = client.middlewareStack;
      }
      static from(client, translateConfig) {
        return new DynamoDBDocumentClient2(client, translateConfig);
      }
      destroy() {}
    };
    exports.DynamoDBDocumentClient = DynamoDBDocumentClient2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocument.js
var require_DynamoDBDocument = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocument.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocument = void 0;
    var BatchExecuteStatementCommand_1 =
      require_BatchExecuteStatementCommand2();
    var BatchGetCommand_1 = require_BatchGetCommand();
    var BatchWriteCommand_1 = require_BatchWriteCommand();
    var DeleteCommand_1 = require_DeleteCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand2();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand2();
    var GetCommand_1 = require_GetCommand();
    var PutCommand_1 = require_PutCommand();
    var QueryCommand_1 = require_QueryCommand2();
    var ScanCommand_1 = require_ScanCommand2();
    var TransactGetCommand_1 = require_TransactGetCommand();
    var TransactWriteCommand_1 = require_TransactWriteCommand();
    var UpdateCommand_1 = require_UpdateCommand();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var DynamoDBDocument = class extends DynamoDBDocumentClient_1.DynamoDBDocumentClient {
      static from(client, translateConfig) {
        return new DynamoDBDocument(client, translateConfig);
      }
      batchExecuteStatement(args, optionsOrCb, cb) {
        const command =
          new BatchExecuteStatementCommand_1.BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGet(args, optionsOrCb, cb) {
        const command = new BatchGetCommand_1.BatchGetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchWrite(args, optionsOrCb, cb) {
        const command = new BatchWriteCommand_1.BatchWriteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      delete(args, optionsOrCb, cb) {
        const command = new DeleteCommand_1.DeleteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand_1.ExecuteStatementCommand(
          args
        );
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeTransaction(args, optionsOrCb, cb) {
        const command =
          new ExecuteTransactionCommand_1.ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      get(args, optionsOrCb, cb) {
        const command = new GetCommand_1.GetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      put(args, optionsOrCb, cb) {
        const command = new PutCommand_1.PutCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      query(args, optionsOrCb, cb) {
        const command = new QueryCommand_1.QueryCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scan(args, optionsOrCb, cb) {
        const command = new ScanCommand_1.ScanCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactGet(args, optionsOrCb, cb) {
        const command = new TransactGetCommand_1.TransactGetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactWrite(args, optionsOrCb, cb) {
        const command = new TransactWriteCommand_1.TransactWriteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      update(args, optionsOrCb, cb) {
        const command = new UpdateCommand_1.UpdateCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.DynamoDBDocument = DynamoDBDocument;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/index.js
var require_commands5 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_BatchExecuteStatementCommand2(), exports);
    tslib_1.__exportStar(require_BatchGetCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteCommand(), exports);
    tslib_1.__exportStar(require_DeleteCommand(), exports);
    tslib_1.__exportStar(require_ExecuteStatementCommand2(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand2(), exports);
    tslib_1.__exportStar(require_GetCommand(), exports);
    tslib_1.__exportStar(require_PutCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand2(), exports);
    tslib_1.__exportStar(require_ScanCommand2(), exports);
    tslib_1.__exportStar(require_TransactGetCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteCommand(), exports);
    tslib_1.__exportStar(require_UpdateCommand(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/Interfaces.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/QueryPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand2();
    var DynamoDBDocument_1 = require_DynamoDBDocument();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.query(input, ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBDocument_1.DynamoDBDocument) {
          page = await makePagedRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else if (
          config.client instanceof
          DynamoDBDocumentClient_1.DynamoDBDocumentClient
        ) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error(
            'Invalid client, expected DynamoDBDocument | DynamoDBDocumentClient'
          );
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/ScanPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand2();
    var DynamoDBDocument_1 = require_DynamoDBDocument();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.scan(input, ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBDocument_1.DynamoDBDocument) {
          page = await makePagedRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else if (
          config.client instanceof
          DynamoDBDocumentClient_1.DynamoDBDocumentClient
        ) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error(
            'Invalid client, expected DynamoDBDocument | DynamoDBDocumentClient'
          );
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/index.js
var require_pagination4 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces3(), exports);
    tslib_1.__exportStar(require_QueryPaginator2(), exports);
    tslib_1.__exportStar(require_ScanPaginator2(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DynamoDBDocument(), exports);
    tslib_1.__exportStar(require_DynamoDBDocumentClient(), exports);
    tslib_1.__exportStar(require_commands5(), exports);
    tslib_1.__exportStar(require_pagination4(), exports);
  },
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  'node_modules/lodash/lodash.js'(exports, module2) {
    (function () {
      var undefined2;
      var VERSION3 = '4.17.21';
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT =
          'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function',
        INVALID_TEMPL_VAR_ERROR_TEXT =
          'Invalid `variable` option passed into `_.template`';
      var HASH_UNDEFINED = '__lodash_hash_undefined__';
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = '__lodash_placeholder__';
      var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
      var HOT_COUNT = 800,
        HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 17976931348623157e292,
        NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ['ary', WRAP_ARY_FLAG],
        ['bind', WRAP_BIND_FLAG],
        ['bindKey', WRAP_BIND_KEY_FLAG],
        ['curry', WRAP_CURRY_FLAG],
        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
        ['flip', WRAP_FLIP_FLAG],
        ['partial', WRAP_PARTIAL_FLAG],
        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
        ['rearg', WRAP_REARG_FLAG],
      ];
      var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
      var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
      var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName =
          /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange =
          rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange =
          ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange =
          rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc =
          '[^' +
          rsAstralRange +
          rsBreakRange +
          rsDigits +
          rsDingbatRange +
          rsLowerRange +
          rsUpperRange +
          ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';
      var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin =
          '(?:' +
          rsZWJ +
          '(?:' +
          [rsNonAstral, rsRegional, rsSurrPair].join('|') +
          ')' +
          rsOptVar +
          reOptMod +
          ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji =
          '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol =
          '(?:' +
          [
            rsNonAstral + rsCombo + '?',
            rsCombo,
            rsRegional,
            rsSurrPair,
            rsAstral,
          ].join('|') +
          ')';
      var reApos = RegExp(rsApos, 'g');
      var reComboMark = RegExp(rsCombo, 'g');
      var reUnicode = RegExp(
        rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq,
        'g'
      );
      var reUnicodeWord = RegExp(
        [
          rsUpper +
            '?' +
            rsLower +
            '+' +
            rsOptContrLower +
            '(?=' +
            [rsBreak, rsUpper, '$'].join('|') +
            ')',
          rsMiscUpper +
            '+' +
            rsOptContrUpper +
            '(?=' +
            [rsBreak, rsUpper + rsMiscLower, '$'].join('|') +
            ')',
          rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
          rsUpper + '+' + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji,
        ].join('|'),
        'g'
      );
      var reHasUnicode = RegExp(
        '[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']'
      );
      var reHasUnicodeWord =
        /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout',
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] =
        typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] =
        typedArrayTags[int16Tag] =
        typedArrayTags[int32Tag] =
        typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] =
        typedArrayTags[uint16Tag] =
        typedArrayTags[uint32Tag] =
          true;
      typedArrayTags[argsTag] =
        typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] =
        typedArrayTags[boolTag] =
        typedArrayTags[dataViewTag] =
        typedArrayTags[dateTag] =
        typedArrayTags[errorTag] =
        typedArrayTags[funcTag] =
        typedArrayTags[mapTag] =
        typedArrayTags[numberTag] =
        typedArrayTags[objectTag] =
        typedArrayTags[regexpTag] =
        typedArrayTags[setTag] =
        typedArrayTags[stringTag] =
        typedArrayTags[weakMapTag] =
          false;
      var cloneableTags = {};
      cloneableTags[argsTag] =
        cloneableTags[arrayTag] =
        cloneableTags[arrayBufferTag] =
        cloneableTags[dataViewTag] =
        cloneableTags[boolTag] =
        cloneableTags[dateTag] =
        cloneableTags[float32Tag] =
        cloneableTags[float64Tag] =
        cloneableTags[int8Tag] =
        cloneableTags[int16Tag] =
        cloneableTags[int32Tag] =
        cloneableTags[mapTag] =
        cloneableTags[numberTag] =
        cloneableTags[objectTag] =
        cloneableTags[regexpTag] =
        cloneableTags[setTag] =
        cloneableTags[stringTag] =
        cloneableTags[symbolTag] =
        cloneableTags[uint8Tag] =
        cloneableTags[uint8ClampedTag] =
        cloneableTags[uint16Tag] =
        cloneableTags[uint32Tag] =
          true;
      cloneableTags[errorTag] =
        cloneableTags[funcTag] =
        cloneableTags[weakMapTag] =
          false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        '\xC0': 'A',
        '\xC1': 'A',
        '\xC2': 'A',
        '\xC3': 'A',
        '\xC4': 'A',
        '\xC5': 'A',
        '\xE0': 'a',
        '\xE1': 'a',
        '\xE2': 'a',
        '\xE3': 'a',
        '\xE4': 'a',
        '\xE5': 'a',
        '\xC7': 'C',
        '\xE7': 'c',
        '\xD0': 'D',
        '\xF0': 'd',
        '\xC8': 'E',
        '\xC9': 'E',
        '\xCA': 'E',
        '\xCB': 'E',
        '\xE8': 'e',
        '\xE9': 'e',
        '\xEA': 'e',
        '\xEB': 'e',
        '\xCC': 'I',
        '\xCD': 'I',
        '\xCE': 'I',
        '\xCF': 'I',
        '\xEC': 'i',
        '\xED': 'i',
        '\xEE': 'i',
        '\xEF': 'i',
        '\xD1': 'N',
        '\xF1': 'n',
        '\xD2': 'O',
        '\xD3': 'O',
        '\xD4': 'O',
        '\xD5': 'O',
        '\xD6': 'O',
        '\xD8': 'O',
        '\xF2': 'o',
        '\xF3': 'o',
        '\xF4': 'o',
        '\xF5': 'o',
        '\xF6': 'o',
        '\xF8': 'o',
        '\xD9': 'U',
        '\xDA': 'U',
        '\xDB': 'U',
        '\xDC': 'U',
        '\xF9': 'u',
        '\xFA': 'u',
        '\xFB': 'u',
        '\xFC': 'u',
        '\xDD': 'Y',
        '\xFD': 'y',
        '\xFF': 'y',
        '\xC6': 'Ae',
        '\xE6': 'ae',
        '\xDE': 'Th',
        '\xFE': 'th',
        '\xDF': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',
        '\u0102': 'A',
        '\u0104': 'A',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u0105': 'a',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u010E': 'D',
        '\u0110': 'D',
        '\u010F': 'd',
        '\u0111': 'd',
        '\u0112': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u0118': 'E',
        '\u011A': 'E',
        '\u0113': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u0119': 'e',
        '\u011B': 'e',
        '\u011C': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u0122': 'G',
        '\u011D': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u0123': 'g',
        '\u0124': 'H',
        '\u0126': 'H',
        '\u0125': 'h',
        '\u0127': 'h',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u012E': 'I',
        '\u0130': 'I',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u012F': 'i',
        '\u0131': 'i',
        '\u0134': 'J',
        '\u0135': 'j',
        '\u0136': 'K',
        '\u0137': 'k',
        '\u0138': 'k',
        '\u0139': 'L',
        '\u013B': 'L',
        '\u013D': 'L',
        '\u013F': 'L',
        '\u0141': 'L',
        '\u013A': 'l',
        '\u013C': 'l',
        '\u013E': 'l',
        '\u0140': 'l',
        '\u0142': 'l',
        '\u0143': 'N',
        '\u0145': 'N',
        '\u0147': 'N',
        '\u014A': 'N',
        '\u0144': 'n',
        '\u0146': 'n',
        '\u0148': 'n',
        '\u014B': 'n',
        '\u014C': 'O',
        '\u014E': 'O',
        '\u0150': 'O',
        '\u014D': 'o',
        '\u014F': 'o',
        '\u0151': 'o',
        '\u0154': 'R',
        '\u0156': 'R',
        '\u0158': 'R',
        '\u0155': 'r',
        '\u0157': 'r',
        '\u0159': 'r',
        '\u015A': 'S',
        '\u015C': 'S',
        '\u015E': 'S',
        '\u0160': 'S',
        '\u015B': 's',
        '\u015D': 's',
        '\u015F': 's',
        '\u0161': 's',
        '\u0162': 'T',
        '\u0164': 'T',
        '\u0166': 'T',
        '\u0163': 't',
        '\u0165': 't',
        '\u0167': 't',
        '\u0168': 'U',
        '\u016A': 'U',
        '\u016C': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u0172': 'U',
        '\u0169': 'u',
        '\u016B': 'u',
        '\u016D': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u0173': 'u',
        '\u0174': 'W',
        '\u0175': 'w',
        '\u0176': 'Y',
        '\u0177': 'y',
        '\u0178': 'Y',
        '\u0179': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u017A': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u0132': 'IJ',
        '\u0133': 'ij',
        '\u0152': 'Oe',
        '\u0153': 'oe',
        '\u0149': "'n",
        '\u017F': 's',
      };
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
      };
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'",
      };
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029',
      };
      var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
      var freeGlobal =
        typeof global == 'object' &&
        global &&
        global.Object === Object &&
        global;
      var freeSelf =
        typeof self == 'object' && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function('return this')();
      var freeExports =
        typeof exports == 'object' && exports && !exports.nodeType && exports;
      var freeModule =
        freeExports &&
        typeof module2 == 'object' &&
        module2 &&
        !module2.nodeType &&
        module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = (function () {
        try {
          var types =
            freeModule &&
            freeModule.require &&
            freeModule.require('util').types;
          if (types) {
            return types;
          }
          return (
            freeProcess && freeProcess.binding && freeProcess.binding('util')
          );
        } catch (e) {}
      })();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1,
          length = values.length,
          offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
          length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty('length');
      function asciiToArray(string) {
        return string.split('');
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function (value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
          length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function (object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function (key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(
        collection,
        iteratee,
        accumulator,
        initAccum,
        eachFunc
      ) {
        eachFunc(collection, function (value, index, collection2) {
          accumulator = initAccum
            ? ((initAccum = false), value)
            : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result,
          index = -1,
          length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1,
          result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function (key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string
          ? string
              .slice(0, trimmedEndIndex(string) + 1)
              .replace(reTrimStart, '')
          : string;
      }
      function baseUnary(func) {
        return function (value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function (key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1,
          length = strSymbols.length;
        while (
          ++index < length &&
          baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
        ) {}
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length,
          result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data,
          result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1,
          result = Array(map.size);
        map.forEach(function (value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1,
          result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1,
          result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
          length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {}
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = (reUnicode.lastIndex = 0);
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context =
          context == null
            ? root
            : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
        var Array2 = context.Array,
          Date2 = context.Date,
          Error2 = context.Error,
          Function2 = context.Function,
          Math2 = context.Math,
          Object2 = context.Object,
          RegExp2 = context.RegExp,
          String2 = context.String,
          TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype,
          funcProto = Function2.prototype,
          objectProto = Object2.prototype;
        var coreJsData = context['__core-js_shared__'];
        var funcToString = funcProto.toString;
        var hasOwnProperty2 = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = (function () {
          var uid = /[^.]+$/.exec(
            (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ''
          );
          return uid ? 'Symbol(src)_1.' + uid : '';
        })();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          '^' +
            funcToString
              .call(hasOwnProperty2)
              .replace(reRegExpChar, '\\$&')
              .replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                '$1.*?'
              ) +
            '$'
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2,
          Symbol2 = context.Symbol,
          Uint8Array2 = context.Uint8Array,
          allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2,
          getPrototype = overArg(Object2.getPrototypeOf, Object2),
          objectCreate = Object2.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2,
          symIterator = Symbol2 ? Symbol2.iterator : undefined2,
          symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = (function () {
          try {
            var func = getNative(Object2, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        })();
        var ctxClearTimeout =
            context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now,
          ctxSetTimeout =
            context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil,
          nativeFloor = Math2.floor,
          nativeGetSymbols = Object2.getOwnPropertySymbols,
          nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object2.keys, Object2),
          nativeMax = Math2.max,
          nativeMin = Math2.min,
          nativeNow = Date2.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math2.random,
          nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, 'DataView'),
          Map2 = getNative(context, 'Map'),
          Promise2 = getNative(context, 'Promise'),
          Set2 = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object2, 'create');
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map2),
          promiseCtorString = toSource(Promise2),
          setCtorString = toSource(Set2),
          weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2,
          symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (
            isObjectLike(value) &&
            !isArray2(value) &&
            !(value instanceof LazyWrapper)
          ) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = (function () {
          function object() {}
          return function (proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        })();
        function baseLodash() {}
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          escape: reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          evaluate: reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          interpolate: reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          variable: '',
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          imports: {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            _: lodash,
          },
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray2(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);
          if (
            !isArr ||
            (!isRight && arrLength == length && takeCount == length)
          ) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer: while (length-- && resIndex < takeCount) {
            index += dir;
            var iterIndex = -1,
              value = array[index];
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex],
                iteratee2 = data.iteratee,
                type = data.type,
                computed = iteratee2(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty2.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate
            ? data[key] !== undefined2
            : hasOwnProperty2.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] =
            nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            hash: new Hash(),
            map: new (Map2 || ListCache)(),
            string: new Hash(),
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)['delete'](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
            size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1,
            length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = (this.__data__ = new ListCache(entries));
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__,
            result2 = data['delete'](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray2(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer2(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray2(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result2 = skipIndexes ? baseTimes(value.length, String2) : [],
            length = result2.length;
          for (var key in value) {
            if (
              (inherited || hasOwnProperty2.call(value, key)) &&
              !(
                skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
                (key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
                  (isBuff && (key == 'offset' || key == 'parent')) || // PhantomJS 2 has enumerable non-index properties on typed arrays.
                  (isType &&
                    (key == 'buffer' ||
                      key == 'byteLength' ||
                      key == 'byteOffset')) || // Skip index properties.
                  isIndex(key, length))
              )
            ) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (
            (value !== undefined2 && !eq(object[key], value)) ||
            (value === undefined2 && !(key in object))
          ) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (
            !(hasOwnProperty2.call(object, key) && eq(objValue, value)) ||
            (value === undefined2 && !(key in object))
          ) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function (value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object, key, {
              configurable: true,
              enumerable: true,
              value: value,
              writable: true,
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1,
            length = paths.length,
            result2 = Array2(length),
            skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object
              ? customizer(value, key, object, stack)
              : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray2(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;
            if (isBuffer2(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result2, value))
                  : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function (subValue) {
              result2.add(
                baseClone(subValue, bitmask, customizer, subValue, value, stack)
              );
            });
          } else if (isMap(value)) {
            value.forEach(function (subValue, key2) {
              result2.set(
                key2,
                baseClone(subValue, bitmask, customizer, key2, value, stack)
              );
            });
          }
          var keysFunc = isFull
            ? isFlat
              ? getAllKeysIn
              : getAllKeys
            : isFlat
            ? keysIn
            : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function (subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(
              result2,
              key2,
              baseClone(subValue, bitmask, customizer, key2, value, stack)
            );
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function (object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length],
              predicate = source[key],
              value = object[key];
            if (
              (value === undefined2 && !(key in object)) ||
              !predicate(value)
            ) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function () {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1,
            includes2 = arrayIncludes,
            isCommon = true,
            length = array.length,
            result2 = [],
            valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer: while (++index < length) {
            var value = array[index],
              computed = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed, comparator)) {
              result2.push(value);
            }
          }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function (value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1,
            length = array.length;
          while (++index < length) {
            var value = array[index],
              current = iteratee2(value);
            if (
              current != null &&
              (computed === undefined2
                ? current === current && !isSymbol(current)
                : comparator(current, computed))
            ) {
              var computed = current,
                result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function (value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1,
            length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function (key) {
            return isFunction2(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0,
            length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray2(object)
            ? result2
            : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value)
            ? getRawTag(value)
            : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty2.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return (
            number >= nativeMin(start, end) && number < nativeMax(start, end)
          );
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array2(othLength),
            maxLength = Infinity,
            result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] =
              !comparator &&
              (iteratee2 || (length >= 120 && array.length >= 120))
                ? new SetCache(othIndex && array)
                : undefined2;
          }
          array = arrays[0];
          var index = -1,
            seen = caches[0];
          outer: while (++index < length && result2.length < maxLength) {
            var value = array[index],
              computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (
              !(seen
                ? cacheHas(seen, computed)
                : includes2(result2, computed, comparator))
            ) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (
                  !(cache
                    ? cacheHas(cache, computed)
                    : includes2(arrays[othIndex], computed, comparator))
                ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function (value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (
            value == null ||
            other == null ||
            (!isObjectLike(value) && !isObjectLike(other))
          ) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(
            value,
            other,
            bitmask,
            customizer,
            baseIsEqual,
            stack
          );
        }
        function baseIsEqualDeep(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var objIsArr = isArray2(object),
            othIsArr = isArray2(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;
          if (isSameTag && isBuffer2(object)) {
            if (!isBuffer2(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray2(object)
              ? equalArrays(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                )
              : equalByTag(
                  object,
                  other,
                  objTag,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                );
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped =
                objIsObj && hasOwnProperty2.call(object, '__wrapped__'),
              othIsWrapped =
                othIsObj && hasOwnProperty2.call(other, '__wrapped__');
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(
                objUnwrapped,
                othUnwrapped,
                bitmask,
                customizer,
                stack
              );
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          );
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
            length = index,
            noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (
              noCustomizer && data[2]
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
            ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
              objValue = object[key],
              srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(
                  objValue,
                  srcValue,
                  key,
                  object,
                  source,
                  stack
                );
              }
              if (
                !(result2 === undefined2
                  ? baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                      customizer,
                      stack
                    )
                  : result2)
              ) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return (
            isObjectLike(value) &&
            isLength(value.length) &&
            !!typedArrayTags[baseGetTag(value)]
          );
        }
        function baseIteratee(value) {
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == 'object') {
            return isArray2(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty2.call(object, key) && key != 'constructor') {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject2(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
            result2 = [];
          for (var key in object) {
            if (
              !(
                key == 'constructor' &&
                (isProto || !hasOwnProperty2.call(object, key))
              )
            ) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1,
            result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function (value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function (object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function (object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue
              ? hasIn(object, path)
              : baseIsEqual(
                  srcValue,
                  objValue,
                  COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                );
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(
            source,
            function (srcValue, key) {
              stack || (stack = new Stack());
              if (isObject2(srcValue)) {
                baseMergeDeep(
                  object,
                  source,
                  key,
                  srcIndex,
                  baseMerge,
                  customizer,
                  stack
                );
              } else {
                var newValue = customizer
                  ? customizer(
                      safeGet(object, key),
                      srcValue,
                      key + '',
                      object,
                      source,
                      stack
                    )
                  : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            },
            keysIn
          );
        }
        function baseMergeDeep(
          object,
          source,
          key,
          srcIndex,
          mergeFunc,
          customizer,
          stack
        ) {
          var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, key + '', object, source, stack)
            : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray2(srcValue),
              isBuff = !isArr && isBuffer2(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray2(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function (iteratee2) {
              if (isArray2(iteratee2)) {
                return function (value) {
                  return baseGet(
                    value,
                    iteratee2.length === 1 ? iteratee2[0] : iteratee2
                  );
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function (value, key, collection2) {
            var criteria = arrayMap(iteratees, function (iteratee2) {
              return iteratee2(value);
            });
            return { criteria: criteria, index: ++index, value: value };
          });
          return baseSortBy(result2, function (object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function (value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1,
            length = paths.length,
            result2 = {};
          while (++index < length) {
            var path = paths[index],
              value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function (object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values2.length,
            seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0,
              value = values2[index],
              computed = iteratee2 ? iteratee2(value) : value;
            while (
              (fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1
            ) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
            lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = '';
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + '');
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject2(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
              newValue = value;
            if (
              key === '__proto__' ||
              key === 'constructor' ||
              key === 'prototype'
            ) {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer
                ? customizer(objValue, key, nested)
                : undefined2;
              if (newValue === undefined2) {
                newValue = isObject2(objValue)
                  ? objValue
                  : isIndex(path[index + 1])
                  ? []
                  : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap
          ? identity
          : function (func, data) {
              metaMap.set(func, data);
              return func;
            };
        var baseSetToString = !defineProperty
          ? identity
          : function (func, string) {
              return defineProperty(func, 'toString', {
                configurable: true,
                enumerable: false,
                value: constant(string),
                writable: true,
              });
            };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1,
            length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : (end - start) >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function (value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
            high = array == null ? low : array.length;
          if (
            typeof value == 'number' &&
            value === value &&
            high <= HALF_MAX_ARRAY_LENGTH
          ) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                computed = array[mid];
              if (
                computed !== null &&
                !isSymbol(computed) &&
                (retHighest ? computed <= value : computed < value)
              ) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0,
            high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
              computed = iteratee2(array[mid]),
              othIsDefined = computed !== undefined2,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow =
                othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow =
                othIsReflexive &&
                othIsDefined &&
                !othIsNull &&
                (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1,
            length = array.length,
            resIndex = 0,
            result2 = [];
          while (++index < length) {
            var value = array[index],
              computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == 'string') {
            return value;
          }
          if (isArray2(value)) {
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result2 = value + '';
          return result2 == '0' && 1 / value == -INFINITY ? '-0' : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1,
            includes2 = arrayIncludes,
            length = array.length,
            isCommon = true,
            result2 = [],
            seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer: while (++index < length) {
            var value = array[index],
              computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed);
              }
              result2.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result2) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(
            object,
            path,
            updater(baseGet(object, path)),
            customizer
          );
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
            index = fromRight ? length : -1;
          while (
            (fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)
          ) {}
          return isDrop
            ? baseSlice(
                array,
                fromRight ? 0 : index,
                fromRight ? index + 1 : length
              )
            : baseSlice(
                array,
                fromRight ? index + 1 : 0,
                fromRight ? length : index
              );
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(
            actions,
            function (result3, action) {
              return action.func.apply(
                action.thisArg,
                arrayPush([result3], action.args)
              );
            },
            result2
          );
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
            result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index],
              othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(
                  result2[index] || array,
                  arrays[othIndex],
                  iteratee2,
                  comparator
                );
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1,
            length = props.length,
            valsLength = values2.length,
            result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == 'function' ? value : identity;
        }
        function castPath(value, object) {
          if (isArray2(value)) {
            return value;
          }
          return isKey(value, object)
            ? [value]
            : stringToPath(toString3(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 =
          ctxClearTimeout ||
          function (id) {
            return root.clearTimeout(id);
          };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
            result2 = allocUnsafe
              ? allocUnsafe(length)
              : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(dataView.buffer)
            : dataView.buffer;
          return new dataView.constructor(
            buffer,
            dataView.byteOffset,
            dataView.byteLength
          );
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(
            regexp.source,
            reFlags.exec(regexp)
          );
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(typedArray.buffer)
            : typedArray.buffer;
          return new typedArray.constructor(
            buffer,
            typedArray.byteOffset,
            typedArray.length
          );
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);
            if (
              (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol &&
                othIsDefined &&
                othIsReflexive &&
                !othIsNull &&
                !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive
            ) {
              return 1;
            }
            if (
              (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol &&
                valIsDefined &&
                valIsReflexive &&
                !valIsNull &&
                !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive
            ) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(
              objCriteria[index],
              othCriteria[index]
            );
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == 'desc' ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result2 = Array2(leftLength + rangeLength),
            isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result2 = Array2(rangeLength + rightLength),
            isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1,
            length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1,
            length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function (collection, iteratee2) {
            var func = isArray2(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
            return func(
              collection,
              setter,
              getIteratee(iteratee2, 2),
              accumulator
            );
          };
        }
        function createAssigner(assigner) {
          return baseRest(function (object, sources) {
            var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined2,
              guard = length > 2 ? sources[2] : undefined2;
            customizer =
              assigner.length > 3 && typeof customizer == 'function'
                ? (length--, customizer)
                : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function (collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function (object, iteratee2, keysFunc) {
            var index = -1,
              iterable = Object2(object),
              props = keysFunc(object),
              length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);
          function wrapper() {
            var fn =
              this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function (string) {
            string = toString3(string);
            var strSymbols = hasUnicode(string)
              ? stringToArray(string)
              : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols
              ? castSlice(strSymbols, 1).join('')
              : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function (string) {
            return arrayReduce(
              words(deburr(string).replace(reApos, '')),
              callback,
              ''
            );
          };
        }
        function createCtor(Ctor) {
          return function () {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(
                  args[0],
                  args[1],
                  args[2],
                  args[3],
                  args[4],
                  args[5]
                );
              case 7:
                return new Ctor(
                  args[0],
                  args[1],
                  args[2],
                  args[3],
                  args[4],
                  args[5],
                  args[6]
                );
            }
            var thisBinding = baseCreate(Ctor.prototype),
              result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length,
              args = Array2(length),
              index = length,
              placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders =
              length < 3 &&
              args[0] !== placeholder &&
              args[length - 1] !== placeholder
                ? []
                : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn =
              this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function (collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function (key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1
              ? iterable[iteratee2 ? collection[index] : index]
              : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function (funcs) {
            var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != 'function') {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined2;
              if (
                data &&
                isLaziable(data[0]) &&
                data[1] ==
                  (WRAP_ARY_FLAG |
                    WRAP_CURRY_FLAG |
                    WRAP_PARTIAL_FLAG |
                    WRAP_REARG_FLAG) &&
                !data[4].length &&
                data[9] == 1
              ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper =
                  func.length == 1 && isLaziable(func)
                    ? wrapper[funcName]()
                    : wrapper.thru(func);
              }
            }
            return function () {
              var args = arguments,
                value = args[0];
              if (wrapper && args.length == 1 && isArray2(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0,
                result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ) {
          var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length,
              args = Array2(length),
              index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(
                args,
                partialsRight,
                holdersRight,
                isCurried
              );
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function (object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function (value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == 'string' || typeof other == 'string') {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function (iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function (args) {
              var thisArg = this;
              return arrayFunc(iteratees, function (iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? ' ' : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(
            chars,
            nativeCeil(length / stringSize(chars))
          );
          return hasUnicode(chars)
            ? castSlice(stringToArray(result2), 0, length).join('')
            : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array2(leftLength + argsLength),
              fn =
                this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function (start, end, step) {
            if (
              step &&
              typeof step != 'number' &&
              isIterateeCall(start, end, step)
            ) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step =
              step === undefined2 ? (start < end ? 1 : -1) : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function (value, other) {
            if (!(typeof value == 'string' && typeof other == 'string')) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(
          func,
          bitmask,
          wrapFunc,
          placeholder,
          thisArg,
          partials,
          holders,
          argPos,
          ary2,
          arity
        ) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined2,
            newHoldersRight = isCurry ? undefined2 : holders,
            newPartials = isCurry ? partials : undefined2,
            newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity,
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function (number, precision) {
            number = toNumber(number);
            precision =
              precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString3(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
              pair = (toString3(value) + 'e').split('e');
              return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(
          Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY
        )
          ? noop2
          : function (values2) {
              return new Set2(values2);
            };
        function createToPairs(keysFunc) {
          return function (object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          argPos,
          ary2,
          arity
        ) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
              holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity,
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] =
            newData[9] === undefined2
              ? isBindKey
                ? 0
                : func.length
              : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (
            bitmask == WRAP_CURRY_FLAG ||
            bitmask == WRAP_CURRY_RIGHT_FLAG
          ) {
            result2 = createCurry(func, bitmask, arity);
          } else if (
            (bitmask == WRAP_PARTIAL_FLAG ||
              bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
            !holders.length
          ) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (
            objValue === undefined2 ||
            (eq(objValue, objectProto[key]) &&
              !hasOwnProperty2.call(object, key))
          ) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(
          objValue,
          srcValue,
          key,
          object,
          source,
          stack
        ) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(
              objValue,
              srcValue,
              undefined2,
              customDefaultsMerge,
              stack
            );
            stack['delete'](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject2(value) ? undefined2 : value;
        }
        function equalArrays(
          array,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1,
            result2 = true,
            seen =
              bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index],
              othValue = other[index];
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (
                !arraySome(other, function (othValue2, othIndex) {
                  if (
                    !cacheHas(seen, othIndex) &&
                    (arrValue === othValue2 ||
                      equalFunc(
                        arrValue,
                        othValue2,
                        bitmask,
                        customizer,
                        stack
                      ))
                  ) {
                    return seen.push(othIndex);
                  }
                })
              ) {
                result2 = false;
                break;
              }
            } else if (
              !(
                arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )
            ) {
              result2 = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result2;
        }
        function equalByTag(
          object,
          other,
          tag,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          switch (tag) {
            case dataViewTag:
              if (
                object.byteLength != other.byteLength ||
                object.byteOffset != other.byteOffset
              ) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (
                object.byteLength != other.byteLength ||
                !equalFunc(new Uint8Array2(object), new Uint8Array2(other))
              ) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return (
                object.name == other.name && object.message == other.message
              );
            case regexpTag:
            case stringTag:
              return object == other + '';
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(
                convert(object),
                convert(other),
                bitmask,
                customizer,
                equalFunc,
                stack
              );
              stack['delete'](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (
              !(isPartial ? key in other : hasOwnProperty2.call(other, key))
            ) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
              othValue = other[key];
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            if (
              !(compared === undefined2
                ? objValue === othValue ||
                  equalFunc(objValue, othValue, bitmask, customizer, stack)
                : compared)
            ) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor,
              othCtor = other.constructor;
            if (
              objCtor != othCtor &&
              'constructor' in object &&
              'constructor' in other &&
              !(
                typeof objCtor == 'function' &&
                objCtor instanceof objCtor &&
                typeof othCtor == 'function' &&
                othCtor instanceof othCtor
              )
            ) {
              result2 = false;
            }
          }
          stack['delete'](object);
          stack['delete'](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + '');
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap
          ? noop2
          : function (func) {
              return metaMap.get(func);
            };
        function getFuncName(func) {
          var result2 = func.name + '',
            array = realNames[result2],
            length = hasOwnProperty2.call(realNames, result2)
              ? array.length
              : 0;
          while (length--) {
            var data = array[length],
              otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty2.call(lodash, 'placeholder')
            ? lodash
            : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length
            ? result2(arguments[0], arguments[1])
            : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object),
            length = result2.length;
          while (length--) {
            var key = result2[length],
              value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag),
            tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {}
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols
          ? stubArray
          : function (object) {
              if (object == null) {
                return [];
              }
              object = Object2(object);
              return arrayFilter(nativeGetSymbols(object), function (symbol) {
                return propertyIsEnumerable.call(object, symbol);
              });
            };
        var getSymbolsIn = !nativeGetSymbols
          ? stubArray
          : function (object) {
              var result2 = [];
              while (object) {
                arrayPush(result2, getSymbols(object));
                object = getPrototype(object);
              }
              return result2;
            };
        var getTag = baseGetTag;
        if (
          (DataView &&
            getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map2 && getTag(new Map2()) != mapTag) ||
          (Promise2 && getTag(Promise2.resolve()) != promiseTag) ||
          (Set2 && getTag(new Set2()) != setTag) ||
          (WeakMap && getTag(new WeakMap()) != weakMapTag)
        ) {
          getTag = function (value) {
            var result2 = baseGetTag(value),
              Ctor = result2 == objectTag ? value.constructor : undefined2,
              ctorString = Ctor ? toSource(Ctor) : '';
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1,
            length = transforms.length;
          while (++index < length) {
            var data = transforms[index],
              size2 = data.size;
            switch (data.type) {
              case 'drop':
                start += size2;
                break;
              case 'dropRight':
                end -= size2;
                break;
              case 'take':
                end = nativeMin(end, start + size2);
                break;
              case 'takeRight':
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { start: start, end: end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1,
            length = path.length,
            result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return (
            !!length &&
            isLength(length) &&
            isIndex(key, length) &&
            (isArray2(object) || isArguments(object))
          );
        }
        function initCloneArray(array) {
          var length = array.length,
            result2 = new array.constructor(length);
          if (
            length &&
            typeof array[0] == 'string' &&
            hasOwnProperty2.call(array, 'index')
          ) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == 'function' && !isPrototype(object)
            ? baseCreate(getPrototype(object))
            : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(
            reWrapComment,
            '{\n/* [wrapped with ' + details + '] */\n'
          );
        }
        function isFlattenable(value) {
          return (
            isArray2(value) ||
            isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol])
          );
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return (
            !!length &&
            (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
            value > -1 &&
            value % 1 == 0 &&
            value < length
          );
        }
        function isIterateeCall(value, index, object) {
          if (!isObject2(object)) {
            return false;
          }
          var type = typeof index;
          if (
            type == 'number'
              ? isArrayLike(object) && isIndex(index, object.length)
              : type == 'string' && index in object
          ) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray2(value)) {
            return false;
          }
          var type = typeof value;
          if (
            type == 'number' ||
            type == 'symbol' ||
            type == 'boolean' ||
            value == null ||
            isSymbol(value)
          ) {
            return true;
          }
          return (
            reIsPlainProp.test(value) ||
            !reIsDeepProp.test(value) ||
            (object != null && value in Object2(object))
          );
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == 'string' ||
            type == 'number' ||
            type == 'symbol' ||
            type == 'boolean'
            ? value !== '__proto__'
            : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func),
            other = lodash[funcName];
          if (
            typeof other != 'function' ||
            !(funcName in LazyWrapper.prototype)
          ) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor,
            proto =
              (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function (object) {
            if (object == null) {
              return false;
            }
            return (
              object[key] === srcValue &&
              (srcValue !== undefined2 || key in Object2(object))
            );
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function (key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon =
              newBitmask <
              (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo =
            (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
            (srcBitmask == WRAP_ARY_FLAG &&
              bitmask == WRAP_REARG_FLAG &&
              data[7].length <= source[8]) ||
            (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
              source[7].length <= source[8] &&
              bitmask == WRAP_CURRY_FLAG);
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials
              ? composeArgs(partials, value, source[4])
              : value;
            data[4] = partials
              ? replaceHolders(data[3], PLACEHOLDER)
              : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials
              ? composeArgsRight(partials, value, source[6])
              : value;
            data[6] = partials
              ? replaceHolders(data[5], PLACEHOLDER)
              : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] =
              data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function () {
            var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2
            ? object
            : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength)
              ? oldArray[index]
              : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === 'constructor' && typeof object[key] === 'function') {
            return;
          }
          if (key == '__proto__') {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 =
          ctxSetTimeout ||
          function (func, wait) {
            return root.setTimeout(func, wait);
          };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + '';
          return setToString(
            wrapper,
            insertWrapDetails(
              source,
              updateWrapDetails(getWrapDetails(source), bitmask)
            )
          );
        }
        function shortOut(func) {
          var count = 0,
            lastCalled = 0;
          return function () {
            var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1,
            length = array.length,
            lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex),
              value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function (string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push('');
          }
          string.replace(
            rePropName,
            function (match, number, quote, subString) {
              result2.push(
                quote ? subString.replace(reEscapeChar, '$1') : number || match
              );
            }
          );
          return result2;
        });
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result2 = value + '';
          return result2 == '0' && 1 / value == -INFINITY ? '-0' : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return func + '';
            } catch (e) {}
          }
          return '';
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function (pair) {
            var value = '_.' + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(
            wrapper.__wrapped__,
            wrapper.__chain__
          );
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (
            guard ? isIterateeCall(array, size2, guard) : size2 === undefined2
          ) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0,
            resIndex = 0,
            result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, (index += size2));
          }
          return result2;
        }
        function compact(array) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1),
            array = arguments[0],
            index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(
            isArray2(array) ? copyArray(array) : [array],
            baseFlatten(args, 1)
          );
        }
        var difference = baseRest(function (array, values2) {
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values2, 1, isArrayLikeObject, true)
              )
            : [];
        });
        var differenceBy = baseRest(function (array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values2, 1, isArrayLikeObject, true),
                getIteratee(iteratee2, 2)
              )
            : [];
        });
        var differenceWith = baseRest(function (array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values2, 1, isArrayLikeObject, true),
                undefined2,
                comparator
              )
            : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), true, true)
            : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), true)
            : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (
            start &&
            typeof start != 'number' &&
            isIterateeCall(array, value, start)
          ) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index =
              fromIndex < 0
                ? nativeMax(length + index, 0)
                : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function (arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped)
            : [];
        });
        var intersectionBy = baseRest(function (arrays) {
          var iteratee2 = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped, getIteratee(iteratee2, 2))
            : [];
        });
        var intersectionWith = baseRest(function (arrays) {
          var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped, undefined2, comparator)
            : [];
        });
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index =
              index < 0
                ? nativeMax(length + index, 0)
                : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length
            ? baseNth(array, toInteger(n))
            : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length
            ? basePullAll(array, values2)
            : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length
            ? basePullAll(array, values2, getIteratee(iteratee2, 2))
            : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length
            ? basePullAll(array, values2, undefined2, comparator)
            : array;
        }
        var pullAt = flatRest(function (array, indexes) {
          var length = array == null ? 0 : array.length,
            result2 = baseAt(array, indexes);
          basePullAt(
            array,
            arrayMap(indexes, function (index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending)
          );
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1,
            indexes = [],
            length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (
            end &&
            typeof end != 'number' &&
            isIterateeCall(array, start, end)
          ) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(
            array,
            value,
            getIteratee(iteratee2, 2),
            true
          );
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length
            ? baseSortedUniq(array, getIteratee(iteratee2, 2))
            : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), false, true)
            : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3))
            : [];
        }
        var union = baseRest(function (arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function (arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(
            baseFlatten(arrays, 1, isArrayLikeObject, true),
            getIteratee(iteratee2, 2)
          );
        });
        var unionWith = baseRest(function (arrays) {
          var comparator = last(arrays);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return baseUniq(
            baseFlatten(arrays, 1, isArrayLikeObject, true),
            undefined2,
            comparator
          );
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length
            ? baseUniq(array, getIteratee(iteratee2, 2))
            : [];
        }
        function uniqWith(array, comparator) {
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return array && array.length
            ? baseUniq(array, undefined2, comparator)
            : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function (group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function (index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function (group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function (array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function (arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function (arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(
            arrayFilter(arrays, isArrayLikeObject),
            getIteratee(iteratee2, 2)
          );
        });
        var xorWith = baseRest(function (arrays) {
          var comparator = last(arrays);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return baseXor(
            arrayFilter(arrays, isArrayLikeObject),
            undefined2,
            comparator
          );
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function (arrays) {
          var length = arrays.length,
            iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 =
            typeof iteratee2 == 'function'
              ? (arrays.pop(), iteratee2)
              : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function (paths) {
          var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function (object) {
              return baseAt(object, paths);
            };
          if (
            length > 1 ||
            this.__actions__.length ||
            !(value instanceof LazyWrapper) ||
            !isIndex(start)
          ) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            func: thru,
            args: [interceptor],
            thisArg: undefined2,
          });
          return new LodashWrapper(value, this.__chain__).thru(function (
            array
          ) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray2(this.value());
          }
          var done = this.__index__ >= this.__values__.length,
            value = done ? undefined2 : this.__values__[this.__index__++];
          return { done: done, value: value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2,
            parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              func: thru,
              args: [reverse],
              thisArg: undefined2,
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function (result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray2(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter2(collection, predicate) {
          var func = isArray2(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach2(collection, iteratee2) {
          var func = isArray2(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray2(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function (result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection)
            ? collection
            : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection)
            ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
            : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function (collection, path, args) {
          var index = -1,
            isFunc = typeof path == 'function',
            result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function (value) {
            result2[++index] = isFunc
              ? apply(path, value, args)
              : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function (result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray2(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray2(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray2(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(
          function (result2, value, key) {
            result2[key ? 0 : 1].push(value);
          },
          function () {
            return [[], []];
          }
        );
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray2(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
          return func(
            collection,
            getIteratee(iteratee2, 4),
            accumulator,
            initAccum,
            baseEach
          );
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray2(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
          return func(
            collection,
            getIteratee(iteratee2, 4),
            accumulator,
            initAccum,
            baseEachRight
          );
        }
        function reject(collection, predicate) {
          var func = isArray2(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray2(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray2(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString2(collection)
              ? stringSize(collection)
              : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray2(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function (collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (
            length > 1 &&
            isIterateeCall(collection, iteratees[0], iteratees[1])
          ) {
            iteratees = [];
          } else if (
            length > 2 &&
            isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
          ) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now =
          ctxNow ||
          function () {
            return root.Date.now();
          };
        function after(n, func) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function () {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(
            func,
            WRAP_ARY_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            n
          );
        }
        function before(n, func) {
          var result2;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function () {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind2 = baseRest(function (func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind2));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function (object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(
            func,
            WRAP_CURRY_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            arity
          );
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(
            func,
            WRAP_CURRY_RIGHT_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            arity
          );
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs,
            lastThis,
            maxWait,
            result2,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing
              ? nativeMax(toNumber(options.maxWait) || 0, wait)
              : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs,
              thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
            return maxing
              ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
              : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
            return (
              lastCallTime === undefined2 ||
              timeSinceLastCall >= wait ||
              timeSinceLastCall < 0 ||
              (maxing && timeSinceLastInvoke >= maxWait)
            );
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(),
              isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function (func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function (func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (
            typeof func != 'function' ||
            (resolver != null && typeof resolver != 'function')
          ) {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function () {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function () {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function (func, transforms) {
          transforms =
            transforms.length == 1 && isArray2(transforms[0])
              ? arrayMap(transforms[0], baseUnary(getIteratee()))
              : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function (args) {
            var index = -1,
              length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function (func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(
            func,
            WRAP_PARTIAL_FLAG,
            undefined2,
            partials,
            holders
          );
        });
        var partialRight = baseRest(function (func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(
            func,
            WRAP_PARTIAL_RIGHT_FLAG,
            undefined2,
            partials,
            holders
          );
        });
        var rearg = flatRest(function (func, indexes) {
          return createWrap(
            func,
            WRAP_REARG_FLAG,
            undefined2,
            undefined2,
            undefined2,
            indexes
          );
        });
        function rest(func, start) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread3(func, start) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function (args) {
            var array = args[start],
              otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle2(func, wait, options) {
          var leading = true,
            trailing = true;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject2(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            leading: leading,
            maxWait: wait,
            trailing: trailing,
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray2(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseClone(
            value,
            CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
            customizer
          );
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function (value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(
          (function () {
            return arguments;
          })()
        )
          ? baseIsArguments
          : function (value) {
              return (
                isObjectLike(value) &&
                hasOwnProperty2.call(value, 'callee') &&
                !propertyIsEnumerable.call(value, 'callee')
              );
            };
        var isArray2 = Array2.isArray;
        var isArrayBuffer2 = nodeIsArrayBuffer
          ? baseUnary(nodeIsArrayBuffer)
          : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean2(value) {
          return (
            value === true ||
            value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag)
          );
        }
        var isBuffer2 = nativeIsBuffer || stubFalse;
        var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return (
            isObjectLike(value) &&
            value.nodeType === 1 &&
            !isPlainObject2(value)
          );
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (
            isArrayLike(value) &&
            (isArray2(value) ||
              typeof value == 'string' ||
              typeof value.splice == 'function' ||
              isBuffer2(value) ||
              isTypedArray2(value) ||
              isArguments(value))
          ) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty2.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2
            ? baseIsEqual(value, other, undefined2, customizer)
            : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return (
            tag == errorTag ||
            tag == domExcTag ||
            (typeof value.message == 'string' &&
              typeof value.name == 'string' &&
              !isPlainObject2(value))
          );
        }
        function isFinite2(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return (
            tag == funcTag ||
            tag == genTag ||
            tag == asyncTag ||
            tag == proxyTag
          );
        }
        function isInteger(value) {
          return typeof value == 'number' && value == toInteger(value);
        }
        function isLength(value) {
          return (
            typeof value == 'number' &&
            value > -1 &&
            value % 1 == 0 &&
            value <= MAX_SAFE_INTEGER
          );
        }
        function isObject2(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return (
            object === source ||
            baseIsMatch(object, source, getMatchData(source))
          );
        }
        function isMatchWith(object, source, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber2(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber2(value) {
          return (
            typeof value == 'number' ||
            (isObjectLike(value) && baseGetTag(value) == numberTag)
          );
        }
        function isPlainObject2(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor =
            hasOwnProperty2.call(proto, 'constructor') && proto.constructor;
          return (
            typeof Ctor == 'function' &&
            Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString
          );
        }
        var isRegExp2 = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return (
            isInteger(value) &&
            value >= -MAX_SAFE_INTEGER &&
            value <= MAX_SAFE_INTEGER
          );
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return (
            typeof value == 'string' ||
            (!isArray2(value) &&
              isObjectLike(value) &&
              baseGetTag(value) == stringTag)
          );
        }
        function isSymbol(value) {
          return (
            typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag)
          );
        }
        var isTypedArray2 = nodeIsTypedArray
          ? baseUnary(nodeIsTypedArray)
          : baseIsTypedArray;
        function isUndefined2(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function (value, other) {
          return value <= other;
        });
        function toArray2(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString2(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value),
            func =
              tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value),
            remainder = result2 % 1;
          return result2 === result2
            ? remainder
              ? result2 - remainder
              : result2
            : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other =
              typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject2(other) ? other + '' : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value)
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : reIsBadHex.test(value)
            ? NAN
            : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value
            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
            : value === 0
            ? value
            : 0;
        }
        function toString3(value) {
          return value == null ? '' : baseToString(value);
        }
        var assign = createAssigner(function (object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function (object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function (
          object,
          source,
          srcIndex,
          customizer
        ) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function (
          object,
          source,
          srcIndex,
          customizer
        ) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype3, properties) {
          var result2 = baseCreate(prototype3);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults2 = baseRest(function (object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (
                value === undefined2 ||
                (eq(value, objectProto[key]) &&
                  !hasOwnProperty2.call(object, key))
              ) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function (args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey2(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(
            object,
            getIteratee(predicate, 3),
            baseForOwnRight
          );
        }
        function forIn(object, iteratee2) {
          return object == null
            ? object
            : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null
            ? object
            : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function (result2, value, key) {
          if (value != null && typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function (result2, value, key) {
          if (value != null && typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty2.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object)
            ? arrayLikeKeys(object, true)
            : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function (value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function (value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge2 = createAssigner(function (object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function (
          object,
          source,
          srcIndex,
          customizer
        ) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function (object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function (path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(
              result2,
              CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
              customOmitClone
            );
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function (object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function (prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function (value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1,
            length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value =
              object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction2(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return object == null
            ? object
            : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray2(object),
            isArrLike = isArr || isBuffer2(object) || isTypedArray2(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object)) {
              accumulator = isFunction2(Ctor)
                ? baseCreate(getPrototype(object))
                : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(
            object,
            function (value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            }
          );
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null
            ? object
            : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return object == null
            ? object
            : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (
            floating &&
            typeof floating != 'boolean' &&
            isIterateeCall(lower, upper, floating)
          ) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == 'boolean') {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == 'boolean') {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(
              lower +
                rand *
                  (upper -
                    lower +
                    freeParseFloat('1e-' + ((rand + '').length - 1))),
              upper
            );
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function (result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString3(string).toLowerCase());
        }
        function deburr(string) {
          string = toString3(string);
          return (
            string &&
            string.replace(reLatin, deburrLetter).replace(reComboMark, '')
          );
        }
        function endsWith2(string, target, position) {
          string = toString3(string);
          target = baseToString(target);
          var length = string.length;
          position =
            position === undefined2
              ? length
              : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString3(string);
          return string && reHasUnescapedHtml.test(string)
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }
        function escapeRegExp(string) {
          string = toString3(string);
          return string && reHasRegExpChar.test(string)
            ? string.replace(reRegExpChar, '\\$&')
            : string;
        }
        var kebabCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? '-' : '') + word.toLowerCase();
        });
        var lowerCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? ' ' : '') + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst('toLowerCase');
        function pad(string, length, chars) {
          string = toString3(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return (
            createPadding(nativeFloor(mid), chars) +
            string +
            createPadding(nativeCeil(mid), chars)
          );
        }
        function padEnd(string, length, chars) {
          string = toString3(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length
            ? string + createPadding(length - strLength, chars)
            : string;
        }
        function padStart(string, length, chars) {
          string = toString3(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length
            ? createPadding(length - strLength, chars) + string
            : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(
            toString3(string).replace(reTrimStart, ''),
            radix || 0
          );
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString3(string), n);
        }
        function replace() {
          var args = arguments,
            string = toString3(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? '_' : '') + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (
            limit &&
            typeof limit != 'number' &&
            isIterateeCall(string, separator, limit)
          ) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString3(string);
          if (
            string &&
            (typeof separator == 'string' ||
              (separator != null && !isRegExp2(separator)))
          ) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? ' ' : '') + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString3(string);
          position =
            position == null
              ? 0
              : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString3(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith(
              {},
              options.imports,
              settings.imports,
              customDefaultsAssignIn
            ),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
          var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source +
              '|' +
              interpolate.source +
              '|' +
              (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                .source +
              '|' +
              (options.evaluate || reNoMatch).source +
              '|$',
            'g'
          );
          var sourceURL =
            '//# sourceURL=' +
            (hasOwnProperty2.call(options, 'sourceURL')
              ? (options.sourceURL + '').replace(/\s/g, ' ')
              : 'lodash.templateSources[' + ++templateCounter + ']') +
            '\n';
          string.replace(
            reDelimiters,
            function (
              match,
              escapeValue,
              interpolateValue,
              esTemplateValue,
              evaluateValue,
              offset
            ) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string
                .slice(index, offset)
                .replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source +=
                  "' +\n((__t = (" +
                  interpolateValue +
                  ")) == null ? '' : __t) +\n'";
              }
              index = offset + match.length;
              return match;
            }
          );
          source += "';\n";
          var variable =
            hasOwnProperty2.call(options, 'variable') && options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (
            isEvaluating ? source.replace(reEmptyStringLeading, '') : source
          )
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');
          source =
            'function(' +
            (variable || 'obj') +
            ') {\n' +
            (variable ? '' : 'obj || (obj = {});\n') +
            "var __t, __p = ''" +
            (isEscaping ? ', __e = _.escape' : '') +
            (isEvaluating
              ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n"
              : ';\n') +
            source +
            'return __p\n}';
          var result2 = attempt(function () {
            return Function2(importsKeys, sourceURL + 'return ' + source).apply(
              undefined2,
              importsValues
            );
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString3(value).toLowerCase();
        }
        function toUpper(value) {
          return toString3(value).toUpperCase();
        }
        function trim2(string, chars, guard) {
          string = toString3(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join('');
        }
        function trimEnd(string, chars, guard) {
          string = toString3(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join('');
        }
        function trimStart(string, chars, guard) {
          string = toString3(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join('');
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator =
              'separator' in options ? options.separator : separator;
            length = 'length' in options ? toInteger(options.length) : length;
            omission =
              'omission' in options ? baseToString(options.omission) : omission;
          }
          string = toString3(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols
            ? castSlice(strSymbols, 0, end).join('')
            : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp2(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                substring = result2;
              if (!separator.global) {
                separator = RegExp2(
                  separator.source,
                  toString3(reFlags.exec(separator)) + 'g'
                );
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape2(string) {
          string = toString3(string);
          return string && reHasEscapedHtml.test(string)
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }
        var upperCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? ' ' : '') + word.toUpperCase();
        });
        var upperFirst = createCaseFirst('toUpperCase');
        function words(string, pattern, guard) {
          string = toString3(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string)
              ? unicodeWords(string)
              : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function (func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function (object, methodNames) {
          arrayEach(methodNames, function (key) {
            key = toKey(key);
            baseAssignValue(object, key, bind2(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
          pairs = !length
            ? []
            : arrayMap(pairs, function (pair) {
                if (typeof pair[1] != 'function') {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                return [toIteratee(pair[0]), pair[1]];
              });
          return baseRest(function (args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function () {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(
            typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG)
          );
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(
            path,
            baseClone(srcValue, CLONE_DEEP_FLAG)
          );
        }
        var method = baseRest(function (path, args) {
          return function (object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function (object, args) {
          return function (path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source),
            methodNames = baseFunctions(source, props);
          if (
            options == null &&
            !(isObject2(source) && (methodNames.length || !props.length))
          ) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 =
              !(isObject2(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction2(object);
          arrayEach(methodNames, function (methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function () {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__),
                    actions = (result2.__actions__ = copyArray(
                      this.__actions__
                    ));
                  actions.push({
                    func: func,
                    args: arguments,
                    thisArg: object,
                  });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop2() {}
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function (args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path)
            ? baseProperty(toKey(path))
            : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function (path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return '';
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray2(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value)
            ? [value]
            : copyArray(stringToPath(toString3(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString3(prefix) + id;
        }
        var add = createMathOperation(function (augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound('ceil');
        var divide = createMathOperation(function (dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound('floor');
        function max(array) {
          return array && array.length
            ? baseExtremum(array, identity, baseGt)
            : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length
            ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt)
            : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length
            ? baseExtremum(array, identity, baseLt)
            : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length
            ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt)
            : undefined2;
        }
        var multiply = createMathOperation(function (multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound('round');
        var subtract = createMathOperation(function (minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length
            ? baseSum(array, getIteratee(iteratee2, 2))
            : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind2;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults2;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter2;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge2;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread3;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle2;
        lodash.thru = thru;
        lodash.toArray = toArray2;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith2;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey2;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach2;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray2;
        lodash.isArrayBuffer = isArrayBuffer2;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean2;
        lodash.isBuffer = isBuffer2;
        lodash.isDate = isDate2;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite2;
        lodash.isFunction = isFunction2;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber2;
        lodash.isObject = isObject2;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject2;
        lodash.isRegExp = isRegExp2;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString2;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray2;
        lodash.isUndefined = isUndefined2;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop2;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString3;
        lodash.toUpper = toUpper;
        lodash.trim = trim2;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape2;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach2;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(
          lodash,
          (function () {
            var source = {};
            baseForOwn(lodash, function (func, methodName) {
              if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          })(),
          { chain: false }
        );
        lodash.VERSION = VERSION3;
        arrayEach(
          ['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'],
          function (methodName) {
            lodash[methodName].placeholder = lodash;
          }
        );
        arrayEach(['drop', 'take'], function (methodName, index) {
          LazyWrapper.prototype[methodName] = function (n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 =
              this.__filtered__ && !index
                ? new LazyWrapper(this)
                : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                size: nativeMin(n, MAX_ARRAY_LENGTH),
                type: methodName + (result2.__dir__ < 0 ? 'Right' : ''),
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + 'Right'] = function (n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
          var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function (iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              iteratee: getIteratee(iteratee2, 3),
              type: type,
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(['head', 'last'], function (methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');
          LazyWrapper.prototype[methodName] = function () {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(['initial', 'tail'], function (methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');
          LazyWrapper.prototype[methodName] = function () {
            return this.__filtered__
              ? new LazyWrapper(this)
              : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function () {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function (predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function (predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
          if (typeof path == 'function') {
            return new LazyWrapper(this);
          }
          return this.map(function (value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function (predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function (start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 =
              end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function (predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function () {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
              methodName
            ),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc =
              lodash[
                isTaker
                  ? 'take' + (methodName == 'last' ? 'Right' : '')
                  : methodName
              ],
            retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function () {
            var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee2 = args[0],
              useLazy = isLazy || isArray2(value);
            var interceptor = function (value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (
              useLazy &&
              checkIteratee &&
              typeof iteratee2 == 'function' &&
              iteratee2.length != 1
            ) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({
                func: thru,
                args: [interceptor],
                thisArg: undefined2,
              });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped
              ? isTaker
                ? result2.value()[0]
                : result2.value()
              : result2;
          };
        });
        arrayEach(
          ['pop', 'push', 'shift', 'sort', 'splice', 'unshift'],
          function (methodName) {
            var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName)
                ? 'tap'
                : 'thru',
              retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function () {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray2(value) ? value : [], args);
              }
              return this[chainName](function (value2) {
                return func.apply(isArray2(value2) ? value2 : [], args);
              });
            };
          }
        );
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + '';
            if (!hasOwnProperty2.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ name: methodName, func: lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [
          {
            name: 'wrapper',
            func: undefined2,
          },
        ];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON =
          lodash.prototype.valueOf =
          lodash.prototype.value =
            wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _2 = runInContext();
      if (
        typeof define == 'function' &&
        typeof define.amd == 'object' &&
        define.amd
      ) {
        root._ = _2;
        define(function () {
          return _2;
        });
      } else if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root._ = _2;
      }
    }).call(exports);
  },
});

// node_modules/jsonwebtoken/lib/JsonWebTokenError.js
var require_JsonWebTokenError = __commonJS({
  'node_modules/jsonwebtoken/lib/JsonWebTokenError.js'(exports, module2) {
    var JsonWebTokenError = function (message, error) {
      Error.call(this, message);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = 'JsonWebTokenError';
      this.message = message;
      if (error) this.inner = error;
    };
    JsonWebTokenError.prototype = Object.create(Error.prototype);
    JsonWebTokenError.prototype.constructor = JsonWebTokenError;
    module2.exports = JsonWebTokenError;
  },
});

// node_modules/jsonwebtoken/lib/NotBeforeError.js
var require_NotBeforeError = __commonJS({
  'node_modules/jsonwebtoken/lib/NotBeforeError.js'(exports, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var NotBeforeError = function (message, date) {
      JsonWebTokenError.call(this, message);
      this.name = 'NotBeforeError';
      this.date = date;
    };
    NotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);
    NotBeforeError.prototype.constructor = NotBeforeError;
    module2.exports = NotBeforeError;
  },
});

// node_modules/jsonwebtoken/lib/TokenExpiredError.js
var require_TokenExpiredError = __commonJS({
  'node_modules/jsonwebtoken/lib/TokenExpiredError.js'(exports, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var TokenExpiredError = function (message, expiredAt) {
      JsonWebTokenError.call(this, message);
      this.name = 'TokenExpiredError';
      this.expiredAt = expiredAt;
    };
    TokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);
    TokenExpiredError.prototype.constructor = TokenExpiredError;
    module2.exports = TokenExpiredError;
  },
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  'node_modules/safe-buffer/index.js'(exports, module2) {
    var buffer = require('buffer');
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (
      Buffer2.from &&
      Buffer2.alloc &&
      Buffer2.allocUnsafe &&
      Buffer2.allocUnsafeSlow
    ) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }
      return buffer.SlowBuffer(size);
    };
  },
});

// node_modules/jws/lib/data-stream.js
var require_data_stream = __commonJS({
  'node_modules/jws/lib/data-stream.js'(exports, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var Stream = require('stream');
    var util2 = require('util');
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer2.alloc(0);
        return this;
      }
      if (typeof data.pipe === 'function') {
        this.buffer = Buffer2.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === 'object') {
        this.buffer = data;
        this.writable = false;
        process.nextTick(
          function () {
            this.emit('end', data);
            this.readable = false;
            this.emit('close');
          }.bind(this)
        );
        return this;
      }
      throw new TypeError('Unexpected data type (' + typeof data + ')');
    }
    util2.inherits(DataStream, Stream);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer2.concat([this.buffer, Buffer2.from(data)]);
      this.emit('data', data);
    };
    DataStream.prototype.end = function end(data) {
      if (data) this.write(data);
      this.emit('end', data);
      this.emit('close');
      this.writable = false;
      this.readable = false;
    };
    module2.exports = DataStream;
  },
});

// node_modules/buffer-equal-constant-time/index.js
var require_buffer_equal_constant_time = __commonJS({
  'node_modules/buffer-equal-constant-time/index.js'(exports, module2) {
    'use strict';
    var Buffer2 = require('buffer').Buffer;
    var SlowBuffer = require('buffer').SlowBuffer;
    module2.exports = bufferEq;
    function bufferEq(a, b) {
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length) {
        return false;
      }
      var c = 0;
      for (var i = 0; i < a.length; i++) {
        c |= a[i] ^ b[i];
      }
      return c === 0;
    }
    bufferEq.install = function () {
      Buffer2.prototype.equal = SlowBuffer.prototype.equal = function equal(
        that
      ) {
        return bufferEq(this, that);
      };
    };
    var origBufEqual = Buffer2.prototype.equal;
    var origSlowBufEqual = SlowBuffer.prototype.equal;
    bufferEq.restore = function () {
      Buffer2.prototype.equal = origBufEqual;
      SlowBuffer.prototype.equal = origSlowBufEqual;
    };
  },
});

// node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js
var require_param_bytes_for_alg = __commonJS({
  'node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js'(
    exports,
    module2
  ) {
    'use strict';
    function getParamSize(keySize) {
      var result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);
      return result;
    }
    var paramBytesForAlg = {
      ES256: getParamSize(256),
      ES384: getParamSize(384),
      ES512: getParamSize(521),
    };
    function getParamBytesForAlg(alg) {
      var paramBytes = paramBytesForAlg[alg];
      if (paramBytes) {
        return paramBytes;
      }
      throw new Error('Unknown algorithm "' + alg + '"');
    }
    module2.exports = getParamBytesForAlg;
  },
});

// node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js
var require_ecdsa_sig_formatter = __commonJS({
  'node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js'(
    exports,
    module2
  ) {
    'use strict';
    var Buffer2 = require_safe_buffer().Buffer;
    var getParamBytesForAlg = require_param_bytes_for_alg();
    var MAX_OCTET = 128;
    var CLASS_UNIVERSAL = 0;
    var PRIMITIVE_BIT = 32;
    var TAG_SEQ = 16;
    var TAG_INT = 2;
    var ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | (CLASS_UNIVERSAL << 6);
    var ENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);
    function base64Url(base64) {
      return base64.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
    }
    function signatureAsBuffer(signature) {
      if (Buffer2.isBuffer(signature)) {
        return signature;
      } else if ('string' === typeof signature) {
        return Buffer2.from(signature, 'base64');
      }
      throw new TypeError(
        'ECDSA signature must be a Base64 string or a Buffer'
      );
    }
    function derToJose(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var maxEncodedParamLength = paramBytes + 1;
      var inputLength = signature.length;
      var offset = 0;
      if (signature[offset++] !== ENCODED_TAG_SEQ) {
        throw new Error('Could not find expected "seq"');
      }
      var seqLength = signature[offset++];
      if (seqLength === (MAX_OCTET | 1)) {
        seqLength = signature[offset++];
      }
      if (inputLength - offset < seqLength) {
        throw new Error(
          '"seq" specified length of "' +
            seqLength +
            '", only "' +
            (inputLength - offset) +
            '" remaining'
        );
      }
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "r"');
      }
      var rLength = signature[offset++];
      if (inputLength - offset - 2 < rLength) {
        throw new Error(
          '"r" specified length of "' +
            rLength +
            '", only "' +
            (inputLength - offset - 2) +
            '" available'
        );
      }
      if (maxEncodedParamLength < rLength) {
        throw new Error(
          '"r" specified length of "' +
            rLength +
            '", max of "' +
            maxEncodedParamLength +
            '" is acceptable'
        );
      }
      var rOffset = offset;
      offset += rLength;
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "s"');
      }
      var sLength = signature[offset++];
      if (inputLength - offset !== sLength) {
        throw new Error(
          '"s" specified length of "' +
            sLength +
            '", expected "' +
            (inputLength - offset) +
            '"'
        );
      }
      if (maxEncodedParamLength < sLength) {
        throw new Error(
          '"s" specified length of "' +
            sLength +
            '", max of "' +
            maxEncodedParamLength +
            '" is acceptable'
        );
      }
      var sOffset = offset;
      offset += sLength;
      if (offset !== inputLength) {
        throw new Error(
          'Expected to consume entire buffer, but "' +
            (inputLength - offset) +
            '" bytes remain'
        );
      }
      var rPadding = paramBytes - rLength,
        sPadding = paramBytes - sLength;
      var dst = Buffer2.allocUnsafe(rPadding + rLength + sPadding + sLength);
      for (offset = 0; offset < rPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(
        dst,
        offset,
        rOffset + Math.max(-rPadding, 0),
        rOffset + rLength
      );
      offset = paramBytes;
      for (var o = offset; offset < o + sPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(
        dst,
        offset,
        sOffset + Math.max(-sPadding, 0),
        sOffset + sLength
      );
      dst = dst.toString('base64');
      dst = base64Url(dst);
      return dst;
    }
    function countPadding(buf, start, stop) {
      var padding = 0;
      while (start + padding < stop && buf[start + padding] === 0) {
        ++padding;
      }
      var needsSign = buf[start + padding] >= MAX_OCTET;
      if (needsSign) {
        --padding;
      }
      return padding;
    }
    function joseToDer(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var signatureBytes = signature.length;
      if (signatureBytes !== paramBytes * 2) {
        throw new TypeError(
          '"' +
            alg +
            '" signatures must be "' +
            paramBytes * 2 +
            '" bytes, saw "' +
            signatureBytes +
            '"'
        );
      }
      var rPadding = countPadding(signature, 0, paramBytes);
      var sPadding = countPadding(signature, paramBytes, signature.length);
      var rLength = paramBytes - rPadding;
      var sLength = paramBytes - sPadding;
      var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
      var shortLength = rsBytes < MAX_OCTET;
      var dst = Buffer2.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
      var offset = 0;
      dst[offset++] = ENCODED_TAG_SEQ;
      if (shortLength) {
        dst[offset++] = rsBytes;
      } else {
        dst[offset++] = MAX_OCTET | 1;
        dst[offset++] = rsBytes & 255;
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = rLength;
      if (rPadding < 0) {
        dst[offset++] = 0;
        offset += signature.copy(dst, offset, 0, paramBytes);
      } else {
        offset += signature.copy(dst, offset, rPadding, paramBytes);
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = sLength;
      if (sPadding < 0) {
        dst[offset++] = 0;
        signature.copy(dst, offset, paramBytes);
      } else {
        signature.copy(dst, offset, paramBytes + sPadding);
      }
      return dst;
    }
    module2.exports = {
      derToJose,
      joseToDer,
    };
  },
});

// node_modules/jwa/index.js
var require_jwa = __commonJS({
  'node_modules/jwa/index.js'(exports, module2) {
    var bufferEqual = require_buffer_equal_constant_time();
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto4 = require('crypto');
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util2 = require('util');
    var MSG_INVALID_ALGORITHM =
      '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = 'secret must be a string or buffer';
    var MSG_INVALID_VERIFIER_KEY = 'key must be a string or a buffer';
    var MSG_INVALID_SIGNER_KEY = 'key must be a string, a buffer or an object';
    var supportsKeyObjects = typeof crypto4.createPublicKey === 'function';
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += ' or a KeyObject';
      MSG_INVALID_SECRET += 'or a KeyObject';
    }
    function checkIsPublicKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === 'string') {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== 'object') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== 'string') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== 'string') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== 'function') {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === 'string') {
        return;
      }
      if (typeof key === 'object') {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === 'string') {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== 'object') {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== 'secret') {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== 'function') {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - (base64url.length % 4);
      if (padding !== 4) {
        for (var i = 0; i < padding; ++i) {
          base64url += '=';
        }
      }
      return base64url.replace(/\-/g, '+').replace(/_/g, '/');
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util2.format.bind(util2, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer2.isBuffer(obj) || typeof obj === 'string';
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing)) thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto4.createHmac('sha' + bits, secret);
        var sig = (hmac.update(thing), hmac.digest('base64'));
        return fromBase64(sig);
      };
    }
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return bufferEqual(Buffer2.from(signature), Buffer2.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto4.createSign('RSA-SHA' + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto4.createVerify('RSA-SHA' + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, 'base64');
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto4.createSign('RSA-SHA' + bits);
        var sig =
          (signer.update(thing),
          signer.sign(
            {
              key: privateKey,
              padding: crypto4.constants.RSA_PKCS1_PSS_PADDING,
              saltLength: crypto4.constants.RSA_PSS_SALTLEN_DIGEST,
            },
            'base64'
          ));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto4.createVerify('RSA-SHA' + bits);
        verifier.update(thing);
        return verifier.verify(
          {
            key: publicKey,
            padding: crypto4.constants.RSA_PKCS1_PSS_PADDING,
            saltLength: crypto4.constants.RSA_PSS_SALTLEN_DIGEST,
          },
          signature,
          'base64'
        );
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, 'ES' + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa
          .joseToDer(signature, 'ES' + bits)
          .toString('base64');
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return '';
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === '';
      };
    }
    module2.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner,
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier,
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
      if (!match) throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits),
      };
    };
  },
});

// node_modules/jws/lib/tostring.js
var require_tostring = __commonJS({
  'node_modules/jws/lib/tostring.js'(exports, module2) {
    var Buffer2 = require('buffer').Buffer;
    module2.exports = function toString3(obj) {
      if (typeof obj === 'string') return obj;
      if (typeof obj === 'number' || Buffer2.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  },
});

// node_modules/jws/lib/sign-stream.js
var require_sign_stream = __commonJS({
  'node_modules/jws/lib/sign-stream.js'(exports, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require('stream');
    var toString3 = require_tostring();
    var util2 = require('util');
    function base64url(string, encoding) {
      return Buffer2.from(string, encoding)
        .toString('base64')
        .replace(/=/g, '')
        .replace(/\+/g, '-')
        .replace(/\//g, '_');
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || 'utf8';
      var encodedHeader = base64url(toString3(header), 'binary');
      var encodedPayload = base64url(toString3(payload), encoding);
      return util2.format('%s.%s', encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util2.format('%s.%s', securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once(
        'close',
        function () {
          if (!this.payload.writable && this.readable) this.sign();
        }.bind(this)
      );
      this.payload.once(
        'close',
        function () {
          if (!this.secret.writable && this.readable) this.sign();
        }.bind(this)
      );
    }
    util2.inherits(SignStream, Stream);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding,
        });
        this.emit('done', signature);
        this.emit('data', signature);
        this.emit('end');
        this.readable = false;
        return signature;
      } catch (e) {
        this.readable = false;
        this.emit('error', e);
        this.emit('close');
      }
    };
    SignStream.sign = jwsSign;
    module2.exports = SignStream;
  },
});

// node_modules/jws/lib/verify-stream.js
var require_verify_stream = __commonJS({
  'node_modules/jws/lib/verify-stream.js'(exports, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require('stream');
    var toString3 = require_tostring();
    var util2 = require('util');
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject2(thing) {
      return Object.prototype.toString.call(thing) === '[object Object]';
    }
    function safeJsonParse(thing) {
      if (isObject2(thing)) return thing;
      try {
        return JSON.parse(thing);
      } catch (e) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split('.', 1)[0];
      return safeJsonParse(
        Buffer2.from(encodedHeader, 'base64').toString('binary')
      );
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split('.', 2).join('.');
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split('.')[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || 'utf8';
      var payload = jwsSig.split('.')[1];
      return Buffer2.from(payload, 'base64').toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error('Missing algorithm parameter for jws.verify');
        err.code = 'MISSING_ALGORITHM';
        throw err;
      }
      jwsSig = toString3(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString3(jwsSig);
      if (!isValidJws(jwsSig)) return null;
      var header = headerFromJWS(jwsSig);
      if (!header) return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === 'JWT' || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig),
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once(
        'close',
        function () {
          if (!this.signature.writable && this.readable) this.verify();
        }.bind(this)
      );
      this.signature.once(
        'close',
        function () {
          if (!this.secret.writable && this.readable) this.verify();
        }.bind(this)
      );
    }
    util2.inherits(VerifyStream, Stream);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(
          this.signature.buffer,
          this.algorithm,
          this.key.buffer
        );
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit('done', valid, obj);
        this.emit('data', valid);
        this.emit('end');
        this.readable = false;
        return valid;
      } catch (e) {
        this.readable = false;
        this.emit('error', e);
        this.emit('close');
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module2.exports = VerifyStream;
  },
});

// node_modules/jws/index.js
var require_jws = __commonJS({
  'node_modules/jws/index.js'(exports) {
    var SignStream = require_sign_stream();
    var VerifyStream = require_verify_stream();
    var ALGORITHMS = [
      'HS256',
      'HS384',
      'HS512',
      'RS256',
      'RS384',
      'RS512',
      'PS256',
      'PS384',
      'PS512',
      'ES256',
      'ES384',
      'ES512',
    ];
    exports.ALGORITHMS = ALGORITHMS;
    exports.sign = SignStream.sign;
    exports.verify = VerifyStream.verify;
    exports.decode = VerifyStream.decode;
    exports.isValid = VerifyStream.isValid;
    exports.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    exports.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };
  },
});

// node_modules/jsonwebtoken/decode.js
var require_decode = __commonJS({
  'node_modules/jsonwebtoken/decode.js'(exports, module2) {
    var jws = require_jws();
    module2.exports = function (jwt2, options) {
      options = options || {};
      var decoded = jws.decode(jwt2, options);
      if (!decoded) {
        return null;
      }
      var payload = decoded.payload;
      if (typeof payload === 'string') {
        try {
          var obj = JSON.parse(payload);
          if (obj !== null && typeof obj === 'object') {
            payload = obj;
          }
        } catch (e) {}
      }
      if (options.complete === true) {
        return {
          header: decoded.header,
          payload,
          signature: decoded.signature,
        };
      }
      return payload;
    };
  },
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  'node_modules/ms/index.js'(exports, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function (val, options) {
      options = options || {};
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
        return parse2(val);
      } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
          JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match =
        /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
          str
        );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }
      return ms + ' ms';
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }
  },
});

// node_modules/jsonwebtoken/lib/timespan.js
var require_timespan = __commonJS({
  'node_modules/jsonwebtoken/lib/timespan.js'(exports, module2) {
    var ms = require_ms();
    module2.exports = function (time, iat) {
      var timestamp = iat || Math.floor(Date.now() / 1e3);
      if (typeof time === 'string') {
        var milliseconds = ms(time);
        if (typeof milliseconds === 'undefined') {
          return;
        }
        return Math.floor(timestamp + milliseconds / 1e3);
      } else if (typeof time === 'number') {
        return timestamp + time;
      } else {
        return;
      }
    };
  },
});

// node_modules/jsonwebtoken/node_modules/semver/internal/constants.js
var require_constants9 = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/internal/constants.js'(
    exports,
    module2
  ) {
    var SEMVER_SPEC_VERSION = '2.0.0';
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER =
      Number.MAX_SAFE_INTEGER /* istanbul ignore next */ || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var RELEASE_TYPES = [
      'major',
      'premajor',
      'minor',
      'preminor',
      'patch',
      'prepatch',
      'prerelease',
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2,
    };
  },
});

// node_modules/jsonwebtoken/node_modules/semver/internal/debug.js
var require_debug2 = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/internal/debug.js'(
    exports,
    module2
  ) {
    var debug =
      typeof process === 'object' &&
      process.env &&
      process.env.NODE_DEBUG &&
      /\bsemver\b/i.test(process.env.NODE_DEBUG)
        ? (...args) => console.error('SEMVER', ...args)
        : () => {};
    module2.exports = debug;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/internal/re.js
var require_re = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/internal/re.js'(
    exports,
    module2
  ) {
    var { MAX_SAFE_COMPONENT_LENGTH } = require_constants9();
    var debug = require_debug2();
    exports = module2.exports = {};
    var re = (exports.re = []);
    var src = (exports.src = []);
    var t = (exports.t = {});
    var R = 0;
    var createToken = (name, value, isGlobal) => {
      const index = R++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? 'g' : void 0);
    };
    createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
    createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+');
    createToken('NONNUMERICIDENTIFIER', '\\d*[a-zA-Z-][a-zA-Z0-9-]*');
    createToken(
      'MAINVERSION',
      `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${
        src[t.NUMERICIDENTIFIER]
      })`
    );
    createToken(
      'MAINVERSIONLOOSE',
      `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${
        src[t.NUMERICIDENTIFIERLOOSE]
      })\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`
    );
    createToken(
      'PRERELEASEIDENTIFIER',
      `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`
    );
    createToken(
      'PRERELEASEIDENTIFIERLOOSE',
      `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`
    );
    createToken(
      'PRERELEASE',
      `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${
        src[t.PRERELEASEIDENTIFIER]
      })*))`
    );
    createToken(
      'PRERELEASELOOSE',
      `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${
        src[t.PRERELEASEIDENTIFIERLOOSE]
      })*))`
    );
    createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+');
    createToken(
      'BUILD',
      `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`
    );
    createToken(
      'FULLPLAIN',
      `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`
    );
    createToken('FULL', `^${src[t.FULLPLAIN]}$`);
    createToken(
      'LOOSEPLAIN',
      `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${
        src[t.BUILD]
      }?`
    );
    createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);
    createToken('GTLT', '((?:<|>)?=?)');
    createToken(
      'XRANGEIDENTIFIERLOOSE',
      `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`
    );
    createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken(
      'XRANGEPLAIN',
      `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${
        src[t.XRANGEIDENTIFIER]
      })(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${
        src[t.BUILD]
      }?)?)?`
    );
    createToken(
      'XRANGEPLAINLOOSE',
      `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${
        src[t.XRANGEIDENTIFIERLOOSE]
      })(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${
        src[t.BUILD]
      }?)?)?`
    );
    createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken(
      'XRANGELOOSE',
      `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`
    );
    createToken(
      'COERCE',
      `${'(^|[^\\d])(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`
    );
    createToken('COERCERTL', src[t.COERCE], true);
    createToken('LONETILDE', '(?:~>?)');
    createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = '$1~';
    createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken(
      'TILDELOOSE',
      `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`
    );
    createToken('LONECARET', '(?:\\^)');
    createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = '$1^';
    createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken(
      'CARETLOOSE',
      `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`
    );
    createToken(
      'COMPARATORLOOSE',
      `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`
    );
    createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken(
      'COMPARATORTRIM',
      `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`,
      true
    );
    exports.comparatorTrimReplace = '$1$2$3';
    createToken(
      'HYPHENRANGE',
      `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`
    );
    createToken(
      'HYPHENRANGELOOSE',
      `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${
        src[t.XRANGEPLAINLOOSE]
      })\\s*$`
    );
    createToken('STAR', '(<|>)?=?\\s*\\*');
    createToken('GTE0', '^\\s*>=\\s*0\\.0\\.0\\s*$');
    createToken('GTE0PRE', '^\\s*>=\\s*0\\.0\\.0-0\\s*$');
  },
});

// node_modules/jsonwebtoken/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/internal/parse-options.js'(
    exports,
    module2
  ) {
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== 'object') {
        return looseOption;
      }
      return options;
    };
    module2.exports = parseOptions;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/internal/identifiers.js'(
    exports,
    module2
  ) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b
        ? 0
        : anum && !bnum
        ? -1
        : bnum && !anum
        ? 1
        : a < b
        ? -1
        : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers,
    };
  },
});

// node_modules/jsonwebtoken/node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/classes/semver.js'(
    exports,
    module2
  ) {
    var debug = require_debug2();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants9();
    var { re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          if (
            version2.loose === !!options.loose &&
            version2.includePrerelease === !!options.includePrerelease
          ) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== 'string') {
          throw new TypeError(
            `Invalid Version: ${require('util').inspect(version2)}`
          );
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug('SemVer', version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2
          .trim()
          .match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError('Invalid major version');
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError('Invalid minor version');
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError('Invalid patch version');
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split('.').map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split('.') : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join('.')}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug('SemVer.compare', this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === 'string' && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return (
          compareIdentifiers(this.major, other.major) ||
          compareIdentifiers(this.minor, other.minor) ||
          compareIdentifiers(this.patch, other.patch)
        );
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug('prerelease compare', i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug('prerelease compare', i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case 'premajor':
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc('pre', identifier, identifierBase);
            break;
          case 'preminor':
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc('pre', identifier, identifierBase);
            break;
          case 'prepatch':
            this.prerelease.length = 0;
            this.inc('patch', identifier, identifierBase);
            this.inc('pre', identifier, identifierBase);
            break;
          case 'prerelease':
            if (this.prerelease.length === 0) {
              this.inc('patch', identifier, identifierBase);
            }
            this.inc('pre', identifier, identifierBase);
            break;
          case 'major':
            if (
              this.minor !== 0 ||
              this.patch !== 0 ||
              this.prerelease.length === 0
            ) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case 'minor':
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case 'patch':
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case 'pre': {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error(
                'invalid increment argument: identifier is empty'
              );
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === 'number') {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (
                  identifier === this.prerelease.join('.') &&
                  identifierBase === false
                ) {
                  throw new Error(
                    'invalid increment argument: identifier already exists'
                  );
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.format();
        this.raw = this.version;
        return this;
      }
    };
    module2.exports = SemVer;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/parse.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var parse2 = (version2, options, throwErrors = false) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse2;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/valid.js'(
    exports,
    module2
  ) {
    var parse2 = require_parse();
    var valid = (version2, options) => {
      const v = parse2(version2, options);
      return v ? v.version : null;
    };
    module2.exports = valid;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/clean.js'(
    exports,
    module2
  ) {
    var parse2 = require_parse();
    var clean = (version2, options) => {
      const s = parse2(version2.trim().replace(/^[=v]+/, ''), options);
      return s ? s.version : null;
    };
    module2.exports = clean;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/inc.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var inc = (version2, release, options, identifier, identifierBase) => {
      if (typeof options === 'string') {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version2 instanceof SemVer ? version2.version : version2,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/diff.js'(
    exports,
    module2
  ) {
    var parse2 = require_parse();
    var diff = (version1, version2) => {
      const v12 = parse2(version1, null, true);
      const v2 = parse2(version2, null, true);
      const comparison = v12.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v12 : v2;
      const lowVersion = v1Higher ? v2 : v12;
      const highHasPre = !!highVersion.prerelease.length;
      const prefix = highHasPre ? 'pre' : '';
      if (v12.major !== v2.major) {
        return prefix + 'major';
      }
      if (v12.minor !== v2.minor) {
        return prefix + 'minor';
      }
      if (v12.patch !== v2.patch) {
        return prefix + 'patch';
      }
      if (highHasPre) {
        return 'prerelease';
      }
      if (lowVersion.patch) {
        return 'patch';
      }
      if (lowVersion.minor) {
        return 'minor';
      }
      return 'major';
    };
    module2.exports = diff;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/major.js
var require_major = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/major.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/minor.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/patch.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/prerelease.js'(
    exports,
    module2
  ) {
    var parse2 = require_parse();
    var prerelease = (version2, options) => {
      const parsed = parse2(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/compare.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var compare = (a, b, loose) =>
      new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/rcompare.js'(
    exports,
    module2
  ) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/compare-loose.js'(
    exports,
    module2
  ) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/compare-build.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/sort.js'(
    exports,
    module2
  ) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/rsort.js'(
    exports,
    module2
  ) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/gt.js'(
    exports,
    module2
  ) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/lt.js'(
    exports,
    module2
  ) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/eq.js'(
    exports,
    module2
  ) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/neq.js'(
    exports,
    module2
  ) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/gte.js'(
    exports,
    module2
  ) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/lte.js'(
    exports,
    module2
  ) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/cmp.js'(
    exports,
    module2
  ) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case '===':
          if (typeof a === 'object') {
            a = a.version;
          }
          if (typeof b === 'object') {
            b = b.version;
          }
          return a === b;
        case '!==':
          if (typeof a === 'object') {
            a = a.version;
          }
          if (typeof b === 'object') {
            b = b.version;
          }
          return a !== b;
        case '':
        case '=':
        case '==':
          return eq(a, b, loose);
        case '!=':
          return neq(a, b, loose);
        case '>':
          return gt(a, b, loose);
        case '>=':
          return gte(a, b, loose);
        case '<':
          return lt(a, b, loose);
        case '<=':
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/coerce.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var parse2 = require_parse();
    var { re, t } = require_re();
    var coerce = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === 'number') {
        version2 = String(version2);
      }
      if (typeof version2 !== 'string') {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(re[t.COERCE]);
      } else {
        let next;
        while (
          (next = re[t.COERCERTL].exec(version2)) &&
          (!match || match.index + match[0].length !== version2.length)
        ) {
          if (
            !match ||
            next.index + next[0].length !== match.index + match[0].length
          ) {
            match = next;
          }
          re[t.COERCERTL].lastIndex =
            next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse2(
        `${match[2]}.${match[3] || '0'}.${match[4] || '0'}`,
        options
      );
    };
    module2.exports = coerce;
  },
});

// node_modules/jsonwebtoken/node_modules/yallist/iterator.js
var require_iterator2 = __commonJS({
  'node_modules/jsonwebtoken/node_modules/yallist/iterator.js'(
    exports,
    module2
  ) {
    'use strict';
    module2.exports = function (Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  },
});

// node_modules/jsonwebtoken/node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  'node_modules/jsonwebtoken/node_modules/yallist/yallist.js'(
    exports,
    module2
  ) {
    'use strict';
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === 'function') {
        list.forEach(function (item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function (node) {
      if (node.list !== this) {
        throw new Error('removing node which does not belong to this list');
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function (node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function (node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function () {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function () {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function () {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function () {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function (fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function (fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function (n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function (n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function (fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function (fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function (fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError('Reduce of empty list with no initial value');
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function (fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError('Reduce of empty list with no initial value');
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function () {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function () {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function (from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function (from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (
        var i = this.length, walker = this.tail;
        walker !== null && i > to;
        i--
      ) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function () {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted =
        node === self2.head
          ? new Node(value, null, node, self2)
          : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator2()(Yallist);
    } catch (er) {}
  },
});

// node_modules/jsonwebtoken/node_modules/lru-cache/index.js
var require_lru_cache2 = __commonJS({
  'node_modules/jsonwebtoken/node_modules/lru-cache/index.js'(
    exports,
    module2
  ) {
    'use strict';
    var Yallist = require_yallist();
    var MAX = Symbol('max');
    var LENGTH = Symbol('length');
    var LENGTH_CALCULATOR = Symbol('lengthCalculator');
    var ALLOW_STALE = Symbol('allowStale');
    var MAX_AGE = Symbol('maxAge');
    var DISPOSE = Symbol('dispose');
    var NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
    var LRU_LIST = Symbol('lruList');
    var CACHE = Symbol('cache');
    var UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === 'number') options = { max: options };
        if (!options) options = {};
        if (options.max && (typeof options.max !== 'number' || options.max < 0))
          throw new TypeError('max must be a non-negative number');
        const max = (this[MAX] = options.max || Infinity);
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== 'number')
          throw new TypeError('maxAge must be a number');
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      // resize the cache when the max changes.
      set max(mL) {
        if (typeof mL !== 'number' || mL < 0)
          throw new TypeError('max must be a non-negative number');
        this[MAX] = mL || Infinity;
        trim2(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== 'number')
          throw new TypeError('maxAge must be a non-negative number');
        this[MAX_AGE] = mA;
        trim2(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      // resize the cache when the lengthCalculator changes.
      set lengthCalculator(lC) {
        if (typeof lC !== 'function') lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim2(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) =>
          isStale(this, hit)
            ? false
            : {
                k: hit.key,
                v: hit.value,
                e: hit.now + (hit.maxAge || 0),
              }
        )
          .toArray()
          .filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== 'number')
          throw new TypeError('maxAge must be a number');
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim2(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE]) this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim2(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key)) return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node) return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0) this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE]) return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || (!hit.maxAge && !self2[MAX_AGE])) return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge
        ? diff > hit.maxAge
        : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim2 = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (
          let walker = self2[LRU_LIST].tail;
          self2[LENGTH] > self2[MAX] && walker !== null;

        ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE]) self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE]) hit = void 0;
      }
      if (hit) fn.call(thisp, hit.value, hit.key, self2);
    };
    module2.exports = LRUCache;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/classes/range.js
var require_range = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/classes/range.js'(
    exports,
    module2
  ) {
    var Range = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range) {
          if (
            range.loose === !!options.loose &&
            range.includePrerelease === !!options.includePrerelease
          ) {
            return range;
          } else {
            return new Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range;
        this.set = range
          .split('||')
          .map((r) => this.parseRange(r.trim()))
          .filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${range}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set
          .map((comps) => {
            return comps.join(' ').trim();
          })
          .join('||')
          .trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        range = range.trim();
        const memoOpts =
          (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
          (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ':' + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(
          hr,
          hyphenReplace(this.options.includePrerelease)
        );
        debug('hyphen replace', range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug('comparator trim', range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        range = range.split(/\s+/).join(' ');
        let rangeList = range
          .split(' ')
          .map((comp) => parseComparator(comp, this.options))
          .join(' ')
          .split(/\s+/)
          .map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug('loose invalid filter', comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug('range list', rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map(
          (comp) => new Comparator(comp, this.options)
        );
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has('')) {
          rangeMap.delete('');
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError('a Range is required');
        }
        return this.set.some((thisComparators) => {
          return (
            isSatisfiable(thisComparators, options) &&
            range.set.some((rangeComparators) => {
              return (
                isSatisfiable(rangeComparators, options) &&
                thisComparators.every((thisComparator) => {
                  return rangeComparators.every((rangeComparator) => {
                    return thisComparator.intersects(rangeComparator, options);
                  });
                })
              );
            })
          );
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === 'string') {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lru_cache2();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug2();
    var SemVer = require_semver();
    var { re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } =
      require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants9();
    var isNullSet = (c) => c.value === '<0.0.0-0';
    var isAny = (c) => c.value === '';
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug('comp', comp, options);
      comp = replaceCarets(comp, options);
      debug('caret', comp);
      comp = replaceTildes(comp, options);
      debug('tildes', comp);
      comp = replaceXRanges(comp, options);
      debug('xrange', comp);
      comp = replaceStars(comp, options);
      debug('stars', comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === 'x' || id === '*';
    var replaceTildes = (comp, options) =>
      comp
        .trim()
        .split(/\s+/)
        .map((c) => {
          return replaceTilde(c, options);
        })
        .join(' ');
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_2, M, m, p, pr) => {
        debug('tilde', comp, _2, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug('replaceTilde pr', pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug('tilde return', ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) =>
      comp
        .trim()
        .split(/\s+/)
        .map((c) => {
          return replaceCaret(c, options);
        })
        .join(' ');
    var replaceCaret = (comp, options) => {
      debug('caret', comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? '-0' : '';
      return comp.replace(r, (_2, M, m, p, pr) => {
        debug('caret', comp, _2, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === '0') {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug('replaceCaret pr', pr);
          if (M === '0') {
            if (m === '0') {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug('no pr');
          if (M === '0') {
            if (m === '0') {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug('caret return', ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug('replaceXRanges', comp, options);
      return comp
        .split(/\s+/)
        .map((c) => {
          return replaceXRange(c, options);
        })
        .join(' ');
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug('xRange', comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === '=' && anyX) {
          gtlt = '';
        }
        pr = options.includePrerelease ? '-0' : '';
        if (xM) {
          if (gtlt === '>' || gtlt === '<') {
            ret = '<0.0.0-0';
          } else {
            ret = '*';
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === '>') {
            gtlt = '>=';
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === '<=') {
            gtlt = '<';
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === '<') {
            pr = '-0';
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug('xRange return', ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug('replaceStars', comp, options);
      return comp.trim().replace(re[t.STAR], '');
    };
    var replaceGTE0 = (comp, options) => {
      debug('replaceGTE0', comp, options);
      return comp
        .trim()
        .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');
    };
    var hyphenReplace =
      (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
        if (isX(fM)) {
          from = '';
        } else if (isX(fm)) {
          from = `>=${fM}.0.0${incPr ? '-0' : ''}`;
        } else if (isX(fp)) {
          from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;
        } else if (fpr) {
          from = `>=${from}`;
        } else {
          from = `>=${from}${incPr ? '-0' : ''}`;
        }
        if (isX(tM)) {
          to = '';
        } else if (isX(tm)) {
          to = `<${+tM + 1}.0.0-0`;
        } else if (isX(tp)) {
          to = `<${tM}.${+tm + 1}.0-0`;
        } else if (tpr) {
          to = `<=${tM}.${tm}.${tp}-${tpr}`;
        } else if (incPr) {
          to = `<${tM}.${tm}.${+tp + 1}-0`;
        } else {
          to = `<=${to}`;
        }
        return `${from} ${to}`.trim();
      };
    var testSet = (set, version2, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (
              allowed.major === version2.major &&
              allowed.minor === version2.minor &&
              allowed.patch === version2.patch
            ) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  },
});

// node_modules/jsonwebtoken/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/classes/comparator.js'(
    exports,
    module2
  ) {
    var ANY = Symbol('SemVer ANY');
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        debug('comparator', comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = '';
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug('comp', this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : '';
        if (this.operator === '=') {
          this.operator = '';
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug('Comparator.test', version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === 'string') {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError('a Comparator is required');
        }
        if (this.operator === '') {
          if (this.value === '') {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === '') {
          if (comp.value === '') {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (
          options.includePrerelease &&
          (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')
        ) {
          return false;
        }
        if (
          !options.includePrerelease &&
          (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))
        ) {
          return false;
        }
        if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {
          return true;
        }
        if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {
          return true;
        }
        if (
          this.semver.version === comp.semver.version &&
          this.operator.includes('=') &&
          comp.operator.includes('=')
        ) {
          return true;
        }
        if (
          cmp(this.semver, '<', comp.semver, options) &&
          this.operator.startsWith('>') &&
          comp.operator.startsWith('<')
        ) {
          return true;
        }
        if (
          cmp(this.semver, '>', comp.semver, options) &&
          this.operator.startsWith('<') &&
          comp.operator.startsWith('>')
        ) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug2();
    var SemVer = require_semver();
    var Range = require_range();
  },
});

// node_modules/jsonwebtoken/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/functions/satisfies.js'(
    exports,
    module2
  ) {
    var Range = require_range();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module2.exports = satisfies;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/to-comparators.js'(
    exports,
    module2
  ) {
    var Range = require_range();
    var toComparators = (range, options) =>
      new Range(range, options).set.map((comp) =>
        comp
          .map((c) => c.value)
          .join(' ')
          .trim()
          .split(' ')
      );
    module2.exports = toComparators;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/max-satisfying.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/min-satisfying.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/min-version.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer('0.0.0');
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer('0.0.0-0');
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case '>':
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case '':
            case '>=':
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case '<':
            case '<=':
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/valid.js'(
    exports,
    module2
  ) {
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || '*';
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/outside.js'(
    exports,
    module2
  ) {
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version2, range, hilo, options) => {
      version2 = new SemVer(version2, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case '>':
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = '>';
          ecomp = '>=';
          break;
        case '<':
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = '<';
          ecomp = '<=';
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator('>=0.0.0');
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if (
          (!low.operator || low.operator === comp) &&
          ltefn(version2, low.semver)
        ) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/gtr.js'(
    exports,
    module2
  ) {
    var outside = require_outside();
    var gtr = (version2, range, options) =>
      outside(version2, range, '>', options);
    module2.exports = gtr;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/ltr.js'(
    exports,
    module2
  ) {
    var outside = require_outside();
    var ltr = (version2, range, options) =>
      outside(version2, range, '<', options);
    module2.exports = ltr;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/intersects.js'(
    exports,
    module2
  ) {
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2, options);
    };
    module2.exports = intersects;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/simplify.js'(
    exports,
    module2
  ) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version2 of v) {
        const included = satisfies(version2, range, options);
        if (included) {
          prev = version2;
          if (!first) {
            first = version2;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push('*');
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(' || ');
      const original =
        typeof range.raw === 'string' ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  },
});

// node_modules/jsonwebtoken/node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/ranges/subset.js'(
    exports,
    module2
  ) {
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')];
    var minimumVersion = [new Comparator('>=0.0.0')];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === '>' || c.operator === '>=') {
          gt = higherGT(gt, c, options);
        } else if (c.operator === '<' || c.operator === '<=') {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (
          gtltComp === 0 &&
          (gt.operator !== '>=' || lt.operator !== '<=')
        ) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre =
        lt && !options.includePrerelease && lt.semver.prerelease.length
          ? lt.semver
          : false;
      let needDomGTPre =
        gt && !options.includePrerelease && gt.semver.prerelease.length
          ? gt.semver
          : false;
      if (
        needDomLTPre &&
        needDomLTPre.prerelease.length === 1 &&
        lt.operator === '<' &&
        needDomLTPre.prerelease[0] === 0
      ) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';
        hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';
        if (gt) {
          if (needDomGTPre) {
            if (
              c.semver.prerelease &&
              c.semver.prerelease.length &&
              c.semver.major === needDomGTPre.major &&
              c.semver.minor === needDomGTPre.minor &&
              c.semver.patch === needDomGTPre.patch
            ) {
              needDomGTPre = false;
            }
          }
          if (c.operator === '>' || c.operator === '>=') {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt) {
              return false;
            }
          } else if (
            gt.operator === '>=' &&
            !satisfies(gt.semver, String(c), options)
          ) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (
              c.semver.prerelease &&
              c.semver.prerelease.length &&
              c.semver.major === needDomLTPre.major &&
              c.semver.minor === needDomLTPre.minor &&
              c.semver.patch === needDomLTPre.patch
            ) {
              needDomLTPre = false;
            }
          }
          if (c.operator === '<' || c.operator === '<=') {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt) {
              return false;
            }
          } else if (
            lt.operator === '<=' &&
            !satisfies(lt.semver, String(c), options)
          ) {
            return false;
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp > 0
        ? a
        : comp < 0
        ? b
        : b.operator === '>' && a.operator === '>='
        ? b
        : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp < 0
        ? a
        : comp > 0
        ? b
        : b.operator === '<' && a.operator === '<='
        ? b
        : a;
    };
    module2.exports = subset;
  },
});

// node_modules/jsonwebtoken/node_modules/semver/index.js
var require_semver2 = __commonJS({
  'node_modules/jsonwebtoken/node_modules/semver/index.js'(exports, module2) {
    var internalRe = require_re();
    var constants = require_constants9();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse2 = require_parse();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse: parse2,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers,
    };
  },
});

// node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js
var require_asymmetricKeyDetailsSupported = __commonJS({
  'node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js'(
    exports,
    module2
  ) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, '>=15.7.0');
  },
});

// node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js
var require_rsaPssKeyDetailsSupported = __commonJS({
  'node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js'(
    exports,
    module2
  ) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, '>=16.9.0');
  },
});

// node_modules/jsonwebtoken/lib/validateAsymmetricKey.js
var require_validateAsymmetricKey = __commonJS({
  'node_modules/jsonwebtoken/lib/validateAsymmetricKey.js'(exports, module2) {
    var ASYMMETRIC_KEY_DETAILS_SUPPORTED =
      require_asymmetricKeyDetailsSupported();
    var RSA_PSS_KEY_DETAILS_SUPPORTED = require_rsaPssKeyDetailsSupported();
    var allowedAlgorithmsForKeys = {
      ec: ['ES256', 'ES384', 'ES512'],
      rsa: ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],
      'rsa-pss': ['PS256', 'PS384', 'PS512'],
    };
    var allowedCurves = {
      ES256: 'prime256v1',
      ES384: 'secp384r1',
      ES512: 'secp521r1',
    };
    module2.exports = function (algorithm, key) {
      if (!algorithm || !key) return;
      const keyType = key.asymmetricKeyType;
      if (!keyType) return;
      const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];
      if (!allowedAlgorithms) {
        throw new Error(`Unknown key type "${keyType}".`);
      }
      if (!allowedAlgorithms.includes(algorithm)) {
        throw new Error(
          `"alg" parameter for "${keyType}" key type must be one of: ${allowedAlgorithms.join(
            ', '
          )}.`
        );
      }
      if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {
        switch (keyType) {
          case 'ec':
            const keyCurve = key.asymmetricKeyDetails.namedCurve;
            const allowedCurve = allowedCurves[algorithm];
            if (keyCurve !== allowedCurve) {
              throw new Error(
                `"alg" parameter "${algorithm}" requires curve "${allowedCurve}".`
              );
            }
            break;
          case 'rsa-pss':
            if (RSA_PSS_KEY_DETAILS_SUPPORTED) {
              const length = parseInt(algorithm.slice(-3), 10);
              const { hashAlgorithm, mgf1HashAlgorithm, saltLength } =
                key.asymmetricKeyDetails;
              if (
                hashAlgorithm !== `sha${length}` ||
                mgf1HashAlgorithm !== hashAlgorithm
              ) {
                throw new Error(
                  `Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${algorithm}.`
                );
              }
              if (saltLength !== void 0 && saltLength > length >> 3) {
                throw new Error(
                  `Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${algorithm}.`
                );
              }
            }
            break;
        }
      }
    };
  },
});

// node_modules/jsonwebtoken/lib/psSupported.js
var require_psSupported = __commonJS({
  'node_modules/jsonwebtoken/lib/psSupported.js'(exports, module2) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, '^6.12.0 || >=8.0.0');
  },
});

// node_modules/jsonwebtoken/verify.js
var require_verify = __commonJS({
  'node_modules/jsonwebtoken/verify.js'(exports, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var NotBeforeError = require_NotBeforeError();
    var TokenExpiredError = require_TokenExpiredError();
    var decode = require_decode();
    var timespan = require_timespan();
    var validateAsymmetricKey = require_validateAsymmetricKey();
    var PS_SUPPORTED = require_psSupported();
    var jws = require_jws();
    var { KeyObject, createSecretKey, createPublicKey } = require('crypto');
    var PUB_KEY_ALGS = ['RS256', 'RS384', 'RS512'];
    var EC_KEY_ALGS = ['ES256', 'ES384', 'ES512'];
    var RSA_KEY_ALGS = ['RS256', 'RS384', 'RS512'];
    var HS_ALGS = ['HS256', 'HS384', 'HS512'];
    if (PS_SUPPORTED) {
      PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');
      RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');
    }
    module2.exports = function (
      jwtString,
      secretOrPublicKey,
      options,
      callback
    ) {
      if (typeof options === 'function' && !callback) {
        callback = options;
        options = {};
      }
      if (!options) {
        options = {};
      }
      options = Object.assign({}, options);
      let done;
      if (callback) {
        done = callback;
      } else {
        done = function (err, data) {
          if (err) throw err;
          return data;
        };
      }
      if (
        options.clockTimestamp &&
        typeof options.clockTimestamp !== 'number'
      ) {
        return done(new JsonWebTokenError('clockTimestamp must be a number'));
      }
      if (
        options.nonce !== void 0 &&
        (typeof options.nonce !== 'string' || options.nonce.trim() === '')
      ) {
        return done(new JsonWebTokenError('nonce must be a non-empty string'));
      }
      if (
        options.allowInvalidAsymmetricKeyTypes !== void 0 &&
        typeof options.allowInvalidAsymmetricKeyTypes !== 'boolean'
      ) {
        return done(
          new JsonWebTokenError(
            'allowInvalidAsymmetricKeyTypes must be a boolean'
          )
        );
      }
      const clockTimestamp =
        options.clockTimestamp || Math.floor(Date.now() / 1e3);
      if (!jwtString) {
        return done(new JsonWebTokenError('jwt must be provided'));
      }
      if (typeof jwtString !== 'string') {
        return done(new JsonWebTokenError('jwt must be a string'));
      }
      const parts = jwtString.split('.');
      if (parts.length !== 3) {
        return done(new JsonWebTokenError('jwt malformed'));
      }
      let decodedToken;
      try {
        decodedToken = decode(jwtString, { complete: true });
      } catch (err) {
        return done(err);
      }
      if (!decodedToken) {
        return done(new JsonWebTokenError('invalid token'));
      }
      const header = decodedToken.header;
      let getSecret;
      if (typeof secretOrPublicKey === 'function') {
        if (!callback) {
          return done(
            new JsonWebTokenError(
              'verify must be called asynchronous if secret or public key is provided as a callback'
            )
          );
        }
        getSecret = secretOrPublicKey;
      } else {
        getSecret = function (header2, secretCallback) {
          return secretCallback(null, secretOrPublicKey);
        };
      }
      return getSecret(header, function (err, secretOrPublicKey2) {
        if (err) {
          return done(
            new JsonWebTokenError(
              'error in secret or public key callback: ' + err.message
            )
          );
        }
        const hasSignature = parts[2].trim() !== '';
        if (!hasSignature && secretOrPublicKey2) {
          return done(new JsonWebTokenError('jwt signature is required'));
        }
        if (hasSignature && !secretOrPublicKey2) {
          return done(
            new JsonWebTokenError('secret or public key must be provided')
          );
        }
        if (!hasSignature && !options.algorithms) {
          return done(
            new JsonWebTokenError(
              'please specify "none" in "algorithms" to verify unsigned tokens'
            )
          );
        }
        if (
          secretOrPublicKey2 != null &&
          !(secretOrPublicKey2 instanceof KeyObject)
        ) {
          try {
            secretOrPublicKey2 = createPublicKey(secretOrPublicKey2);
          } catch (_2) {
            try {
              secretOrPublicKey2 = createSecretKey(
                typeof secretOrPublicKey2 === 'string'
                  ? Buffer.from(secretOrPublicKey2)
                  : secretOrPublicKey2
              );
            } catch (_3) {
              return done(
                new JsonWebTokenError(
                  'secretOrPublicKey is not valid key material'
                )
              );
            }
          }
        }
        if (!options.algorithms) {
          if (secretOrPublicKey2.type === 'secret') {
            options.algorithms = HS_ALGS;
          } else if (
            ['rsa', 'rsa-pss'].includes(secretOrPublicKey2.asymmetricKeyType)
          ) {
            options.algorithms = RSA_KEY_ALGS;
          } else if (secretOrPublicKey2.asymmetricKeyType === 'ec') {
            options.algorithms = EC_KEY_ALGS;
          } else {
            options.algorithms = PUB_KEY_ALGS;
          }
        }
        if (options.algorithms.indexOf(decodedToken.header.alg) === -1) {
          return done(new JsonWebTokenError('invalid algorithm'));
        }
        if (
          header.alg.startsWith('HS') &&
          secretOrPublicKey2.type !== 'secret'
        ) {
          return done(
            new JsonWebTokenError(
              `secretOrPublicKey must be a symmetric key when using ${header.alg}`
            )
          );
        } else if (
          /^(?:RS|PS|ES)/.test(header.alg) &&
          secretOrPublicKey2.type !== 'public'
        ) {
          return done(
            new JsonWebTokenError(
              `secretOrPublicKey must be an asymmetric key when using ${header.alg}`
            )
          );
        }
        if (!options.allowInvalidAsymmetricKeyTypes) {
          try {
            validateAsymmetricKey(header.alg, secretOrPublicKey2);
          } catch (e) {
            return done(e);
          }
        }
        let valid;
        try {
          valid = jws.verify(
            jwtString,
            decodedToken.header.alg,
            secretOrPublicKey2
          );
        } catch (e) {
          return done(e);
        }
        if (!valid) {
          return done(new JsonWebTokenError('invalid signature'));
        }
        const payload = decodedToken.payload;
        if (typeof payload.nbf !== 'undefined' && !options.ignoreNotBefore) {
          if (typeof payload.nbf !== 'number') {
            return done(new JsonWebTokenError('invalid nbf value'));
          }
          if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {
            return done(
              new NotBeforeError('jwt not active', new Date(payload.nbf * 1e3))
            );
          }
        }
        if (typeof payload.exp !== 'undefined' && !options.ignoreExpiration) {
          if (typeof payload.exp !== 'number') {
            return done(new JsonWebTokenError('invalid exp value'));
          }
          if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {
            return done(
              new TokenExpiredError('jwt expired', new Date(payload.exp * 1e3))
            );
          }
        }
        if (options.audience) {
          const audiences = Array.isArray(options.audience)
            ? options.audience
            : [options.audience];
          const target = Array.isArray(payload.aud)
            ? payload.aud
            : [payload.aud];
          const match = target.some(function (targetAudience) {
            return audiences.some(function (audience) {
              return audience instanceof RegExp
                ? audience.test(targetAudience)
                : audience === targetAudience;
            });
          });
          if (!match) {
            return done(
              new JsonWebTokenError(
                'jwt audience invalid. expected: ' + audiences.join(' or ')
              )
            );
          }
        }
        if (options.issuer) {
          const invalid_issuer =
            (typeof options.issuer === 'string' &&
              payload.iss !== options.issuer) ||
            (Array.isArray(options.issuer) &&
              options.issuer.indexOf(payload.iss) === -1);
          if (invalid_issuer) {
            return done(
              new JsonWebTokenError(
                'jwt issuer invalid. expected: ' + options.issuer
              )
            );
          }
        }
        if (options.subject) {
          if (payload.sub !== options.subject) {
            return done(
              new JsonWebTokenError(
                'jwt subject invalid. expected: ' + options.subject
              )
            );
          }
        }
        if (options.jwtid) {
          if (payload.jti !== options.jwtid) {
            return done(
              new JsonWebTokenError(
                'jwt jwtid invalid. expected: ' + options.jwtid
              )
            );
          }
        }
        if (options.nonce) {
          if (payload.nonce !== options.nonce) {
            return done(
              new JsonWebTokenError(
                'jwt nonce invalid. expected: ' + options.nonce
              )
            );
          }
        }
        if (options.maxAge) {
          if (typeof payload.iat !== 'number') {
            return done(
              new JsonWebTokenError('iat required when maxAge is specified')
            );
          }
          const maxAgeTimestamp = timespan(options.maxAge, payload.iat);
          if (typeof maxAgeTimestamp === 'undefined') {
            return done(
              new JsonWebTokenError(
                '"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'
              )
            );
          }
          if (
            clockTimestamp >=
            maxAgeTimestamp + (options.clockTolerance || 0)
          ) {
            return done(
              new TokenExpiredError(
                'maxAge exceeded',
                new Date(maxAgeTimestamp * 1e3)
              )
            );
          }
        }
        if (options.complete === true) {
          const signature = decodedToken.signature;
          return done(null, {
            header,
            payload,
            signature,
          });
        }
        return done(null, payload);
      });
    };
  },
});

// node_modules/jsonwebtoken/sign.js
var require_sign = __commonJS({
  'node_modules/jsonwebtoken/sign.js'(exports, module2) {
    var timespan = require_timespan();
    var PS_SUPPORTED = require_psSupported();
    var validateAsymmetricKey = require_validateAsymmetricKey();
    var jws = require_jws();
    var {
      includes,
      isBoolean: isBoolean2,
      isInteger,
      isNumber: isNumber2,
      isPlainObject: isPlainObject2,
      isString: isString2,
      once,
    } = require_lodash();
    var { KeyObject, createSecretKey, createPrivateKey } = require('crypto');
    var SUPPORTED_ALGS = [
      'RS256',
      'RS384',
      'RS512',
      'ES256',
      'ES384',
      'ES512',
      'HS256',
      'HS384',
      'HS512',
      'none',
    ];
    if (PS_SUPPORTED) {
      SUPPORTED_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');
    }
    var sign_options_schema = {
      expiresIn: {
        isValid: function (value) {
          return isInteger(value) || (isString2(value) && value);
        },
        message:
          '"expiresIn" should be a number of seconds or string representing a timespan',
      },
      notBefore: {
        isValid: function (value) {
          return isInteger(value) || (isString2(value) && value);
        },
        message:
          '"notBefore" should be a number of seconds or string representing a timespan',
      },
      audience: {
        isValid: function (value) {
          return isString2(value) || Array.isArray(value);
        },
        message: '"audience" must be a string or array',
      },
      algorithm: {
        isValid: includes.bind(null, SUPPORTED_ALGS),
        message: '"algorithm" must be a valid string enum value',
      },
      header: {
        isValid: isPlainObject2,
        message: '"header" must be an object',
      },
      encoding: { isValid: isString2, message: '"encoding" must be a string' },
      issuer: { isValid: isString2, message: '"issuer" must be a string' },
      subject: { isValid: isString2, message: '"subject" must be a string' },
      jwtid: { isValid: isString2, message: '"jwtid" must be a string' },
      noTimestamp: {
        isValid: isBoolean2,
        message: '"noTimestamp" must be a boolean',
      },
      keyid: { isValid: isString2, message: '"keyid" must be a string' },
      mutatePayload: {
        isValid: isBoolean2,
        message: '"mutatePayload" must be a boolean',
      },
      allowInsecureKeySizes: {
        isValid: isBoolean2,
        message: '"allowInsecureKeySizes" must be a boolean',
      },
      allowInvalidAsymmetricKeyTypes: {
        isValid: isBoolean2,
        message: '"allowInvalidAsymmetricKeyTypes" must be a boolean',
      },
    };
    var registered_claims_schema = {
      iat: {
        isValid: isNumber2,
        message: '"iat" should be a number of seconds',
      },
      exp: {
        isValid: isNumber2,
        message: '"exp" should be a number of seconds',
      },
      nbf: {
        isValid: isNumber2,
        message: '"nbf" should be a number of seconds',
      },
    };
    function validate2(schema, allowUnknown, object, parameterName) {
      if (!isPlainObject2(object)) {
        throw new Error(
          'Expected "' + parameterName + '" to be a plain object.'
        );
      }
      Object.keys(object).forEach(function (key) {
        const validator = schema[key];
        if (!validator) {
          if (!allowUnknown) {
            throw new Error(
              '"' + key + '" is not allowed in "' + parameterName + '"'
            );
          }
          return;
        }
        if (!validator.isValid(object[key])) {
          throw new Error(validator.message);
        }
      });
    }
    function validateOptions(options) {
      return validate2(sign_options_schema, false, options, 'options');
    }
    function validatePayload(payload) {
      return validate2(registered_claims_schema, true, payload, 'payload');
    }
    var options_to_payload = {
      audience: 'aud',
      issuer: 'iss',
      subject: 'sub',
      jwtid: 'jti',
    };
    var options_for_objects = [
      'expiresIn',
      'notBefore',
      'noTimestamp',
      'audience',
      'issuer',
      'subject',
      'jwtid',
    ];
    module2.exports = function (
      payload,
      secretOrPrivateKey,
      options,
      callback
    ) {
      if (typeof options === 'function') {
        callback = options;
        options = {};
      } else {
        options = options || {};
      }
      const isObjectPayload =
        typeof payload === 'object' && !Buffer.isBuffer(payload);
      const header = Object.assign(
        {
          alg: options.algorithm || 'HS256',
          typ: isObjectPayload ? 'JWT' : void 0,
          kid: options.keyid,
        },
        options.header
      );
      function failure(err) {
        if (callback) {
          return callback(err);
        }
        throw err;
      }
      if (!secretOrPrivateKey && options.algorithm !== 'none') {
        return failure(new Error('secretOrPrivateKey must have a value'));
      }
      if (
        secretOrPrivateKey != null &&
        !(secretOrPrivateKey instanceof KeyObject)
      ) {
        try {
          secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);
        } catch (_2) {
          try {
            secretOrPrivateKey = createSecretKey(
              typeof secretOrPrivateKey === 'string'
                ? Buffer.from(secretOrPrivateKey)
                : secretOrPrivateKey
            );
          } catch (_3) {
            return failure(
              new Error('secretOrPrivateKey is not valid key material')
            );
          }
        }
      }
      if (header.alg.startsWith('HS') && secretOrPrivateKey.type !== 'secret') {
        return failure(
          new Error(
            `secretOrPrivateKey must be a symmetric key when using ${header.alg}`
          )
        );
      } else if (/^(?:RS|PS|ES)/.test(header.alg)) {
        if (secretOrPrivateKey.type !== 'private') {
          return failure(
            new Error(
              `secretOrPrivateKey must be an asymmetric key when using ${header.alg}`
            )
          );
        }
        if (
          !options.allowInsecureKeySizes &&
          !header.alg.startsWith('ES') &&
          secretOrPrivateKey.asymmetricKeyDetails !== void 0 && //KeyObject.asymmetricKeyDetails is supported in Node 15+
          secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048
        ) {
          return failure(
            new Error(
              `secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`
            )
          );
        }
      }
      if (typeof payload === 'undefined') {
        return failure(new Error('payload is required'));
      } else if (isObjectPayload) {
        try {
          validatePayload(payload);
        } catch (error) {
          return failure(error);
        }
        if (!options.mutatePayload) {
          payload = Object.assign({}, payload);
        }
      } else {
        const invalid_options = options_for_objects.filter(function (opt) {
          return typeof options[opt] !== 'undefined';
        });
        if (invalid_options.length > 0) {
          return failure(
            new Error(
              'invalid ' +
                invalid_options.join(',') +
                ' option for ' +
                typeof payload +
                ' payload'
            )
          );
        }
      }
      if (
        typeof payload.exp !== 'undefined' &&
        typeof options.expiresIn !== 'undefined'
      ) {
        return failure(
          new Error(
            'Bad "options.expiresIn" option the payload already has an "exp" property.'
          )
        );
      }
      if (
        typeof payload.nbf !== 'undefined' &&
        typeof options.notBefore !== 'undefined'
      ) {
        return failure(
          new Error(
            'Bad "options.notBefore" option the payload already has an "nbf" property.'
          )
        );
      }
      try {
        validateOptions(options);
      } catch (error) {
        return failure(error);
      }
      if (!options.allowInvalidAsymmetricKeyTypes) {
        try {
          validateAsymmetricKey(header.alg, secretOrPrivateKey);
        } catch (error) {
          return failure(error);
        }
      }
      const timestamp = payload.iat || Math.floor(Date.now() / 1e3);
      if (options.noTimestamp) {
        delete payload.iat;
      } else if (isObjectPayload) {
        payload.iat = timestamp;
      }
      if (typeof options.notBefore !== 'undefined') {
        try {
          payload.nbf = timespan(options.notBefore, timestamp);
        } catch (err) {
          return failure(err);
        }
        if (typeof payload.nbf === 'undefined') {
          return failure(
            new Error(
              '"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'
            )
          );
        }
      }
      if (
        typeof options.expiresIn !== 'undefined' &&
        typeof payload === 'object'
      ) {
        try {
          payload.exp = timespan(options.expiresIn, timestamp);
        } catch (err) {
          return failure(err);
        }
        if (typeof payload.exp === 'undefined') {
          return failure(
            new Error(
              '"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'
            )
          );
        }
      }
      Object.keys(options_to_payload).forEach(function (key) {
        const claim = options_to_payload[key];
        if (typeof options[key] !== 'undefined') {
          if (typeof payload[claim] !== 'undefined') {
            return failure(
              new Error(
                'Bad "options.' +
                  key +
                  '" option. The payload already has an "' +
                  claim +
                  '" property.'
              )
            );
          }
          payload[claim] = options[key];
        }
      });
      const encoding = options.encoding || 'utf8';
      if (typeof callback === 'function') {
        callback = callback && once(callback);
        jws
          .createSign({
            header,
            privateKey: secretOrPrivateKey,
            payload,
            encoding,
          })
          .once('error', callback)
          .once('done', function (signature) {
            if (
              !options.allowInsecureKeySizes &&
              /^(?:RS|PS)/.test(header.alg) &&
              signature.length < 256
            ) {
              return callback(
                new Error(
                  `secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`
                )
              );
            }
            callback(null, signature);
          });
      } else {
        let signature = jws.sign({
          header,
          payload,
          secret: secretOrPrivateKey,
          encoding,
        });
        if (
          !options.allowInsecureKeySizes &&
          /^(?:RS|PS)/.test(header.alg) &&
          signature.length < 256
        ) {
          throw new Error(
            `secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`
          );
        }
        return signature;
      }
    };
  },
});

// node_modules/jsonwebtoken/index.js
var require_jsonwebtoken = __commonJS({
  'node_modules/jsonwebtoken/index.js'(exports, module2) {
    module2.exports = {
      verify: require_verify(),
      sign: require_sign(),
      JsonWebTokenError: require_JsonWebTokenError(),
      NotBeforeError: require_NotBeforeError(),
      TokenExpiredError: require_TokenExpiredError(),
    };
    Object.defineProperty(module2.exports, 'decode', {
      enumerable: false,
      value: require_decode(),
    });
  },
});

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  'node_modules/delayed-stream/lib/delayed_stream.js'(exports, module2) {
    var Stream = require('stream').Stream;
    var util2 = require('util');
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util2.inherits(DelayedStream, Stream);
    DelayedStream.create = function (source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function () {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on('error', function () {});
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, 'readable', {
      configurable: true,
      enumerable: true,
      get: function () {
        return this.source.readable;
      },
    });
    DelayedStream.prototype.setEncoding = function () {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function () {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function () {
      this.source.pause();
    };
    DelayedStream.prototype.release = function () {
      this._released = true;
      this._bufferedEvents.forEach(
        function (args) {
          this.emit.apply(this, args);
        }.bind(this)
      );
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function () {
      var r = Stream.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function (args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === 'data') {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function () {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message =
        'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
      this.emit('error', new Error(message));
    };
  },
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  'node_modules/combined-stream/lib/combined_stream.js'(exports, module2) {
    var util2 = require('util');
    var Stream = require('stream').Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util2.inherits(CombinedStream, Stream);
    CombinedStream.create = function (options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function (stream4) {
      return (
        typeof stream4 !== 'function' &&
        typeof stream4 !== 'string' &&
        typeof stream4 !== 'boolean' &&
        typeof stream4 !== 'number' &&
        !Buffer.isBuffer(stream4)
      );
    };
    CombinedStream.prototype.append = function (stream4) {
      var isStreamLike = CombinedStream.isStreamLike(stream4);
      if (isStreamLike) {
        if (!(stream4 instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream4, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams,
          });
          stream4.on('data', this._checkDataSize.bind(this));
          stream4 = newStream;
        }
        this._handleErrors(stream4);
        if (this.pauseStreams) {
          stream4.pause();
        }
      }
      this._streams.push(stream4);
      return this;
    };
    CombinedStream.prototype.pipe = function (dest, options) {
      Stream.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function () {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function () {
      var stream4 = this._streams.shift();
      if (typeof stream4 == 'undefined') {
        this.end();
        return;
      }
      if (typeof stream4 !== 'function') {
        this._pipeNext(stream4);
        return;
      }
      var getStream = stream4;
      getStream(
        function (stream5) {
          var isStreamLike = CombinedStream.isStreamLike(stream5);
          if (isStreamLike) {
            stream5.on('data', this._checkDataSize.bind(this));
            this._handleErrors(stream5);
          }
          this._pipeNext(stream5);
        }.bind(this)
      );
    };
    CombinedStream.prototype._pipeNext = function (stream4) {
      this._currentStream = stream4;
      var isStreamLike = CombinedStream.isStreamLike(stream4);
      if (isStreamLike) {
        stream4.on('end', this._getNext.bind(this));
        stream4.pipe(this, { end: false });
        return;
      }
      var value = stream4;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function (stream4) {
      var self2 = this;
      stream4.on('error', function (err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function (data) {
      this.emit('data', data);
    };
    CombinedStream.prototype.pause = function () {
      if (!this.pauseStreams) {
        return;
      }
      if (
        this.pauseStreams &&
        this._currentStream &&
        typeof this._currentStream.pause == 'function'
      )
        this._currentStream.pause();
      this.emit('pause');
    };
    CombinedStream.prototype.resume = function () {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (
        this.pauseStreams &&
        this._currentStream &&
        typeof this._currentStream.resume == 'function'
      )
        this._currentStream.resume();
      this.emit('resume');
    };
    CombinedStream.prototype.end = function () {
      this._reset();
      this.emit('end');
    };
    CombinedStream.prototype.destroy = function () {
      this._reset();
      this.emit('close');
    };
    CombinedStream.prototype._reset = function () {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function () {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message =
        'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function () {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function (stream4) {
        if (!stream4.dataSize) {
          return;
        }
        self2.dataSize += stream4.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function (err) {
      this._reset();
      this.emit('error', err);
    };
  },
});

// node_modules/mime-db/db.json
var require_db = __commonJS({
  'node_modules/mime-db/db.json'(exports, module2) {
    module2.exports = {
      'application/1d-interleaved-parityfec': {
        source: 'iana',
      },
      'application/3gpdash-qoe-report+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/3gpp-ims+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/3gpphal+json': {
        source: 'iana',
        compressible: true,
      },
      'application/3gpphalforms+json': {
        source: 'iana',
        compressible: true,
      },
      'application/a2l': {
        source: 'iana',
      },
      'application/ace+cbor': {
        source: 'iana',
      },
      'application/activemessage': {
        source: 'iana',
      },
      'application/activity+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-costmap+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-costmapfilter+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-directory+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-endpointcost+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-endpointcostparams+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-endpointprop+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-endpointpropparams+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-error+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-networkmap+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-networkmapfilter+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-updatestreamcontrol+json': {
        source: 'iana',
        compressible: true,
      },
      'application/alto-updatestreamparams+json': {
        source: 'iana',
        compressible: true,
      },
      'application/aml': {
        source: 'iana',
      },
      'application/andrew-inset': {
        source: 'iana',
        extensions: ['ez'],
      },
      'application/applefile': {
        source: 'iana',
      },
      'application/applixware': {
        source: 'apache',
        extensions: ['aw'],
      },
      'application/at+jwt': {
        source: 'iana',
      },
      'application/atf': {
        source: 'iana',
      },
      'application/atfx': {
        source: 'iana',
      },
      'application/atom+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['atom'],
      },
      'application/atomcat+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['atomcat'],
      },
      'application/atomdeleted+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['atomdeleted'],
      },
      'application/atomicmail': {
        source: 'iana',
      },
      'application/atomsvc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['atomsvc'],
      },
      'application/atsc-dwd+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['dwd'],
      },
      'application/atsc-dynamic-event-message': {
        source: 'iana',
      },
      'application/atsc-held+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['held'],
      },
      'application/atsc-rdt+json': {
        source: 'iana',
        compressible: true,
      },
      'application/atsc-rsat+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rsat'],
      },
      'application/atxml': {
        source: 'iana',
      },
      'application/auth-policy+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/bacnet-xdd+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/batch-smtp': {
        source: 'iana',
      },
      'application/bdoc': {
        compressible: false,
        extensions: ['bdoc'],
      },
      'application/beep+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/calendar+json': {
        source: 'iana',
        compressible: true,
      },
      'application/calendar+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xcs'],
      },
      'application/call-completion': {
        source: 'iana',
      },
      'application/cals-1840': {
        source: 'iana',
      },
      'application/captive+json': {
        source: 'iana',
        compressible: true,
      },
      'application/cbor': {
        source: 'iana',
      },
      'application/cbor-seq': {
        source: 'iana',
      },
      'application/cccex': {
        source: 'iana',
      },
      'application/ccmp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/ccxml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ccxml'],
      },
      'application/cdfx+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['cdfx'],
      },
      'application/cdmi-capability': {
        source: 'iana',
        extensions: ['cdmia'],
      },
      'application/cdmi-container': {
        source: 'iana',
        extensions: ['cdmic'],
      },
      'application/cdmi-domain': {
        source: 'iana',
        extensions: ['cdmid'],
      },
      'application/cdmi-object': {
        source: 'iana',
        extensions: ['cdmio'],
      },
      'application/cdmi-queue': {
        source: 'iana',
        extensions: ['cdmiq'],
      },
      'application/cdni': {
        source: 'iana',
      },
      'application/cea': {
        source: 'iana',
      },
      'application/cea-2018+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/cellml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/cfw': {
        source: 'iana',
      },
      'application/city+json': {
        source: 'iana',
        compressible: true,
      },
      'application/clr': {
        source: 'iana',
      },
      'application/clue+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/clue_info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/cms': {
        source: 'iana',
      },
      'application/cnrp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/coap-group+json': {
        source: 'iana',
        compressible: true,
      },
      'application/coap-payload': {
        source: 'iana',
      },
      'application/commonground': {
        source: 'iana',
      },
      'application/conference-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/cose': {
        source: 'iana',
      },
      'application/cose-key': {
        source: 'iana',
      },
      'application/cose-key-set': {
        source: 'iana',
      },
      'application/cpl+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['cpl'],
      },
      'application/csrattrs': {
        source: 'iana',
      },
      'application/csta+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/cstadata+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/csvm+json': {
        source: 'iana',
        compressible: true,
      },
      'application/cu-seeme': {
        source: 'apache',
        extensions: ['cu'],
      },
      'application/cwt': {
        source: 'iana',
      },
      'application/cybercash': {
        source: 'iana',
      },
      'application/dart': {
        compressible: true,
      },
      'application/dash+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mpd'],
      },
      'application/dash-patch+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mpp'],
      },
      'application/dashdelta': {
        source: 'iana',
      },
      'application/davmount+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['davmount'],
      },
      'application/dca-rft': {
        source: 'iana',
      },
      'application/dcd': {
        source: 'iana',
      },
      'application/dec-dx': {
        source: 'iana',
      },
      'application/dialog-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/dicom': {
        source: 'iana',
      },
      'application/dicom+json': {
        source: 'iana',
        compressible: true,
      },
      'application/dicom+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/dii': {
        source: 'iana',
      },
      'application/dit': {
        source: 'iana',
      },
      'application/dns': {
        source: 'iana',
      },
      'application/dns+json': {
        source: 'iana',
        compressible: true,
      },
      'application/dns-message': {
        source: 'iana',
      },
      'application/docbook+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['dbk'],
      },
      'application/dots+cbor': {
        source: 'iana',
      },
      'application/dskpp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/dssc+der': {
        source: 'iana',
        extensions: ['dssc'],
      },
      'application/dssc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xdssc'],
      },
      'application/dvcs': {
        source: 'iana',
      },
      'application/ecmascript': {
        source: 'iana',
        compressible: true,
        extensions: ['es', 'ecma'],
      },
      'application/edi-consent': {
        source: 'iana',
      },
      'application/edi-x12': {
        source: 'iana',
        compressible: false,
      },
      'application/edifact': {
        source: 'iana',
        compressible: false,
      },
      'application/efi': {
        source: 'iana',
      },
      'application/elm+json': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/elm+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.cap+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/emergencycalldata.comment+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.control+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.deviceinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.ecall.msd': {
        source: 'iana',
      },
      'application/emergencycalldata.providerinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.serviceinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.subscriberinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emergencycalldata.veds+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/emma+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['emma'],
      },
      'application/emotionml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['emotionml'],
      },
      'application/encaprtp': {
        source: 'iana',
      },
      'application/epp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/epub+zip': {
        source: 'iana',
        compressible: false,
        extensions: ['epub'],
      },
      'application/eshop': {
        source: 'iana',
      },
      'application/exi': {
        source: 'iana',
        extensions: ['exi'],
      },
      'application/expect-ct-report+json': {
        source: 'iana',
        compressible: true,
      },
      'application/express': {
        source: 'iana',
        extensions: ['exp'],
      },
      'application/fastinfoset': {
        source: 'iana',
      },
      'application/fastsoap': {
        source: 'iana',
      },
      'application/fdt+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['fdt'],
      },
      'application/fhir+json': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/fhir+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/fido.trusted-apps+json': {
        compressible: true,
      },
      'application/fits': {
        source: 'iana',
      },
      'application/flexfec': {
        source: 'iana',
      },
      'application/font-sfnt': {
        source: 'iana',
      },
      'application/font-tdpfr': {
        source: 'iana',
        extensions: ['pfr'],
      },
      'application/font-woff': {
        source: 'iana',
        compressible: false,
      },
      'application/framework-attributes+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/geo+json': {
        source: 'iana',
        compressible: true,
        extensions: ['geojson'],
      },
      'application/geo+json-seq': {
        source: 'iana',
      },
      'application/geopackage+sqlite3': {
        source: 'iana',
      },
      'application/geoxacml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/gltf-buffer': {
        source: 'iana',
      },
      'application/gml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['gml'],
      },
      'application/gpx+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['gpx'],
      },
      'application/gxf': {
        source: 'apache',
        extensions: ['gxf'],
      },
      'application/gzip': {
        source: 'iana',
        compressible: false,
        extensions: ['gz'],
      },
      'application/h224': {
        source: 'iana',
      },
      'application/held+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/hjson': {
        extensions: ['hjson'],
      },
      'application/http': {
        source: 'iana',
      },
      'application/hyperstudio': {
        source: 'iana',
        extensions: ['stk'],
      },
      'application/ibe-key-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/ibe-pkg-reply+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/ibe-pp-data': {
        source: 'iana',
      },
      'application/iges': {
        source: 'iana',
      },
      'application/im-iscomposing+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/index': {
        source: 'iana',
      },
      'application/index.cmd': {
        source: 'iana',
      },
      'application/index.obj': {
        source: 'iana',
      },
      'application/index.response': {
        source: 'iana',
      },
      'application/index.vnd': {
        source: 'iana',
      },
      'application/inkml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ink', 'inkml'],
      },
      'application/iotp': {
        source: 'iana',
      },
      'application/ipfix': {
        source: 'iana',
        extensions: ['ipfix'],
      },
      'application/ipp': {
        source: 'iana',
      },
      'application/isup': {
        source: 'iana',
      },
      'application/its+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['its'],
      },
      'application/java-archive': {
        source: 'apache',
        compressible: false,
        extensions: ['jar', 'war', 'ear'],
      },
      'application/java-serialized-object': {
        source: 'apache',
        compressible: false,
        extensions: ['ser'],
      },
      'application/java-vm': {
        source: 'apache',
        compressible: false,
        extensions: ['class'],
      },
      'application/javascript': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['js', 'mjs'],
      },
      'application/jf2feed+json': {
        source: 'iana',
        compressible: true,
      },
      'application/jose': {
        source: 'iana',
      },
      'application/jose+json': {
        source: 'iana',
        compressible: true,
      },
      'application/jrd+json': {
        source: 'iana',
        compressible: true,
      },
      'application/jscalendar+json': {
        source: 'iana',
        compressible: true,
      },
      'application/json': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['json', 'map'],
      },
      'application/json-patch+json': {
        source: 'iana',
        compressible: true,
      },
      'application/json-seq': {
        source: 'iana',
      },
      'application/json5': {
        extensions: ['json5'],
      },
      'application/jsonml+json': {
        source: 'apache',
        compressible: true,
        extensions: ['jsonml'],
      },
      'application/jwk+json': {
        source: 'iana',
        compressible: true,
      },
      'application/jwk-set+json': {
        source: 'iana',
        compressible: true,
      },
      'application/jwt': {
        source: 'iana',
      },
      'application/kpml-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/kpml-response+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/ld+json': {
        source: 'iana',
        compressible: true,
        extensions: ['jsonld'],
      },
      'application/lgr+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['lgr'],
      },
      'application/link-format': {
        source: 'iana',
      },
      'application/load-control+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/lost+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['lostxml'],
      },
      'application/lostsync+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/lpf+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/lxf': {
        source: 'iana',
      },
      'application/mac-binhex40': {
        source: 'iana',
        extensions: ['hqx'],
      },
      'application/mac-compactpro': {
        source: 'apache',
        extensions: ['cpt'],
      },
      'application/macwriteii': {
        source: 'iana',
      },
      'application/mads+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mads'],
      },
      'application/manifest+json': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['webmanifest'],
      },
      'application/marc': {
        source: 'iana',
        extensions: ['mrc'],
      },
      'application/marcxml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mrcx'],
      },
      'application/mathematica': {
        source: 'iana',
        extensions: ['ma', 'nb', 'mb'],
      },
      'application/mathml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mathml'],
      },
      'application/mathml-content+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mathml-presentation+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-associated-procedure-description+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-deregister+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-envelope+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-msk+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-msk-response+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-protection-description+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-reception-report+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-register+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-register-response+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-schedule+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbms-user-service-description+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mbox': {
        source: 'iana',
        extensions: ['mbox'],
      },
      'application/media-policy-dataset+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mpf'],
      },
      'application/media_control+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mediaservercontrol+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mscml'],
      },
      'application/merge-patch+json': {
        source: 'iana',
        compressible: true,
      },
      'application/metalink+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['metalink'],
      },
      'application/metalink4+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['meta4'],
      },
      'application/mets+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mets'],
      },
      'application/mf4': {
        source: 'iana',
      },
      'application/mikey': {
        source: 'iana',
      },
      'application/mipc': {
        source: 'iana',
      },
      'application/missing-blocks+cbor-seq': {
        source: 'iana',
      },
      'application/mmt-aei+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['maei'],
      },
      'application/mmt-usd+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['musd'],
      },
      'application/mods+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mods'],
      },
      'application/moss-keys': {
        source: 'iana',
      },
      'application/moss-signature': {
        source: 'iana',
      },
      'application/mosskey-data': {
        source: 'iana',
      },
      'application/mosskey-request': {
        source: 'iana',
      },
      'application/mp21': {
        source: 'iana',
        extensions: ['m21', 'mp21'],
      },
      'application/mp4': {
        source: 'iana',
        extensions: ['mp4s', 'm4p'],
      },
      'application/mpeg4-generic': {
        source: 'iana',
      },
      'application/mpeg4-iod': {
        source: 'iana',
      },
      'application/mpeg4-iod-xmt': {
        source: 'iana',
      },
      'application/mrb-consumer+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/mrb-publish+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/msc-ivr+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/msc-mixer+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/msword': {
        source: 'iana',
        compressible: false,
        extensions: ['doc', 'dot'],
      },
      'application/mud+json': {
        source: 'iana',
        compressible: true,
      },
      'application/multipart-core': {
        source: 'iana',
      },
      'application/mxf': {
        source: 'iana',
        extensions: ['mxf'],
      },
      'application/n-quads': {
        source: 'iana',
        extensions: ['nq'],
      },
      'application/n-triples': {
        source: 'iana',
        extensions: ['nt'],
      },
      'application/nasdata': {
        source: 'iana',
      },
      'application/news-checkgroups': {
        source: 'iana',
        charset: 'US-ASCII',
      },
      'application/news-groupinfo': {
        source: 'iana',
        charset: 'US-ASCII',
      },
      'application/news-transmission': {
        source: 'iana',
      },
      'application/nlsml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/node': {
        source: 'iana',
        extensions: ['cjs'],
      },
      'application/nss': {
        source: 'iana',
      },
      'application/oauth-authz-req+jwt': {
        source: 'iana',
      },
      'application/oblivious-dns-message': {
        source: 'iana',
      },
      'application/ocsp-request': {
        source: 'iana',
      },
      'application/ocsp-response': {
        source: 'iana',
      },
      'application/octet-stream': {
        source: 'iana',
        compressible: false,
        extensions: [
          'bin',
          'dms',
          'lrf',
          'mar',
          'so',
          'dist',
          'distz',
          'pkg',
          'bpk',
          'dump',
          'elc',
          'deploy',
          'exe',
          'dll',
          'deb',
          'dmg',
          'iso',
          'img',
          'msi',
          'msp',
          'msm',
          'buffer',
        ],
      },
      'application/oda': {
        source: 'iana',
        extensions: ['oda'],
      },
      'application/odm+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/odx': {
        source: 'iana',
      },
      'application/oebps-package+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['opf'],
      },
      'application/ogg': {
        source: 'iana',
        compressible: false,
        extensions: ['ogx'],
      },
      'application/omdoc+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['omdoc'],
      },
      'application/onenote': {
        source: 'apache',
        extensions: ['onetoc', 'onetoc2', 'onetmp', 'onepkg'],
      },
      'application/opc-nodeset+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/oscore': {
        source: 'iana',
      },
      'application/oxps': {
        source: 'iana',
        extensions: ['oxps'],
      },
      'application/p21': {
        source: 'iana',
      },
      'application/p21+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/p2p-overlay+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['relo'],
      },
      'application/parityfec': {
        source: 'iana',
      },
      'application/passport': {
        source: 'iana',
      },
      'application/patch-ops-error+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xer'],
      },
      'application/pdf': {
        source: 'iana',
        compressible: false,
        extensions: ['pdf'],
      },
      'application/pdx': {
        source: 'iana',
      },
      'application/pem-certificate-chain': {
        source: 'iana',
      },
      'application/pgp-encrypted': {
        source: 'iana',
        compressible: false,
        extensions: ['pgp'],
      },
      'application/pgp-keys': {
        source: 'iana',
        extensions: ['asc'],
      },
      'application/pgp-signature': {
        source: 'iana',
        extensions: ['asc', 'sig'],
      },
      'application/pics-rules': {
        source: 'apache',
        extensions: ['prf'],
      },
      'application/pidf+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/pidf-diff+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/pkcs10': {
        source: 'iana',
        extensions: ['p10'],
      },
      'application/pkcs12': {
        source: 'iana',
      },
      'application/pkcs7-mime': {
        source: 'iana',
        extensions: ['p7m', 'p7c'],
      },
      'application/pkcs7-signature': {
        source: 'iana',
        extensions: ['p7s'],
      },
      'application/pkcs8': {
        source: 'iana',
        extensions: ['p8'],
      },
      'application/pkcs8-encrypted': {
        source: 'iana',
      },
      'application/pkix-attr-cert': {
        source: 'iana',
        extensions: ['ac'],
      },
      'application/pkix-cert': {
        source: 'iana',
        extensions: ['cer'],
      },
      'application/pkix-crl': {
        source: 'iana',
        extensions: ['crl'],
      },
      'application/pkix-pkipath': {
        source: 'iana',
        extensions: ['pkipath'],
      },
      'application/pkixcmp': {
        source: 'iana',
        extensions: ['pki'],
      },
      'application/pls+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['pls'],
      },
      'application/poc-settings+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/postscript': {
        source: 'iana',
        compressible: true,
        extensions: ['ai', 'eps', 'ps'],
      },
      'application/ppsp-tracker+json': {
        source: 'iana',
        compressible: true,
      },
      'application/problem+json': {
        source: 'iana',
        compressible: true,
      },
      'application/problem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/provenance+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['provx'],
      },
      'application/prs.alvestrand.titrax-sheet': {
        source: 'iana',
      },
      'application/prs.cww': {
        source: 'iana',
        extensions: ['cww'],
      },
      'application/prs.cyn': {
        source: 'iana',
        charset: '7-BIT',
      },
      'application/prs.hpub+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/prs.nprend': {
        source: 'iana',
      },
      'application/prs.plucker': {
        source: 'iana',
      },
      'application/prs.rdf-xml-crypt': {
        source: 'iana',
      },
      'application/prs.xsf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/pskc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['pskcxml'],
      },
      'application/pvd+json': {
        source: 'iana',
        compressible: true,
      },
      'application/qsig': {
        source: 'iana',
      },
      'application/raml+yaml': {
        compressible: true,
        extensions: ['raml'],
      },
      'application/raptorfec': {
        source: 'iana',
      },
      'application/rdap+json': {
        source: 'iana',
        compressible: true,
      },
      'application/rdf+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rdf', 'owl'],
      },
      'application/reginfo+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rif'],
      },
      'application/relax-ng-compact-syntax': {
        source: 'iana',
        extensions: ['rnc'],
      },
      'application/remote-printing': {
        source: 'iana',
      },
      'application/reputon+json': {
        source: 'iana',
        compressible: true,
      },
      'application/resource-lists+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rl'],
      },
      'application/resource-lists-diff+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rld'],
      },
      'application/rfc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/riscos': {
        source: 'iana',
      },
      'application/rlmi+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/rls-services+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rs'],
      },
      'application/route-apd+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rapd'],
      },
      'application/route-s-tsid+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sls'],
      },
      'application/route-usd+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rusd'],
      },
      'application/rpki-ghostbusters': {
        source: 'iana',
        extensions: ['gbr'],
      },
      'application/rpki-manifest': {
        source: 'iana',
        extensions: ['mft'],
      },
      'application/rpki-publication': {
        source: 'iana',
      },
      'application/rpki-roa': {
        source: 'iana',
        extensions: ['roa'],
      },
      'application/rpki-updown': {
        source: 'iana',
      },
      'application/rsd+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['rsd'],
      },
      'application/rss+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['rss'],
      },
      'application/rtf': {
        source: 'iana',
        compressible: true,
        extensions: ['rtf'],
      },
      'application/rtploopback': {
        source: 'iana',
      },
      'application/rtx': {
        source: 'iana',
      },
      'application/samlassertion+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/samlmetadata+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/sarif+json': {
        source: 'iana',
        compressible: true,
      },
      'application/sarif-external-properties+json': {
        source: 'iana',
        compressible: true,
      },
      'application/sbe': {
        source: 'iana',
      },
      'application/sbml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sbml'],
      },
      'application/scaip+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/scim+json': {
        source: 'iana',
        compressible: true,
      },
      'application/scvp-cv-request': {
        source: 'iana',
        extensions: ['scq'],
      },
      'application/scvp-cv-response': {
        source: 'iana',
        extensions: ['scs'],
      },
      'application/scvp-vp-request': {
        source: 'iana',
        extensions: ['spq'],
      },
      'application/scvp-vp-response': {
        source: 'iana',
        extensions: ['spp'],
      },
      'application/sdp': {
        source: 'iana',
        extensions: ['sdp'],
      },
      'application/secevent+jwt': {
        source: 'iana',
      },
      'application/senml+cbor': {
        source: 'iana',
      },
      'application/senml+json': {
        source: 'iana',
        compressible: true,
      },
      'application/senml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['senmlx'],
      },
      'application/senml-etch+cbor': {
        source: 'iana',
      },
      'application/senml-etch+json': {
        source: 'iana',
        compressible: true,
      },
      'application/senml-exi': {
        source: 'iana',
      },
      'application/sensml+cbor': {
        source: 'iana',
      },
      'application/sensml+json': {
        source: 'iana',
        compressible: true,
      },
      'application/sensml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sensmlx'],
      },
      'application/sensml-exi': {
        source: 'iana',
      },
      'application/sep+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/sep-exi': {
        source: 'iana',
      },
      'application/session-info': {
        source: 'iana',
      },
      'application/set-payment': {
        source: 'iana',
      },
      'application/set-payment-initiation': {
        source: 'iana',
        extensions: ['setpay'],
      },
      'application/set-registration': {
        source: 'iana',
      },
      'application/set-registration-initiation': {
        source: 'iana',
        extensions: ['setreg'],
      },
      'application/sgml': {
        source: 'iana',
      },
      'application/sgml-open-catalog': {
        source: 'iana',
      },
      'application/shf+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['shf'],
      },
      'application/sieve': {
        source: 'iana',
        extensions: ['siv', 'sieve'],
      },
      'application/simple-filter+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/simple-message-summary': {
        source: 'iana',
      },
      'application/simplesymbolcontainer': {
        source: 'iana',
      },
      'application/sipc': {
        source: 'iana',
      },
      'application/slate': {
        source: 'iana',
      },
      'application/smil': {
        source: 'iana',
      },
      'application/smil+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['smi', 'smil'],
      },
      'application/smpte336m': {
        source: 'iana',
      },
      'application/soap+fastinfoset': {
        source: 'iana',
      },
      'application/soap+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/sparql-query': {
        source: 'iana',
        extensions: ['rq'],
      },
      'application/sparql-results+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['srx'],
      },
      'application/spdx+json': {
        source: 'iana',
        compressible: true,
      },
      'application/spirits-event+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/sql': {
        source: 'iana',
      },
      'application/srgs': {
        source: 'iana',
        extensions: ['gram'],
      },
      'application/srgs+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['grxml'],
      },
      'application/sru+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sru'],
      },
      'application/ssdl+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['ssdl'],
      },
      'application/ssml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ssml'],
      },
      'application/stix+json': {
        source: 'iana',
        compressible: true,
      },
      'application/swid+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['swidtag'],
      },
      'application/tamp-apex-update': {
        source: 'iana',
      },
      'application/tamp-apex-update-confirm': {
        source: 'iana',
      },
      'application/tamp-community-update': {
        source: 'iana',
      },
      'application/tamp-community-update-confirm': {
        source: 'iana',
      },
      'application/tamp-error': {
        source: 'iana',
      },
      'application/tamp-sequence-adjust': {
        source: 'iana',
      },
      'application/tamp-sequence-adjust-confirm': {
        source: 'iana',
      },
      'application/tamp-status-query': {
        source: 'iana',
      },
      'application/tamp-status-response': {
        source: 'iana',
      },
      'application/tamp-update': {
        source: 'iana',
      },
      'application/tamp-update-confirm': {
        source: 'iana',
      },
      'application/tar': {
        compressible: true,
      },
      'application/taxii+json': {
        source: 'iana',
        compressible: true,
      },
      'application/td+json': {
        source: 'iana',
        compressible: true,
      },
      'application/tei+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['tei', 'teicorpus'],
      },
      'application/tetra_isi': {
        source: 'iana',
      },
      'application/thraud+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['tfi'],
      },
      'application/timestamp-query': {
        source: 'iana',
      },
      'application/timestamp-reply': {
        source: 'iana',
      },
      'application/timestamped-data': {
        source: 'iana',
        extensions: ['tsd'],
      },
      'application/tlsrpt+gzip': {
        source: 'iana',
      },
      'application/tlsrpt+json': {
        source: 'iana',
        compressible: true,
      },
      'application/tnauthlist': {
        source: 'iana',
      },
      'application/token-introspection+jwt': {
        source: 'iana',
      },
      'application/toml': {
        compressible: true,
        extensions: ['toml'],
      },
      'application/trickle-ice-sdpfrag': {
        source: 'iana',
      },
      'application/trig': {
        source: 'iana',
        extensions: ['trig'],
      },
      'application/ttml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ttml'],
      },
      'application/tve-trigger': {
        source: 'iana',
      },
      'application/tzif': {
        source: 'iana',
      },
      'application/tzif-leap': {
        source: 'iana',
      },
      'application/ubjson': {
        compressible: false,
        extensions: ['ubj'],
      },
      'application/ulpfec': {
        source: 'iana',
      },
      'application/urc-grpsheet+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/urc-ressheet+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['rsheet'],
      },
      'application/urc-targetdesc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['td'],
      },
      'application/urc-uisocketdesc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vcard+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vcard+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vemmi': {
        source: 'iana',
      },
      'application/vividence.scriptfile': {
        source: 'apache',
      },
      'application/vnd.1000minds.decision-model+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['1km'],
      },
      'application/vnd.3gpp-prose+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp-prose-pc3ch+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp-v2x-local-service-information': {
        source: 'iana',
      },
      'application/vnd.3gpp.5gnas': {
        source: 'iana',
      },
      'application/vnd.3gpp.access-transfer-events+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.bsf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.gmop+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.gtpc': {
        source: 'iana',
      },
      'application/vnd.3gpp.interworking-data': {
        source: 'iana',
      },
      'application/vnd.3gpp.lpp': {
        source: 'iana',
      },
      'application/vnd.3gpp.mc-signalling-ear': {
        source: 'iana',
      },
      'application/vnd.3gpp.mcdata-affiliation-command+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcdata-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcdata-payload': {
        source: 'iana',
      },
      'application/vnd.3gpp.mcdata-service-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcdata-signalling': {
        source: 'iana',
      },
      'application/vnd.3gpp.mcdata-ue-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcdata-user-profile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-affiliation-command+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-floor-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-location-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-mbms-usage-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-service-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-signed+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-ue-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-ue-init-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcptt-user-profile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-affiliation-command+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-affiliation-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-location-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-mbms-usage-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-service-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-transmission-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-ue-config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mcvideo-user-profile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.mid-call+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.ngap': {
        source: 'iana',
      },
      'application/vnd.3gpp.pfcp': {
        source: 'iana',
      },
      'application/vnd.3gpp.pic-bw-large': {
        source: 'iana',
        extensions: ['plb'],
      },
      'application/vnd.3gpp.pic-bw-small': {
        source: 'iana',
        extensions: ['psb'],
      },
      'application/vnd.3gpp.pic-bw-var': {
        source: 'iana',
        extensions: ['pvb'],
      },
      'application/vnd.3gpp.s1ap': {
        source: 'iana',
      },
      'application/vnd.3gpp.sms': {
        source: 'iana',
      },
      'application/vnd.3gpp.sms+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.srvcc-ext+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.srvcc-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.state-and-event-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp.ussd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp2.bcmcsinfo+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.3gpp2.sms': {
        source: 'iana',
      },
      'application/vnd.3gpp2.tcap': {
        source: 'iana',
        extensions: ['tcap'],
      },
      'application/vnd.3lightssoftware.imagescal': {
        source: 'iana',
      },
      'application/vnd.3m.post-it-notes': {
        source: 'iana',
        extensions: ['pwn'],
      },
      'application/vnd.accpac.simply.aso': {
        source: 'iana',
        extensions: ['aso'],
      },
      'application/vnd.accpac.simply.imp': {
        source: 'iana',
        extensions: ['imp'],
      },
      'application/vnd.acucobol': {
        source: 'iana',
        extensions: ['acu'],
      },
      'application/vnd.acucorp': {
        source: 'iana',
        extensions: ['atc', 'acutc'],
      },
      'application/vnd.adobe.air-application-installer-package+zip': {
        source: 'apache',
        compressible: false,
        extensions: ['air'],
      },
      'application/vnd.adobe.flash.movie': {
        source: 'iana',
      },
      'application/vnd.adobe.formscentral.fcdt': {
        source: 'iana',
        extensions: ['fcdt'],
      },
      'application/vnd.adobe.fxp': {
        source: 'iana',
        extensions: ['fxp', 'fxpl'],
      },
      'application/vnd.adobe.partial-upload': {
        source: 'iana',
      },
      'application/vnd.adobe.xdp+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xdp'],
      },
      'application/vnd.adobe.xfdf': {
        source: 'iana',
        extensions: ['xfdf'],
      },
      'application/vnd.aether.imp': {
        source: 'iana',
      },
      'application/vnd.afpc.afplinedata': {
        source: 'iana',
      },
      'application/vnd.afpc.afplinedata-pagedef': {
        source: 'iana',
      },
      'application/vnd.afpc.cmoca-cmresource': {
        source: 'iana',
      },
      'application/vnd.afpc.foca-charset': {
        source: 'iana',
      },
      'application/vnd.afpc.foca-codedfont': {
        source: 'iana',
      },
      'application/vnd.afpc.foca-codepage': {
        source: 'iana',
      },
      'application/vnd.afpc.modca': {
        source: 'iana',
      },
      'application/vnd.afpc.modca-cmtable': {
        source: 'iana',
      },
      'application/vnd.afpc.modca-formdef': {
        source: 'iana',
      },
      'application/vnd.afpc.modca-mediummap': {
        source: 'iana',
      },
      'application/vnd.afpc.modca-objectcontainer': {
        source: 'iana',
      },
      'application/vnd.afpc.modca-overlay': {
        source: 'iana',
      },
      'application/vnd.afpc.modca-pagesegment': {
        source: 'iana',
      },
      'application/vnd.age': {
        source: 'iana',
        extensions: ['age'],
      },
      'application/vnd.ah-barcode': {
        source: 'iana',
      },
      'application/vnd.ahead.space': {
        source: 'iana',
        extensions: ['ahead'],
      },
      'application/vnd.airzip.filesecure.azf': {
        source: 'iana',
        extensions: ['azf'],
      },
      'application/vnd.airzip.filesecure.azs': {
        source: 'iana',
        extensions: ['azs'],
      },
      'application/vnd.amadeus+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.amazon.ebook': {
        source: 'apache',
        extensions: ['azw'],
      },
      'application/vnd.amazon.mobi8-ebook': {
        source: 'iana',
      },
      'application/vnd.americandynamics.acc': {
        source: 'iana',
        extensions: ['acc'],
      },
      'application/vnd.amiga.ami': {
        source: 'iana',
        extensions: ['ami'],
      },
      'application/vnd.amundsen.maze+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.android.ota': {
        source: 'iana',
      },
      'application/vnd.android.package-archive': {
        source: 'apache',
        compressible: false,
        extensions: ['apk'],
      },
      'application/vnd.anki': {
        source: 'iana',
      },
      'application/vnd.anser-web-certificate-issue-initiation': {
        source: 'iana',
        extensions: ['cii'],
      },
      'application/vnd.anser-web-funds-transfer-initiation': {
        source: 'apache',
        extensions: ['fti'],
      },
      'application/vnd.antix.game-component': {
        source: 'iana',
        extensions: ['atx'],
      },
      'application/vnd.apache.arrow.file': {
        source: 'iana',
      },
      'application/vnd.apache.arrow.stream': {
        source: 'iana',
      },
      'application/vnd.apache.thrift.binary': {
        source: 'iana',
      },
      'application/vnd.apache.thrift.compact': {
        source: 'iana',
      },
      'application/vnd.apache.thrift.json': {
        source: 'iana',
      },
      'application/vnd.api+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.aplextor.warrp+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.apothekende.reservation+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.apple.installer+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mpkg'],
      },
      'application/vnd.apple.keynote': {
        source: 'iana',
        extensions: ['key'],
      },
      'application/vnd.apple.mpegurl': {
        source: 'iana',
        extensions: ['m3u8'],
      },
      'application/vnd.apple.numbers': {
        source: 'iana',
        extensions: ['numbers'],
      },
      'application/vnd.apple.pages': {
        source: 'iana',
        extensions: ['pages'],
      },
      'application/vnd.apple.pkpass': {
        compressible: false,
        extensions: ['pkpass'],
      },
      'application/vnd.arastra.swi': {
        source: 'iana',
      },
      'application/vnd.aristanetworks.swi': {
        source: 'iana',
        extensions: ['swi'],
      },
      'application/vnd.artisan+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.artsquare': {
        source: 'iana',
      },
      'application/vnd.astraea-software.iota': {
        source: 'iana',
        extensions: ['iota'],
      },
      'application/vnd.audiograph': {
        source: 'iana',
        extensions: ['aep'],
      },
      'application/vnd.autopackage': {
        source: 'iana',
      },
      'application/vnd.avalon+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.avistar+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.balsamiq.bmml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['bmml'],
      },
      'application/vnd.balsamiq.bmpr': {
        source: 'iana',
      },
      'application/vnd.banana-accounting': {
        source: 'iana',
      },
      'application/vnd.bbf.usp.error': {
        source: 'iana',
      },
      'application/vnd.bbf.usp.msg': {
        source: 'iana',
      },
      'application/vnd.bbf.usp.msg+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.bekitzur-stech+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.bint.med-content': {
        source: 'iana',
      },
      'application/vnd.biopax.rdf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.blink-idb-value-wrapper': {
        source: 'iana',
      },
      'application/vnd.blueice.multipass': {
        source: 'iana',
        extensions: ['mpm'],
      },
      'application/vnd.bluetooth.ep.oob': {
        source: 'iana',
      },
      'application/vnd.bluetooth.le.oob': {
        source: 'iana',
      },
      'application/vnd.bmi': {
        source: 'iana',
        extensions: ['bmi'],
      },
      'application/vnd.bpf': {
        source: 'iana',
      },
      'application/vnd.bpf3': {
        source: 'iana',
      },
      'application/vnd.businessobjects': {
        source: 'iana',
        extensions: ['rep'],
      },
      'application/vnd.byu.uapi+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cab-jscript': {
        source: 'iana',
      },
      'application/vnd.canon-cpdl': {
        source: 'iana',
      },
      'application/vnd.canon-lips': {
        source: 'iana',
      },
      'application/vnd.capasystems-pg+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cendio.thinlinc.clientconf': {
        source: 'iana',
      },
      'application/vnd.century-systems.tcp_stream': {
        source: 'iana',
      },
      'application/vnd.chemdraw+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['cdxml'],
      },
      'application/vnd.chess-pgn': {
        source: 'iana',
      },
      'application/vnd.chipnuts.karaoke-mmd': {
        source: 'iana',
        extensions: ['mmd'],
      },
      'application/vnd.ciedi': {
        source: 'iana',
      },
      'application/vnd.cinderella': {
        source: 'iana',
        extensions: ['cdy'],
      },
      'application/vnd.cirpack.isdn-ext': {
        source: 'iana',
      },
      'application/vnd.citationstyles.style+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['csl'],
      },
      'application/vnd.claymore': {
        source: 'iana',
        extensions: ['cla'],
      },
      'application/vnd.cloanto.rp9': {
        source: 'iana',
        extensions: ['rp9'],
      },
      'application/vnd.clonk.c4group': {
        source: 'iana',
        extensions: ['c4g', 'c4d', 'c4f', 'c4p', 'c4u'],
      },
      'application/vnd.cluetrust.cartomobile-config': {
        source: 'iana',
        extensions: ['c11amc'],
      },
      'application/vnd.cluetrust.cartomobile-config-pkg': {
        source: 'iana',
        extensions: ['c11amz'],
      },
      'application/vnd.coffeescript': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.document': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.document-template': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.presentation': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.presentation-template': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.spreadsheet': {
        source: 'iana',
      },
      'application/vnd.collabio.xodocuments.spreadsheet-template': {
        source: 'iana',
      },
      'application/vnd.collection+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.collection.doc+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.collection.next+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.comicbook+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.comicbook-rar': {
        source: 'iana',
      },
      'application/vnd.commerce-battelle': {
        source: 'iana',
      },
      'application/vnd.commonspace': {
        source: 'iana',
        extensions: ['csp'],
      },
      'application/vnd.contact.cmsg': {
        source: 'iana',
        extensions: ['cdbcmsg'],
      },
      'application/vnd.coreos.ignition+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cosmocaller': {
        source: 'iana',
        extensions: ['cmc'],
      },
      'application/vnd.crick.clicker': {
        source: 'iana',
        extensions: ['clkx'],
      },
      'application/vnd.crick.clicker.keyboard': {
        source: 'iana',
        extensions: ['clkk'],
      },
      'application/vnd.crick.clicker.palette': {
        source: 'iana',
        extensions: ['clkp'],
      },
      'application/vnd.crick.clicker.template': {
        source: 'iana',
        extensions: ['clkt'],
      },
      'application/vnd.crick.clicker.wordbank': {
        source: 'iana',
        extensions: ['clkw'],
      },
      'application/vnd.criticaltools.wbs+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wbs'],
      },
      'application/vnd.cryptii.pipe+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.crypto-shade-file': {
        source: 'iana',
      },
      'application/vnd.cryptomator.encrypted': {
        source: 'iana',
      },
      'application/vnd.cryptomator.vault': {
        source: 'iana',
      },
      'application/vnd.ctc-posml': {
        source: 'iana',
        extensions: ['pml'],
      },
      'application/vnd.ctct.ws+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cups-pdf': {
        source: 'iana',
      },
      'application/vnd.cups-postscript': {
        source: 'iana',
      },
      'application/vnd.cups-ppd': {
        source: 'iana',
        extensions: ['ppd'],
      },
      'application/vnd.cups-raster': {
        source: 'iana',
      },
      'application/vnd.cups-raw': {
        source: 'iana',
      },
      'application/vnd.curl': {
        source: 'iana',
      },
      'application/vnd.curl.car': {
        source: 'apache',
        extensions: ['car'],
      },
      'application/vnd.curl.pcurl': {
        source: 'apache',
        extensions: ['pcurl'],
      },
      'application/vnd.cyan.dean.root+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cybank': {
        source: 'iana',
      },
      'application/vnd.cyclonedx+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.cyclonedx+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.d2l.coursepackage1p0+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.d3m-dataset': {
        source: 'iana',
      },
      'application/vnd.d3m-problem': {
        source: 'iana',
      },
      'application/vnd.dart': {
        source: 'iana',
        compressible: true,
        extensions: ['dart'],
      },
      'application/vnd.data-vision.rdz': {
        source: 'iana',
        extensions: ['rdz'],
      },
      'application/vnd.datapackage+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dataresource+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dbf': {
        source: 'iana',
        extensions: ['dbf'],
      },
      'application/vnd.debian.binary-package': {
        source: 'iana',
      },
      'application/vnd.dece.data': {
        source: 'iana',
        extensions: ['uvf', 'uvvf', 'uvd', 'uvvd'],
      },
      'application/vnd.dece.ttml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['uvt', 'uvvt'],
      },
      'application/vnd.dece.unspecified': {
        source: 'iana',
        extensions: ['uvx', 'uvvx'],
      },
      'application/vnd.dece.zip': {
        source: 'iana',
        extensions: ['uvz', 'uvvz'],
      },
      'application/vnd.denovo.fcselayout-link': {
        source: 'iana',
        extensions: ['fe_launch'],
      },
      'application/vnd.desmume.movie': {
        source: 'iana',
      },
      'application/vnd.dir-bi.plate-dl-nosuffix': {
        source: 'iana',
      },
      'application/vnd.dm.delegation+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dna': {
        source: 'iana',
        extensions: ['dna'],
      },
      'application/vnd.document+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dolby.mlp': {
        source: 'apache',
        extensions: ['mlp'],
      },
      'application/vnd.dolby.mobile.1': {
        source: 'iana',
      },
      'application/vnd.dolby.mobile.2': {
        source: 'iana',
      },
      'application/vnd.doremir.scorecloud-binary-document': {
        source: 'iana',
      },
      'application/vnd.dpgraph': {
        source: 'iana',
        extensions: ['dpg'],
      },
      'application/vnd.dreamfactory': {
        source: 'iana',
        extensions: ['dfac'],
      },
      'application/vnd.drive+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ds-keypoint': {
        source: 'apache',
        extensions: ['kpxx'],
      },
      'application/vnd.dtg.local': {
        source: 'iana',
      },
      'application/vnd.dtg.local.flash': {
        source: 'iana',
      },
      'application/vnd.dtg.local.html': {
        source: 'iana',
      },
      'application/vnd.dvb.ait': {
        source: 'iana',
        extensions: ['ait'],
      },
      'application/vnd.dvb.dvbisl+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.dvbj': {
        source: 'iana',
      },
      'application/vnd.dvb.esgcontainer': {
        source: 'iana',
      },
      'application/vnd.dvb.ipdcdftnotifaccess': {
        source: 'iana',
      },
      'application/vnd.dvb.ipdcesgaccess': {
        source: 'iana',
      },
      'application/vnd.dvb.ipdcesgaccess2': {
        source: 'iana',
      },
      'application/vnd.dvb.ipdcesgpdd': {
        source: 'iana',
      },
      'application/vnd.dvb.ipdcroaming': {
        source: 'iana',
      },
      'application/vnd.dvb.iptv.alfec-base': {
        source: 'iana',
      },
      'application/vnd.dvb.iptv.alfec-enhancement': {
        source: 'iana',
      },
      'application/vnd.dvb.notif-aggregate-root+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-container+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-generic+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-ia-msglist+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-ia-registration-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-ia-registration-response+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.notif-init+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.dvb.pfr': {
        source: 'iana',
      },
      'application/vnd.dvb.service': {
        source: 'iana',
        extensions: ['svc'],
      },
      'application/vnd.dxr': {
        source: 'iana',
      },
      'application/vnd.dynageo': {
        source: 'iana',
        extensions: ['geo'],
      },
      'application/vnd.dzr': {
        source: 'iana',
      },
      'application/vnd.easykaraoke.cdgdownload': {
        source: 'iana',
      },
      'application/vnd.ecdis-update': {
        source: 'iana',
      },
      'application/vnd.ecip.rlp': {
        source: 'iana',
      },
      'application/vnd.eclipse.ditto+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ecowin.chart': {
        source: 'iana',
        extensions: ['mag'],
      },
      'application/vnd.ecowin.filerequest': {
        source: 'iana',
      },
      'application/vnd.ecowin.fileupdate': {
        source: 'iana',
      },
      'application/vnd.ecowin.series': {
        source: 'iana',
      },
      'application/vnd.ecowin.seriesrequest': {
        source: 'iana',
      },
      'application/vnd.ecowin.seriesupdate': {
        source: 'iana',
      },
      'application/vnd.efi.img': {
        source: 'iana',
      },
      'application/vnd.efi.iso': {
        source: 'iana',
      },
      'application/vnd.emclient.accessrequest+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.enliven': {
        source: 'iana',
        extensions: ['nml'],
      },
      'application/vnd.enphase.envoy': {
        source: 'iana',
      },
      'application/vnd.eprints.data+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.epson.esf': {
        source: 'iana',
        extensions: ['esf'],
      },
      'application/vnd.epson.msf': {
        source: 'iana',
        extensions: ['msf'],
      },
      'application/vnd.epson.quickanime': {
        source: 'iana',
        extensions: ['qam'],
      },
      'application/vnd.epson.salt': {
        source: 'iana',
        extensions: ['slt'],
      },
      'application/vnd.epson.ssf': {
        source: 'iana',
        extensions: ['ssf'],
      },
      'application/vnd.ericsson.quickcall': {
        source: 'iana',
      },
      'application/vnd.espass-espass+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.eszigno3+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['es3', 'et3'],
      },
      'application/vnd.etsi.aoc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.asic-e+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.etsi.asic-s+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.etsi.cug+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvcommand+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvdiscovery+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvprofile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvsad-bc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvsad-cod+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvsad-npvr+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvservice+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvsync+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.iptvueprofile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.mcid+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.mheg5': {
        source: 'iana',
      },
      'application/vnd.etsi.overload-control-policy-dataset+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.pstn+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.sci+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.simservs+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.timestamp-token': {
        source: 'iana',
      },
      'application/vnd.etsi.tsl+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.etsi.tsl.der': {
        source: 'iana',
      },
      'application/vnd.eu.kasparian.car+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.eudora.data': {
        source: 'iana',
      },
      'application/vnd.evolv.ecig.profile': {
        source: 'iana',
      },
      'application/vnd.evolv.ecig.settings': {
        source: 'iana',
      },
      'application/vnd.evolv.ecig.theme': {
        source: 'iana',
      },
      'application/vnd.exstream-empower+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.exstream-package': {
        source: 'iana',
      },
      'application/vnd.ezpix-album': {
        source: 'iana',
        extensions: ['ez2'],
      },
      'application/vnd.ezpix-package': {
        source: 'iana',
        extensions: ['ez3'],
      },
      'application/vnd.f-secure.mobile': {
        source: 'iana',
      },
      'application/vnd.familysearch.gedcom+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.fastcopy-disk-image': {
        source: 'iana',
      },
      'application/vnd.fdf': {
        source: 'iana',
        extensions: ['fdf'],
      },
      'application/vnd.fdsn.mseed': {
        source: 'iana',
        extensions: ['mseed'],
      },
      'application/vnd.fdsn.seed': {
        source: 'iana',
        extensions: ['seed', 'dataless'],
      },
      'application/vnd.ffsns': {
        source: 'iana',
      },
      'application/vnd.ficlab.flb+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.filmit.zfc': {
        source: 'iana',
      },
      'application/vnd.fints': {
        source: 'iana',
      },
      'application/vnd.firemonkeys.cloudcell': {
        source: 'iana',
      },
      'application/vnd.flographit': {
        source: 'iana',
        extensions: ['gph'],
      },
      'application/vnd.fluxtime.clip': {
        source: 'iana',
        extensions: ['ftc'],
      },
      'application/vnd.font-fontforge-sfd': {
        source: 'iana',
      },
      'application/vnd.framemaker': {
        source: 'iana',
        extensions: ['fm', 'frame', 'maker', 'book'],
      },
      'application/vnd.frogans.fnc': {
        source: 'iana',
        extensions: ['fnc'],
      },
      'application/vnd.frogans.ltf': {
        source: 'iana',
        extensions: ['ltf'],
      },
      'application/vnd.fsc.weblaunch': {
        source: 'iana',
        extensions: ['fsc'],
      },
      'application/vnd.fujifilm.fb.docuworks': {
        source: 'iana',
      },
      'application/vnd.fujifilm.fb.docuworks.binder': {
        source: 'iana',
      },
      'application/vnd.fujifilm.fb.docuworks.container': {
        source: 'iana',
      },
      'application/vnd.fujifilm.fb.jfi+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.fujitsu.oasys': {
        source: 'iana',
        extensions: ['oas'],
      },
      'application/vnd.fujitsu.oasys2': {
        source: 'iana',
        extensions: ['oa2'],
      },
      'application/vnd.fujitsu.oasys3': {
        source: 'iana',
        extensions: ['oa3'],
      },
      'application/vnd.fujitsu.oasysgp': {
        source: 'iana',
        extensions: ['fg5'],
      },
      'application/vnd.fujitsu.oasysprs': {
        source: 'iana',
        extensions: ['bh2'],
      },
      'application/vnd.fujixerox.art-ex': {
        source: 'iana',
      },
      'application/vnd.fujixerox.art4': {
        source: 'iana',
      },
      'application/vnd.fujixerox.ddd': {
        source: 'iana',
        extensions: ['ddd'],
      },
      'application/vnd.fujixerox.docuworks': {
        source: 'iana',
        extensions: ['xdw'],
      },
      'application/vnd.fujixerox.docuworks.binder': {
        source: 'iana',
        extensions: ['xbd'],
      },
      'application/vnd.fujixerox.docuworks.container': {
        source: 'iana',
      },
      'application/vnd.fujixerox.hbpl': {
        source: 'iana',
      },
      'application/vnd.fut-misnet': {
        source: 'iana',
      },
      'application/vnd.futoin+cbor': {
        source: 'iana',
      },
      'application/vnd.futoin+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.fuzzysheet': {
        source: 'iana',
        extensions: ['fzs'],
      },
      'application/vnd.genomatix.tuxedo': {
        source: 'iana',
        extensions: ['txd'],
      },
      'application/vnd.gentics.grd+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.geo+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.geocube+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.geogebra.file': {
        source: 'iana',
        extensions: ['ggb'],
      },
      'application/vnd.geogebra.slides': {
        source: 'iana',
      },
      'application/vnd.geogebra.tool': {
        source: 'iana',
        extensions: ['ggt'],
      },
      'application/vnd.geometry-explorer': {
        source: 'iana',
        extensions: ['gex', 'gre'],
      },
      'application/vnd.geonext': {
        source: 'iana',
        extensions: ['gxt'],
      },
      'application/vnd.geoplan': {
        source: 'iana',
        extensions: ['g2w'],
      },
      'application/vnd.geospace': {
        source: 'iana',
        extensions: ['g3w'],
      },
      'application/vnd.gerber': {
        source: 'iana',
      },
      'application/vnd.globalplatform.card-content-mgt': {
        source: 'iana',
      },
      'application/vnd.globalplatform.card-content-mgt-response': {
        source: 'iana',
      },
      'application/vnd.gmx': {
        source: 'iana',
        extensions: ['gmx'],
      },
      'application/vnd.google-apps.document': {
        compressible: false,
        extensions: ['gdoc'],
      },
      'application/vnd.google-apps.presentation': {
        compressible: false,
        extensions: ['gslides'],
      },
      'application/vnd.google-apps.spreadsheet': {
        compressible: false,
        extensions: ['gsheet'],
      },
      'application/vnd.google-earth.kml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['kml'],
      },
      'application/vnd.google-earth.kmz': {
        source: 'iana',
        compressible: false,
        extensions: ['kmz'],
      },
      'application/vnd.gov.sk.e-form+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.gov.sk.e-form+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.gov.sk.xmldatacontainer+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.grafeq': {
        source: 'iana',
        extensions: ['gqf', 'gqs'],
      },
      'application/vnd.gridmp': {
        source: 'iana',
      },
      'application/vnd.groove-account': {
        source: 'iana',
        extensions: ['gac'],
      },
      'application/vnd.groove-help': {
        source: 'iana',
        extensions: ['ghf'],
      },
      'application/vnd.groove-identity-message': {
        source: 'iana',
        extensions: ['gim'],
      },
      'application/vnd.groove-injector': {
        source: 'iana',
        extensions: ['grv'],
      },
      'application/vnd.groove-tool-message': {
        source: 'iana',
        extensions: ['gtm'],
      },
      'application/vnd.groove-tool-template': {
        source: 'iana',
        extensions: ['tpl'],
      },
      'application/vnd.groove-vcard': {
        source: 'iana',
        extensions: ['vcg'],
      },
      'application/vnd.hal+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hal+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['hal'],
      },
      'application/vnd.handheld-entertainment+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['zmm'],
      },
      'application/vnd.hbci': {
        source: 'iana',
        extensions: ['hbci'],
      },
      'application/vnd.hc+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hcl-bireports': {
        source: 'iana',
      },
      'application/vnd.hdt': {
        source: 'iana',
      },
      'application/vnd.heroku+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hhe.lesson-player': {
        source: 'iana',
        extensions: ['les'],
      },
      'application/vnd.hl7cda+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.hl7v2+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.hp-hpgl': {
        source: 'iana',
        extensions: ['hpgl'],
      },
      'application/vnd.hp-hpid': {
        source: 'iana',
        extensions: ['hpid'],
      },
      'application/vnd.hp-hps': {
        source: 'iana',
        extensions: ['hps'],
      },
      'application/vnd.hp-jlyt': {
        source: 'iana',
        extensions: ['jlt'],
      },
      'application/vnd.hp-pcl': {
        source: 'iana',
        extensions: ['pcl'],
      },
      'application/vnd.hp-pclxl': {
        source: 'iana',
        extensions: ['pclxl'],
      },
      'application/vnd.httphone': {
        source: 'iana',
      },
      'application/vnd.hydrostatix.sof-data': {
        source: 'iana',
        extensions: ['sfd-hdstx'],
      },
      'application/vnd.hyper+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hyper-item+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hyperdrive+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.hzn-3d-crossword': {
        source: 'iana',
      },
      'application/vnd.ibm.afplinedata': {
        source: 'iana',
      },
      'application/vnd.ibm.electronic-media': {
        source: 'iana',
      },
      'application/vnd.ibm.minipay': {
        source: 'iana',
        extensions: ['mpy'],
      },
      'application/vnd.ibm.modcap': {
        source: 'iana',
        extensions: ['afp', 'listafp', 'list3820'],
      },
      'application/vnd.ibm.rights-management': {
        source: 'iana',
        extensions: ['irm'],
      },
      'application/vnd.ibm.secure-container': {
        source: 'iana',
        extensions: ['sc'],
      },
      'application/vnd.iccprofile': {
        source: 'iana',
        extensions: ['icc', 'icm'],
      },
      'application/vnd.ieee.1905': {
        source: 'iana',
      },
      'application/vnd.igloader': {
        source: 'iana',
        extensions: ['igl'],
      },
      'application/vnd.imagemeter.folder+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.imagemeter.image+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.immervision-ivp': {
        source: 'iana',
        extensions: ['ivp'],
      },
      'application/vnd.immervision-ivu': {
        source: 'iana',
        extensions: ['ivu'],
      },
      'application/vnd.ims.imsccv1p1': {
        source: 'iana',
      },
      'application/vnd.ims.imsccv1p2': {
        source: 'iana',
      },
      'application/vnd.ims.imsccv1p3': {
        source: 'iana',
      },
      'application/vnd.ims.lis.v2.result+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolconsumerprofile+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolproxy+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolproxy.id+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolsettings+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ims.lti.v2.toolsettings.simple+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.informedcontrol.rms+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.informix-visionary': {
        source: 'iana',
      },
      'application/vnd.infotech.project': {
        source: 'iana',
      },
      'application/vnd.infotech.project+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.innopath.wamp.notification': {
        source: 'iana',
      },
      'application/vnd.insors.igm': {
        source: 'iana',
        extensions: ['igm'],
      },
      'application/vnd.intercon.formnet': {
        source: 'iana',
        extensions: ['xpw', 'xpx'],
      },
      'application/vnd.intergeo': {
        source: 'iana',
        extensions: ['i2g'],
      },
      'application/vnd.intertrust.digibox': {
        source: 'iana',
      },
      'application/vnd.intertrust.nncp': {
        source: 'iana',
      },
      'application/vnd.intu.qbo': {
        source: 'iana',
        extensions: ['qbo'],
      },
      'application/vnd.intu.qfx': {
        source: 'iana',
        extensions: ['qfx'],
      },
      'application/vnd.iptc.g2.catalogitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.conceptitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.knowledgeitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.newsitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.newsmessage+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.packageitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.iptc.g2.planningitem+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ipunplugged.rcprofile': {
        source: 'iana',
        extensions: ['rcprofile'],
      },
      'application/vnd.irepository.package+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['irp'],
      },
      'application/vnd.is-xpr': {
        source: 'iana',
        extensions: ['xpr'],
      },
      'application/vnd.isac.fcs': {
        source: 'iana',
        extensions: ['fcs'],
      },
      'application/vnd.iso11783-10+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.jam': {
        source: 'iana',
        extensions: ['jam'],
      },
      'application/vnd.japannet-directory-service': {
        source: 'iana',
      },
      'application/vnd.japannet-jpnstore-wakeup': {
        source: 'iana',
      },
      'application/vnd.japannet-payment-wakeup': {
        source: 'iana',
      },
      'application/vnd.japannet-registration': {
        source: 'iana',
      },
      'application/vnd.japannet-registration-wakeup': {
        source: 'iana',
      },
      'application/vnd.japannet-setstore-wakeup': {
        source: 'iana',
      },
      'application/vnd.japannet-verification': {
        source: 'iana',
      },
      'application/vnd.japannet-verification-wakeup': {
        source: 'iana',
      },
      'application/vnd.jcp.javame.midlet-rms': {
        source: 'iana',
        extensions: ['rms'],
      },
      'application/vnd.jisp': {
        source: 'iana',
        extensions: ['jisp'],
      },
      'application/vnd.joost.joda-archive': {
        source: 'iana',
        extensions: ['joda'],
      },
      'application/vnd.jsk.isdn-ngn': {
        source: 'iana',
      },
      'application/vnd.kahootz': {
        source: 'iana',
        extensions: ['ktz', 'ktr'],
      },
      'application/vnd.kde.karbon': {
        source: 'iana',
        extensions: ['karbon'],
      },
      'application/vnd.kde.kchart': {
        source: 'iana',
        extensions: ['chrt'],
      },
      'application/vnd.kde.kformula': {
        source: 'iana',
        extensions: ['kfo'],
      },
      'application/vnd.kde.kivio': {
        source: 'iana',
        extensions: ['flw'],
      },
      'application/vnd.kde.kontour': {
        source: 'iana',
        extensions: ['kon'],
      },
      'application/vnd.kde.kpresenter': {
        source: 'iana',
        extensions: ['kpr', 'kpt'],
      },
      'application/vnd.kde.kspread': {
        source: 'iana',
        extensions: ['ksp'],
      },
      'application/vnd.kde.kword': {
        source: 'iana',
        extensions: ['kwd', 'kwt'],
      },
      'application/vnd.kenameaapp': {
        source: 'iana',
        extensions: ['htke'],
      },
      'application/vnd.kidspiration': {
        source: 'iana',
        extensions: ['kia'],
      },
      'application/vnd.kinar': {
        source: 'iana',
        extensions: ['kne', 'knp'],
      },
      'application/vnd.koan': {
        source: 'iana',
        extensions: ['skp', 'skd', 'skt', 'skm'],
      },
      'application/vnd.kodak-descriptor': {
        source: 'iana',
        extensions: ['sse'],
      },
      'application/vnd.las': {
        source: 'iana',
      },
      'application/vnd.las.las+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.las.las+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['lasxml'],
      },
      'application/vnd.laszip': {
        source: 'iana',
      },
      'application/vnd.leap+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.liberty-request+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.llamagraphics.life-balance.desktop': {
        source: 'iana',
        extensions: ['lbd'],
      },
      'application/vnd.llamagraphics.life-balance.exchange+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['lbe'],
      },
      'application/vnd.logipipe.circuit+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.loom': {
        source: 'iana',
      },
      'application/vnd.lotus-1-2-3': {
        source: 'iana',
        extensions: ['123'],
      },
      'application/vnd.lotus-approach': {
        source: 'iana',
        extensions: ['apr'],
      },
      'application/vnd.lotus-freelance': {
        source: 'iana',
        extensions: ['pre'],
      },
      'application/vnd.lotus-notes': {
        source: 'iana',
        extensions: ['nsf'],
      },
      'application/vnd.lotus-organizer': {
        source: 'iana',
        extensions: ['org'],
      },
      'application/vnd.lotus-screencam': {
        source: 'iana',
        extensions: ['scm'],
      },
      'application/vnd.lotus-wordpro': {
        source: 'iana',
        extensions: ['lwp'],
      },
      'application/vnd.macports.portpkg': {
        source: 'iana',
        extensions: ['portpkg'],
      },
      'application/vnd.mapbox-vector-tile': {
        source: 'iana',
        extensions: ['mvt'],
      },
      'application/vnd.marlin.drm.actiontoken+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.marlin.drm.conftoken+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.marlin.drm.license+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.marlin.drm.mdcf': {
        source: 'iana',
      },
      'application/vnd.mason+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.maxar.archive.3tz+zip': {
        source: 'iana',
        compressible: false,
      },
      'application/vnd.maxmind.maxmind-db': {
        source: 'iana',
      },
      'application/vnd.mcd': {
        source: 'iana',
        extensions: ['mcd'],
      },
      'application/vnd.medcalcdata': {
        source: 'iana',
        extensions: ['mc1'],
      },
      'application/vnd.mediastation.cdkey': {
        source: 'iana',
        extensions: ['cdkey'],
      },
      'application/vnd.meridian-slingshot': {
        source: 'iana',
      },
      'application/vnd.mfer': {
        source: 'iana',
        extensions: ['mwf'],
      },
      'application/vnd.mfmp': {
        source: 'iana',
        extensions: ['mfm'],
      },
      'application/vnd.micro+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.micrografx.flo': {
        source: 'iana',
        extensions: ['flo'],
      },
      'application/vnd.micrografx.igx': {
        source: 'iana',
        extensions: ['igx'],
      },
      'application/vnd.microsoft.portable-executable': {
        source: 'iana',
      },
      'application/vnd.microsoft.windows.thumbnail-cache': {
        source: 'iana',
      },
      'application/vnd.miele+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.mif': {
        source: 'iana',
        extensions: ['mif'],
      },
      'application/vnd.minisoft-hp3000-save': {
        source: 'iana',
      },
      'application/vnd.mitsubishi.misty-guard.trustweb': {
        source: 'iana',
      },
      'application/vnd.mobius.daf': {
        source: 'iana',
        extensions: ['daf'],
      },
      'application/vnd.mobius.dis': {
        source: 'iana',
        extensions: ['dis'],
      },
      'application/vnd.mobius.mbk': {
        source: 'iana',
        extensions: ['mbk'],
      },
      'application/vnd.mobius.mqy': {
        source: 'iana',
        extensions: ['mqy'],
      },
      'application/vnd.mobius.msl': {
        source: 'iana',
        extensions: ['msl'],
      },
      'application/vnd.mobius.plc': {
        source: 'iana',
        extensions: ['plc'],
      },
      'application/vnd.mobius.txf': {
        source: 'iana',
        extensions: ['txf'],
      },
      'application/vnd.mophun.application': {
        source: 'iana',
        extensions: ['mpn'],
      },
      'application/vnd.mophun.certificate': {
        source: 'iana',
        extensions: ['mpc'],
      },
      'application/vnd.motorola.flexsuite': {
        source: 'iana',
      },
      'application/vnd.motorola.flexsuite.adsi': {
        source: 'iana',
      },
      'application/vnd.motorola.flexsuite.fis': {
        source: 'iana',
      },
      'application/vnd.motorola.flexsuite.gotap': {
        source: 'iana',
      },
      'application/vnd.motorola.flexsuite.kmr': {
        source: 'iana',
      },
      'application/vnd.motorola.flexsuite.ttc': {
        source: 'iana',
      },
      'application/vnd.motorola.flexsuite.wem': {
        source: 'iana',
      },
      'application/vnd.motorola.iprm': {
        source: 'iana',
      },
      'application/vnd.mozilla.xul+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xul'],
      },
      'application/vnd.ms-3mfdocument': {
        source: 'iana',
      },
      'application/vnd.ms-artgalry': {
        source: 'iana',
        extensions: ['cil'],
      },
      'application/vnd.ms-asf': {
        source: 'iana',
      },
      'application/vnd.ms-cab-compressed': {
        source: 'iana',
        extensions: ['cab'],
      },
      'application/vnd.ms-color.iccprofile': {
        source: 'apache',
      },
      'application/vnd.ms-excel': {
        source: 'iana',
        compressible: false,
        extensions: ['xls', 'xlm', 'xla', 'xlc', 'xlt', 'xlw'],
      },
      'application/vnd.ms-excel.addin.macroenabled.12': {
        source: 'iana',
        extensions: ['xlam'],
      },
      'application/vnd.ms-excel.sheet.binary.macroenabled.12': {
        source: 'iana',
        extensions: ['xlsb'],
      },
      'application/vnd.ms-excel.sheet.macroenabled.12': {
        source: 'iana',
        extensions: ['xlsm'],
      },
      'application/vnd.ms-excel.template.macroenabled.12': {
        source: 'iana',
        extensions: ['xltm'],
      },
      'application/vnd.ms-fontobject': {
        source: 'iana',
        compressible: true,
        extensions: ['eot'],
      },
      'application/vnd.ms-htmlhelp': {
        source: 'iana',
        extensions: ['chm'],
      },
      'application/vnd.ms-ims': {
        source: 'iana',
        extensions: ['ims'],
      },
      'application/vnd.ms-lrm': {
        source: 'iana',
        extensions: ['lrm'],
      },
      'application/vnd.ms-office.activex+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ms-officetheme': {
        source: 'iana',
        extensions: ['thmx'],
      },
      'application/vnd.ms-opentype': {
        source: 'apache',
        compressible: true,
      },
      'application/vnd.ms-outlook': {
        compressible: false,
        extensions: ['msg'],
      },
      'application/vnd.ms-package.obfuscated-opentype': {
        source: 'apache',
      },
      'application/vnd.ms-pki.seccat': {
        source: 'apache',
        extensions: ['cat'],
      },
      'application/vnd.ms-pki.stl': {
        source: 'apache',
        extensions: ['stl'],
      },
      'application/vnd.ms-playready.initiator+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ms-powerpoint': {
        source: 'iana',
        compressible: false,
        extensions: ['ppt', 'pps', 'pot'],
      },
      'application/vnd.ms-powerpoint.addin.macroenabled.12': {
        source: 'iana',
        extensions: ['ppam'],
      },
      'application/vnd.ms-powerpoint.presentation.macroenabled.12': {
        source: 'iana',
        extensions: ['pptm'],
      },
      'application/vnd.ms-powerpoint.slide.macroenabled.12': {
        source: 'iana',
        extensions: ['sldm'],
      },
      'application/vnd.ms-powerpoint.slideshow.macroenabled.12': {
        source: 'iana',
        extensions: ['ppsm'],
      },
      'application/vnd.ms-powerpoint.template.macroenabled.12': {
        source: 'iana',
        extensions: ['potm'],
      },
      'application/vnd.ms-printdevicecapabilities+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ms-printing.printticket+xml': {
        source: 'apache',
        compressible: true,
      },
      'application/vnd.ms-printschematicket+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ms-project': {
        source: 'iana',
        extensions: ['mpp', 'mpt'],
      },
      'application/vnd.ms-tnef': {
        source: 'iana',
      },
      'application/vnd.ms-windows.devicepairing': {
        source: 'iana',
      },
      'application/vnd.ms-windows.nwprinting.oob': {
        source: 'iana',
      },
      'application/vnd.ms-windows.printerpairing': {
        source: 'iana',
      },
      'application/vnd.ms-windows.wsd.oob': {
        source: 'iana',
      },
      'application/vnd.ms-wmdrm.lic-chlg-req': {
        source: 'iana',
      },
      'application/vnd.ms-wmdrm.lic-resp': {
        source: 'iana',
      },
      'application/vnd.ms-wmdrm.meter-chlg-req': {
        source: 'iana',
      },
      'application/vnd.ms-wmdrm.meter-resp': {
        source: 'iana',
      },
      'application/vnd.ms-word.document.macroenabled.12': {
        source: 'iana',
        extensions: ['docm'],
      },
      'application/vnd.ms-word.template.macroenabled.12': {
        source: 'iana',
        extensions: ['dotm'],
      },
      'application/vnd.ms-works': {
        source: 'iana',
        extensions: ['wps', 'wks', 'wcm', 'wdb'],
      },
      'application/vnd.ms-wpl': {
        source: 'iana',
        extensions: ['wpl'],
      },
      'application/vnd.ms-xpsdocument': {
        source: 'iana',
        compressible: false,
        extensions: ['xps'],
      },
      'application/vnd.msa-disk-image': {
        source: 'iana',
      },
      'application/vnd.mseq': {
        source: 'iana',
        extensions: ['mseq'],
      },
      'application/vnd.msign': {
        source: 'iana',
      },
      'application/vnd.multiad.creator': {
        source: 'iana',
      },
      'application/vnd.multiad.creator.cif': {
        source: 'iana',
      },
      'application/vnd.music-niff': {
        source: 'iana',
      },
      'application/vnd.musician': {
        source: 'iana',
        extensions: ['mus'],
      },
      'application/vnd.muvee.style': {
        source: 'iana',
        extensions: ['msty'],
      },
      'application/vnd.mynfc': {
        source: 'iana',
        extensions: ['taglet'],
      },
      'application/vnd.nacamar.ybrid+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.ncd.control': {
        source: 'iana',
      },
      'application/vnd.ncd.reference': {
        source: 'iana',
      },
      'application/vnd.nearst.inv+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nebumind.line': {
        source: 'iana',
      },
      'application/vnd.nervana': {
        source: 'iana',
      },
      'application/vnd.netfpx': {
        source: 'iana',
      },
      'application/vnd.neurolanguage.nlu': {
        source: 'iana',
        extensions: ['nlu'],
      },
      'application/vnd.nimn': {
        source: 'iana',
      },
      'application/vnd.nintendo.nitro.rom': {
        source: 'iana',
      },
      'application/vnd.nintendo.snes.rom': {
        source: 'iana',
      },
      'application/vnd.nitf': {
        source: 'iana',
        extensions: ['ntf', 'nitf'],
      },
      'application/vnd.noblenet-directory': {
        source: 'iana',
        extensions: ['nnd'],
      },
      'application/vnd.noblenet-sealer': {
        source: 'iana',
        extensions: ['nns'],
      },
      'application/vnd.noblenet-web': {
        source: 'iana',
        extensions: ['nnw'],
      },
      'application/vnd.nokia.catalogs': {
        source: 'iana',
      },
      'application/vnd.nokia.conml+wbxml': {
        source: 'iana',
      },
      'application/vnd.nokia.conml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.iptv.config+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.isds-radio-presets': {
        source: 'iana',
      },
      'application/vnd.nokia.landmark+wbxml': {
        source: 'iana',
      },
      'application/vnd.nokia.landmark+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.landmarkcollection+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.n-gage.ac+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['ac'],
      },
      'application/vnd.nokia.n-gage.data': {
        source: 'iana',
        extensions: ['ngdat'],
      },
      'application/vnd.nokia.n-gage.symbian.install': {
        source: 'iana',
        extensions: ['n-gage'],
      },
      'application/vnd.nokia.ncd': {
        source: 'iana',
      },
      'application/vnd.nokia.pcd+wbxml': {
        source: 'iana',
      },
      'application/vnd.nokia.pcd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.nokia.radio-preset': {
        source: 'iana',
        extensions: ['rpst'],
      },
      'application/vnd.nokia.radio-presets': {
        source: 'iana',
        extensions: ['rpss'],
      },
      'application/vnd.novadigm.edm': {
        source: 'iana',
        extensions: ['edm'],
      },
      'application/vnd.novadigm.edx': {
        source: 'iana',
        extensions: ['edx'],
      },
      'application/vnd.novadigm.ext': {
        source: 'iana',
        extensions: ['ext'],
      },
      'application/vnd.ntt-local.content-share': {
        source: 'iana',
      },
      'application/vnd.ntt-local.file-transfer': {
        source: 'iana',
      },
      'application/vnd.ntt-local.ogw_remote-access': {
        source: 'iana',
      },
      'application/vnd.ntt-local.sip-ta_remote': {
        source: 'iana',
      },
      'application/vnd.ntt-local.sip-ta_tcp_stream': {
        source: 'iana',
      },
      'application/vnd.oasis.opendocument.chart': {
        source: 'iana',
        extensions: ['odc'],
      },
      'application/vnd.oasis.opendocument.chart-template': {
        source: 'iana',
        extensions: ['otc'],
      },
      'application/vnd.oasis.opendocument.database': {
        source: 'iana',
        extensions: ['odb'],
      },
      'application/vnd.oasis.opendocument.formula': {
        source: 'iana',
        extensions: ['odf'],
      },
      'application/vnd.oasis.opendocument.formula-template': {
        source: 'iana',
        extensions: ['odft'],
      },
      'application/vnd.oasis.opendocument.graphics': {
        source: 'iana',
        compressible: false,
        extensions: ['odg'],
      },
      'application/vnd.oasis.opendocument.graphics-template': {
        source: 'iana',
        extensions: ['otg'],
      },
      'application/vnd.oasis.opendocument.image': {
        source: 'iana',
        extensions: ['odi'],
      },
      'application/vnd.oasis.opendocument.image-template': {
        source: 'iana',
        extensions: ['oti'],
      },
      'application/vnd.oasis.opendocument.presentation': {
        source: 'iana',
        compressible: false,
        extensions: ['odp'],
      },
      'application/vnd.oasis.opendocument.presentation-template': {
        source: 'iana',
        extensions: ['otp'],
      },
      'application/vnd.oasis.opendocument.spreadsheet': {
        source: 'iana',
        compressible: false,
        extensions: ['ods'],
      },
      'application/vnd.oasis.opendocument.spreadsheet-template': {
        source: 'iana',
        extensions: ['ots'],
      },
      'application/vnd.oasis.opendocument.text': {
        source: 'iana',
        compressible: false,
        extensions: ['odt'],
      },
      'application/vnd.oasis.opendocument.text-master': {
        source: 'iana',
        extensions: ['odm'],
      },
      'application/vnd.oasis.opendocument.text-template': {
        source: 'iana',
        extensions: ['ott'],
      },
      'application/vnd.oasis.opendocument.text-web': {
        source: 'iana',
        extensions: ['oth'],
      },
      'application/vnd.obn': {
        source: 'iana',
      },
      'application/vnd.ocf+cbor': {
        source: 'iana',
      },
      'application/vnd.oci.image.manifest.v1+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oftn.l10n+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.contentaccessdownload+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.contentaccessstreaming+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.cspg-hexbinary': {
        source: 'iana',
      },
      'application/vnd.oipf.dae.svg+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.dae.xhtml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.mippvcontrolmessage+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.pae.gem': {
        source: 'iana',
      },
      'application/vnd.oipf.spdiscovery+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.spdlist+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.ueprofile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oipf.userprofile+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.olpc-sugar': {
        source: 'iana',
        extensions: ['xo'],
      },
      'application/vnd.oma-scws-config': {
        source: 'iana',
      },
      'application/vnd.oma-scws-http-request': {
        source: 'iana',
      },
      'application/vnd.oma-scws-http-response': {
        source: 'iana',
      },
      'application/vnd.oma.bcast.associated-procedure-parameter+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.drm-trigger+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.imd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.ltkm': {
        source: 'iana',
      },
      'application/vnd.oma.bcast.notification+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.provisioningtrigger': {
        source: 'iana',
      },
      'application/vnd.oma.bcast.sgboot': {
        source: 'iana',
      },
      'application/vnd.oma.bcast.sgdd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.sgdu': {
        source: 'iana',
      },
      'application/vnd.oma.bcast.simple-symbol-container': {
        source: 'iana',
      },
      'application/vnd.oma.bcast.smartcard-trigger+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.sprov+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.bcast.stkm': {
        source: 'iana',
      },
      'application/vnd.oma.cab-address-book+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.cab-feature-handler+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.cab-pcc+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.cab-subs-invite+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.cab-user-prefs+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.dcd': {
        source: 'iana',
      },
      'application/vnd.oma.dcdc': {
        source: 'iana',
      },
      'application/vnd.oma.dd2+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['dd2'],
      },
      'application/vnd.oma.drm.risd+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.group-usage-list+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.lwm2m+cbor': {
        source: 'iana',
      },
      'application/vnd.oma.lwm2m+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.lwm2m+tlv': {
        source: 'iana',
      },
      'application/vnd.oma.pal+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.detailed-progress-report+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.final-report+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.groups+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.invocation-descriptor+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.poc.optimized-progress-report+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.push': {
        source: 'iana',
      },
      'application/vnd.oma.scidm.messages+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oma.xcap-directory+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.omads-email+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.omads-file+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.omads-folder+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.omaloc-supl-init': {
        source: 'iana',
      },
      'application/vnd.onepager': {
        source: 'iana',
      },
      'application/vnd.onepagertamp': {
        source: 'iana',
      },
      'application/vnd.onepagertamx': {
        source: 'iana',
      },
      'application/vnd.onepagertat': {
        source: 'iana',
      },
      'application/vnd.onepagertatp': {
        source: 'iana',
      },
      'application/vnd.onepagertatx': {
        source: 'iana',
      },
      'application/vnd.openblox.game+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['obgx'],
      },
      'application/vnd.openblox.game-binary': {
        source: 'iana',
      },
      'application/vnd.openeye.oeb': {
        source: 'iana',
      },
      'application/vnd.openofficeorg.extension': {
        source: 'apache',
        extensions: ['oxt'],
      },
      'application/vnd.openstreetmap.data+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['osm'],
      },
      'application/vnd.opentimestamps.ots': {
        source: 'iana',
      },
      'application/vnd.openxmlformats-officedocument.custom-properties+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.customxmlproperties+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.drawing+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.drawingml.chart+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.extended-properties+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.comments+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.presentation':
        {
          source: 'iana',
          compressible: false,
          extensions: ['pptx'],
        },
      'application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.presprops+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.slide': {
        source: 'iana',
        extensions: ['sldx'],
      },
      'application/vnd.openxmlformats-officedocument.presentationml.slide+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.slideshow':
        {
          source: 'iana',
          extensions: ['ppsx'],
        },
      'application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.tags+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.presentationml.template': {
        source: 'iana',
        extensions: ['potx'],
      },
      'application/vnd.openxmlformats-officedocument.presentationml.template.main+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
        source: 'iana',
        compressible: false,
        extensions: ['xlsx'],
      },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.template': {
        source: 'iana',
        extensions: ['xltx'],
      },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.theme+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.themeoverride+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-officedocument.vmldrawing': {
        source: 'iana',
      },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        {
          source: 'iana',
          compressible: false,
          extensions: ['docx'],
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.template':
        {
          source: 'iana',
          extensions: ['dotx'],
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-package.core-properties+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml':
        {
          source: 'iana',
          compressible: true,
        },
      'application/vnd.openxmlformats-package.relationships+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oracle.resource+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.orange.indata': {
        source: 'iana',
      },
      'application/vnd.osa.netdeploy': {
        source: 'iana',
      },
      'application/vnd.osgeo.mapguide.package': {
        source: 'iana',
        extensions: ['mgp'],
      },
      'application/vnd.osgi.bundle': {
        source: 'iana',
      },
      'application/vnd.osgi.dp': {
        source: 'iana',
        extensions: ['dp'],
      },
      'application/vnd.osgi.subsystem': {
        source: 'iana',
        extensions: ['esa'],
      },
      'application/vnd.otps.ct-kip+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.oxli.countgraph': {
        source: 'iana',
      },
      'application/vnd.pagerduty+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.palm': {
        source: 'iana',
        extensions: ['pdb', 'pqa', 'oprc'],
      },
      'application/vnd.panoply': {
        source: 'iana',
      },
      'application/vnd.paos.xml': {
        source: 'iana',
      },
      'application/vnd.patentdive': {
        source: 'iana',
      },
      'application/vnd.patientecommsdoc': {
        source: 'iana',
      },
      'application/vnd.pawaafile': {
        source: 'iana',
        extensions: ['paw'],
      },
      'application/vnd.pcos': {
        source: 'iana',
      },
      'application/vnd.pg.format': {
        source: 'iana',
        extensions: ['str'],
      },
      'application/vnd.pg.osasli': {
        source: 'iana',
        extensions: ['ei6'],
      },
      'application/vnd.piaccess.application-licence': {
        source: 'iana',
      },
      'application/vnd.picsel': {
        source: 'iana',
        extensions: ['efif'],
      },
      'application/vnd.pmi.widget': {
        source: 'iana',
        extensions: ['wg'],
      },
      'application/vnd.poc.group-advertisement+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.pocketlearn': {
        source: 'iana',
        extensions: ['plf'],
      },
      'application/vnd.powerbuilder6': {
        source: 'iana',
        extensions: ['pbd'],
      },
      'application/vnd.powerbuilder6-s': {
        source: 'iana',
      },
      'application/vnd.powerbuilder7': {
        source: 'iana',
      },
      'application/vnd.powerbuilder7-s': {
        source: 'iana',
      },
      'application/vnd.powerbuilder75': {
        source: 'iana',
      },
      'application/vnd.powerbuilder75-s': {
        source: 'iana',
      },
      'application/vnd.preminet': {
        source: 'iana',
      },
      'application/vnd.previewsystems.box': {
        source: 'iana',
        extensions: ['box'],
      },
      'application/vnd.proteus.magazine': {
        source: 'iana',
        extensions: ['mgz'],
      },
      'application/vnd.psfs': {
        source: 'iana',
      },
      'application/vnd.publishare-delta-tree': {
        source: 'iana',
        extensions: ['qps'],
      },
      'application/vnd.pvi.ptid1': {
        source: 'iana',
        extensions: ['ptid'],
      },
      'application/vnd.pwg-multiplexed': {
        source: 'iana',
      },
      'application/vnd.pwg-xhtml-print+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.qualcomm.brew-app-res': {
        source: 'iana',
      },
      'application/vnd.quarantainenet': {
        source: 'iana',
      },
      'application/vnd.quark.quarkxpress': {
        source: 'iana',
        extensions: ['qxd', 'qxt', 'qwd', 'qwt', 'qxl', 'qxb'],
      },
      'application/vnd.quobject-quoxdocument': {
        source: 'iana',
      },
      'application/vnd.radisys.moml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit-conf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit-conn+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit-dialog+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-audit-stream+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-conf+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-base+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-fax-detect+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-fax-sendrecv+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-group+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-speech+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.radisys.msml-dialog-transform+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.rainstor.data': {
        source: 'iana',
      },
      'application/vnd.rapid': {
        source: 'iana',
      },
      'application/vnd.rar': {
        source: 'iana',
        extensions: ['rar'],
      },
      'application/vnd.realvnc.bed': {
        source: 'iana',
        extensions: ['bed'],
      },
      'application/vnd.recordare.musicxml': {
        source: 'iana',
        extensions: ['mxl'],
      },
      'application/vnd.recordare.musicxml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['musicxml'],
      },
      'application/vnd.renlearn.rlprint': {
        source: 'iana',
      },
      'application/vnd.resilient.logic': {
        source: 'iana',
      },
      'application/vnd.restful+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.rig.cryptonote': {
        source: 'iana',
        extensions: ['cryptonote'],
      },
      'application/vnd.rim.cod': {
        source: 'apache',
        extensions: ['cod'],
      },
      'application/vnd.rn-realmedia': {
        source: 'apache',
        extensions: ['rm'],
      },
      'application/vnd.rn-realmedia-vbr': {
        source: 'apache',
        extensions: ['rmvb'],
      },
      'application/vnd.route66.link66+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['link66'],
      },
      'application/vnd.rs-274x': {
        source: 'iana',
      },
      'application/vnd.ruckus.download': {
        source: 'iana',
      },
      'application/vnd.s3sms': {
        source: 'iana',
      },
      'application/vnd.sailingtracker.track': {
        source: 'iana',
        extensions: ['st'],
      },
      'application/vnd.sar': {
        source: 'iana',
      },
      'application/vnd.sbm.cid': {
        source: 'iana',
      },
      'application/vnd.sbm.mid2': {
        source: 'iana',
      },
      'application/vnd.scribus': {
        source: 'iana',
      },
      'application/vnd.sealed.3df': {
        source: 'iana',
      },
      'application/vnd.sealed.csf': {
        source: 'iana',
      },
      'application/vnd.sealed.doc': {
        source: 'iana',
      },
      'application/vnd.sealed.eml': {
        source: 'iana',
      },
      'application/vnd.sealed.mht': {
        source: 'iana',
      },
      'application/vnd.sealed.net': {
        source: 'iana',
      },
      'application/vnd.sealed.ppt': {
        source: 'iana',
      },
      'application/vnd.sealed.tiff': {
        source: 'iana',
      },
      'application/vnd.sealed.xls': {
        source: 'iana',
      },
      'application/vnd.sealedmedia.softseal.html': {
        source: 'iana',
      },
      'application/vnd.sealedmedia.softseal.pdf': {
        source: 'iana',
      },
      'application/vnd.seemail': {
        source: 'iana',
        extensions: ['see'],
      },
      'application/vnd.seis+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.sema': {
        source: 'iana',
        extensions: ['sema'],
      },
      'application/vnd.semd': {
        source: 'iana',
        extensions: ['semd'],
      },
      'application/vnd.semf': {
        source: 'iana',
        extensions: ['semf'],
      },
      'application/vnd.shade-save-file': {
        source: 'iana',
      },
      'application/vnd.shana.informed.formdata': {
        source: 'iana',
        extensions: ['ifm'],
      },
      'application/vnd.shana.informed.formtemplate': {
        source: 'iana',
        extensions: ['itp'],
      },
      'application/vnd.shana.informed.interchange': {
        source: 'iana',
        extensions: ['iif'],
      },
      'application/vnd.shana.informed.package': {
        source: 'iana',
        extensions: ['ipk'],
      },
      'application/vnd.shootproof+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.shopkick+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.shp': {
        source: 'iana',
      },
      'application/vnd.shx': {
        source: 'iana',
      },
      'application/vnd.sigrok.session': {
        source: 'iana',
      },
      'application/vnd.simtech-mindmapper': {
        source: 'iana',
        extensions: ['twd', 'twds'],
      },
      'application/vnd.siren+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.smaf': {
        source: 'iana',
        extensions: ['mmf'],
      },
      'application/vnd.smart.notebook': {
        source: 'iana',
      },
      'application/vnd.smart.teacher': {
        source: 'iana',
        extensions: ['teacher'],
      },
      'application/vnd.snesdev-page-table': {
        source: 'iana',
      },
      'application/vnd.software602.filler.form+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['fo'],
      },
      'application/vnd.software602.filler.form-xml-zip': {
        source: 'iana',
      },
      'application/vnd.solent.sdkm+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['sdkm', 'sdkd'],
      },
      'application/vnd.spotfire.dxp': {
        source: 'iana',
        extensions: ['dxp'],
      },
      'application/vnd.spotfire.sfs': {
        source: 'iana',
        extensions: ['sfs'],
      },
      'application/vnd.sqlite3': {
        source: 'iana',
      },
      'application/vnd.sss-cod': {
        source: 'iana',
      },
      'application/vnd.sss-dtf': {
        source: 'iana',
      },
      'application/vnd.sss-ntf': {
        source: 'iana',
      },
      'application/vnd.stardivision.calc': {
        source: 'apache',
        extensions: ['sdc'],
      },
      'application/vnd.stardivision.draw': {
        source: 'apache',
        extensions: ['sda'],
      },
      'application/vnd.stardivision.impress': {
        source: 'apache',
        extensions: ['sdd'],
      },
      'application/vnd.stardivision.math': {
        source: 'apache',
        extensions: ['smf'],
      },
      'application/vnd.stardivision.writer': {
        source: 'apache',
        extensions: ['sdw', 'vor'],
      },
      'application/vnd.stardivision.writer-global': {
        source: 'apache',
        extensions: ['sgl'],
      },
      'application/vnd.stepmania.package': {
        source: 'iana',
        extensions: ['smzip'],
      },
      'application/vnd.stepmania.stepchart': {
        source: 'iana',
        extensions: ['sm'],
      },
      'application/vnd.street-stream': {
        source: 'iana',
      },
      'application/vnd.sun.wadl+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wadl'],
      },
      'application/vnd.sun.xml.calc': {
        source: 'apache',
        extensions: ['sxc'],
      },
      'application/vnd.sun.xml.calc.template': {
        source: 'apache',
        extensions: ['stc'],
      },
      'application/vnd.sun.xml.draw': {
        source: 'apache',
        extensions: ['sxd'],
      },
      'application/vnd.sun.xml.draw.template': {
        source: 'apache',
        extensions: ['std'],
      },
      'application/vnd.sun.xml.impress': {
        source: 'apache',
        extensions: ['sxi'],
      },
      'application/vnd.sun.xml.impress.template': {
        source: 'apache',
        extensions: ['sti'],
      },
      'application/vnd.sun.xml.math': {
        source: 'apache',
        extensions: ['sxm'],
      },
      'application/vnd.sun.xml.writer': {
        source: 'apache',
        extensions: ['sxw'],
      },
      'application/vnd.sun.xml.writer.global': {
        source: 'apache',
        extensions: ['sxg'],
      },
      'application/vnd.sun.xml.writer.template': {
        source: 'apache',
        extensions: ['stw'],
      },
      'application/vnd.sus-calendar': {
        source: 'iana',
        extensions: ['sus', 'susp'],
      },
      'application/vnd.svd': {
        source: 'iana',
        extensions: ['svd'],
      },
      'application/vnd.swiftview-ics': {
        source: 'iana',
      },
      'application/vnd.sycle+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.syft+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.symbian.install': {
        source: 'apache',
        extensions: ['sis', 'sisx'],
      },
      'application/vnd.syncml+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['xsm'],
      },
      'application/vnd.syncml.dm+wbxml': {
        source: 'iana',
        charset: 'UTF-8',
        extensions: ['bdm'],
      },
      'application/vnd.syncml.dm+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['xdm'],
      },
      'application/vnd.syncml.dm.notification': {
        source: 'iana',
      },
      'application/vnd.syncml.dmddf+wbxml': {
        source: 'iana',
      },
      'application/vnd.syncml.dmddf+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['ddf'],
      },
      'application/vnd.syncml.dmtnds+wbxml': {
        source: 'iana',
      },
      'application/vnd.syncml.dmtnds+xml': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
      },
      'application/vnd.syncml.ds.notification': {
        source: 'iana',
      },
      'application/vnd.tableschema+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.tao.intent-module-archive': {
        source: 'iana',
        extensions: ['tao'],
      },
      'application/vnd.tcpdump.pcap': {
        source: 'iana',
        extensions: ['pcap', 'cap', 'dmp'],
      },
      'application/vnd.think-cell.ppttc+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.tmd.mediaflex.api+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.tml': {
        source: 'iana',
      },
      'application/vnd.tmobile-livetv': {
        source: 'iana',
        extensions: ['tmo'],
      },
      'application/vnd.tri.onesource': {
        source: 'iana',
      },
      'application/vnd.trid.tpt': {
        source: 'iana',
        extensions: ['tpt'],
      },
      'application/vnd.triscape.mxs': {
        source: 'iana',
        extensions: ['mxs'],
      },
      'application/vnd.trueapp': {
        source: 'iana',
        extensions: ['tra'],
      },
      'application/vnd.truedoc': {
        source: 'iana',
      },
      'application/vnd.ubisoft.webplayer': {
        source: 'iana',
      },
      'application/vnd.ufdl': {
        source: 'iana',
        extensions: ['ufd', 'ufdl'],
      },
      'application/vnd.uiq.theme': {
        source: 'iana',
        extensions: ['utz'],
      },
      'application/vnd.umajin': {
        source: 'iana',
        extensions: ['umj'],
      },
      'application/vnd.unity': {
        source: 'iana',
        extensions: ['unityweb'],
      },
      'application/vnd.uoml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['uoml'],
      },
      'application/vnd.uplanet.alert': {
        source: 'iana',
      },
      'application/vnd.uplanet.alert-wbxml': {
        source: 'iana',
      },
      'application/vnd.uplanet.bearer-choice': {
        source: 'iana',
      },
      'application/vnd.uplanet.bearer-choice-wbxml': {
        source: 'iana',
      },
      'application/vnd.uplanet.cacheop': {
        source: 'iana',
      },
      'application/vnd.uplanet.cacheop-wbxml': {
        source: 'iana',
      },
      'application/vnd.uplanet.channel': {
        source: 'iana',
      },
      'application/vnd.uplanet.channel-wbxml': {
        source: 'iana',
      },
      'application/vnd.uplanet.list': {
        source: 'iana',
      },
      'application/vnd.uplanet.list-wbxml': {
        source: 'iana',
      },
      'application/vnd.uplanet.listcmd': {
        source: 'iana',
      },
      'application/vnd.uplanet.listcmd-wbxml': {
        source: 'iana',
      },
      'application/vnd.uplanet.signal': {
        source: 'iana',
      },
      'application/vnd.uri-map': {
        source: 'iana',
      },
      'application/vnd.valve.source.material': {
        source: 'iana',
      },
      'application/vnd.vcx': {
        source: 'iana',
        extensions: ['vcx'],
      },
      'application/vnd.vd-study': {
        source: 'iana',
      },
      'application/vnd.vectorworks': {
        source: 'iana',
      },
      'application/vnd.vel+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.verimatrix.vcas': {
        source: 'iana',
      },
      'application/vnd.veritone.aion+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.veryant.thin': {
        source: 'iana',
      },
      'application/vnd.ves.encrypted': {
        source: 'iana',
      },
      'application/vnd.vidsoft.vidconference': {
        source: 'iana',
      },
      'application/vnd.visio': {
        source: 'iana',
        extensions: ['vsd', 'vst', 'vss', 'vsw'],
      },
      'application/vnd.visionary': {
        source: 'iana',
        extensions: ['vis'],
      },
      'application/vnd.vividence.scriptfile': {
        source: 'iana',
      },
      'application/vnd.vsf': {
        source: 'iana',
        extensions: ['vsf'],
      },
      'application/vnd.wap.sic': {
        source: 'iana',
      },
      'application/vnd.wap.slc': {
        source: 'iana',
      },
      'application/vnd.wap.wbxml': {
        source: 'iana',
        charset: 'UTF-8',
        extensions: ['wbxml'],
      },
      'application/vnd.wap.wmlc': {
        source: 'iana',
        extensions: ['wmlc'],
      },
      'application/vnd.wap.wmlscriptc': {
        source: 'iana',
        extensions: ['wmlsc'],
      },
      'application/vnd.webturbo': {
        source: 'iana',
        extensions: ['wtb'],
      },
      'application/vnd.wfa.dpp': {
        source: 'iana',
      },
      'application/vnd.wfa.p2p': {
        source: 'iana',
      },
      'application/vnd.wfa.wsc': {
        source: 'iana',
      },
      'application/vnd.windows.devicepairing': {
        source: 'iana',
      },
      'application/vnd.wmc': {
        source: 'iana',
      },
      'application/vnd.wmf.bootstrap': {
        source: 'iana',
      },
      'application/vnd.wolfram.mathematica': {
        source: 'iana',
      },
      'application/vnd.wolfram.mathematica.package': {
        source: 'iana',
      },
      'application/vnd.wolfram.player': {
        source: 'iana',
        extensions: ['nbp'],
      },
      'application/vnd.wordperfect': {
        source: 'iana',
        extensions: ['wpd'],
      },
      'application/vnd.wqd': {
        source: 'iana',
        extensions: ['wqd'],
      },
      'application/vnd.wrq-hp3000-labelled': {
        source: 'iana',
      },
      'application/vnd.wt.stf': {
        source: 'iana',
        extensions: ['stf'],
      },
      'application/vnd.wv.csp+wbxml': {
        source: 'iana',
      },
      'application/vnd.wv.csp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.wv.ssp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.xacml+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.xara': {
        source: 'iana',
        extensions: ['xar'],
      },
      'application/vnd.xfdl': {
        source: 'iana',
        extensions: ['xfdl'],
      },
      'application/vnd.xfdl.webform': {
        source: 'iana',
      },
      'application/vnd.xmi+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/vnd.xmpie.cpkg': {
        source: 'iana',
      },
      'application/vnd.xmpie.dpkg': {
        source: 'iana',
      },
      'application/vnd.xmpie.plan': {
        source: 'iana',
      },
      'application/vnd.xmpie.ppkg': {
        source: 'iana',
      },
      'application/vnd.xmpie.xlim': {
        source: 'iana',
      },
      'application/vnd.yamaha.hv-dic': {
        source: 'iana',
        extensions: ['hvd'],
      },
      'application/vnd.yamaha.hv-script': {
        source: 'iana',
        extensions: ['hvs'],
      },
      'application/vnd.yamaha.hv-voice': {
        source: 'iana',
        extensions: ['hvp'],
      },
      'application/vnd.yamaha.openscoreformat': {
        source: 'iana',
        extensions: ['osf'],
      },
      'application/vnd.yamaha.openscoreformat.osfpvg+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['osfpvg'],
      },
      'application/vnd.yamaha.remote-setup': {
        source: 'iana',
      },
      'application/vnd.yamaha.smaf-audio': {
        source: 'iana',
        extensions: ['saf'],
      },
      'application/vnd.yamaha.smaf-phrase': {
        source: 'iana',
        extensions: ['spf'],
      },
      'application/vnd.yamaha.through-ngn': {
        source: 'iana',
      },
      'application/vnd.yamaha.tunnel-udpencap': {
        source: 'iana',
      },
      'application/vnd.yaoweme': {
        source: 'iana',
      },
      'application/vnd.yellowriver-custom-menu': {
        source: 'iana',
        extensions: ['cmp'],
      },
      'application/vnd.youtube.yt': {
        source: 'iana',
      },
      'application/vnd.zul': {
        source: 'iana',
        extensions: ['zir', 'zirz'],
      },
      'application/vnd.zzazz.deck+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['zaz'],
      },
      'application/voicexml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['vxml'],
      },
      'application/voucher-cms+json': {
        source: 'iana',
        compressible: true,
      },
      'application/vq-rtcpxr': {
        source: 'iana',
      },
      'application/wasm': {
        source: 'iana',
        compressible: true,
        extensions: ['wasm'],
      },
      'application/watcherinfo+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wif'],
      },
      'application/webpush-options+json': {
        source: 'iana',
        compressible: true,
      },
      'application/whoispp-query': {
        source: 'iana',
      },
      'application/whoispp-response': {
        source: 'iana',
      },
      'application/widget': {
        source: 'iana',
        extensions: ['wgt'],
      },
      'application/winhlp': {
        source: 'apache',
        extensions: ['hlp'],
      },
      'application/wita': {
        source: 'iana',
      },
      'application/wordperfect5.1': {
        source: 'iana',
      },
      'application/wsdl+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wsdl'],
      },
      'application/wspolicy+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['wspolicy'],
      },
      'application/x-7z-compressed': {
        source: 'apache',
        compressible: false,
        extensions: ['7z'],
      },
      'application/x-abiword': {
        source: 'apache',
        extensions: ['abw'],
      },
      'application/x-ace-compressed': {
        source: 'apache',
        extensions: ['ace'],
      },
      'application/x-amf': {
        source: 'apache',
      },
      'application/x-apple-diskimage': {
        source: 'apache',
        extensions: ['dmg'],
      },
      'application/x-arj': {
        compressible: false,
        extensions: ['arj'],
      },
      'application/x-authorware-bin': {
        source: 'apache',
        extensions: ['aab', 'x32', 'u32', 'vox'],
      },
      'application/x-authorware-map': {
        source: 'apache',
        extensions: ['aam'],
      },
      'application/x-authorware-seg': {
        source: 'apache',
        extensions: ['aas'],
      },
      'application/x-bcpio': {
        source: 'apache',
        extensions: ['bcpio'],
      },
      'application/x-bdoc': {
        compressible: false,
        extensions: ['bdoc'],
      },
      'application/x-bittorrent': {
        source: 'apache',
        extensions: ['torrent'],
      },
      'application/x-blorb': {
        source: 'apache',
        extensions: ['blb', 'blorb'],
      },
      'application/x-bzip': {
        source: 'apache',
        compressible: false,
        extensions: ['bz'],
      },
      'application/x-bzip2': {
        source: 'apache',
        compressible: false,
        extensions: ['bz2', 'boz'],
      },
      'application/x-cbr': {
        source: 'apache',
        extensions: ['cbr', 'cba', 'cbt', 'cbz', 'cb7'],
      },
      'application/x-cdlink': {
        source: 'apache',
        extensions: ['vcd'],
      },
      'application/x-cfs-compressed': {
        source: 'apache',
        extensions: ['cfs'],
      },
      'application/x-chat': {
        source: 'apache',
        extensions: ['chat'],
      },
      'application/x-chess-pgn': {
        source: 'apache',
        extensions: ['pgn'],
      },
      'application/x-chrome-extension': {
        extensions: ['crx'],
      },
      'application/x-cocoa': {
        source: 'nginx',
        extensions: ['cco'],
      },
      'application/x-compress': {
        source: 'apache',
      },
      'application/x-conference': {
        source: 'apache',
        extensions: ['nsc'],
      },
      'application/x-cpio': {
        source: 'apache',
        extensions: ['cpio'],
      },
      'application/x-csh': {
        source: 'apache',
        extensions: ['csh'],
      },
      'application/x-deb': {
        compressible: false,
      },
      'application/x-debian-package': {
        source: 'apache',
        extensions: ['deb', 'udeb'],
      },
      'application/x-dgc-compressed': {
        source: 'apache',
        extensions: ['dgc'],
      },
      'application/x-director': {
        source: 'apache',
        extensions: [
          'dir',
          'dcr',
          'dxr',
          'cst',
          'cct',
          'cxt',
          'w3d',
          'fgd',
          'swa',
        ],
      },
      'application/x-doom': {
        source: 'apache',
        extensions: ['wad'],
      },
      'application/x-dtbncx+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['ncx'],
      },
      'application/x-dtbook+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['dtb'],
      },
      'application/x-dtbresource+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['res'],
      },
      'application/x-dvi': {
        source: 'apache',
        compressible: false,
        extensions: ['dvi'],
      },
      'application/x-envoy': {
        source: 'apache',
        extensions: ['evy'],
      },
      'application/x-eva': {
        source: 'apache',
        extensions: ['eva'],
      },
      'application/x-font-bdf': {
        source: 'apache',
        extensions: ['bdf'],
      },
      'application/x-font-dos': {
        source: 'apache',
      },
      'application/x-font-framemaker': {
        source: 'apache',
      },
      'application/x-font-ghostscript': {
        source: 'apache',
        extensions: ['gsf'],
      },
      'application/x-font-libgrx': {
        source: 'apache',
      },
      'application/x-font-linux-psf': {
        source: 'apache',
        extensions: ['psf'],
      },
      'application/x-font-pcf': {
        source: 'apache',
        extensions: ['pcf'],
      },
      'application/x-font-snf': {
        source: 'apache',
        extensions: ['snf'],
      },
      'application/x-font-speedo': {
        source: 'apache',
      },
      'application/x-font-sunos-news': {
        source: 'apache',
      },
      'application/x-font-type1': {
        source: 'apache',
        extensions: ['pfa', 'pfb', 'pfm', 'afm'],
      },
      'application/x-font-vfont': {
        source: 'apache',
      },
      'application/x-freearc': {
        source: 'apache',
        extensions: ['arc'],
      },
      'application/x-futuresplash': {
        source: 'apache',
        extensions: ['spl'],
      },
      'application/x-gca-compressed': {
        source: 'apache',
        extensions: ['gca'],
      },
      'application/x-glulx': {
        source: 'apache',
        extensions: ['ulx'],
      },
      'application/x-gnumeric': {
        source: 'apache',
        extensions: ['gnumeric'],
      },
      'application/x-gramps-xml': {
        source: 'apache',
        extensions: ['gramps'],
      },
      'application/x-gtar': {
        source: 'apache',
        extensions: ['gtar'],
      },
      'application/x-gzip': {
        source: 'apache',
      },
      'application/x-hdf': {
        source: 'apache',
        extensions: ['hdf'],
      },
      'application/x-httpd-php': {
        compressible: true,
        extensions: ['php'],
      },
      'application/x-install-instructions': {
        source: 'apache',
        extensions: ['install'],
      },
      'application/x-iso9660-image': {
        source: 'apache',
        extensions: ['iso'],
      },
      'application/x-iwork-keynote-sffkey': {
        extensions: ['key'],
      },
      'application/x-iwork-numbers-sffnumbers': {
        extensions: ['numbers'],
      },
      'application/x-iwork-pages-sffpages': {
        extensions: ['pages'],
      },
      'application/x-java-archive-diff': {
        source: 'nginx',
        extensions: ['jardiff'],
      },
      'application/x-java-jnlp-file': {
        source: 'apache',
        compressible: false,
        extensions: ['jnlp'],
      },
      'application/x-javascript': {
        compressible: true,
      },
      'application/x-keepass2': {
        extensions: ['kdbx'],
      },
      'application/x-latex': {
        source: 'apache',
        compressible: false,
        extensions: ['latex'],
      },
      'application/x-lua-bytecode': {
        extensions: ['luac'],
      },
      'application/x-lzh-compressed': {
        source: 'apache',
        extensions: ['lzh', 'lha'],
      },
      'application/x-makeself': {
        source: 'nginx',
        extensions: ['run'],
      },
      'application/x-mie': {
        source: 'apache',
        extensions: ['mie'],
      },
      'application/x-mobipocket-ebook': {
        source: 'apache',
        extensions: ['prc', 'mobi'],
      },
      'application/x-mpegurl': {
        compressible: false,
      },
      'application/x-ms-application': {
        source: 'apache',
        extensions: ['application'],
      },
      'application/x-ms-shortcut': {
        source: 'apache',
        extensions: ['lnk'],
      },
      'application/x-ms-wmd': {
        source: 'apache',
        extensions: ['wmd'],
      },
      'application/x-ms-wmz': {
        source: 'apache',
        extensions: ['wmz'],
      },
      'application/x-ms-xbap': {
        source: 'apache',
        extensions: ['xbap'],
      },
      'application/x-msaccess': {
        source: 'apache',
        extensions: ['mdb'],
      },
      'application/x-msbinder': {
        source: 'apache',
        extensions: ['obd'],
      },
      'application/x-mscardfile': {
        source: 'apache',
        extensions: ['crd'],
      },
      'application/x-msclip': {
        source: 'apache',
        extensions: ['clp'],
      },
      'application/x-msdos-program': {
        extensions: ['exe'],
      },
      'application/x-msdownload': {
        source: 'apache',
        extensions: ['exe', 'dll', 'com', 'bat', 'msi'],
      },
      'application/x-msmediaview': {
        source: 'apache',
        extensions: ['mvb', 'm13', 'm14'],
      },
      'application/x-msmetafile': {
        source: 'apache',
        extensions: ['wmf', 'wmz', 'emf', 'emz'],
      },
      'application/x-msmoney': {
        source: 'apache',
        extensions: ['mny'],
      },
      'application/x-mspublisher': {
        source: 'apache',
        extensions: ['pub'],
      },
      'application/x-msschedule': {
        source: 'apache',
        extensions: ['scd'],
      },
      'application/x-msterminal': {
        source: 'apache',
        extensions: ['trm'],
      },
      'application/x-mswrite': {
        source: 'apache',
        extensions: ['wri'],
      },
      'application/x-netcdf': {
        source: 'apache',
        extensions: ['nc', 'cdf'],
      },
      'application/x-ns-proxy-autoconfig': {
        compressible: true,
        extensions: ['pac'],
      },
      'application/x-nzb': {
        source: 'apache',
        extensions: ['nzb'],
      },
      'application/x-perl': {
        source: 'nginx',
        extensions: ['pl', 'pm'],
      },
      'application/x-pilot': {
        source: 'nginx',
        extensions: ['prc', 'pdb'],
      },
      'application/x-pkcs12': {
        source: 'apache',
        compressible: false,
        extensions: ['p12', 'pfx'],
      },
      'application/x-pkcs7-certificates': {
        source: 'apache',
        extensions: ['p7b', 'spc'],
      },
      'application/x-pkcs7-certreqresp': {
        source: 'apache',
        extensions: ['p7r'],
      },
      'application/x-pki-message': {
        source: 'iana',
      },
      'application/x-rar-compressed': {
        source: 'apache',
        compressible: false,
        extensions: ['rar'],
      },
      'application/x-redhat-package-manager': {
        source: 'nginx',
        extensions: ['rpm'],
      },
      'application/x-research-info-systems': {
        source: 'apache',
        extensions: ['ris'],
      },
      'application/x-sea': {
        source: 'nginx',
        extensions: ['sea'],
      },
      'application/x-sh': {
        source: 'apache',
        compressible: true,
        extensions: ['sh'],
      },
      'application/x-shar': {
        source: 'apache',
        extensions: ['shar'],
      },
      'application/x-shockwave-flash': {
        source: 'apache',
        compressible: false,
        extensions: ['swf'],
      },
      'application/x-silverlight-app': {
        source: 'apache',
        extensions: ['xap'],
      },
      'application/x-sql': {
        source: 'apache',
        extensions: ['sql'],
      },
      'application/x-stuffit': {
        source: 'apache',
        compressible: false,
        extensions: ['sit'],
      },
      'application/x-stuffitx': {
        source: 'apache',
        extensions: ['sitx'],
      },
      'application/x-subrip': {
        source: 'apache',
        extensions: ['srt'],
      },
      'application/x-sv4cpio': {
        source: 'apache',
        extensions: ['sv4cpio'],
      },
      'application/x-sv4crc': {
        source: 'apache',
        extensions: ['sv4crc'],
      },
      'application/x-t3vm-image': {
        source: 'apache',
        extensions: ['t3'],
      },
      'application/x-tads': {
        source: 'apache',
        extensions: ['gam'],
      },
      'application/x-tar': {
        source: 'apache',
        compressible: true,
        extensions: ['tar'],
      },
      'application/x-tcl': {
        source: 'apache',
        extensions: ['tcl', 'tk'],
      },
      'application/x-tex': {
        source: 'apache',
        extensions: ['tex'],
      },
      'application/x-tex-tfm': {
        source: 'apache',
        extensions: ['tfm'],
      },
      'application/x-texinfo': {
        source: 'apache',
        extensions: ['texinfo', 'texi'],
      },
      'application/x-tgif': {
        source: 'apache',
        extensions: ['obj'],
      },
      'application/x-ustar': {
        source: 'apache',
        extensions: ['ustar'],
      },
      'application/x-virtualbox-hdd': {
        compressible: true,
        extensions: ['hdd'],
      },
      'application/x-virtualbox-ova': {
        compressible: true,
        extensions: ['ova'],
      },
      'application/x-virtualbox-ovf': {
        compressible: true,
        extensions: ['ovf'],
      },
      'application/x-virtualbox-vbox': {
        compressible: true,
        extensions: ['vbox'],
      },
      'application/x-virtualbox-vbox-extpack': {
        compressible: false,
        extensions: ['vbox-extpack'],
      },
      'application/x-virtualbox-vdi': {
        compressible: true,
        extensions: ['vdi'],
      },
      'application/x-virtualbox-vhd': {
        compressible: true,
        extensions: ['vhd'],
      },
      'application/x-virtualbox-vmdk': {
        compressible: true,
        extensions: ['vmdk'],
      },
      'application/x-wais-source': {
        source: 'apache',
        extensions: ['src'],
      },
      'application/x-web-app-manifest+json': {
        compressible: true,
        extensions: ['webapp'],
      },
      'application/x-www-form-urlencoded': {
        source: 'iana',
        compressible: true,
      },
      'application/x-x509-ca-cert': {
        source: 'iana',
        extensions: ['der', 'crt', 'pem'],
      },
      'application/x-x509-ca-ra-cert': {
        source: 'iana',
      },
      'application/x-x509-next-ca-cert': {
        source: 'iana',
      },
      'application/x-xfig': {
        source: 'apache',
        extensions: ['fig'],
      },
      'application/x-xliff+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['xlf'],
      },
      'application/x-xpinstall': {
        source: 'apache',
        compressible: false,
        extensions: ['xpi'],
      },
      'application/x-xz': {
        source: 'apache',
        extensions: ['xz'],
      },
      'application/x-zmachine': {
        source: 'apache',
        extensions: ['z1', 'z2', 'z3', 'z4', 'z5', 'z6', 'z7', 'z8'],
      },
      'application/x400-bp': {
        source: 'iana',
      },
      'application/xacml+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xaml+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['xaml'],
      },
      'application/xcap-att+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xav'],
      },
      'application/xcap-caps+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xca'],
      },
      'application/xcap-diff+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xdf'],
      },
      'application/xcap-el+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xel'],
      },
      'application/xcap-error+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xcap-ns+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xns'],
      },
      'application/xcon-conference-info+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xcon-conference-info-diff+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xenc+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xenc'],
      },
      'application/xhtml+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xhtml', 'xht'],
      },
      'application/xhtml-voice+xml': {
        source: 'apache',
        compressible: true,
      },
      'application/xliff+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xlf'],
      },
      'application/xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xml', 'xsl', 'xsd', 'rng'],
      },
      'application/xml-dtd': {
        source: 'iana',
        compressible: true,
        extensions: ['dtd'],
      },
      'application/xml-external-parsed-entity': {
        source: 'iana',
      },
      'application/xml-patch+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xmpp+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/xop+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xop'],
      },
      'application/xproc+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['xpl'],
      },
      'application/xslt+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xsl', 'xslt'],
      },
      'application/xspf+xml': {
        source: 'apache',
        compressible: true,
        extensions: ['xspf'],
      },
      'application/xv+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['mxml', 'xhvml', 'xvml', 'xvm'],
      },
      'application/yang': {
        source: 'iana',
        extensions: ['yang'],
      },
      'application/yang-data+json': {
        source: 'iana',
        compressible: true,
      },
      'application/yang-data+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/yang-patch+json': {
        source: 'iana',
        compressible: true,
      },
      'application/yang-patch+xml': {
        source: 'iana',
        compressible: true,
      },
      'application/yin+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['yin'],
      },
      'application/zip': {
        source: 'iana',
        compressible: false,
        extensions: ['zip'],
      },
      'application/zlib': {
        source: 'iana',
      },
      'application/zstd': {
        source: 'iana',
      },
      'audio/1d-interleaved-parityfec': {
        source: 'iana',
      },
      'audio/32kadpcm': {
        source: 'iana',
      },
      'audio/3gpp': {
        source: 'iana',
        compressible: false,
        extensions: ['3gpp'],
      },
      'audio/3gpp2': {
        source: 'iana',
      },
      'audio/aac': {
        source: 'iana',
      },
      'audio/ac3': {
        source: 'iana',
      },
      'audio/adpcm': {
        source: 'apache',
        extensions: ['adp'],
      },
      'audio/amr': {
        source: 'iana',
        extensions: ['amr'],
      },
      'audio/amr-wb': {
        source: 'iana',
      },
      'audio/amr-wb+': {
        source: 'iana',
      },
      'audio/aptx': {
        source: 'iana',
      },
      'audio/asc': {
        source: 'iana',
      },
      'audio/atrac-advanced-lossless': {
        source: 'iana',
      },
      'audio/atrac-x': {
        source: 'iana',
      },
      'audio/atrac3': {
        source: 'iana',
      },
      'audio/basic': {
        source: 'iana',
        compressible: false,
        extensions: ['au', 'snd'],
      },
      'audio/bv16': {
        source: 'iana',
      },
      'audio/bv32': {
        source: 'iana',
      },
      'audio/clearmode': {
        source: 'iana',
      },
      'audio/cn': {
        source: 'iana',
      },
      'audio/dat12': {
        source: 'iana',
      },
      'audio/dls': {
        source: 'iana',
      },
      'audio/dsr-es201108': {
        source: 'iana',
      },
      'audio/dsr-es202050': {
        source: 'iana',
      },
      'audio/dsr-es202211': {
        source: 'iana',
      },
      'audio/dsr-es202212': {
        source: 'iana',
      },
      'audio/dv': {
        source: 'iana',
      },
      'audio/dvi4': {
        source: 'iana',
      },
      'audio/eac3': {
        source: 'iana',
      },
      'audio/encaprtp': {
        source: 'iana',
      },
      'audio/evrc': {
        source: 'iana',
      },
      'audio/evrc-qcp': {
        source: 'iana',
      },
      'audio/evrc0': {
        source: 'iana',
      },
      'audio/evrc1': {
        source: 'iana',
      },
      'audio/evrcb': {
        source: 'iana',
      },
      'audio/evrcb0': {
        source: 'iana',
      },
      'audio/evrcb1': {
        source: 'iana',
      },
      'audio/evrcnw': {
        source: 'iana',
      },
      'audio/evrcnw0': {
        source: 'iana',
      },
      'audio/evrcnw1': {
        source: 'iana',
      },
      'audio/evrcwb': {
        source: 'iana',
      },
      'audio/evrcwb0': {
        source: 'iana',
      },
      'audio/evrcwb1': {
        source: 'iana',
      },
      'audio/evs': {
        source: 'iana',
      },
      'audio/flexfec': {
        source: 'iana',
      },
      'audio/fwdred': {
        source: 'iana',
      },
      'audio/g711-0': {
        source: 'iana',
      },
      'audio/g719': {
        source: 'iana',
      },
      'audio/g722': {
        source: 'iana',
      },
      'audio/g7221': {
        source: 'iana',
      },
      'audio/g723': {
        source: 'iana',
      },
      'audio/g726-16': {
        source: 'iana',
      },
      'audio/g726-24': {
        source: 'iana',
      },
      'audio/g726-32': {
        source: 'iana',
      },
      'audio/g726-40': {
        source: 'iana',
      },
      'audio/g728': {
        source: 'iana',
      },
      'audio/g729': {
        source: 'iana',
      },
      'audio/g7291': {
        source: 'iana',
      },
      'audio/g729d': {
        source: 'iana',
      },
      'audio/g729e': {
        source: 'iana',
      },
      'audio/gsm': {
        source: 'iana',
      },
      'audio/gsm-efr': {
        source: 'iana',
      },
      'audio/gsm-hr-08': {
        source: 'iana',
      },
      'audio/ilbc': {
        source: 'iana',
      },
      'audio/ip-mr_v2.5': {
        source: 'iana',
      },
      'audio/isac': {
        source: 'apache',
      },
      'audio/l16': {
        source: 'iana',
      },
      'audio/l20': {
        source: 'iana',
      },
      'audio/l24': {
        source: 'iana',
        compressible: false,
      },
      'audio/l8': {
        source: 'iana',
      },
      'audio/lpc': {
        source: 'iana',
      },
      'audio/melp': {
        source: 'iana',
      },
      'audio/melp1200': {
        source: 'iana',
      },
      'audio/melp2400': {
        source: 'iana',
      },
      'audio/melp600': {
        source: 'iana',
      },
      'audio/mhas': {
        source: 'iana',
      },
      'audio/midi': {
        source: 'apache',
        extensions: ['mid', 'midi', 'kar', 'rmi'],
      },
      'audio/mobile-xmf': {
        source: 'iana',
        extensions: ['mxmf'],
      },
      'audio/mp3': {
        compressible: false,
        extensions: ['mp3'],
      },
      'audio/mp4': {
        source: 'iana',
        compressible: false,
        extensions: ['m4a', 'mp4a'],
      },
      'audio/mp4a-latm': {
        source: 'iana',
      },
      'audio/mpa': {
        source: 'iana',
      },
      'audio/mpa-robust': {
        source: 'iana',
      },
      'audio/mpeg': {
        source: 'iana',
        compressible: false,
        extensions: ['mpga', 'mp2', 'mp2a', 'mp3', 'm2a', 'm3a'],
      },
      'audio/mpeg4-generic': {
        source: 'iana',
      },
      'audio/musepack': {
        source: 'apache',
      },
      'audio/ogg': {
        source: 'iana',
        compressible: false,
        extensions: ['oga', 'ogg', 'spx', 'opus'],
      },
      'audio/opus': {
        source: 'iana',
      },
      'audio/parityfec': {
        source: 'iana',
      },
      'audio/pcma': {
        source: 'iana',
      },
      'audio/pcma-wb': {
        source: 'iana',
      },
      'audio/pcmu': {
        source: 'iana',
      },
      'audio/pcmu-wb': {
        source: 'iana',
      },
      'audio/prs.sid': {
        source: 'iana',
      },
      'audio/qcelp': {
        source: 'iana',
      },
      'audio/raptorfec': {
        source: 'iana',
      },
      'audio/red': {
        source: 'iana',
      },
      'audio/rtp-enc-aescm128': {
        source: 'iana',
      },
      'audio/rtp-midi': {
        source: 'iana',
      },
      'audio/rtploopback': {
        source: 'iana',
      },
      'audio/rtx': {
        source: 'iana',
      },
      'audio/s3m': {
        source: 'apache',
        extensions: ['s3m'],
      },
      'audio/scip': {
        source: 'iana',
      },
      'audio/silk': {
        source: 'apache',
        extensions: ['sil'],
      },
      'audio/smv': {
        source: 'iana',
      },
      'audio/smv-qcp': {
        source: 'iana',
      },
      'audio/smv0': {
        source: 'iana',
      },
      'audio/sofa': {
        source: 'iana',
      },
      'audio/sp-midi': {
        source: 'iana',
      },
      'audio/speex': {
        source: 'iana',
      },
      'audio/t140c': {
        source: 'iana',
      },
      'audio/t38': {
        source: 'iana',
      },
      'audio/telephone-event': {
        source: 'iana',
      },
      'audio/tetra_acelp': {
        source: 'iana',
      },
      'audio/tetra_acelp_bb': {
        source: 'iana',
      },
      'audio/tone': {
        source: 'iana',
      },
      'audio/tsvcis': {
        source: 'iana',
      },
      'audio/uemclip': {
        source: 'iana',
      },
      'audio/ulpfec': {
        source: 'iana',
      },
      'audio/usac': {
        source: 'iana',
      },
      'audio/vdvi': {
        source: 'iana',
      },
      'audio/vmr-wb': {
        source: 'iana',
      },
      'audio/vnd.3gpp.iufp': {
        source: 'iana',
      },
      'audio/vnd.4sb': {
        source: 'iana',
      },
      'audio/vnd.audiokoz': {
        source: 'iana',
      },
      'audio/vnd.celp': {
        source: 'iana',
      },
      'audio/vnd.cisco.nse': {
        source: 'iana',
      },
      'audio/vnd.cmles.radio-events': {
        source: 'iana',
      },
      'audio/vnd.cns.anp1': {
        source: 'iana',
      },
      'audio/vnd.cns.inf1': {
        source: 'iana',
      },
      'audio/vnd.dece.audio': {
        source: 'iana',
        extensions: ['uva', 'uvva'],
      },
      'audio/vnd.digital-winds': {
        source: 'iana',
        extensions: ['eol'],
      },
      'audio/vnd.dlna.adts': {
        source: 'iana',
      },
      'audio/vnd.dolby.heaac.1': {
        source: 'iana',
      },
      'audio/vnd.dolby.heaac.2': {
        source: 'iana',
      },
      'audio/vnd.dolby.mlp': {
        source: 'iana',
      },
      'audio/vnd.dolby.mps': {
        source: 'iana',
      },
      'audio/vnd.dolby.pl2': {
        source: 'iana',
      },
      'audio/vnd.dolby.pl2x': {
        source: 'iana',
      },
      'audio/vnd.dolby.pl2z': {
        source: 'iana',
      },
      'audio/vnd.dolby.pulse.1': {
        source: 'iana',
      },
      'audio/vnd.dra': {
        source: 'iana',
        extensions: ['dra'],
      },
      'audio/vnd.dts': {
        source: 'iana',
        extensions: ['dts'],
      },
      'audio/vnd.dts.hd': {
        source: 'iana',
        extensions: ['dtshd'],
      },
      'audio/vnd.dts.uhd': {
        source: 'iana',
      },
      'audio/vnd.dvb.file': {
        source: 'iana',
      },
      'audio/vnd.everad.plj': {
        source: 'iana',
      },
      'audio/vnd.hns.audio': {
        source: 'iana',
      },
      'audio/vnd.lucent.voice': {
        source: 'iana',
        extensions: ['lvp'],
      },
      'audio/vnd.ms-playready.media.pya': {
        source: 'iana',
        extensions: ['pya'],
      },
      'audio/vnd.nokia.mobile-xmf': {
        source: 'iana',
      },
      'audio/vnd.nortel.vbk': {
        source: 'iana',
      },
      'audio/vnd.nuera.ecelp4800': {
        source: 'iana',
        extensions: ['ecelp4800'],
      },
      'audio/vnd.nuera.ecelp7470': {
        source: 'iana',
        extensions: ['ecelp7470'],
      },
      'audio/vnd.nuera.ecelp9600': {
        source: 'iana',
        extensions: ['ecelp9600'],
      },
      'audio/vnd.octel.sbc': {
        source: 'iana',
      },
      'audio/vnd.presonus.multitrack': {
        source: 'iana',
      },
      'audio/vnd.qcelp': {
        source: 'iana',
      },
      'audio/vnd.rhetorex.32kadpcm': {
        source: 'iana',
      },
      'audio/vnd.rip': {
        source: 'iana',
        extensions: ['rip'],
      },
      'audio/vnd.rn-realaudio': {
        compressible: false,
      },
      'audio/vnd.sealedmedia.softseal.mpeg': {
        source: 'iana',
      },
      'audio/vnd.vmx.cvsd': {
        source: 'iana',
      },
      'audio/vnd.wave': {
        compressible: false,
      },
      'audio/vorbis': {
        source: 'iana',
        compressible: false,
      },
      'audio/vorbis-config': {
        source: 'iana',
      },
      'audio/wav': {
        compressible: false,
        extensions: ['wav'],
      },
      'audio/wave': {
        compressible: false,
        extensions: ['wav'],
      },
      'audio/webm': {
        source: 'apache',
        compressible: false,
        extensions: ['weba'],
      },
      'audio/x-aac': {
        source: 'apache',
        compressible: false,
        extensions: ['aac'],
      },
      'audio/x-aiff': {
        source: 'apache',
        extensions: ['aif', 'aiff', 'aifc'],
      },
      'audio/x-caf': {
        source: 'apache',
        compressible: false,
        extensions: ['caf'],
      },
      'audio/x-flac': {
        source: 'apache',
        extensions: ['flac'],
      },
      'audio/x-m4a': {
        source: 'nginx',
        extensions: ['m4a'],
      },
      'audio/x-matroska': {
        source: 'apache',
        extensions: ['mka'],
      },
      'audio/x-mpegurl': {
        source: 'apache',
        extensions: ['m3u'],
      },
      'audio/x-ms-wax': {
        source: 'apache',
        extensions: ['wax'],
      },
      'audio/x-ms-wma': {
        source: 'apache',
        extensions: ['wma'],
      },
      'audio/x-pn-realaudio': {
        source: 'apache',
        extensions: ['ram', 'ra'],
      },
      'audio/x-pn-realaudio-plugin': {
        source: 'apache',
        extensions: ['rmp'],
      },
      'audio/x-realaudio': {
        source: 'nginx',
        extensions: ['ra'],
      },
      'audio/x-tta': {
        source: 'apache',
      },
      'audio/x-wav': {
        source: 'apache',
        extensions: ['wav'],
      },
      'audio/xm': {
        source: 'apache',
        extensions: ['xm'],
      },
      'chemical/x-cdx': {
        source: 'apache',
        extensions: ['cdx'],
      },
      'chemical/x-cif': {
        source: 'apache',
        extensions: ['cif'],
      },
      'chemical/x-cmdf': {
        source: 'apache',
        extensions: ['cmdf'],
      },
      'chemical/x-cml': {
        source: 'apache',
        extensions: ['cml'],
      },
      'chemical/x-csml': {
        source: 'apache',
        extensions: ['csml'],
      },
      'chemical/x-pdb': {
        source: 'apache',
      },
      'chemical/x-xyz': {
        source: 'apache',
        extensions: ['xyz'],
      },
      'font/collection': {
        source: 'iana',
        extensions: ['ttc'],
      },
      'font/otf': {
        source: 'iana',
        compressible: true,
        extensions: ['otf'],
      },
      'font/sfnt': {
        source: 'iana',
      },
      'font/ttf': {
        source: 'iana',
        compressible: true,
        extensions: ['ttf'],
      },
      'font/woff': {
        source: 'iana',
        extensions: ['woff'],
      },
      'font/woff2': {
        source: 'iana',
        extensions: ['woff2'],
      },
      'image/aces': {
        source: 'iana',
        extensions: ['exr'],
      },
      'image/apng': {
        compressible: false,
        extensions: ['apng'],
      },
      'image/avci': {
        source: 'iana',
        extensions: ['avci'],
      },
      'image/avcs': {
        source: 'iana',
        extensions: ['avcs'],
      },
      'image/avif': {
        source: 'iana',
        compressible: false,
        extensions: ['avif'],
      },
      'image/bmp': {
        source: 'iana',
        compressible: true,
        extensions: ['bmp'],
      },
      'image/cgm': {
        source: 'iana',
        extensions: ['cgm'],
      },
      'image/dicom-rle': {
        source: 'iana',
        extensions: ['drle'],
      },
      'image/emf': {
        source: 'iana',
        extensions: ['emf'],
      },
      'image/fits': {
        source: 'iana',
        extensions: ['fits'],
      },
      'image/g3fax': {
        source: 'iana',
        extensions: ['g3'],
      },
      'image/gif': {
        source: 'iana',
        compressible: false,
        extensions: ['gif'],
      },
      'image/heic': {
        source: 'iana',
        extensions: ['heic'],
      },
      'image/heic-sequence': {
        source: 'iana',
        extensions: ['heics'],
      },
      'image/heif': {
        source: 'iana',
        extensions: ['heif'],
      },
      'image/heif-sequence': {
        source: 'iana',
        extensions: ['heifs'],
      },
      'image/hej2k': {
        source: 'iana',
        extensions: ['hej2'],
      },
      'image/hsj2': {
        source: 'iana',
        extensions: ['hsj2'],
      },
      'image/ief': {
        source: 'iana',
        extensions: ['ief'],
      },
      'image/jls': {
        source: 'iana',
        extensions: ['jls'],
      },
      'image/jp2': {
        source: 'iana',
        compressible: false,
        extensions: ['jp2', 'jpg2'],
      },
      'image/jpeg': {
        source: 'iana',
        compressible: false,
        extensions: ['jpeg', 'jpg', 'jpe'],
      },
      'image/jph': {
        source: 'iana',
        extensions: ['jph'],
      },
      'image/jphc': {
        source: 'iana',
        extensions: ['jhc'],
      },
      'image/jpm': {
        source: 'iana',
        compressible: false,
        extensions: ['jpm'],
      },
      'image/jpx': {
        source: 'iana',
        compressible: false,
        extensions: ['jpx', 'jpf'],
      },
      'image/jxr': {
        source: 'iana',
        extensions: ['jxr'],
      },
      'image/jxra': {
        source: 'iana',
        extensions: ['jxra'],
      },
      'image/jxrs': {
        source: 'iana',
        extensions: ['jxrs'],
      },
      'image/jxs': {
        source: 'iana',
        extensions: ['jxs'],
      },
      'image/jxsc': {
        source: 'iana',
        extensions: ['jxsc'],
      },
      'image/jxsi': {
        source: 'iana',
        extensions: ['jxsi'],
      },
      'image/jxss': {
        source: 'iana',
        extensions: ['jxss'],
      },
      'image/ktx': {
        source: 'iana',
        extensions: ['ktx'],
      },
      'image/ktx2': {
        source: 'iana',
        extensions: ['ktx2'],
      },
      'image/naplps': {
        source: 'iana',
      },
      'image/pjpeg': {
        compressible: false,
      },
      'image/png': {
        source: 'iana',
        compressible: false,
        extensions: ['png'],
      },
      'image/prs.btif': {
        source: 'iana',
        extensions: ['btif'],
      },
      'image/prs.pti': {
        source: 'iana',
        extensions: ['pti'],
      },
      'image/pwg-raster': {
        source: 'iana',
      },
      'image/sgi': {
        source: 'apache',
        extensions: ['sgi'],
      },
      'image/svg+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['svg', 'svgz'],
      },
      'image/t38': {
        source: 'iana',
        extensions: ['t38'],
      },
      'image/tiff': {
        source: 'iana',
        compressible: false,
        extensions: ['tif', 'tiff'],
      },
      'image/tiff-fx': {
        source: 'iana',
        extensions: ['tfx'],
      },
      'image/vnd.adobe.photoshop': {
        source: 'iana',
        compressible: true,
        extensions: ['psd'],
      },
      'image/vnd.airzip.accelerator.azv': {
        source: 'iana',
        extensions: ['azv'],
      },
      'image/vnd.cns.inf2': {
        source: 'iana',
      },
      'image/vnd.dece.graphic': {
        source: 'iana',
        extensions: ['uvi', 'uvvi', 'uvg', 'uvvg'],
      },
      'image/vnd.djvu': {
        source: 'iana',
        extensions: ['djvu', 'djv'],
      },
      'image/vnd.dvb.subtitle': {
        source: 'iana',
        extensions: ['sub'],
      },
      'image/vnd.dwg': {
        source: 'iana',
        extensions: ['dwg'],
      },
      'image/vnd.dxf': {
        source: 'iana',
        extensions: ['dxf'],
      },
      'image/vnd.fastbidsheet': {
        source: 'iana',
        extensions: ['fbs'],
      },
      'image/vnd.fpx': {
        source: 'iana',
        extensions: ['fpx'],
      },
      'image/vnd.fst': {
        source: 'iana',
        extensions: ['fst'],
      },
      'image/vnd.fujixerox.edmics-mmr': {
        source: 'iana',
        extensions: ['mmr'],
      },
      'image/vnd.fujixerox.edmics-rlc': {
        source: 'iana',
        extensions: ['rlc'],
      },
      'image/vnd.globalgraphics.pgb': {
        source: 'iana',
      },
      'image/vnd.microsoft.icon': {
        source: 'iana',
        compressible: true,
        extensions: ['ico'],
      },
      'image/vnd.mix': {
        source: 'iana',
      },
      'image/vnd.mozilla.apng': {
        source: 'iana',
      },
      'image/vnd.ms-dds': {
        compressible: true,
        extensions: ['dds'],
      },
      'image/vnd.ms-modi': {
        source: 'iana',
        extensions: ['mdi'],
      },
      'image/vnd.ms-photo': {
        source: 'apache',
        extensions: ['wdp'],
      },
      'image/vnd.net-fpx': {
        source: 'iana',
        extensions: ['npx'],
      },
      'image/vnd.pco.b16': {
        source: 'iana',
        extensions: ['b16'],
      },
      'image/vnd.radiance': {
        source: 'iana',
      },
      'image/vnd.sealed.png': {
        source: 'iana',
      },
      'image/vnd.sealedmedia.softseal.gif': {
        source: 'iana',
      },
      'image/vnd.sealedmedia.softseal.jpg': {
        source: 'iana',
      },
      'image/vnd.svf': {
        source: 'iana',
      },
      'image/vnd.tencent.tap': {
        source: 'iana',
        extensions: ['tap'],
      },
      'image/vnd.valve.source.texture': {
        source: 'iana',
        extensions: ['vtf'],
      },
      'image/vnd.wap.wbmp': {
        source: 'iana',
        extensions: ['wbmp'],
      },
      'image/vnd.xiff': {
        source: 'iana',
        extensions: ['xif'],
      },
      'image/vnd.zbrush.pcx': {
        source: 'iana',
        extensions: ['pcx'],
      },
      'image/webp': {
        source: 'apache',
        extensions: ['webp'],
      },
      'image/wmf': {
        source: 'iana',
        extensions: ['wmf'],
      },
      'image/x-3ds': {
        source: 'apache',
        extensions: ['3ds'],
      },
      'image/x-cmu-raster': {
        source: 'apache',
        extensions: ['ras'],
      },
      'image/x-cmx': {
        source: 'apache',
        extensions: ['cmx'],
      },
      'image/x-freehand': {
        source: 'apache',
        extensions: ['fh', 'fhc', 'fh4', 'fh5', 'fh7'],
      },
      'image/x-icon': {
        source: 'apache',
        compressible: true,
        extensions: ['ico'],
      },
      'image/x-jng': {
        source: 'nginx',
        extensions: ['jng'],
      },
      'image/x-mrsid-image': {
        source: 'apache',
        extensions: ['sid'],
      },
      'image/x-ms-bmp': {
        source: 'nginx',
        compressible: true,
        extensions: ['bmp'],
      },
      'image/x-pcx': {
        source: 'apache',
        extensions: ['pcx'],
      },
      'image/x-pict': {
        source: 'apache',
        extensions: ['pic', 'pct'],
      },
      'image/x-portable-anymap': {
        source: 'apache',
        extensions: ['pnm'],
      },
      'image/x-portable-bitmap': {
        source: 'apache',
        extensions: ['pbm'],
      },
      'image/x-portable-graymap': {
        source: 'apache',
        extensions: ['pgm'],
      },
      'image/x-portable-pixmap': {
        source: 'apache',
        extensions: ['ppm'],
      },
      'image/x-rgb': {
        source: 'apache',
        extensions: ['rgb'],
      },
      'image/x-tga': {
        source: 'apache',
        extensions: ['tga'],
      },
      'image/x-xbitmap': {
        source: 'apache',
        extensions: ['xbm'],
      },
      'image/x-xcf': {
        compressible: false,
      },
      'image/x-xpixmap': {
        source: 'apache',
        extensions: ['xpm'],
      },
      'image/x-xwindowdump': {
        source: 'apache',
        extensions: ['xwd'],
      },
      'message/cpim': {
        source: 'iana',
      },
      'message/delivery-status': {
        source: 'iana',
      },
      'message/disposition-notification': {
        source: 'iana',
        extensions: ['disposition-notification'],
      },
      'message/external-body': {
        source: 'iana',
      },
      'message/feedback-report': {
        source: 'iana',
      },
      'message/global': {
        source: 'iana',
        extensions: ['u8msg'],
      },
      'message/global-delivery-status': {
        source: 'iana',
        extensions: ['u8dsn'],
      },
      'message/global-disposition-notification': {
        source: 'iana',
        extensions: ['u8mdn'],
      },
      'message/global-headers': {
        source: 'iana',
        extensions: ['u8hdr'],
      },
      'message/http': {
        source: 'iana',
        compressible: false,
      },
      'message/imdn+xml': {
        source: 'iana',
        compressible: true,
      },
      'message/news': {
        source: 'iana',
      },
      'message/partial': {
        source: 'iana',
        compressible: false,
      },
      'message/rfc822': {
        source: 'iana',
        compressible: true,
        extensions: ['eml', 'mime'],
      },
      'message/s-http': {
        source: 'iana',
      },
      'message/sip': {
        source: 'iana',
      },
      'message/sipfrag': {
        source: 'iana',
      },
      'message/tracking-status': {
        source: 'iana',
      },
      'message/vnd.si.simp': {
        source: 'iana',
      },
      'message/vnd.wfa.wsc': {
        source: 'iana',
        extensions: ['wsc'],
      },
      'model/3mf': {
        source: 'iana',
        extensions: ['3mf'],
      },
      'model/e57': {
        source: 'iana',
      },
      'model/gltf+json': {
        source: 'iana',
        compressible: true,
        extensions: ['gltf'],
      },
      'model/gltf-binary': {
        source: 'iana',
        compressible: true,
        extensions: ['glb'],
      },
      'model/iges': {
        source: 'iana',
        compressible: false,
        extensions: ['igs', 'iges'],
      },
      'model/mesh': {
        source: 'iana',
        compressible: false,
        extensions: ['msh', 'mesh', 'silo'],
      },
      'model/mtl': {
        source: 'iana',
        extensions: ['mtl'],
      },
      'model/obj': {
        source: 'iana',
        extensions: ['obj'],
      },
      'model/step': {
        source: 'iana',
      },
      'model/step+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['stpx'],
      },
      'model/step+zip': {
        source: 'iana',
        compressible: false,
        extensions: ['stpz'],
      },
      'model/step-xml+zip': {
        source: 'iana',
        compressible: false,
        extensions: ['stpxz'],
      },
      'model/stl': {
        source: 'iana',
        extensions: ['stl'],
      },
      'model/vnd.collada+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['dae'],
      },
      'model/vnd.dwf': {
        source: 'iana',
        extensions: ['dwf'],
      },
      'model/vnd.flatland.3dml': {
        source: 'iana',
      },
      'model/vnd.gdl': {
        source: 'iana',
        extensions: ['gdl'],
      },
      'model/vnd.gs-gdl': {
        source: 'apache',
      },
      'model/vnd.gs.gdl': {
        source: 'iana',
      },
      'model/vnd.gtw': {
        source: 'iana',
        extensions: ['gtw'],
      },
      'model/vnd.moml+xml': {
        source: 'iana',
        compressible: true,
      },
      'model/vnd.mts': {
        source: 'iana',
        extensions: ['mts'],
      },
      'model/vnd.opengex': {
        source: 'iana',
        extensions: ['ogex'],
      },
      'model/vnd.parasolid.transmit.binary': {
        source: 'iana',
        extensions: ['x_b'],
      },
      'model/vnd.parasolid.transmit.text': {
        source: 'iana',
        extensions: ['x_t'],
      },
      'model/vnd.pytha.pyox': {
        source: 'iana',
      },
      'model/vnd.rosette.annotated-data-model': {
        source: 'iana',
      },
      'model/vnd.sap.vds': {
        source: 'iana',
        extensions: ['vds'],
      },
      'model/vnd.usdz+zip': {
        source: 'iana',
        compressible: false,
        extensions: ['usdz'],
      },
      'model/vnd.valve.source.compiled-map': {
        source: 'iana',
        extensions: ['bsp'],
      },
      'model/vnd.vtu': {
        source: 'iana',
        extensions: ['vtu'],
      },
      'model/vrml': {
        source: 'iana',
        compressible: false,
        extensions: ['wrl', 'vrml'],
      },
      'model/x3d+binary': {
        source: 'apache',
        compressible: false,
        extensions: ['x3db', 'x3dbz'],
      },
      'model/x3d+fastinfoset': {
        source: 'iana',
        extensions: ['x3db'],
      },
      'model/x3d+vrml': {
        source: 'apache',
        compressible: false,
        extensions: ['x3dv', 'x3dvz'],
      },
      'model/x3d+xml': {
        source: 'iana',
        compressible: true,
        extensions: ['x3d', 'x3dz'],
      },
      'model/x3d-vrml': {
        source: 'iana',
        extensions: ['x3dv'],
      },
      'multipart/alternative': {
        source: 'iana',
        compressible: false,
      },
      'multipart/appledouble': {
        source: 'iana',
      },
      'multipart/byteranges': {
        source: 'iana',
      },
      'multipart/digest': {
        source: 'iana',
      },
      'multipart/encrypted': {
        source: 'iana',
        compressible: false,
      },
      'multipart/form-data': {
        source: 'iana',
        compressible: false,
      },
      'multipart/header-set': {
        source: 'iana',
      },
      'multipart/mixed': {
        source: 'iana',
      },
      'multipart/multilingual': {
        source: 'iana',
      },
      'multipart/parallel': {
        source: 'iana',
      },
      'multipart/related': {
        source: 'iana',
        compressible: false,
      },
      'multipart/report': {
        source: 'iana',
      },
      'multipart/signed': {
        source: 'iana',
        compressible: false,
      },
      'multipart/vnd.bint.med-plus': {
        source: 'iana',
      },
      'multipart/voice-message': {
        source: 'iana',
      },
      'multipart/x-mixed-replace': {
        source: 'iana',
      },
      'text/1d-interleaved-parityfec': {
        source: 'iana',
      },
      'text/cache-manifest': {
        source: 'iana',
        compressible: true,
        extensions: ['appcache', 'manifest'],
      },
      'text/calendar': {
        source: 'iana',
        extensions: ['ics', 'ifb'],
      },
      'text/calender': {
        compressible: true,
      },
      'text/cmd': {
        compressible: true,
      },
      'text/coffeescript': {
        extensions: ['coffee', 'litcoffee'],
      },
      'text/cql': {
        source: 'iana',
      },
      'text/cql-expression': {
        source: 'iana',
      },
      'text/cql-identifier': {
        source: 'iana',
      },
      'text/css': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['css'],
      },
      'text/csv': {
        source: 'iana',
        compressible: true,
        extensions: ['csv'],
      },
      'text/csv-schema': {
        source: 'iana',
      },
      'text/directory': {
        source: 'iana',
      },
      'text/dns': {
        source: 'iana',
      },
      'text/ecmascript': {
        source: 'iana',
      },
      'text/encaprtp': {
        source: 'iana',
      },
      'text/enriched': {
        source: 'iana',
      },
      'text/fhirpath': {
        source: 'iana',
      },
      'text/flexfec': {
        source: 'iana',
      },
      'text/fwdred': {
        source: 'iana',
      },
      'text/gff3': {
        source: 'iana',
      },
      'text/grammar-ref-list': {
        source: 'iana',
      },
      'text/html': {
        source: 'iana',
        compressible: true,
        extensions: ['html', 'htm', 'shtml'],
      },
      'text/jade': {
        extensions: ['jade'],
      },
      'text/javascript': {
        source: 'iana',
        compressible: true,
      },
      'text/jcr-cnd': {
        source: 'iana',
      },
      'text/jsx': {
        compressible: true,
        extensions: ['jsx'],
      },
      'text/less': {
        compressible: true,
        extensions: ['less'],
      },
      'text/markdown': {
        source: 'iana',
        compressible: true,
        extensions: ['markdown', 'md'],
      },
      'text/mathml': {
        source: 'nginx',
        extensions: ['mml'],
      },
      'text/mdx': {
        compressible: true,
        extensions: ['mdx'],
      },
      'text/mizar': {
        source: 'iana',
      },
      'text/n3': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['n3'],
      },
      'text/parameters': {
        source: 'iana',
        charset: 'UTF-8',
      },
      'text/parityfec': {
        source: 'iana',
      },
      'text/plain': {
        source: 'iana',
        compressible: true,
        extensions: ['txt', 'text', 'conf', 'def', 'list', 'log', 'in', 'ini'],
      },
      'text/provenance-notation': {
        source: 'iana',
        charset: 'UTF-8',
      },
      'text/prs.fallenstein.rst': {
        source: 'iana',
      },
      'text/prs.lines.tag': {
        source: 'iana',
        extensions: ['dsc'],
      },
      'text/prs.prop.logic': {
        source: 'iana',
      },
      'text/raptorfec': {
        source: 'iana',
      },
      'text/red': {
        source: 'iana',
      },
      'text/rfc822-headers': {
        source: 'iana',
      },
      'text/richtext': {
        source: 'iana',
        compressible: true,
        extensions: ['rtx'],
      },
      'text/rtf': {
        source: 'iana',
        compressible: true,
        extensions: ['rtf'],
      },
      'text/rtp-enc-aescm128': {
        source: 'iana',
      },
      'text/rtploopback': {
        source: 'iana',
      },
      'text/rtx': {
        source: 'iana',
      },
      'text/sgml': {
        source: 'iana',
        extensions: ['sgml', 'sgm'],
      },
      'text/shaclc': {
        source: 'iana',
      },
      'text/shex': {
        source: 'iana',
        extensions: ['shex'],
      },
      'text/slim': {
        extensions: ['slim', 'slm'],
      },
      'text/spdx': {
        source: 'iana',
        extensions: ['spdx'],
      },
      'text/strings': {
        source: 'iana',
      },
      'text/stylus': {
        extensions: ['stylus', 'styl'],
      },
      'text/t140': {
        source: 'iana',
      },
      'text/tab-separated-values': {
        source: 'iana',
        compressible: true,
        extensions: ['tsv'],
      },
      'text/troff': {
        source: 'iana',
        extensions: ['t', 'tr', 'roff', 'man', 'me', 'ms'],
      },
      'text/turtle': {
        source: 'iana',
        charset: 'UTF-8',
        extensions: ['ttl'],
      },
      'text/ulpfec': {
        source: 'iana',
      },
      'text/uri-list': {
        source: 'iana',
        compressible: true,
        extensions: ['uri', 'uris', 'urls'],
      },
      'text/vcard': {
        source: 'iana',
        compressible: true,
        extensions: ['vcard'],
      },
      'text/vnd.a': {
        source: 'iana',
      },
      'text/vnd.abc': {
        source: 'iana',
      },
      'text/vnd.ascii-art': {
        source: 'iana',
      },
      'text/vnd.curl': {
        source: 'iana',
        extensions: ['curl'],
      },
      'text/vnd.curl.dcurl': {
        source: 'apache',
        extensions: ['dcurl'],
      },
      'text/vnd.curl.mcurl': {
        source: 'apache',
        extensions: ['mcurl'],
      },
      'text/vnd.curl.scurl': {
        source: 'apache',
        extensions: ['scurl'],
      },
      'text/vnd.debian.copyright': {
        source: 'iana',
        charset: 'UTF-8',
      },
      'text/vnd.dmclientscript': {
        source: 'iana',
      },
      'text/vnd.dvb.subtitle': {
        source: 'iana',
        extensions: ['sub'],
      },
      'text/vnd.esmertec.theme-descriptor': {
        source: 'iana',
        charset: 'UTF-8',
      },
      'text/vnd.familysearch.gedcom': {
        source: 'iana',
        extensions: ['ged'],
      },
      'text/vnd.ficlab.flt': {
        source: 'iana',
      },
      'text/vnd.fly': {
        source: 'iana',
        extensions: ['fly'],
      },
      'text/vnd.fmi.flexstor': {
        source: 'iana',
        extensions: ['flx'],
      },
      'text/vnd.gml': {
        source: 'iana',
      },
      'text/vnd.graphviz': {
        source: 'iana',
        extensions: ['gv'],
      },
      'text/vnd.hans': {
        source: 'iana',
      },
      'text/vnd.hgl': {
        source: 'iana',
      },
      'text/vnd.in3d.3dml': {
        source: 'iana',
        extensions: ['3dml'],
      },
      'text/vnd.in3d.spot': {
        source: 'iana',
        extensions: ['spot'],
      },
      'text/vnd.iptc.newsml': {
        source: 'iana',
      },
      'text/vnd.iptc.nitf': {
        source: 'iana',
      },
      'text/vnd.latex-z': {
        source: 'iana',
      },
      'text/vnd.motorola.reflex': {
        source: 'iana',
      },
      'text/vnd.ms-mediapackage': {
        source: 'iana',
      },
      'text/vnd.net2phone.commcenter.command': {
        source: 'iana',
      },
      'text/vnd.radisys.msml-basic-layout': {
        source: 'iana',
      },
      'text/vnd.senx.warpscript': {
        source: 'iana',
      },
      'text/vnd.si.uricatalogue': {
        source: 'iana',
      },
      'text/vnd.sosi': {
        source: 'iana',
      },
      'text/vnd.sun.j2me.app-descriptor': {
        source: 'iana',
        charset: 'UTF-8',
        extensions: ['jad'],
      },
      'text/vnd.trolltech.linguist': {
        source: 'iana',
        charset: 'UTF-8',
      },
      'text/vnd.wap.si': {
        source: 'iana',
      },
      'text/vnd.wap.sl': {
        source: 'iana',
      },
      'text/vnd.wap.wml': {
        source: 'iana',
        extensions: ['wml'],
      },
      'text/vnd.wap.wmlscript': {
        source: 'iana',
        extensions: ['wmls'],
      },
      'text/vtt': {
        source: 'iana',
        charset: 'UTF-8',
        compressible: true,
        extensions: ['vtt'],
      },
      'text/x-asm': {
        source: 'apache',
        extensions: ['s', 'asm'],
      },
      'text/x-c': {
        source: 'apache',
        extensions: ['c', 'cc', 'cxx', 'cpp', 'h', 'hh', 'dic'],
      },
      'text/x-component': {
        source: 'nginx',
        extensions: ['htc'],
      },
      'text/x-fortran': {
        source: 'apache',
        extensions: ['f', 'for', 'f77', 'f90'],
      },
      'text/x-gwt-rpc': {
        compressible: true,
      },
      'text/x-handlebars-template': {
        extensions: ['hbs'],
      },
      'text/x-java-source': {
        source: 'apache',
        extensions: ['java'],
      },
      'text/x-jquery-tmpl': {
        compressible: true,
      },
      'text/x-lua': {
        extensions: ['lua'],
      },
      'text/x-markdown': {
        compressible: true,
        extensions: ['mkd'],
      },
      'text/x-nfo': {
        source: 'apache',
        extensions: ['nfo'],
      },
      'text/x-opml': {
        source: 'apache',
        extensions: ['opml'],
      },
      'text/x-org': {
        compressible: true,
        extensions: ['org'],
      },
      'text/x-pascal': {
        source: 'apache',
        extensions: ['p', 'pas'],
      },
      'text/x-processing': {
        compressible: true,
        extensions: ['pde'],
      },
      'text/x-sass': {
        extensions: ['sass'],
      },
      'text/x-scss': {
        extensions: ['scss'],
      },
      'text/x-setext': {
        source: 'apache',
        extensions: ['etx'],
      },
      'text/x-sfv': {
        source: 'apache',
        extensions: ['sfv'],
      },
      'text/x-suse-ymp': {
        compressible: true,
        extensions: ['ymp'],
      },
      'text/x-uuencode': {
        source: 'apache',
        extensions: ['uu'],
      },
      'text/x-vcalendar': {
        source: 'apache',
        extensions: ['vcs'],
      },
      'text/x-vcard': {
        source: 'apache',
        extensions: ['vcf'],
      },
      'text/xml': {
        source: 'iana',
        compressible: true,
        extensions: ['xml'],
      },
      'text/xml-external-parsed-entity': {
        source: 'iana',
      },
      'text/yaml': {
        compressible: true,
        extensions: ['yaml', 'yml'],
      },
      'video/1d-interleaved-parityfec': {
        source: 'iana',
      },
      'video/3gpp': {
        source: 'iana',
        extensions: ['3gp', '3gpp'],
      },
      'video/3gpp-tt': {
        source: 'iana',
      },
      'video/3gpp2': {
        source: 'iana',
        extensions: ['3g2'],
      },
      'video/av1': {
        source: 'iana',
      },
      'video/bmpeg': {
        source: 'iana',
      },
      'video/bt656': {
        source: 'iana',
      },
      'video/celb': {
        source: 'iana',
      },
      'video/dv': {
        source: 'iana',
      },
      'video/encaprtp': {
        source: 'iana',
      },
      'video/ffv1': {
        source: 'iana',
      },
      'video/flexfec': {
        source: 'iana',
      },
      'video/h261': {
        source: 'iana',
        extensions: ['h261'],
      },
      'video/h263': {
        source: 'iana',
        extensions: ['h263'],
      },
      'video/h263-1998': {
        source: 'iana',
      },
      'video/h263-2000': {
        source: 'iana',
      },
      'video/h264': {
        source: 'iana',
        extensions: ['h264'],
      },
      'video/h264-rcdo': {
        source: 'iana',
      },
      'video/h264-svc': {
        source: 'iana',
      },
      'video/h265': {
        source: 'iana',
      },
      'video/iso.segment': {
        source: 'iana',
        extensions: ['m4s'],
      },
      'video/jpeg': {
        source: 'iana',
        extensions: ['jpgv'],
      },
      'video/jpeg2000': {
        source: 'iana',
      },
      'video/jpm': {
        source: 'apache',
        extensions: ['jpm', 'jpgm'],
      },
      'video/jxsv': {
        source: 'iana',
      },
      'video/mj2': {
        source: 'iana',
        extensions: ['mj2', 'mjp2'],
      },
      'video/mp1s': {
        source: 'iana',
      },
      'video/mp2p': {
        source: 'iana',
      },
      'video/mp2t': {
        source: 'iana',
        extensions: ['ts'],
      },
      'video/mp4': {
        source: 'iana',
        compressible: false,
        extensions: ['mp4', 'mp4v', 'mpg4'],
      },
      'video/mp4v-es': {
        source: 'iana',
      },
      'video/mpeg': {
        source: 'iana',
        compressible: false,
        extensions: ['mpeg', 'mpg', 'mpe', 'm1v', 'm2v'],
      },
      'video/mpeg4-generic': {
        source: 'iana',
      },
      'video/mpv': {
        source: 'iana',
      },
      'video/nv': {
        source: 'iana',
      },
      'video/ogg': {
        source: 'iana',
        compressible: false,
        extensions: ['ogv'],
      },
      'video/parityfec': {
        source: 'iana',
      },
      'video/pointer': {
        source: 'iana',
      },
      'video/quicktime': {
        source: 'iana',
        compressible: false,
        extensions: ['qt', 'mov'],
      },
      'video/raptorfec': {
        source: 'iana',
      },
      'video/raw': {
        source: 'iana',
      },
      'video/rtp-enc-aescm128': {
        source: 'iana',
      },
      'video/rtploopback': {
        source: 'iana',
      },
      'video/rtx': {
        source: 'iana',
      },
      'video/scip': {
        source: 'iana',
      },
      'video/smpte291': {
        source: 'iana',
      },
      'video/smpte292m': {
        source: 'iana',
      },
      'video/ulpfec': {
        source: 'iana',
      },
      'video/vc1': {
        source: 'iana',
      },
      'video/vc2': {
        source: 'iana',
      },
      'video/vnd.cctv': {
        source: 'iana',
      },
      'video/vnd.dece.hd': {
        source: 'iana',
        extensions: ['uvh', 'uvvh'],
      },
      'video/vnd.dece.mobile': {
        source: 'iana',
        extensions: ['uvm', 'uvvm'],
      },
      'video/vnd.dece.mp4': {
        source: 'iana',
      },
      'video/vnd.dece.pd': {
        source: 'iana',
        extensions: ['uvp', 'uvvp'],
      },
      'video/vnd.dece.sd': {
        source: 'iana',
        extensions: ['uvs', 'uvvs'],
      },
      'video/vnd.dece.video': {
        source: 'iana',
        extensions: ['uvv', 'uvvv'],
      },
      'video/vnd.directv.mpeg': {
        source: 'iana',
      },
      'video/vnd.directv.mpeg-tts': {
        source: 'iana',
      },
      'video/vnd.dlna.mpeg-tts': {
        source: 'iana',
      },
      'video/vnd.dvb.file': {
        source: 'iana',
        extensions: ['dvb'],
      },
      'video/vnd.fvt': {
        source: 'iana',
        extensions: ['fvt'],
      },
      'video/vnd.hns.video': {
        source: 'iana',
      },
      'video/vnd.iptvforum.1dparityfec-1010': {
        source: 'iana',
      },
      'video/vnd.iptvforum.1dparityfec-2005': {
        source: 'iana',
      },
      'video/vnd.iptvforum.2dparityfec-1010': {
        source: 'iana',
      },
      'video/vnd.iptvforum.2dparityfec-2005': {
        source: 'iana',
      },
      'video/vnd.iptvforum.ttsavc': {
        source: 'iana',
      },
      'video/vnd.iptvforum.ttsmpeg2': {
        source: 'iana',
      },
      'video/vnd.motorola.video': {
        source: 'iana',
      },
      'video/vnd.motorola.videop': {
        source: 'iana',
      },
      'video/vnd.mpegurl': {
        source: 'iana',
        extensions: ['mxu', 'm4u'],
      },
      'video/vnd.ms-playready.media.pyv': {
        source: 'iana',
        extensions: ['pyv'],
      },
      'video/vnd.nokia.interleaved-multimedia': {
        source: 'iana',
      },
      'video/vnd.nokia.mp4vr': {
        source: 'iana',
      },
      'video/vnd.nokia.videovoip': {
        source: 'iana',
      },
      'video/vnd.objectvideo': {
        source: 'iana',
      },
      'video/vnd.radgamettools.bink': {
        source: 'iana',
      },
      'video/vnd.radgamettools.smacker': {
        source: 'iana',
      },
      'video/vnd.sealed.mpeg1': {
        source: 'iana',
      },
      'video/vnd.sealed.mpeg4': {
        source: 'iana',
      },
      'video/vnd.sealed.swf': {
        source: 'iana',
      },
      'video/vnd.sealedmedia.softseal.mov': {
        source: 'iana',
      },
      'video/vnd.uvvu.mp4': {
        source: 'iana',
        extensions: ['uvu', 'uvvu'],
      },
      'video/vnd.vivo': {
        source: 'iana',
        extensions: ['viv'],
      },
      'video/vnd.youtube.yt': {
        source: 'iana',
      },
      'video/vp8': {
        source: 'iana',
      },
      'video/vp9': {
        source: 'iana',
      },
      'video/webm': {
        source: 'apache',
        compressible: false,
        extensions: ['webm'],
      },
      'video/x-f4v': {
        source: 'apache',
        extensions: ['f4v'],
      },
      'video/x-fli': {
        source: 'apache',
        extensions: ['fli'],
      },
      'video/x-flv': {
        source: 'apache',
        compressible: false,
        extensions: ['flv'],
      },
      'video/x-m4v': {
        source: 'apache',
        extensions: ['m4v'],
      },
      'video/x-matroska': {
        source: 'apache',
        compressible: false,
        extensions: ['mkv', 'mk3d', 'mks'],
      },
      'video/x-mng': {
        source: 'apache',
        extensions: ['mng'],
      },
      'video/x-ms-asf': {
        source: 'apache',
        extensions: ['asf', 'asx'],
      },
      'video/x-ms-vob': {
        source: 'apache',
        extensions: ['vob'],
      },
      'video/x-ms-wm': {
        source: 'apache',
        extensions: ['wm'],
      },
      'video/x-ms-wmv': {
        source: 'apache',
        compressible: false,
        extensions: ['wmv'],
      },
      'video/x-ms-wmx': {
        source: 'apache',
        extensions: ['wmx'],
      },
      'video/x-ms-wvx': {
        source: 'apache',
        extensions: ['wvx'],
      },
      'video/x-msvideo': {
        source: 'apache',
        extensions: ['avi'],
      },
      'video/x-sgi-movie': {
        source: 'apache',
        extensions: ['movie'],
      },
      'video/x-smv': {
        source: 'apache',
        extensions: ['smv'],
      },
      'x-conference/x-cooltalk': {
        source: 'apache',
        extensions: ['ice'],
      },
      'x-shader/x-fragment': {
        compressible: true,
      },
      'x-shader/x-vertex': {
        compressible: true,
      },
    };
  },
});

// node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  'node_modules/mime-db/index.js'(exports, module2) {
    module2.exports = require_db();
  },
});

// node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  'node_modules/mime-types/index.js'(exports) {
    'use strict';
    var db = require_mime_db();
    var extname = require('path').extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = /* @__PURE__ */ Object.create(null);
    exports.lookup = lookup;
    exports.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type) {
      if (!type || typeof type !== 'string') {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return 'UTF-8';
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== 'string') {
        return false;
      }
      var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf('charset') === -1) {
        var charset2 = exports.charset(mime);
        if (charset2) mime += '; charset=' + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== 'string') {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== 'string') {
        return false;
      }
      var extension2 = extname('x.' + path)
        .toLowerCase()
        .substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = ['nginx', 'apache', void 0, 'iana'];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (
              types[extension2] !== 'application/octet-stream' &&
              (from > to ||
                (from === to &&
                  types[extension2].substr(0, 12) === 'application/'))
            ) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  },
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  'node_modules/asynckit/lib/defer.js'(exports, module2) {
    module2.exports = defer;
    function defer(fn) {
      var nextTick =
        typeof setImmediate == 'function'
          ? setImmediate
          : typeof process == 'object' && typeof process.nextTick == 'function'
          ? process.nextTick
          : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  },
});

// node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  'node_modules/asynckit/lib/async.js'(exports, module2) {
    var defer = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function () {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  },
});

// node_modules/asynckit/lib/abort.js
var require_abort2 = __commonJS({
  'node_modules/asynckit/lib/abort.js'(exports, module2) {
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == 'function') {
        this.jobs[key]();
      }
    }
  },
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  'node_modules/asynckit/lib/iterate.js'(exports, module2) {
    var async = require_async();
    var abort = require_abort2();
    module2.exports = iterate;
    function iterate(list, iterator, state, callback) {
      var key = state['keyedList']
        ? state['keyedList'][state.index]
        : state.index;
      state.jobs[key] = runJob(
        iterator,
        key,
        list[key],
        function (error, output) {
          if (!(key in state.jobs)) {
            return;
          }
          delete state.jobs[key];
          if (error) {
            abort(state);
          } else {
            state.results[key] = output;
          }
          callback(error, state.results);
        }
      );
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  },
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  'node_modules/asynckit/lib/state.js'(exports, module2) {
    module2.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list),
        initState = {
          index: 0,
          keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
          jobs: {},
          results: isNamedList ? {} : [],
          size: isNamedList ? Object.keys(list).length : list.length,
        };
      if (sortMethod) {
        initState.keyedList.sort(
          isNamedList
            ? sortMethod
            : function (a, b) {
                return sortMethod(list[a], list[b]);
              }
        );
      }
      return initState;
    }
  },
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  'node_modules/asynckit/lib/terminator.js'(exports, module2) {
    var abort = require_abort2();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  },
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  'node_modules/asynckit/parallel.js'(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state['keyedList'] || list).length) {
        iterate(list, iterator, state, function (error, result) {
          if (error) {
            callback(error, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  },
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  'node_modules/asynckit/serialOrdered.js'(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate(list, iterator, state, function iteratorHandler(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        state.index++;
        if (state.index < (state['keyedList'] || list).length) {
          iterate(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  },
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS({
  'node_modules/asynckit/serial.js'(exports, module2) {
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  },
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  'node_modules/asynckit/index.js'(exports, module2) {
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered(),
    };
  },
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  'node_modules/form-data/lib/populate.js'(exports, module2) {
    module2.exports = function (dst, src) {
      Object.keys(src).forEach(function (prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  },
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  'node_modules/form-data/lib/form_data.js'(exports, module2) {
    var CombinedStream = require_combined_stream();
    var util2 = require('util');
    var path = require('path');
    var http2 = require('http');
    var https2 = require('https');
    var parseUrl = require('url').parse;
    var fs = require('fs');
    var Stream = require('stream').Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData3;
    util2.inherits(FormData3, CombinedStream);
    function FormData3(options) {
      if (!(this instanceof FormData3)) {
        return new FormData3(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData3.LINE_BREAK = '\r\n';
    FormData3.DEFAULT_CONTENT_TYPE = 'application/octet-stream';
    FormData3.prototype.append = function (field, value, options) {
      options = options || {};
      if (typeof options == 'string') {
        options = { filename: options };
      }
      var append2 = CombinedStream.prototype.append.bind(this);
      if (typeof value == 'number') {
        value = '' + value;
      }
      if (util2.isArray(value)) {
        this._error(new Error('Arrays are not supported.'));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append2(header);
      append2(value);
      append2(footer);
      this._trackLength(header, value, options);
    };
    FormData3.prototype._trackLength = function (header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === 'string') {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength +=
        Buffer.byteLength(header) + FormData3.LINE_BREAK.length;
      if (
        !value ||
        (!value.path &&
          !(value.readable && value.hasOwnProperty('httpVersion')) &&
          !(value instanceof Stream))
      ) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData3.prototype._lengthRetriever = function (value, callback) {
      if (value.hasOwnProperty('fd')) {
        if (
          value.end != void 0 &&
          value.end != Infinity &&
          value.start != void 0
        ) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs.stat(value.path, function (err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty('httpVersion')) {
        callback(null, +value.headers['content-length']);
      } else if (value.hasOwnProperty('httpModule')) {
        value.on('response', function (response) {
          value.pause();
          callback(null, +response.headers['content-length']);
        });
        value.resume();
      } else {
        callback('Unknown stream');
      }
    };
    FormData3.prototype._multiPartHeader = function (field, value, options) {
      if (typeof options.header == 'string') {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = '';
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(
          contentDisposition || []
        ),
        // if no content type. allow it to be empty array
        'Content-Type': [].concat(contentType || []),
      };
      if (typeof options.header == 'object') {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop)) continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ': ' + header.join('; ') + FormData3.LINE_BREAK;
        }
      }
      return (
        '--' +
        this.getBoundary() +
        FormData3.LINE_BREAK +
        contents +
        FormData3.LINE_BREAK
      );
    };
    FormData3.prototype._getContentDisposition = function (value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === 'string') {
        filename = path.normalize(options.filepath).replace(/\\/g, '/');
      } else if (options.filename || value.name || value.path) {
        filename = path.basename(options.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty('httpVersion')) {
        filename = path.basename(value.client._httpMessage.path || '');
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData3.prototype._getContentType = function (value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (
        !contentType &&
        value.readable &&
        value.hasOwnProperty('httpVersion')
      ) {
        contentType = value.headers['content-type'];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == 'object') {
        contentType = FormData3.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData3.prototype._multiPartFooter = function () {
      return function (next) {
        var footer = FormData3.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData3.prototype._lastBoundary = function () {
      return '--' + this.getBoundary() + '--' + FormData3.LINE_BREAK;
    };
    FormData3.prototype.getHeaders = function (userHeaders) {
      var header;
      var formHeaders = {
        'content-type': 'multipart/form-data; boundary=' + this.getBoundary(),
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData3.prototype.setBoundary = function (boundary) {
      this._boundary = boundary;
    };
    FormData3.prototype.getBoundary = function () {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData3.prototype.getBuffer = function () {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== 'function') {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([
              dataBuffer,
              Buffer.from(this._streams[i]),
            ]);
          }
          if (
            typeof this._streams[i] !== 'string' ||
            this._streams[i].substring(2, boundary.length + 2) !== boundary
          ) {
            dataBuffer = Buffer.concat([
              dataBuffer,
              Buffer.from(FormData3.LINE_BREAK),
            ]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData3.prototype._generateBoundary = function () {
      var boundary = '--------------------------';
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData3.prototype.getLengthSync = function () {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(
          new Error('Cannot calculate proper length in synchronous way.')
        );
      }
      return knownLength;
    };
    FormData3.prototype.hasKnownLength = function () {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData3.prototype.getLength = function (cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(
        this._valuesToMeasure,
        this._lengthRetriever,
        function (err, values) {
          if (err) {
            cb(err);
            return;
          }
          values.forEach(function (length) {
            knownLength += length;
          });
          cb(null, knownLength);
        }
      );
    };
    FormData3.prototype.submit = function (params, cb) {
      var request,
        options,
        defaults2 = { method: 'post' };
      if (typeof params == 'string') {
        params = parseUrl(params);
        options = populate(
          {
            port: params.port,
            path: params.pathname,
            host: params.hostname,
            protocol: params.protocol,
          },
          defaults2
        );
      } else {
        options = populate(params, defaults2);
        if (!options.port) {
          options.port = options.protocol == 'https:' ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == 'https:') {
        request = https2.request(options);
      } else {
        request = http2.request(options);
      }
      this.getLength(
        function (err, length) {
          if (err && err !== 'Unknown stream') {
            this._error(err);
            return;
          }
          if (length) {
            request.setHeader('Content-Length', length);
          }
          this.pipe(request);
          if (cb) {
            var onResponse;
            var callback = function (error, responce) {
              request.removeListener('error', callback);
              request.removeListener('response', onResponse);
              return cb.call(this, error, responce);
            };
            onResponse = callback.bind(this, null);
            request.on('error', callback);
            request.on('response', onResponse);
          }
        }.bind(this)
      );
      return request;
    };
    FormData3.prototype._error = function (err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit('error', err);
      }
    };
    FormData3.prototype.toString = function () {
      return '[object FormData]';
    };
  },
});

// node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS({
  'node_modules/proxy-from-env/index.js'(exports) {
    'use strict';
    var parseUrl = require('url').parse;
    var DEFAULT_PORTS = {
      ftp: 21,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443,
    };
    var stringEndsWith =
      String.prototype.endsWith ||
      function (s) {
        return (
          s.length <= this.length &&
          this.indexOf(s, this.length - s.length) !== -1
        );
      };
    function getProxyForUrl2(url2) {
      var parsedUrl = typeof url2 === 'string' ? parseUrl(url2) : url2 || {};
      var proto = parsedUrl.protocol;
      var hostname = parsedUrl.host;
      var port = parsedUrl.port;
      if (
        typeof hostname !== 'string' ||
        !hostname ||
        typeof proto !== 'string'
      ) {
        return '';
      }
      proto = proto.split(':', 1)[0];
      hostname = hostname.replace(/:\d*$/, '');
      port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
      if (!shouldProxy(hostname, port)) {
        return '';
      }
      var proxy =
        getEnv('npm_config_' + proto + '_proxy') ||
        getEnv(proto + '_proxy') ||
        getEnv('npm_config_proxy') ||
        getEnv('all_proxy');
      if (proxy && proxy.indexOf('://') === -1) {
        proxy = proto + '://' + proxy;
      }
      return proxy;
    }
    function shouldProxy(hostname, port) {
      var NO_PROXY = (
        getEnv('npm_config_no_proxy') || getEnv('no_proxy')
      ).toLowerCase();
      if (!NO_PROXY) {
        return true;
      }
      if (NO_PROXY === '*') {
        return false;
      }
      return NO_PROXY.split(/[,\s]/).every(function (proxy) {
        if (!proxy) {
          return true;
        }
        var parsedProxy = proxy.match(/^(.+):(\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
          return true;
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
          return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === '*') {
          parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        return !stringEndsWith.call(hostname, parsedProxyHostname);
      });
    }
    function getEnv(key) {
      return (
        process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || ''
      );
    }
    exports.getProxyForUrl = getProxyForUrl2;
  },
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  'node_modules/debug/src/common.js'(exports, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== 'string') {
            args.unshift('%O');
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === '%%') {
              return '%';
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === 'function') {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend2;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, 'enabled', {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          },
        });
        if (typeof createDebug.init === 'function') {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend2(namespace, delimiter) {
        const newDebug = createDebug(
          this.namespace +
            (typeof delimiter === 'undefined' ? ':' : delimiter) +
            namespace
        );
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === 'string' ? namespaces : '').split(
          /[\s,]+/
        );
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, '.*?');
          if (namespaces[0] === '-') {
            createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
          } else {
            createDebug.names.push(new RegExp('^' + namespaces + '$'));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips
            .map(toNamespace)
            .map((namespace) => '-' + namespace),
        ].join(',');
        createDebug.enable('');
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === '*') {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp
          .toString()
          .substring(2, regexp.toString().length - 2)
          .replace(/\.\*\?$/, '*');
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn(
          'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
        );
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  },
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  'node_modules/debug/src/browser.js'(exports, module2) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn(
            'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
          );
        }
      };
    })();
    exports.colors = [
      '#0000CC',
      '#0000FF',
      '#0033CC',
      '#0033FF',
      '#0066CC',
      '#0066FF',
      '#0099CC',
      '#0099FF',
      '#00CC00',
      '#00CC33',
      '#00CC66',
      '#00CC99',
      '#00CCCC',
      '#00CCFF',
      '#3300CC',
      '#3300FF',
      '#3333CC',
      '#3333FF',
      '#3366CC',
      '#3366FF',
      '#3399CC',
      '#3399FF',
      '#33CC00',
      '#33CC33',
      '#33CC66',
      '#33CC99',
      '#33CCCC',
      '#33CCFF',
      '#6600CC',
      '#6600FF',
      '#6633CC',
      '#6633FF',
      '#66CC00',
      '#66CC33',
      '#9900CC',
      '#9900FF',
      '#9933CC',
      '#9933FF',
      '#99CC00',
      '#99CC33',
      '#CC0000',
      '#CC0033',
      '#CC0066',
      '#CC0099',
      '#CC00CC',
      '#CC00FF',
      '#CC3300',
      '#CC3333',
      '#CC3366',
      '#CC3399',
      '#CC33CC',
      '#CC33FF',
      '#CC6600',
      '#CC6633',
      '#CC9900',
      '#CC9933',
      '#CCCC00',
      '#CCCC33',
      '#FF0000',
      '#FF0033',
      '#FF0066',
      '#FF0099',
      '#FF00CC',
      '#FF00FF',
      '#FF3300',
      '#FF3333',
      '#FF3366',
      '#FF3399',
      '#FF33CC',
      '#FF33FF',
      '#FF6600',
      '#FF6633',
      '#FF9900',
      '#FF9933',
      '#FFCC00',
      '#FFCC33',
    ];
    function useColors() {
      if (
        typeof window !== 'undefined' &&
        window.process &&
        (window.process.type === 'renderer' || window.process.__nwjs)
      ) {
        return true;
      }
      if (
        typeof navigator !== 'undefined' &&
        navigator.userAgent &&
        navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
      ) {
        return false;
      }
      return (
        (typeof document !== 'undefined' &&
          document.documentElement &&
          document.documentElement.style &&
          document.documentElement.style.WebkitAppearance) || // Is firebug? http://stackoverflow.com/a/398120/376773
        (typeof window !== 'undefined' &&
          window.console &&
          (window.console.firebug ||
            (window.console.exception && window.console.table))) || // Is firefox >= v31?
        // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        (typeof navigator !== 'undefined' &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
          parseInt(RegExp.$1, 10) >= 31) || // Double check webkit in userAgent just in case we are in a worker
        (typeof navigator !== 'undefined' &&
          navigator.userAgent &&
          navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
      );
    }
    function formatArgs(args) {
      args[0] =
        (this.useColors ? '%c' : '') +
        this.namespace +
        (this.useColors ? ' %c' : ' ') +
        args[0] +
        (this.useColors ? '%c ' : ' ') +
        '+' +
        module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = 'color: ' + this.color;
      args.splice(1, 0, c, 'color: inherit');
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === '%%') {
          return;
        }
        index++;
        if (match === '%c') {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {});
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem('debug', namespaces);
        } else {
          exports.storage.removeItem('debug');
        }
      } catch (error) {}
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem('debug');
      } catch (error) {}
      if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {}
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.j = function (v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
      }
    };
  },
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  'node_modules/has-flag/index.js'(exports, module2) {
    'use strict';
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf('--');
      return (
        position !== -1 &&
        (terminatorPosition === -1 || position < terminatorPosition)
      );
    };
  },
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  'node_modules/supports-color/index.js'(exports, module2) {
    'use strict';
    var os = require('os');
    var tty = require('tty');
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (
      hasFlag('no-color') ||
      hasFlag('no-colors') ||
      hasFlag('color=false') ||
      hasFlag('color=never')
    ) {
      forceColor = 0;
    } else if (
      hasFlag('color') ||
      hasFlag('colors') ||
      hasFlag('color=true') ||
      hasFlag('color=always')
    ) {
      forceColor = 1;
    }
    if ('FORCE_COLOR' in env) {
      if (env.FORCE_COLOR === 'true') {
        forceColor = 1;
      } else if (env.FORCE_COLOR === 'false') {
        forceColor = 0;
      } else {
        forceColor =
          env.FORCE_COLOR.length === 0
            ? 1
            : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3,
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (
        hasFlag('color=16m') ||
        hasFlag('color=full') ||
        hasFlag('color=truecolor')
      ) {
        return 3;
      }
      if (hasFlag('color=256')) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === 'dumb') {
        return min;
      }
      if (process.platform === 'win32') {
        const osRelease = os.release().split('.');
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ('CI' in env) {
        if (
          [
            'TRAVIS',
            'CIRCLECI',
            'APPVEYOR',
            'GITLAB_CI',
            'GITHUB_ACTIONS',
            'BUILDKITE',
          ].some((sign) => sign in env) ||
          env.CI_NAME === 'codeship'
        ) {
          return 1;
        }
        return min;
      }
      if ('TEAMCITY_VERSION' in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION)
          ? 1
          : 0;
      }
      if (env.COLORTERM === 'truecolor') {
        return 3;
      }
      if ('TERM_PROGRAM' in env) {
        const version2 = parseInt(
          (env.TERM_PROGRAM_VERSION || '').split('.')[0],
          10
        );
        switch (env.TERM_PROGRAM) {
          case 'iTerm.app':
            return version2 >= 3 ? 3 : 2;
          case 'Apple_Terminal':
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (
        /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(
          env.TERM
        )
      ) {
        return 1;
      }
      if ('COLORTERM' in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream4) {
      const level = supportsColor(stream4, stream4 && stream4.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2))),
    };
  },
});

// node_modules/debug/src/node.js
var require_node = __commonJS({
  'node_modules/debug/src/node.js'(exports, module2) {
    var tty = require('tty');
    var util2 = require('util');
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util2.deprecate(() => {},
    'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
          20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62,
          63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113,
          128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167,
          168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199,
          200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221,
        ];
      }
    } catch (error) {}
    exports.inspectOpts = Object.keys(process.env)
      .filter((key) => {
        return /^debug_/i.test(key);
      })
      .reduce((obj, key) => {
        const prop = key
          .substring(6)
          .toLowerCase()
          .replace(/_([a-z])/g, (_2, k) => {
            return k.toUpperCase();
          });
        let val = process.env[key];
        if (/^(yes|on|true|enabled)$/i.test(val)) {
          val = true;
        } else if (/^(no|off|false|disabled)$/i.test(val)) {
          val = false;
        } else if (val === 'null') {
          val = null;
        } else {
          val = Number(val);
        }
        obj[prop] = val;
        return obj;
      }, {});
    function useColors() {
      return 'colors' in exports.inspectOpts
        ? Boolean(exports.inspectOpts.colors)
        : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = '\x1B[3' + (c < 8 ? c : '8;5;' + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split('\n').join('\n' + prefix);
        args.push(
          colorCode + 'm+' + module2.exports.humanize(this.diff) + '\x1B[0m'
        );
      } else {
        args[0] = getDate() + name + ' ' + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return '';
      }
      return /* @__PURE__ */ new Date().toISOString() + ' ';
    }
    function log(...args) {
      return process.stderr.write(util2.format(...args) + '\n');
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common()(exports);
    var { formatters } = module2.exports;
    formatters.o = function (v) {
      this.inspectOpts.colors = this.useColors;
      return util2
        .inspect(v, this.inspectOpts)
        .split('\n')
        .map((str) => str.trim())
        .join(' ');
    };
    formatters.O = function (v) {
      this.inspectOpts.colors = this.useColors;
      return util2.inspect(v, this.inspectOpts);
    };
  },
});

// node_modules/debug/src/index.js
var require_src = __commonJS({
  'node_modules/debug/src/index.js'(exports, module2) {
    if (
      typeof process === 'undefined' ||
      process.type === 'renderer' ||
      process.browser === true ||
      process.__nwjs
    ) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  },
});

// node_modules/follow-redirects/debug.js
var require_debug3 = __commonJS({
  'node_modules/follow-redirects/debug.js'(exports, module2) {
    var debug;
    module2.exports = function () {
      if (!debug) {
        try {
          debug = require_src()('follow-redirects');
        } catch (error) {}
        if (typeof debug !== 'function') {
          debug = function () {};
        }
      }
      debug.apply(null, arguments);
    };
  },
});

// node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  'node_modules/follow-redirects/index.js'(exports, module2) {
    var url2 = require('url');
    var URL3 = url2.URL;
    var http2 = require('http');
    var https2 = require('https');
    var Writable = require('stream').Writable;
    var assert = require('assert');
    var debug = require_debug3();
    var events = ['abort', 'aborted', 'connect', 'error', 'socket', 'timeout'];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function (event) {
      eventHandlers[event] = function (arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      'ERR_INVALID_URL',
      'Invalid URL',
      TypeError
    );
    var RedirectionError = createErrorType(
      'ERR_FR_REDIRECTION_FAILURE',
      'Redirected request failed'
    );
    var TooManyRedirectsError = createErrorType(
      'ERR_FR_TOO_MANY_REDIRECTS',
      'Maximum number of redirects exceeded'
    );
    var MaxBodyLengthExceededError = createErrorType(
      'ERR_FR_MAX_BODY_LENGTH_EXCEEDED',
      'Request body larger than maxBodyLength limit'
    );
    var WriteAfterEndError = createErrorType(
      'ERR_STREAM_WRITE_AFTER_END',
      'write after end'
    );
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on('response', responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function (response) {
        self2._processResponse(response);
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function () {
      abortRequest(this._currentRequest);
      this.emit('abort');
    };
    RedirectableRequest.prototype.write = function (data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString2(data) && !isBuffer2(data)) {
        throw new TypeError('data should be a string, Buffer or Uint8Array');
      }
      if (isFunction2(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (
        this._requestBodyLength + data.length <=
        this._options.maxBodyLength
      ) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit('error', new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function (data, encoding, callback) {
      if (isFunction2(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction2(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self2 = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function () {
          self2._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function (name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function (name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
      var self2 = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener('timeout', socket.destroy);
        socket.addListener('timeout', socket.destroy);
      }
      function startTimer(socket) {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
        }
        self2._timeout = setTimeout(function () {
          self2.emit('timeout');
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
          self2._timeout = null;
        }
        self2.removeListener('abort', clearTimer);
        self2.removeListener('error', clearTimer);
        self2.removeListener('response', clearTimer);
        if (callback) {
          self2.removeListener('timeout', callback);
        }
        if (!self2.socket) {
          self2._currentRequest.removeListener('socket', startTimer);
        }
      }
      if (callback) {
        this.on('timeout', callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once('socket', startTimer);
      }
      this.on('socket', destroyOnTimeout);
      this.on('abort', clearTimer);
      this.on('error', clearTimer);
      this.on('response', clearTimer);
      return this;
    };
    ['flushHeaders', 'getHeader', 'setNoDelay', 'setSocketKeepAlive'].forEach(
      function (method) {
        RedirectableRequest.prototype[method] = function (a, b) {
          return this._currentRequest[method](a, b);
        };
      }
    );
    ['aborted', 'connection', 'socket'].forEach(function (property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function () {
          return this._currentRequest[property];
        },
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function (options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf('?');
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function () {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit('error', new TypeError('Unsupported protocol ' + protocol));
        return;
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = (this._currentRequest = nativeProtocol.request(
        this._options,
        this._onNativeResponse
      ));
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\//.test(this._options.path)
        ? url2.format(this._options)
        : // When making a request to a proxy, […]
          // a client MUST send the target URI in absolute-form […].
          this._options.path;
      if (this._isRedirect) {
        var i = 0;
        var self2 = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self2._currentRequest) {
            if (error) {
              self2.emit('error', error);
            } else if (i < buffers.length) {
              var buffer = buffers[i++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self2._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function (response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode,
        });
      }
      var location = response.headers.location;
      if (
        !location ||
        this._options.followRedirects === false ||
        statusCode < 300 ||
        statusCode >= 400
      ) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit('response', response);
        this._requestBodyBuffers = [];
        return;
      }
      abortRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        this.emit('error', new TooManyRedirectsError());
        return;
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign(
          {
            // The Host header was set by nativeProtocol.request
            Host: response.req.getHeader('host'),
          },
          this._options.headers
        );
      }
      var method = this._options.method;
      if (
        ((statusCode === 301 || statusCode === 302) &&
          this._options.method === 'POST') || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
        // the server is redirecting the user agent to a different resource […]
        // A user agent can perform a retrieval request targeting that URI
        // (a GET or HEAD request if using HTTP) […]
        (statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method))
      ) {
        this._options.method = 'GET';
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(
        /^host$/i,
        this._options.headers
      );
      var currentUrlParts = url2.parse(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\w+:/.test(location)
        ? this._currentUrl
        : url2.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl;
      try {
        redirectUrl = url2.resolve(currentUrl, location);
      } catch (cause) {
        this.emit('error', new RedirectionError({ cause }));
        return;
      }
      debug('redirecting to', redirectUrl);
      this._isRedirect = true;
      var redirectUrlParts = url2.parse(redirectUrl);
      Object.assign(this._options, redirectUrlParts);
      if (
        (redirectUrlParts.protocol !== currentUrlParts.protocol &&
          redirectUrlParts.protocol !== 'https:') ||
        (redirectUrlParts.host !== currentHost &&
          !isSubdomain(redirectUrlParts.host, currentHost))
      ) {
        removeMatchingHeaders(
          /^(?:authorization|cookie)$/i,
          this._options.headers
        );
      }
      if (isFunction2(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode,
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders,
        };
        try {
          beforeRedirect(this._options, responseDetails, requestDetails);
        } catch (err) {
          this.emit('error', err);
          return;
        }
        this._sanitizeOptions(this._options);
      }
      try {
        this._performRequest();
      } catch (cause) {
        this.emit('error', new RedirectionError({ cause }));
      }
    };
    function wrap(protocols) {
      var exports2 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024,
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function (scheme) {
        var protocol = scheme + ':';
        var nativeProtocol = (nativeProtocols[protocol] = protocols[scheme]);
        var wrappedProtocol = (exports2[scheme] =
          Object.create(nativeProtocol));
        function request(input, options, callback) {
          if (isString2(input)) {
            var parsed;
            try {
              parsed = urlToOptions(new URL3(input));
            } catch (err) {
              parsed = url2.parse(input);
            }
            if (!isString2(parsed.protocol)) {
              throw new InvalidUrlError({ input });
            }
            input = parsed;
          } else if (URL3 && input instanceof URL3) {
            input = urlToOptions(input);
          } else {
            callback = options;
            options = input;
            input = { protocol };
          }
          if (isFunction2(options)) {
            callback = options;
            options = null;
          }
          options = Object.assign(
            {
              maxRedirects: exports2.maxRedirects,
              maxBodyLength: exports2.maxBodyLength,
            },
            input,
            options
          );
          options.nativeProtocols = nativeProtocols;
          if (!isString2(options.host) && !isString2(options.hostname)) {
            options.hostname = '::1';
          }
          assert.equal(options.protocol, protocol, 'protocol mismatch');
          debug('options', options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(
            input,
            options,
            callback
          );
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: {
            value: request,
            configurable: true,
            enumerable: true,
            writable: true,
          },
          get: {
            value: get,
            configurable: true,
            enumerable: true,
            writable: true,
          },
        });
      });
      return exports2;
    }
    function noop2() {}
    function urlToOptions(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith('[')
          ? /* istanbul ignore next */
            urlObject.hostname.slice(1, -1)
          : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href,
      };
      if (urlObject.port !== '') {
        options.port = Number(urlObject.port);
      }
      return options;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === 'undefined'
        ? void 0
        : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        Error.captureStackTrace(this, this.constructor);
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause
          ? message + ': ' + this.cause.message
          : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = 'Error [' + code + ']';
      return CustomError;
    }
    function abortRequest(request) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on('error', noop2);
      request.abort();
    }
    function isSubdomain(subdomain, domain) {
      assert(isString2(subdomain) && isString2(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === '.' && subdomain.endsWith(domain);
    }
    function isString2(value) {
      return typeof value === 'string' || value instanceof String;
    }
    function isFunction2(value) {
      return typeof value === 'function';
    }
    function isBuffer2(value) {
      return typeof value === 'object' && 'length' in value;
    }
    module2.exports = wrap({ http: http2, https: https2 });
    module2.exports.wrap = wrap;
  },
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  'node_modules/bn.js/lib/bn.js'(exports, module2) {
    (function (module3, exports2) {
      'use strict';
      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module3 === 'object') {
        module3.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (
          typeof window !== 'undefined' &&
          typeof window.Buffer !== 'undefined'
        ) {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require('buffer').Buffer;
        }
      } catch (e) {}
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return (
          num !== null &&
          typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize &&
          Array.isArray(num.words)
        );
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }
        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [number & 67108863, (number / 67108864) & 67108863];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [number & 67108863, (number / 67108864) & 67108863, 1];
          this.length = 3;
        }
        if (endian !== 'le') return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 67108863;
            this.words[j + 1] = (w >>> (26 - off)) & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 67108863;
            this.words[j + 1] = (w >>> (26 - off)) & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return (c - 48) & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (
            i = parseLength % 2 === 0 ? start + 1 : start;
            i < number.length;
            i += 2
          ) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (
          var limbLen = 0, limbPow = 1;
          limbPow <= 67108863;
          limbPow *= base
        ) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };
      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000',
      ];
      var groupSizes = [
        0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
      ];
      var groupBases = [
        0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607,
        16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536,
        11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101,
        5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368,
        20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875,
        60466176,
      ];
      BN.prototype.toString = function toString3(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 16777215).toString(16);
            carry = (w >>> (24 - off)) & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }
        assert(false, 'Base should be between 2 and 36');
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== 'undefined');
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(
        ArrayType,
        endian,
        length
      ) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(
          byteLength <= reqLength,
          'byte array longer than desired length'
        );
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (67108863 >> (26 - bitsLeft));
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = (bit / 26) | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = (self2.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = (r / 67108864) | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 67108864) | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 8191) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = (ncarry + ((r / 67108864) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 67108863;
            ncarry = (ncarry + (lo >>> 26)) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(
        rws,
        iws,
        rtws,
        itws,
        N,
        rbt
      ) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos((2 * Math.PI) / l);
          var itwdf = Math.sin((2 * Math.PI) / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = (N / 2) | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << (i + 1 + odd);
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w =
            Math.round(ws[2 * i + 1] / N) * 8192 +
            Math.round(ws[2 * i] / N) +
            carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = (w / 67108864) | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _2 = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _2, rwst, iwst, N, rbt);
        this.transform(nrws, _2, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _2, N, rbt);
        this.conjugate(rmws, _2, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += (w / 67108864) | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (67108863 >>> (26 - r)) << (26 - r);
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ ((67108863 >>> r) << r);
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ ((67108863 >>> r) << r);
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - ((right / 67108864) | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj =
            (a.words[b.length + j] | 0) * 67108864 +
            (a.words[b.length + j - 1] | 0);
          qj = Math.min((qj / bhi) | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a,
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0),
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== 'mod') {
            div = res.div.neg();
          }
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod,
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== 'mod') {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod,
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod,
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this,
          };
        }
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null,
            };
          }
          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0])),
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0])),
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (
            var i = 0, im = 1;
            (x.words[0] & im) === 0 && i < 26;
            ++i, im <<= 1
          );
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (
            var j = 0, jm = 1;
            (y.words[0] & jm) === 0 && j < 26;
            ++j, jm <<= 1
          );
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g),
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (
            var i = 0, im = 1;
            (a.words[0] & im) === 0 && i < 26;
            ++i, im <<= 1
          );
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (
            var j = 0, jm = 1;
            (b.words[0] & jm) === 0 && j < 26;
            ++j, jm <<= 1
          );
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, 'Number is too big');
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(
          this.red,
          'fromRed works only with numbers in reduction context'
        );
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null,
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f'
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + ((lo / 67108864) | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001'
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff'
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed'
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === 'k256') {
          prime2 = new K256();
        } else if (name === 'p224') {
          prime2 = new P224();
        } else if (name === 'p192') {
          prime2 = new P192();
        } else if (name === 'p25519') {
          prime2 = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert(
          (a.negative | b.negative) === 0,
          'red works only with positives'
        );
        assert(a.red && a.red === b.red, 'red works only with red numbers');
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t
          .maskn(this.shift)
          .mul(this.minv)
          .imaskn(this.shift)
          .mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t
          .maskn(this.shift)
          .mul(this.minv)
          .imaskn(this.shift)
          .mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === 'undefined' || module2, exports);
  },
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  'node_modules/inherits/inherits_browser.js'(exports, module2) {
    if (typeof Object.create === 'function') {
      module2.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true,
            },
          });
        }
      };
    } else {
      module2.exports = function inherits2(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  },
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  'node_modules/inherits/inherits.js'(exports, module2) {
    try {
      util2 = require('util');
      if (typeof util2.inherits !== 'function') throw '';
      module2.exports = util2.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util2;
  },
});

// node_modules/safer-buffer/safer.js
var require_safer = __commonJS({
  'node_modules/safer-buffer/safer.js'(exports, module2) {
    'use strict';
    var buffer = require('buffer');
    var Buffer2 = buffer.Buffer;
    var safer = {};
    var key;
    for (key in buffer) {
      if (!buffer.hasOwnProperty(key)) continue;
      if (key === 'SlowBuffer' || key === 'Buffer') continue;
      safer[key] = buffer[key];
    }
    var Safer = (safer.Buffer = {});
    for (key in Buffer2) {
      if (!Buffer2.hasOwnProperty(key)) continue;
      if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
      Safer[key] = Buffer2[key];
    }
    safer.Buffer.prototype = Buffer2.prototype;
    if (!Safer.from || Safer.from === Uint8Array.from) {
      Safer.from = function (value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type ' +
              typeof value
          );
        }
        if (value && typeof value.length === 'undefined') {
          throw new TypeError(
            'The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' +
              typeof value
          );
        }
        return Buffer2(value, encodingOrOffset, length);
      };
    }
    if (!Safer.alloc) {
      Safer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError(
            'The "size" argument must be of type number. Received type ' +
              typeof size
          );
        }
        if (size < 0 || size >= 2 * (1 << 30)) {
          throw new RangeError(
            'The value "' + size + '" is invalid for option "size"'
          );
        }
        var buf = Buffer2(size);
        if (!fill || fill.length === 0) {
          buf.fill(0);
        } else if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
        return buf;
      };
    }
    if (!safer.kStringMaxLength) {
      try {
        safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
      } catch (e) {}
    }
    if (!safer.constants) {
      safer.constants = {
        MAX_LENGTH: safer.kMaxLength,
      };
      if (safer.kStringMaxLength) {
        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
      }
    }
    module2.exports = safer;
  },
});

// node_modules/asn1.js/lib/asn1/base/reporter.js
var require_reporter = __commonJS({
  'node_modules/asn1.js/lib/asn1/base/reporter.js'(exports) {
    'use strict';
    var inherits2 = require_inherits();
    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: [],
      };
    }
    exports.Reporter = Reporter;
    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };
    Reporter.prototype.save = function save() {
      const state = this._reporterState;
      return { obj: state.obj, pathLen: state.path.length };
    };
    Reporter.prototype.restore = function restore(data) {
      const state = this._reporterState;
      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };
    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };
    Reporter.prototype.exitKey = function exitKey(index) {
      const state = this._reporterState;
      state.path = state.path.slice(0, index - 1);
    };
    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      const state = this._reporterState;
      this.exitKey(index);
      if (state.obj !== null) state.obj[key] = value;
    };
    Reporter.prototype.path = function path() {
      return this._reporterState.path.join('/');
    };
    Reporter.prototype.enterObject = function enterObject() {
      const state = this._reporterState;
      const prev = state.obj;
      state.obj = {};
      return prev;
    };
    Reporter.prototype.leaveObject = function leaveObject(prev) {
      const state = this._reporterState;
      const now = state.obj;
      state.obj = prev;
      return now;
    };
    Reporter.prototype.error = function error(msg) {
      let err;
      const state = this._reporterState;
      const inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(
          state.path
            .map(function (elem) {
              return '[' + JSON.stringify(elem) + ']';
            })
            .join(''),
          msg.message || msg,
          msg.stack
        );
      }
      if (!state.options.partial) throw err;
      if (!inherited) state.errors.push(err);
      return err;
    };
    Reporter.prototype.wrapResult = function wrapResult(result) {
      const state = this._reporterState;
      if (!state.options.partial) return result;
      return {
        result: this.isError(result) ? null : result,
        errors: state.errors,
      };
    };
    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits2(ReporterError, Error);
    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + ' at: ' + (this.path || '(shallow)');
      if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
      if (!this.stack) {
        try {
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };
  },
});

// node_modules/asn1.js/lib/asn1/base/buffer.js
var require_buffer = __commonJS({
  'node_modules/asn1.js/lib/asn1/base/buffer.js'(exports) {
    'use strict';
    var inherits2 = require_inherits();
    var Reporter = require_reporter().Reporter;
    var Buffer2 = require_safer().Buffer;
    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer2.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
      }
      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits2(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;
    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
      if (data instanceof DecoderBuffer) {
        return true;
      }
      const isCompatible =
        typeof data === 'object' &&
        Buffer2.isBuffer(data.base) &&
        data.constructor.name === 'DecoderBuffer' &&
        typeof data.offset === 'number' &&
        typeof data.length === 'number' &&
        typeof data.save === 'function' &&
        typeof data.restore === 'function' &&
        typeof data.isEmpty === 'function' &&
        typeof data.readUInt8 === 'function' &&
        typeof data.skip === 'function' &&
        typeof data.raw === 'function';
      return isCompatible;
    };
    DecoderBuffer.prototype.save = function save() {
      return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this),
      };
    };
    DecoderBuffer.prototype.restore = function restore(save) {
      const res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;
      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);
      return res;
    };
    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };
    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else return this.error(fail || 'DecoderBuffer overrun');
    };
    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || 'DecoderBuffer overrun');
      const res = new DecoderBuffer(this.base);
      res._reporterState = this._reporterState;
      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };
    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };
    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function (item) {
          if (!EncoderBuffer.isEncoderBuffer(item))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 255))
          return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer2.byteLength(value);
      } else if (Buffer2.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error('Unsupported type: ' + typeof value);
      }
    }
    exports.EncoderBuffer = EncoderBuffer;
    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
      if (data instanceof EncoderBuffer) {
        return true;
      }
      const isCompatible =
        typeof data === 'object' &&
        data.constructor.name === 'EncoderBuffer' &&
        typeof data.length === 'number' &&
        typeof data.join === 'function';
      return isCompatible;
    };
    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out) out = Buffer2.alloc(this.length);
      if (!offset) offset = 0;
      if (this.length === 0) return out;
      if (Array.isArray(this.value)) {
        this.value.forEach(function (item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if (Buffer2.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
      }
      return out;
    };
  },
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  'node_modules/minimalistic-assert/index.js'(exports, module2) {
    module2.exports = assert;
    function assert(val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }
    assert.equal = function assertEqual(l, r, msg) {
      if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
    };
  },
});

// node_modules/asn1.js/lib/asn1/base/node.js
var require_node2 = __commonJS({
  'node_modules/asn1.js/lib/asn1/base/node.js'(exports, module2) {
    'use strict';
    var Reporter = require_reporter().Reporter;
    var EncoderBuffer = require_buffer().EncoderBuffer;
    var DecoderBuffer = require_buffer().DecoderBuffer;
    var assert = require_minimalistic_assert();
    var tags = [
      'seq',
      'seqof',
      'set',
      'setof',
      'objid',
      'bool',
      'gentime',
      'utctime',
      'null_',
      'enum',
      'int',
      'objDesc',
      'bitstr',
      'bmpstr',
      'charstr',
      'genstr',
      'graphstr',
      'ia5str',
      'iso646str',
      'numstr',
      'octstr',
      'printstr',
      't61str',
      'unistr',
      'utf8str',
      'videostr',
    ];
    var methods = [
      'key',
      'obj',
      'use',
      'optional',
      'explicit',
      'implicit',
      'def',
      'choice',
      'any',
      'contains',
    ].concat(tags);
    var overrided = [
      '_peekTag',
      '_decodeTag',
      '_use',
      '_decodeStr',
      '_decodeObjid',
      '_decodeTime',
      '_decodeNull',
      '_decodeInt',
      '_decodeBool',
      '_decodeList',
      '_encodeComposite',
      '_encodeStr',
      '_encodeObjid',
      '_encodeTime',
      '_encodeNull',
      '_encodeInt',
      '_encodeBool',
    ];
    function Node(enc, parent, name) {
      const state = {};
      this._baseState = state;
      state.name = name;
      state.enc = enc;
      state.parent = parent || null;
      state.children = null;
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state['default'] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module2.exports = Node;
    var stateProps = [
      'enc',
      'parent',
      'children',
      'tag',
      'args',
      'reverseArgs',
      'choice',
      'optional',
      'any',
      'obj',
      'use',
      'alteredUse',
      'key',
      'default',
      'explicit',
      'implicit',
      'contains',
    ];
    Node.prototype.clone = function clone() {
      const state = this._baseState;
      const cstate = {};
      stateProps.forEach(function (prop) {
        cstate[prop] = state[prop];
      });
      const res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };
    Node.prototype._wrap = function wrap() {
      const state = this._baseState;
      methods.forEach(function (method) {
        this[method] = function _wrappedMethod() {
          const clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };
    Node.prototype._init = function init(body) {
      const state = this._baseState;
      assert(state.parent === null);
      body.call(this);
      state.children = state.children.filter(function (child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(
        state.children.length,
        1,
        'Root node can have only one child'
      );
    };
    Node.prototype._useArgs = function useArgs(args) {
      const state = this._baseState;
      const children = args.filter(function (arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function (arg) {
        return !(arg instanceof this.constructor);
      }, this);
      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        children.forEach(function (child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function (arg) {
          if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
          const res = {};
          Object.keys(arg).forEach(function (key) {
            if (key == (key | 0)) key |= 0;
            const value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };
    overrided.forEach(function (method) {
      Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
      };
    });
    tags.forEach(function (tag) {
      Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
      };
    });
    Node.prototype.use = function use(item) {
      assert(item);
      const state = this._baseState;
      assert(state.use === null);
      state.use = item;
      return this;
    };
    Node.prototype.optional = function optional() {
      const state = this._baseState;
      state.optional = true;
      return this;
    };
    Node.prototype.def = function def(val) {
      const state = this._baseState;
      assert(state['default'] === null);
      state['default'] = val;
      state.optional = true;
      return this;
    };
    Node.prototype.explicit = function explicit(num) {
      const state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;
      return this;
    };
    Node.prototype.implicit = function implicit(num) {
      const state = this._baseState;
      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;
      return this;
    };
    Node.prototype.obj = function obj() {
      const state = this._baseState;
      const args = Array.prototype.slice.call(arguments);
      state.obj = true;
      if (args.length !== 0) this._useArgs(args);
      return this;
    };
    Node.prototype.key = function key(newKey) {
      const state = this._baseState;
      assert(state.key === null);
      state.key = newKey;
      return this;
    };
    Node.prototype.any = function any() {
      const state = this._baseState;
      state.any = true;
      return this;
    };
    Node.prototype.choice = function choice(obj) {
      const state = this._baseState;
      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(
        Object.keys(obj).map(function (key) {
          return obj[key];
        })
      );
      return this;
    };
    Node.prototype.contains = function contains(item) {
      const state = this._baseState;
      assert(state.use === null);
      state.contains = item;
      return this;
    };
    Node.prototype._decode = function decode(input, options) {
      const state = this._baseState;
      if (state.parent === null)
        return input.wrapResult(state.children[0]._decode(input, options));
      let result = state['default'];
      let present = true;
      let prevKey = null;
      if (state.key !== null) prevKey = input.enterKey(state.key);
      if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
          const save = input.save();
          try {
            if (state.choice === null)
              this._decodeGeneric(state.tag, input, options);
            else this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);
          if (input.isError(present)) return present;
        }
      }
      let prevObj;
      if (state.obj && present) prevObj = input.enterObject();
      if (present) {
        if (state.explicit !== null) {
          const explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit)) return explicit;
          input = explicit;
        }
        const start = input.offset;
        if (state.use === null && state.choice === null) {
          let save;
          if (state.any) save = input.save();
          const body = this._decodeTag(
            input,
            state.implicit !== null ? state.implicit : state.tag,
            state.any
          );
          if (input.isError(body)) return body;
          if (state.any) result = input.raw(save);
          else input = body;
        }
        if (options && options.track && state.tag !== null)
          options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null)
          options.track(input.path(), input.offset, input.length, 'content');
        if (state.any) {
        } else if (state.choice === null) {
          result = this._decodeGeneric(state.tag, input, options);
        } else {
          result = this._decodeChoice(input, options);
        }
        if (input.isError(result)) return result;
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            child._decode(input, options);
          });
        }
        if (
          state.contains &&
          (state.tag === 'octstr' || state.tag === 'bitstr')
        ) {
          const data = new DecoderBuffer(result);
          result = this._getUse(
            state.contains,
            input._reporterState.obj
          )._decode(data, options);
        }
      }
      if (state.obj && present) result = input.leaveObject(prevObj);
      if (state.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null) input.exitKey(prevKey);
      return result;
    };
    Node.prototype._decodeGeneric = function decodeGeneric(
      tag,
      input,
      options
    ) {
      const state = this._baseState;
      if (tag === 'seq' || tag === 'set') return null;
      if (tag === 'seqof' || tag === 'setof')
        return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
      else if (tag === 'objid' && state.args)
        return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === 'objid')
        return this._decodeObjid(input, null, null, options);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._decodeTime(input, tag, options);
      else if (tag === 'null_') return this._decodeNull(input, options);
      else if (tag === 'bool') return this._decodeBool(input, options);
      else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
      else if (tag === 'int' || tag === 'enum')
        return this._decodeInt(input, state.args && state.args[0], options);
      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)._decode(
          input,
          options
        );
      } else {
        return input.error('unknown tag: ' + tag);
      }
    };
    Node.prototype._getUse = function _getUse(entity, obj) {
      const state = this._baseState;
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };
    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      const state = this._baseState;
      let result = null;
      let match = false;
      Object.keys(state.choice).some(function (key) {
        const save = input.save();
        const node = state.choice[key];
        try {
          const value = node._decode(input, options);
          if (input.isError(value)) return false;
          result = { type: key, value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);
      if (!match) return input.error('Choice not matched');
      return result;
    };
    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };
    Node.prototype._encode = function encode3(data, reporter, parent) {
      const state = this._baseState;
      if (state['default'] !== null && state['default'] === data) return;
      const result = this._encodeValue(data, reporter, parent);
      if (result === void 0) return;
      if (this._skipDefault(result, reporter, parent)) return;
      return result;
    };
    Node.prototype._encodeValue = function encode3(data, reporter, parent) {
      const state = this._baseState;
      if (state.parent === null)
        return state.children[0]._encode(data, reporter || new Reporter());
      let result = null;
      this.reporter = reporter;
      if (state.optional && data === void 0) {
        if (state['default'] !== null) data = state['default'];
        else return;
      }
      let content = null;
      let primitive = false;
      if (state.any) {
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children
          .map(function (child) {
            if (child._baseState.tag === 'null_')
              return child._encode(null, reporter, data);
            if (child._baseState.key === null)
              return reporter.error('Child should have a key');
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object')
              return reporter.error('Child expected, but input is not object');
            const res = child._encode(
              data[child._baseState.key],
              reporter,
              data
            );
            reporter.leaveKey(prevKey);
            return res;
          }, this)
          .filter(function (child) {
            return child;
          });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
          if (!(state.args && state.args.length === 1))
            return reporter.error('Too many args for : ' + state.tag);
          if (!Array.isArray(data))
            return reporter.error('seqof/setof, but data is not Array');
          const child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(
            data.map(function (item) {
              const state2 = this._baseState;
              return this._getUse(state2.args[0], data)._encode(item, reporter);
            }, child)
          );
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }
      if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? 'universal' : 'context';
        if (tag === null) {
          if (state.use === null)
            reporter.error('Tag could be omitted only for .use()');
        } else {
          if (state.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }
      if (state.explicit !== null)
        result = this._encodeComposite(
          state.explicit,
          false,
          'context',
          result
        );
      return result;
    };
    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      const state = this._baseState;
      const node = state.choice[data.type];
      if (!node) {
        assert(
          false,
          data.type +
            ' not found in ' +
            JSON.stringify(Object.keys(state.choice))
        );
      }
      return node._encode(data.value, reporter);
    };
    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      const state = this._baseState;
      if (/str$/.test(tag)) return this._encodeStr(data, tag);
      else if (tag === 'objid' && state.args)
        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === 'objid') return this._encodeObjid(data, null, null);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._encodeTime(data, tag);
      else if (tag === 'null_') return this._encodeNull();
      else if (tag === 'int' || tag === 'enum')
        return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === 'bool') return this._encodeBool(data);
      else if (tag === 'objDesc') return this._encodeStr(data, tag);
      else throw new Error('Unsupported tag: ' + tag);
    };
    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };
    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
    };
  },
});

// node_modules/asn1.js/lib/asn1/constants/der.js
var require_der = __commonJS({
  'node_modules/asn1.js/lib/asn1/constants/der.js'(exports) {
    'use strict';
    function reverse(map) {
      const res = {};
      Object.keys(map).forEach(function (key) {
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
      });
      return res;
    }
    exports.tagClass = {
      0: 'universal',
      1: 'application',
      2: 'context',
      3: 'private',
    };
    exports.tagClassByName = reverse(exports.tagClass);
    exports.tag = {
      0: 'end',
      1: 'bool',
      2: 'int',
      3: 'bitstr',
      4: 'octstr',
      5: 'null_',
      6: 'objid',
      7: 'objDesc',
      8: 'external',
      9: 'real',
      10: 'enum',
      11: 'embed',
      12: 'utf8str',
      13: 'relativeOid',
      16: 'seq',
      17: 'set',
      18: 'numstr',
      19: 'printstr',
      20: 't61str',
      21: 'videostr',
      22: 'ia5str',
      23: 'utctime',
      24: 'gentime',
      25: 'graphstr',
      26: 'iso646str',
      27: 'genstr',
      28: 'unistr',
      29: 'charstr',
      30: 'bmpstr',
    };
    exports.tagByName = reverse(exports.tag);
  },
});

// node_modules/asn1.js/lib/asn1/encoders/der.js
var require_der2 = __commonJS({
  'node_modules/asn1.js/lib/asn1/encoders/der.js'(exports, module2) {
    'use strict';
    var inherits2 = require_inherits();
    var Buffer2 = require_safer().Buffer;
    var Node = require_node2();
    var der = require_der();
    function DEREncoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module2.exports = DEREncoder;
    DEREncoder.prototype.encode = function encode3(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };
    function DERNode(parent) {
      Node.call(this, 'der', parent);
    }
    inherits2(DERNode, Node);
    DERNode.prototype._encodeComposite = function encodeComposite(
      tag,
      primitive,
      cls,
      content
    ) {
      const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
      if (content.length < 128) {
        const header2 = Buffer2.alloc(2);
        header2[0] = encodedTag;
        header2[1] = content.length;
        return this._createEncoderBuffer([header2, content]);
      }
      let lenOctets = 1;
      for (let i = content.length; i >= 256; i >>= 8) lenOctets++;
      const header = Buffer2.alloc(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 128 | lenOctets;
      for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 255;
      return this._createEncoderBuffer([header, content]);
    };
    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === 'bitstr') {
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === 'bmpstr') {
        const buf = Buffer2.alloc(str.length * 2);
        for (let i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) {
          return this.reporter.error(
            'Encoding of string type: numstr supports only digits and space'
          );
        }
        return this._createEncoderBuffer(str);
      } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) {
          return this.reporter.error(
            'Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark'
          );
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === 'objDesc') {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error(
          'Encoding of string type: ' + tag + ' unsupported'
        );
      }
    };
    DERNode.prototype._encodeObjid = function encodeObjid(
      id,
      values,
      relative
    ) {
      if (typeof id === 'string') {
        if (!values)
          return this.reporter.error(
            'string objid given, but no values map found'
          );
        if (!values.hasOwnProperty(id))
          return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for (let i = 0; i < id.length; i++) id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (let i = 0; i < id.length; i++) id[i] |= 0;
      }
      if (!Array.isArray(id)) {
        return this.reporter.error(
          'objid() should be either array or string, got: ' + JSON.stringify(id)
        );
      }
      if (!relative) {
        if (id[1] >= 40)
          return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
      }
      let size = 0;
      for (let i = 0; i < id.length; i++) {
        let ident = id[i];
        for (size++; ident >= 128; ident >>= 7) size++;
      }
      const objid = Buffer2.alloc(size);
      let offset = objid.length - 1;
      for (let i = id.length - 1; i >= 0; i--) {
        let ident = id[i];
        objid[offset--] = ident & 127;
        while ((ident >>= 7) > 0) objid[offset--] = 128 | (ident & 127);
      }
      return this._createEncoderBuffer(objid);
    };
    function two(num) {
      if (num < 10) return '0' + num;
      else return num;
    }
    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      let str;
      const date = new Date(time);
      if (tag === 'gentime') {
        str = [
          two(date.getUTCFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z',
        ].join('');
      } else if (tag === 'utctime') {
        str = [
          two(date.getUTCFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z',
        ].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }
      return this._encodeStr(str, 'octstr');
    };
    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer('');
    };
    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === 'string') {
        if (!values)
          return this.reporter.error(
            'String int or enum given, but no values map'
          );
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error(
            "Values map doesn't contain: " + JSON.stringify(num)
          );
        }
        num = values[num];
      }
      if (typeof num !== 'number' && !Buffer2.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) {
          numArray.unshift(0);
        }
        num = Buffer2.from(numArray);
      }
      if (Buffer2.isBuffer(num)) {
        let size2 = num.length;
        if (num.length === 0) size2++;
        const out2 = Buffer2.alloc(size2);
        num.copy(out2);
        if (num.length === 0) out2[0] = 0;
        return this._createEncoderBuffer(out2);
      }
      if (num < 128) return this._createEncoderBuffer(num);
      if (num < 256) return this._createEncoderBuffer([0, num]);
      let size = 1;
      for (let i = num; i >= 256; i >>= 8) size++;
      const out = new Array(size);
      for (let i = out.length - 1; i >= 0; i--) {
        out[i] = num & 255;
        num >>= 8;
      }
      if (out[0] & 128) {
        out.unshift(0);
      }
      return this._createEncoderBuffer(Buffer2.from(out));
    };
    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 255 : 0);
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function') entity = entity(obj);
      return entity._getEncoder('der').tree;
    };
    DERNode.prototype._skipDefault = function skipDefault(
      dataBuffer,
      reporter,
      parent
    ) {
      const state = this._baseState;
      let i;
      if (state['default'] === null) return false;
      const data = dataBuffer.join();
      if (state.defaultBuffer === void 0)
        state.defaultBuffer = this._encodeValue(
          state['default'],
          reporter,
          parent
        ).join();
      if (data.length !== state.defaultBuffer.length) return false;
      for (i = 0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i]) return false;
      return true;
    };
    function encodeTag(tag, primitive, cls, reporter) {
      let res;
      if (tag === 'seqof') tag = 'seq';
      else if (tag === 'setof') tag = 'set';
      if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
      else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
      else return reporter.error('Unknown tag: ' + tag);
      if (res >= 31)
        return reporter.error('Multi-octet tag encoding unsupported');
      if (!primitive) res |= 32;
      res |= der.tagClassByName[cls || 'universal'] << 6;
      return res;
    }
  },
});

// node_modules/asn1.js/lib/asn1/encoders/pem.js
var require_pem = __commonJS({
  'node_modules/asn1.js/lib/asn1/encoders/pem.js'(exports, module2) {
    'use strict';
    var inherits2 = require_inherits();
    var DEREncoder = require_der2();
    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = 'pem';
    }
    inherits2(PEMEncoder, DEREncoder);
    module2.exports = PEMEncoder;
    PEMEncoder.prototype.encode = function encode3(data, options) {
      const buf = DEREncoder.prototype.encode.call(this, data);
      const p = buf.toString('base64');
      const out = ['-----BEGIN ' + options.label + '-----'];
      for (let i = 0; i < p.length; i += 64) out.push(p.slice(i, i + 64));
      out.push('-----END ' + options.label + '-----');
      return out.join('\n');
    };
  },
});

// node_modules/asn1.js/lib/asn1/encoders/index.js
var require_encoders = __commonJS({
  'node_modules/asn1.js/lib/asn1/encoders/index.js'(exports) {
    'use strict';
    var encoders = exports;
    encoders.der = require_der2();
    encoders.pem = require_pem();
  },
});

// node_modules/asn1.js/lib/asn1/decoders/der.js
var require_der3 = __commonJS({
  'node_modules/asn1.js/lib/asn1/decoders/der.js'(exports, module2) {
    'use strict';
    var inherits2 = require_inherits();
    var bignum = require_bn();
    var DecoderBuffer = require_buffer().DecoderBuffer;
    var Node = require_node2();
    var der = require_der();
    function DERDecoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module2.exports = DERDecoder;
    DERDecoder.prototype.decode = function decode(data, options) {
      if (!DecoderBuffer.isDecoderBuffer(data)) {
        data = new DecoderBuffer(data, options);
      }
      return this.tree._decode(data, options);
    };
    function DERNode(parent) {
      Node.call(this, 'der', parent);
    }
    inherits2(DERNode, Node);
    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty()) return false;
      const state = buffer.save();
      const decodedTag = derDecodeTag(
        buffer,
        'Failed to peek tag: "' + tag + '"'
      );
      if (buffer.isError(decodedTag)) return decodedTag;
      buffer.restore(state);
      return (
        decodedTag.tag === tag ||
        decodedTag.tagStr === tag ||
        decodedTag.tagStr + 'of' === tag ||
        any
      );
    };
    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      const decodedTag = derDecodeTag(
        buffer,
        'Failed to decode tag of "' + tag + '"'
      );
      if (buffer.isError(decodedTag)) return decodedTag;
      let len = derDecodeLen(
        buffer,
        decodedTag.primitive,
        'Failed to get length of "' + tag + '"'
      );
      if (buffer.isError(len)) return len;
      if (
        !any &&
        decodedTag.tag !== tag &&
        decodedTag.tagStr !== tag &&
        decodedTag.tagStr + 'of' !== tag
      ) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }
      if (decodedTag.primitive || len !== null)
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
      const state = buffer.save();
      const res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"'
      );
      if (buffer.isError(res)) return res;
      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };
    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      for (;;) {
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
      }
    };
    DERNode.prototype._decodeList = function decodeList(
      buffer,
      tag,
      decoder,
      options
    ) {
      const result = [];
      while (!buffer.isEmpty()) {
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
      }
      return result;
    };
    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return { unused, data: buffer.raw() };
      } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1)
          return buffer.error(
            'Decoding of string type: bmpstr length mismatch'
          );
        let str = '';
        for (let i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) {
          return buffer.error(
            'Decoding of string type: numstr unsupported characters'
          );
        }
        return numstr;
      } else if (tag === 'octstr') {
        return buffer.raw();
      } else if (tag === 'objDesc') {
        return buffer.raw();
      } else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) {
          return buffer.error(
            'Decoding of string type: printstr unsupported characters'
          );
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error('Decoding of string type: ' + tag + ' unsupported');
      }
    };
    DERNode.prototype._decodeObjid = function decodeObjid(
      buffer,
      values,
      relative
    ) {
      let result;
      const identifiers = [];
      let ident = 0;
      let subident = 0;
      while (!buffer.isEmpty()) {
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 128) identifiers.push(ident);
      const first = (identifiers[0] / 40) | 0;
      const second = identifiers[0] % 40;
      if (relative) result = identifiers;
      else result = [first, second].concat(identifiers.slice(1));
      if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === void 0) tmp = values[result.join('.')];
        if (tmp !== void 0) result = tmp;
      }
      return result;
    };
    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      const str = buffer.raw().toString();
      let year;
      let mon;
      let day;
      let hour;
      let min;
      let sec;
      if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
      } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2e3 + year;
        else year = 1900 + year;
      } else {
        return buffer.error('Decoding ' + tag + ' time is not supported yet');
      }
      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };
    DERNode.prototype._decodeNull = function decodeNull() {
      return null;
    };
    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      const res = buffer.readUInt8();
      if (buffer.isError(res)) return res;
      else return res !== 0;
    };
    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      const raw = buffer.raw();
      let res = new bignum(raw);
      if (values) res = values[res.toString(10)] || res;
      return res;
    };
    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function') entity = entity(obj);
      return entity._getDecoder('der').tree;
    };
    function derDecodeTag(buf, fail) {
      let tag = buf.readUInt8(fail);
      if (buf.isError(tag)) return tag;
      const cls = der.tagClass[tag >> 6];
      const primitive = (tag & 32) === 0;
      if ((tag & 31) === 31) {
        let oct = tag;
        tag = 0;
        while ((oct & 128) === 128) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct)) return oct;
          tag <<= 7;
          tag |= oct & 127;
        }
      } else {
        tag &= 31;
      }
      const tagStr = der.tag[tag];
      return {
        cls,
        primitive,
        tag,
        tagStr,
      };
    }
    function derDecodeLen(buf, primitive, fail) {
      let len = buf.readUInt8(fail);
      if (buf.isError(len)) return len;
      if (!primitive && len === 128) return null;
      if ((len & 128) === 0) {
        return len;
      }
      const num = len & 127;
      if (num > 4) return buf.error('length octect is too long');
      len = 0;
      for (let i = 0; i < num; i++) {
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
      }
      return len;
    }
  },
});

// node_modules/asn1.js/lib/asn1/decoders/pem.js
var require_pem2 = __commonJS({
  'node_modules/asn1.js/lib/asn1/decoders/pem.js'(exports, module2) {
    'use strict';
    var inherits2 = require_inherits();
    var Buffer2 = require_safer().Buffer;
    var DERDecoder = require_der3();
    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = 'pem';
    }
    inherits2(PEMDecoder, DERDecoder);
    module2.exports = PEMDecoder;
    PEMDecoder.prototype.decode = function decode(data, options) {
      const lines = data.toString().split(/[\r\n]+/g);
      const label = options.label.toUpperCase();
      const re = /^-----(BEGIN|END) ([^-]+)-----$/;
      let start = -1;
      let end = -1;
      for (let i = 0; i < lines.length; i++) {
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
          if (match[1] !== 'BEGIN') break;
          start = i;
        } else {
          if (match[1] !== 'END') break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error('PEM section not found for: ' + label);
      const base64 = lines.slice(start + 1, end).join('');
      base64.replace(/[^a-z0-9+/=]+/gi, '');
      const input = Buffer2.from(base64, 'base64');
      return DERDecoder.prototype.decode.call(this, input, options);
    };
  },
});

// node_modules/asn1.js/lib/asn1/decoders/index.js
var require_decoders = __commonJS({
  'node_modules/asn1.js/lib/asn1/decoders/index.js'(exports) {
    'use strict';
    var decoders = exports;
    decoders.der = require_der3();
    decoders.pem = require_pem2();
  },
});

// node_modules/asn1.js/lib/asn1/api.js
var require_api = __commonJS({
  'node_modules/asn1.js/lib/asn1/api.js'(exports) {
    'use strict';
    var encoders = require_encoders();
    var decoders = require_decoders();
    var inherits2 = require_inherits();
    var api = exports;
    api.define = function define2(name, body) {
      return new Entity(name, body);
    };
    function Entity(name, body) {
      this.name = name;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
    }
    Entity.prototype._createNamed = function createNamed(Base) {
      const name = this.name;
      function Generated(entity) {
        this._initNamed(entity, name);
      }
      inherits2(Generated, Base);
      Generated.prototype._initNamed = function _initNamed(entity, name2) {
        Base.call(this, entity, name2);
      };
      return new Generated(this);
    };
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || 'der';
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(decoders[enc]);
      return this.decoders[enc];
    };
    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || 'der';
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(encoders[enc]);
      return this.encoders[enc];
    };
    Entity.prototype.encode = function encode3(data, enc, reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };
  },
});

// node_modules/asn1.js/lib/asn1/base/index.js
var require_base = __commonJS({
  'node_modules/asn1.js/lib/asn1/base/index.js'(exports) {
    'use strict';
    var base = exports;
    base.Reporter = require_reporter().Reporter;
    base.DecoderBuffer = require_buffer().DecoderBuffer;
    base.EncoderBuffer = require_buffer().EncoderBuffer;
    base.Node = require_node2();
  },
});

// node_modules/asn1.js/lib/asn1/constants/index.js
var require_constants10 = __commonJS({
  'node_modules/asn1.js/lib/asn1/constants/index.js'(exports) {
    'use strict';
    var constants = exports;
    constants._reverse = function reverse(map) {
      const res = {};
      Object.keys(map).forEach(function (key) {
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
      });
      return res;
    };
    constants.der = require_der();
  },
});

// node_modules/asn1.js/lib/asn1.js
var require_asn1 = __commonJS({
  'node_modules/asn1.js/lib/asn1.js'(exports) {
    'use strict';
    var asn1 = exports;
    asn1.bignum = require_bn();
    asn1.define = require_api().define;
    asn1.base = require_base();
    asn1.constants = require_constants10();
    asn1.decoders = require_decoders();
    asn1.encoders = require_encoders();
  },
});

// node_modules/elliptic/package.json
var require_package5 = __commonJS({
  'node_modules/elliptic/package.json'(exports, module2) {
    module2.exports = {
      name: 'elliptic',
      version: '6.5.4',
      description: 'EC cryptography',
      main: 'lib/elliptic.js',
      files: ['lib'],
      scripts: {
        lint: 'eslint lib test',
        'lint:fix': 'npm run lint -- --fix',
        unit: 'istanbul test _mocha --reporter=spec test/index.js',
        test: 'npm run lint && npm run unit',
        version: 'grunt dist && git add dist/',
      },
      repository: {
        type: 'git',
        url: 'git@github.com:indutny/elliptic',
      },
      keywords: ['EC', 'Elliptic', 'curve', 'Cryptography'],
      author: 'Fedor Indutny <fedor@indutny.com>',
      license: 'MIT',
      bugs: {
        url: 'https://github.com/indutny/elliptic/issues',
      },
      homepage: 'https://github.com/indutny/elliptic',
      devDependencies: {
        brfs: '^2.0.2',
        coveralls: '^3.1.0',
        eslint: '^7.6.0',
        grunt: '^1.2.1',
        'grunt-browserify': '^5.3.0',
        'grunt-cli': '^1.3.2',
        'grunt-contrib-connect': '^3.0.0',
        'grunt-contrib-copy': '^1.0.0',
        'grunt-contrib-uglify': '^5.0.0',
        'grunt-mocha-istanbul': '^5.0.2',
        'grunt-saucelabs': '^9.0.1',
        istanbul: '^0.4.5',
        mocha: '^8.0.1',
      },
      dependencies: {
        'bn.js': '^4.11.9',
        brorand: '^1.1.0',
        'hash.js': '^1.0.0',
        'hmac-drbg': '^1.0.1',
        inherits: '^2.0.4',
        'minimalistic-assert': '^1.0.1',
        'minimalistic-crypto-utils': '^1.0.1',
      },
    };
  },
});

// node_modules/minimalistic-crypto-utils/lib/utils.js
var require_utils4 = __commonJS({
  'node_modules/minimalistic-crypto-utils/lib/utils.js'(exports) {
    'use strict';
    var utils = exports;
    function toArray2(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/gi, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi) res.push(hi, lo);
          else res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray2;
    function zero2(word) {
      if (word.length === 1) return '0' + word;
      else return word;
    }
    utils.zero2 = zero2;
    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;
    utils.encode = function encode3(arr, enc) {
      if (enc === 'hex') return toHex(arr);
      else return arr;
    };
  },
});

// node_modules/elliptic/lib/elliptic/utils.js
var require_utils5 = __commonJS({
  'node_modules/elliptic/lib/elliptic/utils.js'(exports) {
    'use strict';
    var utils = exports;
    var BN = require_bn();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils4();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << (w + 1);
      var k = num.clone();
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
          else z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [[], []];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
          else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
          else u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF;
    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty2() {
        return this[key] !== void 0
          ? this[key]
          : (this[key] = computer.call(this));
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
  },
});

// node_modules/brorand/index.js
var require_brorand = __commonJS({
  'node_modules/brorand/index.js'(exports, module2) {
    var r;
    module2.exports = function rand(len) {
      if (!r) r = new Rand(null);
      return r.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    module2.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes) return this.rand.getBytes(n);
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();
      return res;
    };
    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === 'object') {
        Rand.prototype._rand = function () {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      try {
        crypto4 = require('crypto');
        if (typeof crypto4.randomBytes !== 'function')
          throw new Error('Not supported');
        Rand.prototype._rand = function _rand(n) {
          return crypto4.randomBytes(n);
        };
      } catch (e) {}
    }
    var crypto4;
  },
});

// node_modules/elliptic/lib/elliptic/curve/base.js
var require_base2 = __commonJS({
  'node_modules/elliptic/lib/elliptic/curve/base.js'(exports, module2) {
    'use strict';
    var BN = require_bn();
    var utils = require_utils5();
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module2.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };
    BaseCurve.prototype.validate = function validate2() {
      throw new Error('Not implemented');
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i) b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--) l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
          if (z > 0) acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          if (z > 0) acc = acc.add(wnd[(z - 1) >> 1]);
          else acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(
      defW,
      points,
      coeffs,
      len,
      jacobianResult
    ) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b],
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
<<<<<<< HEAD
          -3 /* -1 -1 */, -1 /* -1 0 */, -5 /* -1 1 */, -7 /* 0 -1 */,
          0 /* 0 0 */, 7 /* 0 1 */, 5 /* 1 -1 */, 1 /* 1 0 */, 3,
=======
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,
>>>>>>> main
          /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0) zero = false;
          }
          if (!zero) break;
          k++;
          i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0) continue;
          else if (z > 0) p = wnd[j][(z - 1) >> 1];
          else if (z < 0) p = wnd[j][(-z - 1) >> 1].neg();
          if (p.type === 'affine') acc = acc.mixedAdd(p);
          else acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++) wnd[i] = null;
      if (jacobianResult) return acc;
      else return acc.toP();
    };
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error('Not implemented');
    };
    BasePoint.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if (
        (bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) &&
        bytes.length - 1 === 2 * len
      ) {
        if (bytes[0] === 6) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if (
        (bytes[0] === 2 || bytes[0] === 3) &&
        bytes.length - 1 === len
      ) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error('Unknown point format');
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);
      if (compact) return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray('be', len));
    };
    BasePoint.prototype.encode = function encode3(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed) return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed) return false;
      var doubles = this.precomputed.doubles;
      if (!doubles) return false;
      return (
        doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step)
      );
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++) acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles,
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
      return {
        wnd,
        points: res,
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++) r = r.dbl();
      return r;
    };
  },
});

// node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  'node_modules/elliptic/lib/elliptic/curve/short.js'(exports, module2) {
    'use strict';
    var utils = require_utils5();
    var BN = require_bn();
    var inherits2 = require_inherits();
    var Base = require_base2();
    var assert = utils.assert;
    function ShortCurve(conf) {
      Base.call(this, 'short', conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits2(ShortCurve, Base);
    module2.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function (vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis,
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v12 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v12.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v12.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v12.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red) x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
      var isOdd = y.fromRed().isOdd();
      if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve.prototype.validate = function validate2(point) {
      if (point.inf) return true;
      var x = point.x;
      var y = point.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(
      points,
      coeffs,
      jacobianResult
    ) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits2(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo) return;
      var pre = this.precomputed;
      if (pre && pre.beta) return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function (p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON2() {
      if (!this.precomputed) return [this.x, this.y];
      return [
        this.x,
        this.y,
        this.precomputed && {
          doubles: this.precomputed.doubles && {
            step: this.precomputed.doubles.step,
            points: this.precomputed.doubles.points.slice(1),
          },
          naf: this.precomputed.naf && {
            wnd: this.precomputed.naf.wnd,
            points: this.precomputed.naf.points.slice(1),
          },
        },
      ];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string') obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2]) return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return (
        '<EC Point x: ' +
        this.x.fromRed().toString(16, 2) +
        ' y: ' +
        this.y.fromRed().toString(16, 2) +
        '>'
      );
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p) {
      if (this.inf) return p;
      if (p.inf) return this;
      if (this.eq(p)) return this.dbl();
      if (this.neg().eq(p)) return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf) return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      if (this.isInfinity()) return this;
      else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);
      else return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
      else return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p) {
      return (
        this === p ||
        (this.inf === p.inf &&
          (this.inf || (this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0)))
      );
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf) return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function (p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf) return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red) this.x = this.x.toRed(this.curve.red);
      if (!this.y.red) this.y = this.y.toRed(this.curve.red);
      if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits2(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity()) return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p) {
      if (this.isInfinity()) return p;
      if (p.isInfinity()) return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity()) return p.toJ();
      if (p.isInfinity()) return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0) return this;
      if (this.isInfinity()) return this;
      if (!pow) return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++) r = r.dbl();
        return r;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;
      if (this.curve.zeroA) return this._zeroDbl();
      else if (this.curve.threeA) return this._threeDbl();
      else return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA) return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine') return this.eq(p.toJ());
      if (this === p) return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0) return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
      }
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC JPoint Infinity>';
      return (
        '<EC JPoint x: ' +
        this.x.toString(16, 2) +
        ' y: ' +
        this.y.toString(16, 2) +
        ' z: ' +
        this.z.toString(16, 2) +
        '>'
      );
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
  },
});

// node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  'node_modules/elliptic/lib/elliptic/curve/mont.js'(exports, module2) {
    'use strict';
    var BN = require_bn();
    var inherits2 = require_inherits();
    var Base = require_base2();
    var utils = require_utils5();
    function MontCurve(conf) {
      Base.call(this, 'mont', conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits2(MontCurve, Base);
    module2.exports = MontCurve;
    MontCurve.prototype.validate = function validate2(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };
    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits2(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {};
    Point.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return (
        '<EC Point x: ' +
        this.x.fromRed().toString(16, 2) +
        ' z: ' +
        this.z.fromRed().toString(16, 2) +
        '>'
      );
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point.prototype.dbl = function dbl() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };
    Point.prototype.diffAdd = function diffAdd(p, diff) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
      return b;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
  },
});

// node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  'node_modules/elliptic/lib/elliptic/curve/edwards.js'(exports, module2) {
    'use strict';
    var utils = require_utils5();
    var BN = require_bn();
    var inherits2 = require_inherits();
    var Base = require_base2();
    var assert = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, 'edwards', conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits2(EdwardsCurve, Base);
    module2.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA) return num.redNeg();
      else return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC) return num;
      else return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red) x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
      var isOdd = y.fromRed().isOdd();
      if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red) y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');
      if (x.fromRed().isOdd() !== odd) x = x.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate2(point) {
      if (point.isInfinity()) return true;
      point.normalize();
      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits2(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity()) return '<EC Point Infinity>';
      return (
        '<EC Point x: ' +
        this.x.fromRed().toString(16, 2) +
        ' y: ' +
        this.y.fromRed().toString(16, 2) +
        ' z: ' +
        this.z.fromRed().toString(16, 2) +
        '>'
      );
    };
    Point.prototype.isInfinity = function isInfinity() {
      return (
        this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
          (this.zOne && this.y.cmp(this.curve.c) === 0))
      );
    };
    Point.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        e = this.curve._mulA(c);
        var f = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e.redSub(d));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          h = this.z.redSqr();
          j = f.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f.redMul(e.redSub(d));
          nz = f.redMul(j);
        }
      } else {
        e = c.redAdd(d);
        h = this.curve._mulC(this.z).redSqr();
        j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity()) return this;
      if (this.curve.extended) return this._extDbl();
      else return this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x
        .redAdd(this.y)
        .redMul(p.x.redAdd(p.y))
        .redISub(c)
        .redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p) {
      if (this.isInfinity()) return p;
      if (p.isInfinity()) return this;
      if (this.curve.extended) return this._extAdd(p);
      else return this._projAdd(p);
    };
    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
      else return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };
    Point.prototype.normalize = function normalize() {
      if (this.zOne) return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t) this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return (
        this === other ||
        (this.getX().cmp(other.getX()) === 0 &&
          this.getY().cmp(other.getY()) === 0)
      );
    };
    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0) return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
      }
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  },
});

// node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  'node_modules/elliptic/lib/elliptic/curve/index.js'(exports) {
    'use strict';
    var curve = exports;
    curve.base = require_base2();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  },
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils6 = __commonJS({
  'node_modules/hash.js/lib/hash/utils.js'(exports) {
    'use strict';
    var assert = require_minimalistic_assert();
    var inherits2 = require_inherits();
    exports.inherits = inherits2;
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 64512) !== 55296) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 64512) === 56320;
    }
    function toArray2(msg, enc) {
      if (Array.isArray(msg)) return msg.slice();
      if (!msg) return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/gi, '');
          if (msg.length % 2 !== 0) msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray2;
    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;
    function htonl(w) {
      var res =
        (w >>> 24) |
        ((w >>> 8) & 65280) |
        ((w << 8) & 16711680) |
        ((w & 255) << 24);
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little') w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1) return '0' + word;
      else return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7) return '0' + word;
      else if (word.length === 6) return '00' + word;
      else if (word.length === 5) return '000' + word;
      else if (word.length === 4) return '0000' + word;
      else if (word.length === 3) return '00000' + word;
      else if (word.length === 2) return '000000' + word;
      else if (word.length === 1) return '0000000' + word;
      else return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w =
            (msg[k] << 24) |
            (msg[k + 1] << 16) |
            (msg[k + 2] << 8) |
            msg[k + 3];
        else
          w =
            (msg[k + 3] << 24) |
            (msg[k + 2] << 16) |
            (msg[k + 1] << 8) |
            msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 255;
          res[k + 2] = (m >>> 8) & 255;
          res[k + 3] = m & 255;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 255;
          res[k + 1] = (m >>> 8) & 255;
          res[k] = m & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
      return (a + b) >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
      return (a + b + c) >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  },
});

// node_modules/hash.js/lib/hash/common.js
var require_common2 = __commonJS({
  'node_modules/hash.js/lib/hash/common.js'(exports) {
    'use strict';
    var utils = require_utils6();
    var assert = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending) this.pending = msg;
      else this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i = 1; i < k; i++) res[i] = 0;
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++) res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 255;
        res[i++] = (len >>> 16) & 255;
        res[i++] = (len >>> 8) & 255;
        res[i++] = len & 255;
      } else {
        res[i++] = len & 255;
        res[i++] = (len >>> 8) & 255;
        res[i++] = (len >>> 16) & 255;
        res[i++] = (len >>> 24) & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++) res[i++] = 0;
      }
      return res;
    };
  },
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common3 = __commonJS({
  'node_modules/hash.js/lib/hash/sha/common.js'(exports) {
    'use strict';
    var utils = require_utils6();
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
      if (s === 0) return ch32(x, y, z);
      if (s === 1 || s === 3) return p32(x, y, z);
      if (s === 2) return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
      return (x & y) ^ (~x & z);
    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    exports.g1_256 = g1_256;
  },
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  'node_modules/hash.js/lib/hash/sha/1.js'(exports, module2) {
    'use strict';
    var utils = require_utils6();
    var common = require_common2();
    var shaCommon = require_common3();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [1518500249, 1859775393, 2400959708, 3395469782];
    function SHA1() {
      if (!(this instanceof SHA1)) return new SHA1();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module2.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++) W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');
      else return utils.split32(this.h, 'big');
    };
  },
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  'node_modules/hash.js/lib/hash/sha/256.js'(exports, module2) {
    'use strict';
    var utils = require_utils6();
    var common = require_common2();
    var shaCommon = require_common3();
    var assert = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993,
      2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987,
      1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774,
      264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986,
      2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711,
      113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
      1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411,
      3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344,
      430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
      1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424,
      2428436474, 2756734187, 3204031479, 3329325298,
    ];
    function SHA256() {
      if (!(this instanceof SHA256)) return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924,
        528734635, 1541459225,
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module2.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++) W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(
          g1_256(W[i - 2]),
          W[i - 7],
          g0_256(W[i - 15]),
          W[i - 16]
        );
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');
      else return utils.split32(this.h, 'big');
    };
  },
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  'node_modules/hash.js/lib/hash/sha/224.js'(exports, module2) {
    'use strict';
    var utils = require_utils6();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224)) return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025,
        1694076839, 3204075428,
      ];
    }
    utils.inherits(SHA224, SHA256);
    module2.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');
      else return utils.split32(this.h.slice(0, 7), 'big');
    };
  },
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  'node_modules/hash.js/lib/hash/sha/512.js'(exports, module2) {
    'use strict';
    var utils = require_utils6();
    var common = require_common2();
    var assert = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399,
      3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265,
      2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394,
      310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994,
      1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317,
      3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139,
      264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901,
      1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837,
      2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879,
      3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901,
      113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964,
      773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823,
      1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142,
      2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273,
      3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344,
      3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720,
      430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593,
      883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403,
      1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012,
      2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044,
      2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573,
      3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711,
      3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554,
      174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315,
      685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100,
      1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866,
      1607167915, 987167468, 1816402316, 1246189591,
    ];
    function SHA512() {
      if (!(this instanceof SHA512)) return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723,
        2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199,
        528734635, 4215389547, 1541459225, 327033209,
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module2.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i = 0; i < 32; i++) W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W[i + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'big');
      else return utils.split32(this.h, 'big');
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (~xh & zh);
      if (r < 0) r += 4294967296;
      return r;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (~xl & zl);
      if (r < 0) r += 4294967296;
      return r;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0) r += 4294967296;
      return r;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0) r += 4294967296;
      return r;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 4294967296;
      return r;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 4294967296;
      return r;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 4294967296;
      return r;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 4294967296;
      return r;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 4294967296;
      return r;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 4294967296;
      return r;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0) r += 4294967296;
      return r;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0) r += 4294967296;
      return r;
    }
  },
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  'node_modules/hash.js/lib/hash/sha/384.js'(exports, module2) {
    'use strict';
    var utils = require_utils6();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384)) return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999,
        355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025,
        3675008525, 1694076839, 1203062813, 3204075428,
      ];
    }
    utils.inherits(SHA384, SHA512);
    module2.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');
      else return utils.split32(this.h.slice(0, 12), 'big');
    };
  },
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  'node_modules/hash.js/lib/hash/sha.js'(exports) {
    'use strict';
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  },
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  'node_modules/hash.js/lib/hash/ripemd.js'(exports) {
    'use strict';
    var utils = require_utils6();
    var common = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160)) return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = 'little';
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]),
          E
        );
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex') return utils.toHex32(this.h, 'little');
      else return utils.split32(this.h, 'little');
    };
    function f(j, x, y, z) {
      if (j <= 15) return x ^ y ^ z;
      else if (j <= 31) return (x & y) | (~x & z);
      else if (j <= 47) return (x | ~y) ^ z;
      else if (j <= 63) return (x & z) | (y & ~z);
      else return x ^ (y | ~z);
    }
    function K(j) {
      if (j <= 15) return 0;
      else if (j <= 31) return 1518500249;
      else if (j <= 47) return 1859775393;
      else if (j <= 63) return 2400959708;
      else return 2840853838;
    }
    function Kh(j) {
      if (j <= 15) return 1352829926;
      else if (j <= 31) return 1548603684;
      else if (j <= 47) return 1836072691;
      else if (j <= 63) return 2053994217;
      else return 0;
    }
    var r = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6,
      15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6,
      13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0,
      5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
    ];
    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13,
      5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2,
      10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12,
      15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
    ];
    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11,
      9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8,
      13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5,
      12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
    ];
    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12,
      8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13,
      5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15,
      8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,
    ];
  },
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  'node_modules/hash.js/lib/hash/hmac.js'(exports, module2) {
    'use strict';
    var utils = require_utils6();
    var assert = require_minimalistic_assert();
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module2.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);
      for (var i = key.length; i < this.blockSize; i++) key.push(0);
      for (i = 0; i < key.length; i++) key[i] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i = 0; i < key.length; i++) key[i] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  },
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  'node_modules/hash.js/lib/hash.js'(exports) {
    var hash = exports;
    hash.utils = require_utils6();
    hash.common = require_common2();
    hash.sha = require_sha();
    hash.ripemd = require_ripemd();
    hash.hmac = require_hmac();
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  },
});

// node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  'node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js'(
    exports,
    module2
  ) {
    module2.exports = {
      doubles: {
        step: 4,
        points: [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
          ],
        ],
      },
      naf: {
        wnd: 7,
        points: [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
          ],
        ],
      },
    };
  },
});

// node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  'node_modules/elliptic/lib/elliptic/curves.js'(exports) {
    'use strict';
    var curves = exports;
    var hash = require_hash();
    var curve = require_curve();
    var utils = require_utils5();
    var assert = utils.assert;
    function PresetCurve(options) {
      if (options.type === 'short') this.curve = new curve.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve.edwards(options);
      else this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function () {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve2,
          });
          return curve2;
        },
      });
    }
    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });
    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });
    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });
    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });
    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });
    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: ['9'],
    });
    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e) {
      pre = void 0;
    }
    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash.sha256,
      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda:
        '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],
      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });
  },
});

// node_modules/hmac-drbg/lib/hmac-drbg.js
var require_hmac_drbg = __commonJS({
  'node_modules/hmac-drbg/lib/hmac-drbg.js'(exports, module2) {
    'use strict';
    var hash = require_hash();
    var utils = require_utils4();
    var assert = require_minimalistic_assert();
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils.toArray(options.pers, options.persEnc || 'hex');
      assert(
        entropy.length >= this.minEntropy / 8,
        'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits'
      );
      this._init(entropy, nonce, pers);
    }
    module2.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed) kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed) return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(
      entropy,
      entropyEnc,
      add,
      addEnc
    ) {
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert(
        entropy.length >= this.minEntropy / 8,
        'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits'
      );
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
  },
});

// node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  'node_modules/elliptic/lib/elliptic/ec/key.js'(exports, module2) {
    'use strict';
    var BN = require_bn();
    var utils = require_utils5();
    var assert = utils.assert;
    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;
      if (options.priv) this._importPrivate(options.priv, options.privEnc);
      if (options.pub) this._importPublic(options.pub, options.pubEnc);
    }
    module2.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(ec, {
        pub,
        pubEnc: enc,
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair) return priv;
      return new KeyPair(ec, {
        priv,
        privEnc: enc,
      });
    };
    KeyPair.prototype.validate = function validate2() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }
      if (!this.pub) this.pub = this.ec.g.mul(this.priv);
      if (!enc) return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex') return this.priv.toString(16, 2);
      else return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        if (this.ec.curve.type === 'mont') {
          assert(key.x, 'Need x coordinate');
        } else if (
          this.ec.curve.type === 'short' ||
          this.ec.curve.type === 'edwards'
        ) {
          assert(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };
    KeyPair.prototype.inspect = function inspect() {
      return (
        '<Key priv: ' +
        (this.priv && this.priv.toString(16, 2)) +
        ' pub: ' +
        (this.pub && this.pub.inspect()) +
        ' >'
      );
    };
  },
});

// node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature2 = __commonJS({
  'node_modules/elliptic/lib/elliptic/ec/signature.js'(exports, module2) {
    'use strict';
    var BN = require_bn();
    var utils = require_utils5();
    var assert = utils.assert;
    function Signature(options, enc) {
      if (options instanceof Signature) return options;
      if (this._importDER(options, enc)) return;
      assert(options.r && options.s, 'Signature without r or s');
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === void 0) this.recoveryParam = null;
      else this.recoveryParam = options.recoveryParam;
    }
    module2.exports = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 128) {
          r = r.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 255);
      }
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();
      if (r[0] & 128) r = [0].concat(r);
      if (s[0] & 128) s = [0].concat(s);
      r = rmPadding(r);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  },
});

// node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  'node_modules/elliptic/lib/elliptic/ec/index.js'(exports, module2) {
    'use strict';
    var BN = require_bn();
    var HmacDRBG = require_hmac_drbg();
    var utils = require_utils5();
    var curves = require_curves();
    var rand = require_brorand();
    var assert = utils.assert;
    var KeyPair = require_key();
    var Signature = require_signature2();
    function EC(options) {
      if (!(this instanceof EC)) return new EC(options);
      if (typeof options === 'string') {
        assert(
          Object.prototype.hasOwnProperty.call(curves, options),
          'Unknown curve ' + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve) options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module2.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options) options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: (options.entropy && options.entropyEnc) || 'utf8',
        nonce: this.n.toArray(),
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (;;) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0) msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
      else return msg;
    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options) options = {};
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);
      var nonce = msg.toArray('be', bytes);
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; ; iter++) {
        var k = options.k
          ? options.k(iter)
          : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam =
          (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature({ r, s, recoveryParam });
      }
    };
    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, 'hex');
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
      }
      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity()) return false;
      return p.eqXToP(r);
    };
    EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
      assert((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature(signature, enc);
      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');
      if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else r = this.curve.pointFromX(r, isYOdd);
      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r, s2);
    };
    EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null) return signature.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q)) return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };
  },
});

// node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  'node_modules/elliptic/lib/elliptic/eddsa/key.js'(exports, module2) {
    'use strict';
    var utils = require_utils5();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub)) this._pub = params.pub;
      else this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair) return pub;
      return new KeyPair(eddsa, { pub });
    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair) return secret;
      return new KeyPair(eddsa, { secret });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, 'pub', function pub() {
      if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, 'KeyPair is public only');
      return utils.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module2.exports = KeyPair;
  },
});

// node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature3 = __commonJS({
  'node_modules/elliptic/lib/elliptic/eddsa/signature.js'(exports, module2) {
    'use strict';
    var BN = require_bn();
    var utils = require_utils5();
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== 'object') sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength),
        };
      }
      assert(sig.R && sig.S, 'Signature without R or S');
      if (eddsa.isPoint(sig.R)) this._R = sig.R;
      if (sig.S instanceof BN) this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), 'hex').toUpperCase();
    };
    module2.exports = Signature;
  },
});

// node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  'node_modules/elliptic/lib/elliptic/eddsa/index.js'(exports, module2) {
    'use strict';
    var hash = require_hash();
    var curves = require_curves();
    var utils = require_utils5();
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require_key2();
    var Signature = require_signature3();
    function EDDSA(curve) {
      assert(curve === 'ed25519', 'only tested with ed25519 so far');
      if (!(this instanceof EDDSA)) return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }
    module2.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash2 = this.hash();
      for (var i = 0; i < arguments.length; i++) hash2.update(arguments[i]);
      return utils.intFromLE(hash2.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature) return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  },
});

// node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  'node_modules/elliptic/lib/elliptic.js'(exports) {
    'use strict';
    var elliptic = exports;
    elliptic.version = require_package5().version;
    elliptic.utils = require_utils5();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve();
    elliptic.curves = require_curves();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  },
});

// node_modules/jwk-to-pem/src/b64-to-bn.js
var require_b64_to_bn = __commonJS({
  'node_modules/jwk-to-pem/src/b64-to-bn.js'(exports, module2) {
    'use strict';
    var BN = require_asn1().bignum;
    var Buffer2 = require_safe_buffer().Buffer;
    module2.exports = function base64ToBigNum(val, zero) {
      var buf = Buffer2.from(val, 'base64');
      var bn = (val = new BN(buf, 10, 'be').iabs());
      if (zero) {
        buf.fill(0);
      }
      return bn;
    };
  },
});

// node_modules/jwk-to-pem/src/asn1/algorithm-identifier.js
var require_algorithm_identifier = __commonJS({
  'node_modules/jwk-to-pem/src/asn1/algorithm-identifier.js'(exports, module2) {
    'use strict';
    module2.exports = require_asn1().define(
      'AlgorithmIdentifer',
      /* @this */
      function () {
        this.seq().obj(
          this.key('algorithm').objid(),
          this.key('parameters').optional().any()
        );
      }
    );
  },
});

// node_modules/jwk-to-pem/src/asn1/public-key-info.js
var require_public_key_info = __commonJS({
  'node_modules/jwk-to-pem/src/asn1/public-key-info.js'(exports, module2) {
    'use strict';
    var AlgorithmIdentifier = require_algorithm_identifier();
    module2.exports = require_asn1().define(
      'PublicKeyInfo',
      /* @this */
      function () {
        this.seq().obj(
          this.key('algorithm').use(AlgorithmIdentifier),
          this.key('PublicKey').bitstr()
        );
      }
    );
  },
});

// node_modules/jwk-to-pem/src/asn1/version.js
var require_version = __commonJS({
  'node_modules/jwk-to-pem/src/asn1/version.js'(exports, module2) {
    'use strict';
    module2.exports = require_asn1().define(
      'Version',
      /* @this */
      function () {
        this.int();
      }
    );
  },
});

// node_modules/jwk-to-pem/src/asn1/private-key-info.js
var require_private_key_info = __commonJS({
  'node_modules/jwk-to-pem/src/asn1/private-key-info.js'(exports, module2) {
    'use strict';
    var AlgorithmIdentifier = require_algorithm_identifier();
    var Version = require_version();
    module2.exports = require_asn1().define(
      'PrivateKeyInfo',
      /* @this */
      function () {
        this.seq().obj(
          this.key('version').use(Version),
          this.key('privateKeyAlgorithm').use(AlgorithmIdentifier),
          this.key('privateKey').octstr(),
          this.key('attributes').optional().any()
        );
      }
    );
  },
});

// node_modules/jwk-to-pem/src/ec.js
var require_ec2 = __commonJS({
  'node_modules/jwk-to-pem/src/ec.js'(exports, module2) {
    'use strict';
    var asn1 = require_asn1();
    var Buffer2 = require_safe_buffer().Buffer;
    var EC = require_elliptic().ec;
    var b64ToBn = require_b64_to_bn();
    var PublicKeyInfo = require_public_key_info();
    var PrivateKeyInfo = require_private_key_info();
    var Version = require_version();
    var ECParameters = asn1.define(
      'ECParameters',
      /* @this */
      function () {
        this.choice({
          namedCurve: this.objid(),
        });
      }
    );
    var ecPrivkeyVer1 = 1;
    var ECPrivateKey = asn1.define(
      'ECPrivateKey',
      /* @this */
      function () {
        this.seq().obj(
          this.key('version').use(Version),
          this.key('privateKey').octstr(),
          this.key('parameters').explicit(0).optional().any(),
          this.key('publicKey').explicit(1).optional().bitstr()
        );
      }
    );
    var curves = {
      'P-256': 'p256',
      'P-384': 'p384',
      'P-521': 'p521',
    };
    var oids = {
      'P-256': [1, 2, 840, 10045, 3, 1, 7],
      'P-384': [1, 3, 132, 0, 34],
      'P-521': [1, 3, 132, 0, 35],
    };
    var parameters = {};
    var algorithms = {};
    Object.keys(oids).forEach(function (crv) {
      parameters[crv] = ECParameters.encode(
        {
          type: 'namedCurve',
          value: oids[crv],
        },
        'der'
      );
      algorithms[crv] = {
        algorithm: [1, 2, 840, 10045, 2, 1],
        parameters: parameters[crv],
      };
    });
    oids = null;
    function ecJwkToBuffer(jwk, opts) {
      if ('string' !== typeof jwk.crv) {
        throw new TypeError('Expected "jwk.crv" to be a String');
      }
      var hasD = 'string' === typeof jwk.d;
      var xyTypes = hasD ? ['undefined', 'string'] : ['string'];
      if (-1 === xyTypes.indexOf(typeof jwk.x)) {
        throw new TypeError('Expected "jwk.x" to be a String');
      }
      if (-1 === xyTypes.indexOf(typeof jwk.y)) {
        throw new TypeError('Expected "jwk.y" to be a String');
      }
      if (opts.private && !hasD) {
        throw new TypeError('Expected "jwk.d" to be a String');
      }
      var curveName = curves[jwk.crv];
      if (!curveName) {
        throw new Error('Unsupported curve "' + jwk.crv + '"');
      }
      var curve = new EC(curveName);
      var key = {};
      var hasPub = jwk.x && jwk.y;
      if (hasPub) {
        key.pub = {
          x: b64ToBn(jwk.x, false),
          y: b64ToBn(jwk.y, false),
        };
      }
      if (opts.private || !hasPub) {
        key.priv = b64ToBn(jwk.d, true);
      }
      key = curve.keyPair(key);
      var keyValidation = key.validate();
      if (!keyValidation.result) {
        throw new Error(
          'Invalid key for curve: "' + keyValidation.reason + '"'
        );
      }
      var result = keyToPem(jwk.crv, key, opts);
      return result;
    }
    function keyToPem(crv, key, opts) {
      var compact = false;
      var publicKey = key.getPublic(compact, 'hex');
      publicKey = Buffer2.from(publicKey, 'hex');
      publicKey = {
        unused: 0,
        data: publicKey,
      };
      var result;
      if (opts.private) {
        var privateKey = key.getPrivate('hex');
        privateKey = Buffer2.from(privateKey, 'hex');
        result = PrivateKeyInfo.encode(
          {
            version: 0,
            privateKeyAlgorithm: algorithms[crv],
            privateKey: ECPrivateKey.encode(
              {
                version: ecPrivkeyVer1,
                privateKey,
                parameters: parameters[crv],
                publicKey,
              },
              'der'
            ),
          },
          'pem',
          {
            label: 'PRIVATE KEY',
          }
        );
        privateKey.fill(0);
      } else {
        result = PublicKeyInfo.encode(
          {
            algorithm: algorithms[crv],
            PublicKey: publicKey,
          },
          'pem',
          {
            label: 'PUBLIC KEY',
          }
        );
      }
      if ('\n' !== result.slice(-1)) {
        result += '\n';
      }
      return result;
    }
    module2.exports = ecJwkToBuffer;
  },
});

// node_modules/jwk-to-pem/src/rsa.js
var require_rsa = __commonJS({
  'node_modules/jwk-to-pem/src/rsa.js'(exports, module2) {
    'use strict';
    var asn1 = require_asn1();
    var b64ToBn = require_b64_to_bn();
    var PublicKeyInfo = require_public_key_info();
    var PrivateKeyInfo = require_private_key_info();
    var Version = require_version();
    var RSAPrivateKey = asn1.define(
      'RSAPrivateKey',
      /* @this */
      function () {
        this.seq().obj(
          this.key('version').use(Version),
          this.key('modulus').int(),
          this.key('publicExponent').int(),
          this.key('privateExponent').int(),
          this.key('prime1').int(),
          this.key('prime2').int(),
          this.key('exponent1').int(),
          this.key('exponent2').int(),
          this.key('coefficient').int()
        );
      }
    );
    var RSAPublicKey = asn1.define(
      'RSAPublicKey',
      /* @this */
      function () {
        this.seq().obj(
          this.key('modulus').int(),
          this.key('publicExponent').int()
        );
      }
    );
    var algorithm = {
      algorithm: [1, 2, 840, 113549, 1, 1, 1],
      parameters: [5, 0],
    };
    function rsaJwkToBuffer(jwk, opts) {
      if ('string' !== typeof jwk.e) {
        throw new TypeError('Expected "jwk.e" to be a String');
      }
      if ('string' !== typeof jwk.n) {
        throw new TypeError('Expected "jwk.n" to be a String');
      }
      if (opts.private) {
        if ('string' !== typeof jwk.d) {
          throw new TypeError('Expected "jwk.d" to be a String');
        }
        if ('string' !== typeof jwk.p) {
          throw new TypeError('Expected "jwk.p" to be a String');
        }
        if ('string' !== typeof jwk.q) {
          throw new TypeError('Expected "jwk.q" to be a String');
        }
        if ('string' !== typeof jwk.dp) {
          throw new TypeError('Expected "jwk.dp" to be a String');
        }
        if ('string' !== typeof jwk.dq) {
          throw new TypeError('Expected "jwk.dq" to be a String');
        }
        if ('string' !== typeof jwk.qi) {
          throw new TypeError('Expected "jwk.qi" to be a String');
        }
      }
      var pem;
      if (opts.private) {
        pem = PrivateKeyInfo.encode(
          {
            version: 0,
            privateKeyAlgorithm: algorithm,
            privateKey: RSAPrivateKey.encode(
              {
                version: 0,
                modulus: b64ToBn(jwk.n, false),
                publicExponent: b64ToBn(jwk.e, false),
                privateExponent: b64ToBn(jwk.d, true),
                prime1: b64ToBn(jwk.p, true),
                prime2: b64ToBn(jwk.q, true),
                exponent1: b64ToBn(jwk.dp, true),
                exponent2: b64ToBn(jwk.dq, true),
                coefficient: b64ToBn(jwk.qi, true),
              },
              'der'
            ),
          },
          'pem',
          {
            label: 'PRIVATE KEY',
          }
        );
      } else {
        pem = PublicKeyInfo.encode(
          {
            algorithm,
            PublicKey: {
              unused: 0,
              data: RSAPublicKey.encode(
                {
                  modulus: b64ToBn(jwk.n, false),
                  publicExponent: b64ToBn(jwk.e, false),
                },
                'der'
              ),
            },
          },
          'pem',
          {
            label: 'PUBLIC KEY',
          }
        );
      }
      if ('\n' !== pem.slice(-1)) {
        pem += '\n';
      }
      return pem;
    }
    module2.exports = rsaJwkToBuffer;
  },
});

// node_modules/jwk-to-pem/src/jwk-to-pem.js
var require_jwk_to_pem = __commonJS({
  'node_modules/jwk-to-pem/src/jwk-to-pem.js'(exports, module2) {
    'use strict';
    var ec = require_ec2();
    var rsa = require_rsa();
    function jwkToBuffer(jwk, opts) {
      if ('object' !== typeof jwk || null === jwk) {
        throw new TypeError('Expected "jwk" to be an Object');
      }
      var kty = jwk.kty;
      if ('string' !== typeof kty) {
        throw new TypeError('Expected "jwk.kty" to be a String');
      }
      opts = opts || {};
      opts.private = opts.private === true;
      switch (kty) {
        case 'EC': {
          return ec(jwk, opts);
        }
        case 'RSA': {
          return rsa(jwk, opts);
        }
        default: {
          throw new Error('Unsupported key type "' + kty + '"');
        }
      }
    }
    module2.exports = jwkToBuffer;
  },
});

// apps/aws-cdk/meal-planner/src/lambda-handlers/auth/api-authorizer.ts
var api_authorizer_exports = {};
__export(api_authorizer_exports, {
  handler: () => handler,
});
module.exports = __toCommonJS(api_authorizer_exports);

// apps/aws-cdk/meal-planner/src/lambda-layer/utils.ts
var import_lib_dynamodb = __toESM(require_dist_cjs55());
var import_lodash = __toESM(require_lodash());
var logInfo = (message, title = void 0) => {
  if (typeof message === 'string') {
    title ? console.info(`${title}: ${message}`) : console.info(message);
  } else {
    title
      ? console.info(`${title}:`, JSON.stringify(message, null, 2))
      : console.info(JSON.stringify(message, null, 2));
  }
};

// apps/aws-cdk/meal-planner/src/lambda-handlers/auth/api-authorizer.ts
var import_jsonwebtoken = __toESM(require_jsonwebtoken());

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest('undefined');
function isBuffer(val) {
  return (
    val !== null &&
    !isUndefined(val) &&
    val.constructor !== null &&
    !isUndefined(val.constructor) &&
    isFunction(val.constructor.isBuffer) &&
    val.constructor.isBuffer(val)
  );
}
var isArrayBuffer = kindOfTest('ArrayBuffer');
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest('string');
var isFunction = typeOfTest('function');
var isNumber = typeOfTest('number');
var isObject = (thing) => thing !== null && typeof thing === 'object';
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (
    (prototype3 === null ||
      prototype3 === Object.prototype ||
      Object.getPrototypeOf(prototype3) === null) &&
    !(Symbol.toStringTag in val) &&
    !(Symbol.iterator in val)
  );
};
var isDate = kindOfTest('Date');
var isFile = kindOfTest('File');
var isBlob = kindOfTest('Blob');
var isFileList = kindOfTest('FileList');
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return (
    thing &&
    ((typeof FormData === 'function' && thing instanceof FormData) ||
      (isFunction(thing.append) &&
        ((kind = kindOf(thing)) === 'formdata' || // detect form-data instance
          (kind === 'object' &&
            isFunction(thing.toString) &&
            thing.toString() === '[object FormData]'))))
  );
};
var isURLSearchParams = kindOfTest('URLSearchParams');
var trim = (str) =>
  str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === 'undefined') {
    return;
  }
  let i;
  let l;
  if (typeof obj !== 'object') {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys
      ? Object.getOwnPropertyNames(obj)
      : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== 'undefined') return globalThis;
  return typeof self !== 'undefined'
    ? self
    : typeof window !== 'undefined'
    ? window
    : global;
})();
var isContextDefined = (context) =>
  !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = (isContextDefined(this) && this) || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = (caseless && findKey(result, key)) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(
    b,
    (val, key) => {
      if (thisArg && isFunction(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    },
    { allOwnKeys }
  );
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(
    superConstructor.prototype,
    descriptors2
  );
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype,
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if (
        (!propFilter || propFilter(prop, sourceObj, destObj)) &&
        !merged[prop]
      ) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (
    sourceObj &&
    (!filter2 || filter2(sourceObj, destObj)) &&
    sourceObj !== Object.prototype
  );
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest('HTMLFormElement');
var toCamelCase = (str) => {
  return str
    .toLowerCase()
    .replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    });
};
var hasOwnProperty = (
  ({ hasOwnProperty: hasOwnProperty2 }) =>
  (obj, prop) =>
    hasOwnProperty2.call(obj, prop)
)(Object.prototype);
var isRegExp = kindOfTest('RegExp');
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (
      isFunction(obj) &&
      ['arguments', 'caller', 'callee'].indexOf(name) !== -1
    ) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value)) return;
    descriptor.enumerable = false;
    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define2 = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString)
    ? define2(arrayOrString)
    : define2(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = 'abcdefghijklmnopqrstuvwxyz';
var DIGIT = '0123456789';
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT,
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const { length } = alphabet;
  while (size--) {
    str += alphabet[(Math.random() * length) | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(
    thing &&
    isFunction(thing.append) &&
    thing[Symbol.toStringTag] === 'FormData' &&
    thing[Symbol.iterator]
  );
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status:
        this.response && this.response.status ? this.response.status : null,
    };
  },
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL',
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(
    error,
    axiosError,
    function filter2(obj) {
      return obj !== Error.prototype;
    },
    (prop) => {
      return prop !== 'isAxiosError';
    }
  );
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/platform/node/classes/FormData.js
var import_form_data = __toESM(require_form_data(), 1);
var FormData_default = import_form_data.default;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, '[]') ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path
    .concat(key)
    .map(function each(token, i) {
      token = removeBrackets(token);
      return !dots && i ? '[' + token + ']' : token;
    })
    .join(dots ? '.' : '');
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(
  utils_default,
  {},
  null,
  function filter(prop) {
    return /^is[A-Z]/.test(prop);
  }
);
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError('target must be an object');
  }
  formData = formData || new (FormData_default || FormData)();
  options = utils_default.toFlatObject(
    options,
    {
      metaTokens: true,
      dots: false,
      indexes: false,
    },
    false,
    function defined(option, source) {
      return !utils_default.isUndefined(source[option]);
    }
  );
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || (typeof Blob !== 'undefined' && Blob);
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }
  function convertValue(value) {
    if (value === null) return '';
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default(
        'Blob is not supported. Use a Buffer instead.'
      );
    }
    if (
      utils_default.isArrayBuffer(value) ||
      utils_default.isTypedArray(value)
    ) {
      return useBlob && typeof Blob === 'function'
        ? new Blob([value])
        : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === 'object') {
      if (utils_default.endsWith(key, '{}')) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (
        (utils_default.isArray(value) && isFlatArray(value)) ||
        ((utils_default.isFileList(value) ||
          utils_default.endsWith(key, '[]')) &&
          (arr = utils_default.toArray(value)))
      ) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) &&
            formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true
                ? renderKey([key], index, dots)
                : indexes === null
                ? key
                : key + '[]',
              convertValue(el)
            );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable,
  });
  function build(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result =
        !(utils_default.isUndefined(el) || el === null) &&
        visitor.call(
          formData,
          el,
          utils_default.isString(key) ? key.trim() : key,
          path,
          exposedHelpers
        );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError('data must be an object');
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\0',
  };
  return encodeURIComponent(str).replace(
    /[!'()~]|%20|%00/g,
    function replacer(match) {
      return charMap[match];
    }
  );
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder
    ? function (value) {
        return encoder.call(this, value, encode);
      }
    : encode;
  return this._pairs
    .map(function each(pair) {
      return _encode(pair[0]) + '=' + _encode(pair[1]);
    }, '')
    .join('&');
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val)
    .replace(/%3A/gi, ':')
    .replace(/%24/g, '$')
    .replace(/%2C/gi, ',')
    .replace(/%20/g, '+')
    .replace(/%5B/gi, '[')
    .replace(/%5D/gi, ']');
}
function buildURL(url2, params, options) {
  if (!params) {
    return url2;
  }
  const _encode = (options && options.encode) || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params)
      ? params.toString()
      : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url2.indexOf('#');
    if (hashmarkIndex !== -1) {
      url2 = url2.slice(0, hashmarkIndex);
    }
    url2 += (url2.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }
  return url2;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null,
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false,
};

// node_modules/axios/lib/platform/node/classes/URLSearchParams.js
var import_url = __toESM(require('url'), 1);
var URLSearchParams_default = import_url.default.URLSearchParams;

// node_modules/axios/lib/platform/node/index.js
var node_default = {
  isNode: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: (typeof Blob !== 'undefined' && Blob) || null,
  },
  protocols: ['http', 'https', 'file', 'data'],
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(
    data,
    new node_default.classes.URLSearchParams(),
    Object.assign(
      {
        visitor: function (value, key, path, helpers) {
          if (node_default.isNode && utils_default.isBuffer(value)) {
            this.append(key, value.toString('base64'));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        },
      },
      options
    )
  );
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (
    utils_default.isFormData(formData) &&
    utils_default.isFunction(formData.entries)
  ) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  'Content-Type': void 0,
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ['xhr', 'http'],
  transformRequest: [
    function transformRequest(data, headers) {
      const contentType = headers.getContentType() || '';
      const hasJSONContentType = contentType.indexOf('application/json') > -1;
      const isObjectPayload = utils_default.isObject(data);
      if (isObjectPayload && utils_default.isHTMLForm(data)) {
        data = new FormData(data);
      }
      const isFormData2 = utils_default.isFormData(data);
      if (isFormData2) {
        if (!hasJSONContentType) {
          return data;
        }
        return hasJSONContentType
          ? JSON.stringify(formDataToJSON_default(data))
          : data;
      }
      if (
        utils_default.isArrayBuffer(data) ||
        utils_default.isBuffer(data) ||
        utils_default.isStream(data) ||
        utils_default.isFile(data) ||
        utils_default.isBlob(data)
      ) {
        return data;
      }
      if (utils_default.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils_default.isURLSearchParams(data)) {
        headers.setContentType(
          'application/x-www-form-urlencoded;charset=utf-8',
          false
        );
        return data.toString();
      }
      let isFileList2;
      if (isObjectPayload) {
        if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }
        if (
          (isFileList2 = utils_default.isFileList(data)) ||
          contentType.indexOf('multipart/form-data') > -1
        ) {
          const _FormData = this.env && this.env.FormData;
          return toFormData_default(
            isFileList2 ? { 'files[]': data } : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType('application/json', false);
        return stringifySafely(data);
      }
      return data;
    },
  ],
  transformResponse: [
    function transformResponse(data) {
      const transitional2 = this.transitional || defaults.transitional;
      const forcedJSONParsing =
        transitional2 && transitional2.forcedJSONParsing;
      const JSONRequested = this.responseType === 'json';
      if (
        data &&
        utils_default.isString(data) &&
        ((forcedJSONParsing && !this.responseType) || JSONRequested)
      ) {
        const silentJSONParsing =
          transitional2 && transitional2.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === 'SyntaxError') {
              throw AxiosError_default.from(
                e,
                AxiosError_default.ERR_BAD_RESPONSE,
                this,
                null,
                this.response
              );
            }
            throw e;
          }
        }
      }
      return data;
    },
  ],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: node_default.classes.FormData,
    Blob: node_default.classes.Blob,
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      Accept: 'application/json, text/plain, */*',
    },
  },
};
utils_default.forEach(
  ['delete', 'get', 'head'],
  function forEachMethodNoData(method) {
    defaults.headers[method] = {};
  }
);
utils_default.forEach(
  ['post', 'put', 'patch'],
  function forEachMethodWithData(method) {
    defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
  }
);
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  'age',
  'authorization',
  'content-length',
  'content-type',
  'etag',
  'expires',
  'from',
  'host',
  'if-modified-since',
  'if-unmodified-since',
  'last-modified',
  'location',
  'max-forwards',
  'proxy-authorization',
  'referer',
  'retry-after',
  'user-agent',
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders &&
    rawHeaders.split('\n').forEach(function parser(line) {
      i = line.indexOf(':');
      key = line.substring(0, i).trim().toLowerCase();
      val = line.substring(i + 1).trim();
      if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
        return;
      }
      if (key === 'set-cookie') {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol('internals');
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value)
    ? value.map(normalizeValue)
    : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) =>
  /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header
    .trim()
    .toLowerCase()
    .replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(' ' + header);
  ['get', 'set', 'has'].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function (arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true,
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }
      const key = utils_default.findKey(self2, lHeader);
      if (
        !key ||
        self2[key] === void 0 ||
        _rewrite === true ||
        (_rewrite === void 0 && self2[key] !== false)
      ) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) =>
      utils_default.forEach(headers, (_value, _header) =>
        setHeader(_value, _header, _rewrite)
      );
    if (
      utils_default.isPlainObject(header) ||
      header instanceof this.constructor
    ) {
      setHeaders(header, valueOrRewrite);
    } else if (
      utils_default.isString(header) &&
      (header = header.trim()) &&
      !isValidHeaderName(header)
    ) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(
        key &&
        this[key] !== void 0 &&
        (!matcher || matchHeaderValue(this, this[key], key, matcher))
      );
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (
          key &&
          (!matcher || matchHeaderValue(self2, self2[key], key, matcher))
        ) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null &&
        value !== false &&
        (obj[header] =
          asStrings && utils_default.isArray(value) ? value.join(', ') : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON())
      .map(([header, value]) => header + ': ' + value)
      .join('\n');
  }
  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals =
      (this[$internals] =
      this[$internals] =
        {
          accessors: {},
        });
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header)
      ? header.forEach(defineAccessor)
      : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor([
  'Content-Type',
  'Content-Length',
  'Accept',
  'Accept-Encoding',
  'User-Agent',
  'Authorization',
]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(
      config,
      data,
      headers.normalize(),
      response ? response.status : void 0
    );
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(
    this,
    message == null ? 'canceled' : message,
    AxiosError_default.ERR_CANCELED,
    config,
    request
  );
  this.name = 'CanceledError';
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true,
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (
    !response.status ||
    !validateStatus2 ||
    validateStatus2(response.status)
  ) {
    resolve(response);
  } else {
    reject(
      new AxiosError_default(
        'Request failed with status code ' + response.status,
        [
          AxiosError_default.ERR_BAD_REQUEST,
          AxiosError_default.ERR_BAD_RESPONSE,
        ][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      )
    );
  }
}

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url2) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/adapters/http.js
var import_proxy_from_env = __toESM(require_proxy_from_env(), 1);
var import_http = __toESM(require('http'), 1);
var import_https = __toESM(require('https'), 1);
var import_util2 = __toESM(require('util'), 1);
var import_follow_redirects = __toESM(require_follow_redirects(), 1);
var import_zlib = __toESM(require('zlib'), 1);

// node_modules/axios/lib/env/data.js
var VERSION = '1.3.6';

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url2) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
  return (match && match[1]) || '';
}

// node_modules/axios/lib/helpers/fromDataURI.js
var DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
function fromDataURI(uri, asBlob, options) {
  const _Blob = (options && options.Blob) || node_default.classes.Blob;
  const protocol = parseProtocol(uri);
  if (asBlob === void 0 && _Blob) {
    asBlob = true;
  }
  if (protocol === 'data') {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
    const match = DATA_URL_PATTERN.exec(uri);
    if (!match) {
      throw new AxiosError_default(
        'Invalid URL',
        AxiosError_default.ERR_INVALID_URL
      );
    }
    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(
      decodeURIComponent(body),
      isBase64 ? 'base64' : 'utf8'
    );
    if (asBlob) {
      if (!_Blob) {
        throw new AxiosError_default(
          'Blob is not supported',
          AxiosError_default.ERR_NOT_SUPPORT
        );
      }
      return new _Blob([buffer], { type: mime });
    }
    return buffer;
  }
  throw new AxiosError_default(
    'Unsupported protocol ' + protocol,
    AxiosError_default.ERR_NOT_SUPPORT
  );
}

// node_modules/axios/lib/adapters/http.js
var import_stream4 = __toESM(require('stream'), 1);

// node_modules/axios/lib/helpers/AxiosTransformStream.js
var import_stream = __toESM(require('stream'), 1);

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  const threshold = 1e3 / freq;
  let timer = null;
  return function throttled(force, args) {
    const now = Date.now();
    if (force || now - timestamp > threshold) {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      timestamp = now;
      return fn.apply(null, args);
    }
    if (!timer) {
      timer = setTimeout(() => {
        timer = null;
        timestamp = Date.now();
        return fn.apply(null, args);
      }, threshold - (now - timestamp));
    }
  };
}
var throttle_default = throttle;

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round((bytesCount * 1e3) / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/helpers/AxiosTransformStream.js
var kInternals = Symbol('internals');
var AxiosTransformStream = class extends import_stream.default.Transform {
  constructor(options) {
    options = utils_default.toFlatObject(
      options,
      {
        maxRate: 0,
        chunkSize: 64 * 1024,
        minChunkSize: 100,
        timeWindow: 500,
        ticksRate: 2,
        samplesCount: 15,
      },
      null,
      (prop, source) => {
        return !utils_default.isUndefined(source[prop]);
      }
    );
    super({
      readableHighWaterMark: options.chunkSize,
    });
    const self2 = this;
    const internals = (this[kInternals] = {
      length: options.length,
      timeWindow: options.timeWindow,
      ticksRate: options.ticksRate,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null,
    });
    const _speedometer = speedometer_default(
      internals.ticksRate * options.samplesCount,
      internals.timeWindow
    );
    this.on('newListener', (event) => {
      if (event === 'progress') {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });
    let bytesNotified = 0;
    internals.updateProgress = throttle_default(function throttledHandler() {
      const totalBytes = internals.length;
      const bytesTransferred = internals.bytesSeen;
      const progressBytes = bytesTransferred - bytesNotified;
      if (!progressBytes || self2.destroyed) return;
      const rate = _speedometer(progressBytes);
      bytesNotified = bytesTransferred;
      process.nextTick(() => {
        self2.emit('progress', {
          loaded: bytesTransferred,
          total: totalBytes,
          progress: totalBytes ? bytesTransferred / totalBytes : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated:
            rate && totalBytes && bytesTransferred <= totalBytes
              ? (totalBytes - bytesTransferred) / rate
              : void 0,
        });
      });
    }, internals.ticksRate);
    const onFinish = () => {
      internals.updateProgress(true);
    };
    this.once('end', onFinish);
    this.once('error', onFinish);
  }
  _read(size) {
    const internals = this[kInternals];
    if (internals.onReadCallback) {
      internals.onReadCallback();
    }
    return super._read(size);
  }
  _transform(chunk, encoding, callback) {
    const self2 = this;
    const internals = this[kInternals];
    const maxRate = internals.maxRate;
    const readableHighWaterMark = this.readableHighWaterMark;
    const timeWindow = internals.timeWindow;
    const divider = 1e3 / timeWindow;
    const bytesThreshold = maxRate / divider;
    const minChunkSize =
      internals.minChunkSize !== false
        ? Math.max(internals.minChunkSize, bytesThreshold * 0.01)
        : 0;
    function pushChunk(_chunk, _callback) {
      const bytes = Buffer.byteLength(_chunk);
      internals.bytesSeen += bytes;
      internals.bytes += bytes;
      if (internals.isCaptured) {
        internals.updateProgress();
      }
      if (self2.push(_chunk)) {
        process.nextTick(_callback);
      } else {
        internals.onReadCallback = () => {
          internals.onReadCallback = null;
          process.nextTick(_callback);
        };
      }
    }
    const transformChunk = (_chunk, _callback) => {
      const chunkSize = Buffer.byteLength(_chunk);
      let chunkRemainder = null;
      let maxChunkSize = readableHighWaterMark;
      let bytesLeft;
      let passed = 0;
      if (maxRate) {
        const now = Date.now();
        if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
          internals.ts = now;
          bytesLeft = bytesThreshold - internals.bytes;
          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
          passed = 0;
        }
        bytesLeft = bytesThreshold - internals.bytes;
      }
      if (maxRate) {
        if (bytesLeft <= 0) {
          return setTimeout(() => {
            _callback(null, _chunk);
          }, timeWindow - passed);
        }
        if (bytesLeft < maxChunkSize) {
          maxChunkSize = bytesLeft;
        }
      }
      if (
        maxChunkSize &&
        chunkSize > maxChunkSize &&
        chunkSize - maxChunkSize > minChunkSize
      ) {
        chunkRemainder = _chunk.subarray(maxChunkSize);
        _chunk = _chunk.subarray(0, maxChunkSize);
      }
      pushChunk(
        _chunk,
        chunkRemainder
          ? () => {
              process.nextTick(_callback, null, chunkRemainder);
            }
          : _callback
      );
    };
    transformChunk(chunk, function transformNextChunk(err, _chunk) {
      if (err) {
        return callback(err);
      }
      if (_chunk) {
        transformChunk(_chunk, transformNextChunk);
      } else {
        callback(null);
      }
    });
  }
  setLength(length) {
    this[kInternals].length = +length;
    return this;
  }
};
var AxiosTransformStream_default = AxiosTransformStream;

// node_modules/axios/lib/adapters/http.js
var import_events = __toESM(require('events'), 1);

// node_modules/axios/lib/helpers/formDataToStream.js
var import_util = require('util');
var import_stream2 = require('stream');

// node_modules/axios/lib/helpers/readBlob.js
var { asyncIterator } = Symbol;
var readBlob = async function* (blob) {
  if (blob.stream) {
    yield* blob.stream();
  } else if (blob.arrayBuffer) {
    yield await blob.arrayBuffer();
  } else if (blob[asyncIterator]) {
    yield* blob[asyncIterator]();
  } else {
    yield blob;
  }
};
var readBlob_default = readBlob;

// node_modules/axios/lib/helpers/formDataToStream.js
var BOUNDARY_ALPHABET = utils_default.ALPHABET.ALPHA_DIGIT + '-_';
var textEncoder = new import_util.TextEncoder();
var CRLF = '\r\n';
var CRLF_BYTES = textEncoder.encode(CRLF);
var CRLF_BYTES_COUNT = 2;
var FormDataPart = class {
  constructor(name, value) {
    const { escapeName } = this.constructor;
    const isStringValue = utils_default.isString(value);
    let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${
      !isStringValue && value.name
        ? `; filename="${escapeName(value.name)}"`
        : ''
    }${CRLF}`;
    if (isStringValue) {
      value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
    } else {
      headers += `Content-Type: ${
        value.type || 'application/octet-stream'
      }${CRLF}`;
    }
    this.headers = textEncoder.encode(headers + CRLF);
    this.contentLength = isStringValue ? value.byteLength : value.size;
    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
    this.name = name;
    this.value = value;
  }
  async *encode() {
    yield this.headers;
    const { value } = this;
    if (utils_default.isTypedArray(value)) {
      yield value;
    } else {
      yield* readBlob_default(value);
    }
    yield CRLF_BYTES;
  }
  static escapeName(name) {
    return String(name).replace(
      /[\r\n"]/g,
      (match) =>
        ({
          '\r': '%0D',
          '\n': '%0A',
          '"': '%22',
        }[match])
    );
  }
};
var formDataToStream = (form, headersHandler, options) => {
  const {
    tag = 'form-data-boundary',
    size = 25,
    boundary = tag +
      '-' +
      utils_default.generateString(size, BOUNDARY_ALPHABET),
  } = options || {};
  if (!utils_default.isFormData(form)) {
    throw TypeError('FormData instance required');
  }
  if (boundary.length < 1 || boundary.length > 70) {
    throw Error('boundary must be 10-70 characters long');
  }
  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);
  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);
  let contentLength = footerBytes.byteLength;
  const parts = Array.from(form.entries()).map(([name, value]) => {
    const part = new FormDataPart(name, value);
    contentLength += part.size;
    return part;
  });
  contentLength += boundaryBytes.byteLength * parts.length;
  contentLength = utils_default.toFiniteNumber(contentLength);
  const computedHeaders = {
    'Content-Type': `multipart/form-data; boundary=${boundary}`,
  };
  if (Number.isFinite(contentLength)) {
    computedHeaders['Content-Length'] = contentLength;
  }
  headersHandler && headersHandler(computedHeaders);
  return import_stream2.Readable.from(
    (async function* () {
      for (const part of parts) {
        yield boundaryBytes;
        yield* part.encode();
      }
      yield footerBytes;
    })()
  );
};
var formDataToStream_default = formDataToStream;

// node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js
var import_stream3 = __toESM(require('stream'), 1);
var ZlibHeaderTransformStream = class extends import_stream3.default.Transform {
  __transform(chunk, encoding, callback) {
    this.push(chunk);
    callback();
  }
  _transform(chunk, encoding, callback) {
    if (chunk.length !== 0) {
      this._transform = this.__transform;
      if (chunk[0] !== 120) {
        const header = Buffer.alloc(2);
        header[0] = 120;
        header[1] = 156;
        this.push(header, encoding);
      }
    }
    this.__transform(chunk, encoding, callback);
  }
};
var ZlibHeaderTransformStream_default = ZlibHeaderTransformStream;

// node_modules/axios/lib/adapters/http.js
var zlibOptions = {
  flush: import_zlib.default.constants.Z_SYNC_FLUSH,
  finishFlush: import_zlib.default.constants.Z_SYNC_FLUSH,
};
var brotliOptions = {
  flush: import_zlib.default.constants.BROTLI_OPERATION_FLUSH,
  finishFlush: import_zlib.default.constants.BROTLI_OPERATION_FLUSH,
};
var isBrotliSupported = utils_default.isFunction(
  import_zlib.default.createBrotliDecompress
);
var { http: httpFollow, https: httpsFollow } = import_follow_redirects.default;
var isHttps = /https:?/;
var supportedProtocols = node_default.protocols.map((protocol) => {
  return protocol + ':';
});
function dispatchBeforeRedirect(options) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options);
  }
}
function setProxy(options, configProxy, location) {
  let proxy = configProxy;
  if (!proxy && proxy !== false) {
    const proxyUrl = (0, import_proxy_from_env.getProxyForUrl)(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    if (proxy.username) {
      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');
    }
    if (proxy.auth) {
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth =
          (proxy.auth.username || '') + ':' + (proxy.auth.password || '');
      }
      const base64 = Buffer.from(proxy.auth, 'utf8').toString('base64');
      options.headers['Proxy-Authorization'] = 'Basic ' + base64;
    }
    options.headers.host =
      options.hostname + (options.port ? ':' + options.port : '');
    const proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(':')
        ? proxy.protocol
        : `${proxy.protocol}:`;
    }
  }
  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}
var isHttpAdapterSupported =
  typeof process !== 'undefined' && utils_default.kindOf(process) === 'process';
var wrapAsync = (asyncExecutor) => {
  return new Promise((resolve, reject) => {
    let onDone;
    let isDone;
    const done = (value, isRejected) => {
      if (isDone) return;
      isDone = true;
      onDone && onDone(value, isRejected);
    };
    const _resolve = (value) => {
      done(value);
      resolve(value);
    };
    const _reject = (reason) => {
      done(reason, true);
      reject(reason);
    };
    asyncExecutor(
      _resolve,
      _reject,
      (onDoneHandler) => (onDone = onDoneHandler)
    ).catch(_reject);
  });
};
var http_default =
  isHttpAdapterSupported &&
  function httpAdapter(config) {
    return wrapAsync(async function dispatchHttpRequest(
      resolve,
      reject,
      onDone
    ) {
      let { data } = config;
      const { responseType, responseEncoding } = config;
      const method = config.method.toUpperCase();
      let isDone;
      let rejected = false;
      let req;
      const emitter = new import_events.default();
      const onFinished = () => {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(abort);
        }
        if (config.signal) {
          config.signal.removeEventListener('abort', abort);
        }
        emitter.removeAllListeners();
      };
      onDone((value, isRejected) => {
        isDone = true;
        if (isRejected) {
          rejected = true;
          onFinished();
        }
      });
      function abort(reason) {
        emitter.emit(
          'abort',
          !reason || reason.type
            ? new CanceledError_default(null, config, req)
            : reason
        );
      }
      emitter.once('abort', reject);
      if (config.cancelToken || config.signal) {
        config.cancelToken && config.cancelToken.subscribe(abort);
        if (config.signal) {
          config.signal.aborted
            ? abort()
            : config.signal.addEventListener('abort', abort);
        }
      }
      const fullPath = buildFullPath(config.baseURL, config.url);
      const parsed = new URL(fullPath, 'http://localhost');
      const protocol = parsed.protocol || supportedProtocols[0];
      if (protocol === 'data:') {
        let convertedData;
        if (method !== 'GET') {
          return settle(resolve, reject, {
            status: 405,
            statusText: 'method not allowed',
            headers: {},
            config,
          });
        }
        try {
          convertedData = fromDataURI(config.url, responseType === 'blob', {
            Blob: config.env && config.env.Blob,
          });
        } catch (err) {
          throw AxiosError_default.from(
            err,
            AxiosError_default.ERR_BAD_REQUEST,
            config
          );
        }
        if (responseType === 'text') {
          convertedData = convertedData.toString(responseEncoding);
          if (!responseEncoding || responseEncoding === 'utf8') {
            convertedData = utils_default.stripBOM(convertedData);
          }
        } else if (responseType === 'stream') {
          convertedData = import_stream4.default.Readable.from(convertedData);
        }
        return settle(resolve, reject, {
          data: convertedData,
          status: 200,
          statusText: 'OK',
          headers: new AxiosHeaders_default(),
          config,
        });
      }
      if (supportedProtocols.indexOf(protocol) === -1) {
        return reject(
          new AxiosError_default(
            'Unsupported protocol ' + protocol,
            AxiosError_default.ERR_BAD_REQUEST,
            config
          )
        );
      }
      const headers = AxiosHeaders_default.from(config.headers).normalize();
      headers.set('User-Agent', 'axios/' + VERSION, false);
      const onDownloadProgress = config.onDownloadProgress;
      const onUploadProgress = config.onUploadProgress;
      const maxRate = config.maxRate;
      let maxUploadRate = void 0;
      let maxDownloadRate = void 0;
      if (utils_default.isSpecCompliantForm(data)) {
        const userBoundary = headers.getContentType(
          /boundary=([-_\w\d]{10,70})/i
        );
        data = formDataToStream_default(
          data,
          (formHeaders) => {
            headers.set(formHeaders);
          },
          {
            tag: `axios-${VERSION}-boundary`,
            boundary: (userBoundary && userBoundary[1]) || void 0,
          }
        );
      } else if (
        utils_default.isFormData(data) &&
        utils_default.isFunction(data.getHeaders)
      ) {
        headers.set(data.getHeaders());
        if (!headers.hasContentLength()) {
          try {
            const knownLength = await import_util2.default
              .promisify(data.getLength)
              .call(data);
            Number.isFinite(knownLength) &&
              knownLength >= 0 &&
              headers.setContentLength(knownLength);
          } catch (e) {}
        }
      } else if (utils_default.isBlob(data)) {
        data.size &&
          headers.setContentType(data.type || 'application/octet-stream');
        headers.setContentLength(data.size || 0);
        data = import_stream4.default.Readable.from(readBlob_default(data));
      } else if (data && !utils_default.isStream(data)) {
        if (Buffer.isBuffer(data)) {
        } else if (utils_default.isArrayBuffer(data)) {
          data = Buffer.from(new Uint8Array(data));
        } else if (utils_default.isString(data)) {
          data = Buffer.from(data, 'utf-8');
        } else {
          return reject(
            new AxiosError_default(
              'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
              AxiosError_default.ERR_BAD_REQUEST,
              config
            )
          );
        }
        headers.setContentLength(data.length, false);
        if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
          return reject(
            new AxiosError_default(
              'Request body larger than maxBodyLength limit',
              AxiosError_default.ERR_BAD_REQUEST,
              config
            )
          );
        }
      }
      const contentLength = utils_default.toFiniteNumber(
        headers.getContentLength()
      );
      if (utils_default.isArray(maxRate)) {
        maxUploadRate = maxRate[0];
        maxDownloadRate = maxRate[1];
      } else {
        maxUploadRate = maxDownloadRate = maxRate;
      }
      if (data && (onUploadProgress || maxUploadRate)) {
        if (!utils_default.isStream(data)) {
          data = import_stream4.default.Readable.from(data, {
            objectMode: false,
          });
        }
        data = import_stream4.default.pipeline(
          [
            data,
            new AxiosTransformStream_default({
              length: contentLength,
              maxRate: utils_default.toFiniteNumber(maxUploadRate),
            }),
          ],
          utils_default.noop
        );
        onUploadProgress &&
          data.on('progress', (progress) => {
            onUploadProgress(
              Object.assign(progress, {
                upload: true,
              })
            );
          });
      }
      let auth = void 0;
      if (config.auth) {
        const username = config.auth.username || '';
        const password = config.auth.password || '';
        auth = username + ':' + password;
      }
      if (!auth && parsed.username) {
        const urlUsername = parsed.username;
        const urlPassword = parsed.password;
        auth = urlUsername + ':' + urlPassword;
      }
      auth && headers.delete('authorization');
      let path;
      try {
        path = buildURL(
          parsed.pathname + parsed.search,
          config.params,
          config.paramsSerializer
        ).replace(/^\?/, '');
      } catch (err) {
        const customErr = new Error(err.message);
        customErr.config = config;
        customErr.url = config.url;
        customErr.exists = true;
        return reject(customErr);
      }
      headers.set(
        'Accept-Encoding',
        'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''),
        false
      );
      const options = {
        path,
        method,
        headers: headers.toJSON(),
        agents: { http: config.httpAgent, https: config.httpsAgent },
        auth,
        protocol,
        beforeRedirect: dispatchBeforeRedirect,
        beforeRedirects: {},
      };
      if (config.socketPath) {
        options.socketPath = config.socketPath;
      } else {
        options.hostname = parsed.hostname;
        options.port = parsed.port;
        setProxy(
          options,
          config.proxy,
          protocol +
            '//' +
            parsed.hostname +
            (parsed.port ? ':' + parsed.port : '') +
            options.path
        );
      }
      let transport;
      const isHttpsRequest = isHttps.test(options.protocol);
      options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
      if (config.transport) {
        transport = config.transport;
      } else if (config.maxRedirects === 0) {
        transport = isHttpsRequest ? import_https.default : import_http.default;
      } else {
        if (config.maxRedirects) {
          options.maxRedirects = config.maxRedirects;
        }
        if (config.beforeRedirect) {
          options.beforeRedirects.config = config.beforeRedirect;
        }
        transport = isHttpsRequest ? httpsFollow : httpFollow;
      }
      if (config.maxBodyLength > -1) {
        options.maxBodyLength = config.maxBodyLength;
      } else {
        options.maxBodyLength = Infinity;
      }
      if (config.insecureHTTPParser) {
        options.insecureHTTPParser = config.insecureHTTPParser;
      }
      req = transport.request(options, function handleResponse(res) {
        if (req.destroyed) return;
        const streams = [res];
        const responseLength = +res.headers['content-length'];
        if (onDownloadProgress) {
          const transformStream = new AxiosTransformStream_default({
            length: utils_default.toFiniteNumber(responseLength),
            maxRate: utils_default.toFiniteNumber(maxDownloadRate),
          });
          onDownloadProgress &&
            transformStream.on('progress', (progress) => {
              onDownloadProgress(
                Object.assign(progress, {
                  download: true,
                })
              );
            });
          streams.push(transformStream);
        }
        let responseStream = res;
        const lastRequest = res.req || req;
        if (config.decompress !== false && res.headers['content-encoding']) {
          if (method === 'HEAD' || res.statusCode === 204) {
            delete res.headers['content-encoding'];
          }
          switch (res.headers['content-encoding']) {
            case 'gzip':
            case 'x-gzip':
            case 'compress':
            case 'x-compress':
              streams.push(import_zlib.default.createUnzip(zlibOptions));
              delete res.headers['content-encoding'];
              break;
            case 'deflate':
              streams.push(new ZlibHeaderTransformStream_default());
              streams.push(import_zlib.default.createUnzip(zlibOptions));
              delete res.headers['content-encoding'];
              break;
            case 'br':
              if (isBrotliSupported) {
                streams.push(
                  import_zlib.default.createBrotliDecompress(brotliOptions)
                );
                delete res.headers['content-encoding'];
              }
          }
        }
        responseStream =
          streams.length > 1
            ? import_stream4.default.pipeline(streams, utils_default.noop)
            : streams[0];
        const offListeners = import_stream4.default.finished(
          responseStream,
          () => {
            offListeners();
            onFinished();
          }
        );
        const response = {
          status: res.statusCode,
          statusText: res.statusMessage,
          headers: new AxiosHeaders_default(res.headers),
          config,
          request: lastRequest,
        };
        if (responseType === 'stream') {
          response.data = responseStream;
          settle(resolve, reject, response);
        } else {
          const responseBuffer = [];
          let totalResponseBytes = 0;
          responseStream.on('data', function handleStreamData(chunk) {
            responseBuffer.push(chunk);
            totalResponseBytes += chunk.length;
            if (
              config.maxContentLength > -1 &&
              totalResponseBytes > config.maxContentLength
            ) {
              rejected = true;
              responseStream.destroy();
              reject(
                new AxiosError_default(
                  'maxContentLength size of ' +
                    config.maxContentLength +
                    ' exceeded',
                  AxiosError_default.ERR_BAD_RESPONSE,
                  config,
                  lastRequest
                )
              );
            }
          });
          responseStream.on('aborted', function handlerStreamAborted() {
            if (rejected) {
              return;
            }
            const err = new AxiosError_default(
              'maxContentLength size of ' +
                config.maxContentLength +
                ' exceeded',
              AxiosError_default.ERR_BAD_RESPONSE,
              config,
              lastRequest
            );
            responseStream.destroy(err);
            reject(err);
          });
          responseStream.on('error', function handleStreamError(err) {
            if (req.destroyed) return;
            reject(AxiosError_default.from(err, null, config, lastRequest));
          });
          responseStream.on('end', function handleStreamEnd() {
            try {
              let responseData =
                responseBuffer.length === 1
                  ? responseBuffer[0]
                  : Buffer.concat(responseBuffer);
              if (responseType !== 'arraybuffer') {
                responseData = responseData.toString(responseEncoding);
                if (!responseEncoding || responseEncoding === 'utf8') {
                  responseData = utils_default.stripBOM(responseData);
                }
              }
              response.data = responseData;
            } catch (err) {
              reject(
                AxiosError_default.from(
                  err,
                  null,
                  config,
                  response.request,
                  response
                )
              );
            }
            settle(resolve, reject, response);
          });
        }
        emitter.once('abort', (err) => {
          if (!responseStream.destroyed) {
            responseStream.emit('error', err);
            responseStream.destroy();
          }
        });
      });
      emitter.once('abort', (err) => {
        reject(err);
        req.destroy(err);
      });
      req.on('error', function handleRequestError(err) {
        reject(AxiosError_default.from(err, null, config, req));
      });
      req.on('socket', function handleRequestSocket(socket) {
        socket.setKeepAlive(true, 1e3 * 60);
      });
      if (config.timeout) {
        const timeout = parseInt(config.timeout, 10);
        if (isNaN(timeout)) {
          reject(
            new AxiosError_default(
              'error trying to parse `config.timeout` to int',
              AxiosError_default.ERR_BAD_OPTION_VALUE,
              config,
              req
            )
          );
          return;
        }
        req.setTimeout(timeout, function handleRequestTimeout() {
          if (isDone) return;
          let timeoutErrorMessage = config.timeout
            ? 'timeout of ' + config.timeout + 'ms exceeded'
            : 'timeout exceeded';
          const transitional2 = config.transitional || transitional_default;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(
            new AxiosError_default(
              timeoutErrorMessage,
              transitional2.clarifyTimeoutError
                ? AxiosError_default.ETIMEDOUT
                : AxiosError_default.ECONNABORTED,
              config,
              req
            )
          );
          abort();
        });
      }
      if (utils_default.isStream(data)) {
        let ended = false;
        let errored = false;
        data.on('end', () => {
          ended = true;
        });
        data.once('error', (err) => {
          errored = true;
          req.destroy(err);
        });
        data.on('close', () => {
          if (!ended && !errored) {
            abort(
              new CanceledError_default(
                'Request stream has been aborted',
                config,
                req
              )
            );
          }
        });
        data.pipe(req);
      } else {
        req.end(data);
      }
    });
  };

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = node_default.isStandardBrowserEnv
  ? // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          const cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));
          if (utils_default.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }
          if (utils_default.isString(path)) {
            cookie.push('path=' + path);
          }
          if (utils_default.isString(domain)) {
            cookie.push('domain=' + domain);
          }
          if (secure === true) {
            cookie.push('secure');
          }
          document.cookie = cookie.join('; ');
        },
        read: function read(name) {
          const match = document.cookie.match(
            new RegExp('(^|;\\s*)(' + name + ')=([^;]*)')
          );
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, '', Date.now() - 864e5);
        },
      };
    })()
  : // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() {
          return null;
        },
        remove: function remove() {},
      };
    })();

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = node_default.isStandardBrowserEnv
  ? // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv2() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement('a');
      let originURL;
      function resolveURL(url2) {
        let href = url2;
        if (msie) {
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute('href', href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol
            ? urlParsingNode.protocol.replace(/:$/, '')
            : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search
            ? urlParsingNode.search.replace(/^\?/, '')
            : '',
          hash: urlParsingNode.hash
            ? urlParsingNode.hash.replace(/^#/, '')
            : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname:
            urlParsingNode.pathname.charAt(0) === '/'
              ? urlParsingNode.pathname
              : '/' + urlParsingNode.pathname,
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL)
          ? resolveURL(requestURL)
          : requestURL;
        return (
          parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host
        );
      };
    })()
  : // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv2() {
      return function isURLSameOrigin() {
        return true;
      };
    })();

// node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e,
    };
    data[isDownloadStream ? 'download' : 'upload'] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';
var xhr_default =
  isXHRAdapterSupported &&
  function (config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      let requestData = config.data;
      const requestHeaders = AxiosHeaders_default.from(
        config.headers
      ).normalize();
      const responseType = config.responseType;
      let onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }
        if (config.signal) {
          config.signal.removeEventListener('abort', onCanceled);
        }
      }
      if (
        utils_default.isFormData(requestData) &&
        (node_default.isStandardBrowserEnv ||
          node_default.isStandardBrowserWebWorkerEnv)
      ) {
        requestHeaders.setContentType(false);
      }
      let request = new XMLHttpRequest();
      if (config.auth) {
        const username = config.auth.username || '';
        const password = config.auth.password
          ? unescape(encodeURIComponent(config.auth.password))
          : '';
        requestHeaders.set(
          'Authorization',
          'Basic ' + btoa(username + ':' + password)
        );
      }
      const fullPath = buildFullPath(config.baseURL, config.url);
      request.open(
        config.method.toUpperCase(),
        buildURL(fullPath, config.params, config.paramsSerializer),
        true
      );
      request.timeout = config.timeout;
      function onloadend() {
        if (!request) {
          return;
        }
        const responseHeaders = AxiosHeaders_default.from(
          'getAllResponseHeaders' in request && request.getAllResponseHeaders()
        );
        const responseData =
          !responseType || responseType === 'text' || responseType === 'json'
            ? request.responseText
            : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request,
        };
        settle(
          function _resolve(value) {
            resolve(value);
            done();
          },
          function _reject(err) {
            reject(err);
            done();
          },
          response
        );
        request = null;
      }
      if ('onloadend' in request) {
        request.onloadend = onloadend;
      } else {
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (
            request.status === 0 &&
            !(request.responseURL && request.responseURL.indexOf('file:') === 0)
          ) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }
        reject(
          new AxiosError_default(
            'Request aborted',
            AxiosError_default.ECONNABORTED,
            config,
            request
          )
        );
        request = null;
      };
      request.onerror = function handleError() {
        reject(
          new AxiosError_default(
            'Network Error',
            AxiosError_default.ERR_NETWORK,
            config,
            request
          )
        );
        request = null;
      };
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = config.timeout
          ? 'timeout of ' + config.timeout + 'ms exceeded'
          : 'timeout exceeded';
        const transitional2 = config.transitional || transitional_default;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(
          new AxiosError_default(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError
              ? AxiosError_default.ETIMEDOUT
              : AxiosError_default.ECONNABORTED,
            config,
            request
          )
        );
        request = null;
      };
      if (node_default.isStandardBrowserEnv) {
        const xsrfValue =
          (config.withCredentials || isURLSameOrigin_default(fullPath)) &&
          config.xsrfCookieName &&
          cookies_default.read(config.xsrfCookieName);
        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
      requestData === void 0 && requestHeaders.setContentType(null);
      if ('setRequestHeader' in request) {
        utils_default.forEach(
          requestHeaders.toJSON(),
          function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          }
        );
      }
      if (!utils_default.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }
      if (responseType && responseType !== 'json') {
        request.responseType = config.responseType;
      }
      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener(
          'progress',
          progressEventReducer(config.onDownloadProgress, true)
        );
      }
      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener(
          'progress',
          progressEventReducer(config.onUploadProgress)
        );
      }
      if (config.cancelToken || config.signal) {
        onCanceled = (cancel) => {
          if (!request) {
            return;
          }
          reject(
            !cancel || cancel.type
              ? new CanceledError_default(null, config, request)
              : cancel
          );
          request.abort();
          request = null;
        };
        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted
            ? onCanceled()
            : config.signal.addEventListener('abort', onCanceled);
        }
      }
      const protocol = parseProtocol(fullPath);
      if (protocol && node_default.protocols.indexOf(protocol) === -1) {
        reject(
          new AxiosError_default(
            'Unsupported protocol ' + protocol + ':',
            AxiosError_default.ERR_BAD_REQUEST,
            config
          )
        );
        return;
      }
      request.send(requestData || null);
    });
  };

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: http_default,
  xhr: xhr_default,
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', { value });
    } catch (e) {}
    Object.defineProperty(fn, 'adapterName', { value });
  }
});
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      if (
        (adapter = utils_default.isString(nameOrAdapter)
          ? knownAdapters[nameOrAdapter.toLowerCase()]
          : nameOrAdapter)
      ) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError_default(
          `Adapter ${nameOrAdapter} is not supported by the environment`,
          'ERR_NOT_SUPPORT'
        );
      }
      throw new Error(
        utils_default.hasOwnProp(knownAdapters, nameOrAdapter)
          ? `Adapter '${nameOrAdapter}' is not available in the build`
          : `Unknown adapter '${nameOrAdapter}'`
      );
    }
    if (!utils_default.isFunction(adapter)) {
      throw new TypeError('adapter is not a function');
    }
    return adapter;
  },
  adapters: knownAdapters,
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(config, config.transformRequest);
  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }
  const adapter = adapters_default.getAdapter(
    config.adapter || defaults_default.adapter
  );
  return adapter(config).then(
    function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );
      response.headers = AxiosHeaders_default.from(response.headers);
      return response;
    },
    function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders_default.from(
            reason.response.headers
          );
        }
      }
      return Promise.reject(reason);
    }
  );
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) =>
  thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (
      utils_default.isPlainObject(target) &&
      utils_default.isPlainObject(source)
    ) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) =>
      mergeDeepProperties(headersToObject(a), headersToObject(b), true),
  };
  utils_default.forEach(
    Object.keys(config1).concat(Object.keys(config2)),
    function computeConfigValue(prop) {
      const merge2 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge2(config1[prop], config2[prop], prop);
      (utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys) ||
        (config[prop] = configValue);
    }
  );
  return config;
}

// node_modules/axios/lib/helpers/validator.js
var validators = {};
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(
  (type, i) => {
    validators[type] = function validator(thing) {
      return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  }
);
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version2, message) {
  function formatMessage(opt, desc) {
    return (
      '[Axios v' +
      VERSION +
      "] Transitional option '" +
      opt +
      "'" +
      desc +
      (message ? '. ' + message : '')
    );
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(
          opt,
          ' has been removed' + (version2 ? ' in ' + version2 : '')
        ),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' +
            version2 +
            ' and will be removed in the near future'
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError_default(
      'options must be an object',
      AxiosError_default.ERR_BAD_OPTION_VALUE
    );
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default(
          'option ' + opt + ' must be ' + result,
          AxiosError_default.ERR_BAD_OPTION_VALUE
        );
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default(
        'Unknown option ' + opt,
        AxiosError_default.ERR_BAD_OPTION
      );
    }
  }
}
var validator_default = {
  assertOptions,
  validators,
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default(),
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(
        transitional2,
        {
          silentJSONParsing: validators2.transitional(validators2.boolean),
          forcedJSONParsing: validators2.transitional(validators2.boolean),
          clarifyTimeoutError: validators2.transitional(validators2.boolean),
        },
        false
      );
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer,
        };
      } else {
        validator_default.assertOptions(
          paramsSerializer,
          {
            encode: validators2.function,
            serialize: validators2.function,
          },
          true
        );
      }
    }
    config.method = (
      config.method ||
      this.defaults.method ||
      'get'
    ).toLowerCase();
    let contextHeaders;
    contextHeaders =
      headers && utils_default.merge(headers.common, headers[config.method]);
    contextHeaders &&
      utils_default.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        (method) => {
          delete headers[method];
        }
      );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(
      interceptor
    ) {
      if (
        typeof interceptor.runWhen === 'function' &&
        interceptor.runWhen(config) === false
      ) {
        return;
      }
      synchronousRequestInterceptors =
        synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(
        interceptor.fulfilled,
        interceptor.rejected
      );
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(
      interceptor
    ) {
      responseInterceptorChain.push(
        interceptor.fulfilled,
        interceptor.rejected
      );
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(
        responseInterceptorChain[i++],
        responseInterceptorChain[i++]
      );
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(
  ['delete', 'get', 'head', 'options'],
  function forEachMethodNoData2(method) {
    Axios.prototype[method] = function (url2, config) {
      return this.request(
        mergeConfig(config || {}, {
          method,
          url: url2,
          data: (config || {}).data,
        })
      );
    };
  }
);
utils_default.forEach(
  ['post', 'put', 'patch'],
  function forEachMethodWithData2(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url2, data, config) {
        return this.request(
          mergeConfig(config || {}, {
            method,
            headers: isForm
              ? {
                  'Content-Type': 'multipart/form-data',
                }
              : {},
            url: url2,
            data,
          })
        );
      };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
  }
);
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners) return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel,
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, {
    allOwnKeys: true,
  });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) =>
  formDataToJSON_default(
    utils_default.isHTMLForm(thing) ? new FormData(thing) : thing
  );
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  mergeConfig: mergeConfig2,
} = axios_default;

// apps/aws-cdk/meal-planner/src/lambda-handlers/auth/api-authorizer.ts
var import_jwk_to_pem = __toESM(require_jwk_to_pem());
var handler = async (event) => {
  return new Promise(async (resolve, reject) => {
    try {
      logInfo(event, 'Event');
      const token = event.headers.authorization;
      const jwtToken = token.replace('Bearer', '').trim();
      const decodedJwtToken = import_jsonwebtoken.default.decode(jwtToken, {
        complete: true,
      });
      if (!decodedJwtToken) {
        return resolve({ isAuthorized: false });
      }
      logInfo(decodedJwtToken, 'Decoded Token');
      let jwks = [];
      const jwksRes = await axios_default.get(
        `https://cognito-idp.ap-southeast-2.amazonaws.com/${process.env.USER_POOL_ID}/.well-known/jwks.json`
      );
      if (jwksRes.data.keys) {
        jwks = [...jwks, ...jwksRes.data.keys];
      }
      const jwk = jwks.find((j) => j.kid === decodedJwtToken.header.kid);
      logInfo(jwk, 'JWK');
      if (!jwk) {
        return resolve({
          isAuthorized: false,
        });
      }
      import_jsonwebtoken.default.verify(
        jwtToken,
        (0, import_jwk_to_pem.default)(jwk),
        (err) => {
          if (err) {
            logInfo('JWT token is invalid');
            return resolve({ isAuthorized: false });
          }
          logInfo('JWT token is valid');
          return resolve({
            isAuthorized: true,
          });
        }
      );
    } catch (error) {
      console.error(error);
      return resolve({
        isAuthorized: false,
      });
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    handler,
  });
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
