var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) =>
  function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
  };
var __commonJS = (cb, mod) =>
  function __require() {
    return (
      mod ||
        (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod),
      mod.exports
    );
  };
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod
  )
);
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
});
function __extends(d, b) {
  if (typeof b !== 'function' && b !== null)
    throw new TypeError(
      'Class extends value ' + String(b) + ' is not a constructor or null'
    );
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype =
    b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === 'function')
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (
        e.indexOf(p[i]) < 0 &&
        Object.prototype.propertyIsEnumerable.call(s, p[i])
      )
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r =
      c < 3
        ? target
        : desc === null
        ? (desc = Object.getOwnPropertyDescriptor(target, key))
        : desc,
    d;
  if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if ((d = decorators[i]))
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(
  ctor,
  descriptorIn,
  decorators,
  contextIn,
  initializers,
  extraInitializers
) {
  function accept(f) {
    if (f !== void 0 && typeof f !== 'function')
      throw new TypeError('Function expected');
    return f;
  }
  var kind = contextIn.kind,
    key = kind === 'getter' ? 'get' : kind === 'setter' ? 'set' : 'value';
  var target =
    !descriptorIn && ctor
      ? contextIn['static']
        ? ctor
        : ctor.prototype
      : null;
  var descriptor =
    descriptorIn ||
    (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _2,
    done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn) context[p] = p === 'access' ? {} : contextIn[p];
    for (var p in contextIn.access) context.access[p] = contextIn.access[p];
    context.addInitializer = function (f) {
      if (done)
        throw new TypeError(
          'Cannot add initializers after decoration has completed'
        );
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(
      kind === 'accessor'
        ? { get: descriptor.get, set: descriptor.set }
        : descriptor[key],
      context
    );
    if (kind === 'accessor') {
      if (result === void 0) continue;
      if (result === null || typeof result !== 'object')
        throw new TypeError('Object expected');
      if ((_2 = accept(result.get))) descriptor.get = _2;
      if ((_2 = accept(result.set))) descriptor.set = _2;
      if ((_2 = accept(result.init))) initializers.push(_2);
    } else if ((_2 = accept(result))) {
      if (kind === 'field') initializers.push(_2);
      else descriptor[key] = _2;
    }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue
      ? initializers[i].call(thisArg, value)
      : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === 'symbol' ? x : ''.concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === 'symbol')
    name = name.description ? '['.concat(name.description, ']') : '';
  return Object.defineProperty(f, 'name', {
    configurable: true,
    value: prefix ? ''.concat(prefix, ' ', name) : name,
  });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === 'object' && typeof Reflect.metadata === 'function')
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P
      ? value
      : new P(function (resolve) {
          resolve(value);
        });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator['throw'](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done
        ? resolve(result.value)
        : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _2 = {
      label: 0,
      sent: function () {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: [],
    },
    f,
    y,
    t,
    g;
  return (
    (g = { next: verb(0), throw: verb(1), return: verb(2) }),
    typeof Symbol === 'function' &&
      (g[Symbol.iterator] = function () {
        return this;
      }),
    g
  );
  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError('Generator is already executing.');
    while ((g && ((g = 0), op[0] && (_2 = 0)), _2))
      try {
        if (
          ((f = 1),
          y &&
            (t =
              op[0] & 2
                ? y['return']
                : op[0]
                ? y['throw'] || ((t = y['return']) && t.call(y), 0)
                : y.next) &&
            !(t = t.call(y, op[1])).done)
        )
          return t;
        if (((y = 0), t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (
              !((t = _2.trys), (t = t.length > 0 && t[t.length - 1])) &&
              (op[0] === 6 || op[0] === 2)
            ) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2]) _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== 'default' && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === 'function' && Symbol.iterator,
    m = s && o[s],
    i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === 'number')
    return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return { value: o && o[i++], done: !o };
      },
    };
  throw new TypeError(
    s ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
  );
}
function __read(o, n) {
  var m = typeof Symbol === 'function' && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i['return'])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? ((this.v = v), this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError('Symbol.asyncIterator is not defined.');
  var g = generator.apply(thisArg, _arguments || []),
    i,
    q = [];
  return (
    (i = {}),
    verb('next'),
    verb('throw'),
    verb('return'),
    (i[Symbol.asyncIterator] = function () {
      return this;
    }),
    i
  );
  function verb(n) {
    if (g[n])
      i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await
      ? Promise.resolve(r.value.v).then(fulfill, reject)
      : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume('next', value);
  }
  function reject(value) {
    resume('throw', value);
  }
  function settle(f, v) {
    if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return (
    (i = {}),
    verb('next'),
    verb('throw', function (e) {
      throw e;
    }),
    verb('return'),
    (i[Symbol.iterator] = function () {
      return this;
    }),
    i
  );
  function verb(n, f) {
    i[n] = o[n]
      ? function (v) {
          return (p = !p)
            ? { value: __await(o[n](v)), done: false }
            : f
            ? f(v)
            : v;
        }
      : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError('Symbol.asyncIterator is not defined.');
  var m = o[Symbol.asyncIterator],
    i;
  return m
    ? m.call(o)
    : ((o =
        typeof __values === 'function' ? __values(o) : o[Symbol.iterator]()),
      (i = {}),
      verb('next'),
      verb('throw'),
      verb('return'),
      (i[Symbol.asyncIterator] = function () {
        return this;
      }),
      i);
  function verb(n) {
    i[n] =
      o[n] &&
      function (v) {
        return new Promise(function (resolve, reject) {
          (v = o[n](v)), settle(resolve, reject, v.done, v.value);
        });
      };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, 'raw', { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== 'default' && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === 'a' && !f)
    throw new TypeError('Private accessor was defined without a getter');
  if (
    typeof state === 'function'
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      'Cannot read private member from an object whose class did not declare it'
    );
  return kind === 'm'
    ? f
    : kind === 'a'
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === 'm') throw new TypeError('Private method is not writable');
  if (kind === 'a' && !f)
    throw new TypeError('Private accessor was defined without a setter');
  if (
    typeof state === 'function'
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      'Cannot write private member to an object whose class did not declare it'
    );
  return (
    kind === 'a'
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
}
function __classPrivateFieldIn(state, receiver) {
  if (
    receiver === null ||
    (typeof receiver !== 'object' && typeof receiver !== 'function')
  )
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === 'function' ? receiver === state : state.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  'node_modules/tslib/tslib.es6.js'() {
    extendStatics = function (d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d2, b2) {
            d2.__proto__ = b2;
          }) ||
        function (d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
      return extendStatics(d, b);
    };
    __assign = function () {
      __assign =
        Object.assign ||
        function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create
      ? function (o, m, k, k2) {
          if (k2 === void 0) k2 = k;
          var desc = Object.getOwnPropertyDescriptor(m, k);
          if (
            !desc ||
            ('get' in desc ? !m.__esModule : desc.writable || desc.configurable)
          ) {
            desc = {
              enumerable: true,
              get: function () {
                return m[k];
              },
            };
          }
          Object.defineProperty(o, k2, desc);
        }
      : function (o, m, k, k2) {
          if (k2 === void 0) k2 = k;
          o[k2] = m[k];
        };
    __setModuleDefault = Object.create
      ? function (o, v) {
          Object.defineProperty(o, 'default', { enumerable: true, value: v });
        }
      : function (o, v) {
          o['default'] = v;
        };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js
var require_NoOpLogger = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {}
      debug() {}
      info() {}
      warn() {}
      error() {}
    };
    exports.NoOpLogger = NoOpLogger;
  },
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  'node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) =>
        entries.sort(
          (a, b) =>
            stepWeights[b.step] - stepWeights[a.step] ||
            priorityWeights[b.priority || 'normal'] -
              priorityWeights[a.priority || 'normal']
        );
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name) entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: [],
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: [],
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(
                `${entry.toMiddleware} is not found when adding ${
                  entry.name || 'anonymous'
                } middleware ${entry.relation} ${entry.toMiddleware}`
              );
            }
            if (entry.relation === 'after') {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === 'before') {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries)
          .map(expandRelativeMiddlewareList)
          .reduce((wholeList, expendedMiddlewareList) => {
            wholeList.push(...expendedMiddlewareList);
            return wholeList;
          }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: 'initialize',
            priority: 'normal',
            middleware,
            ...options,
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex(
                (entry2) => entry2.name === name
              );
              const toOverride = absoluteEntries[toOverrideIndex];
              if (
                toOverride.step !== entry.step ||
                toOverride.priority !== entry.priority
              ) {
                throw new Error(
                  `"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`
                );
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options,
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex(
                (entry2) => entry2.name === name
              );
              const toOverride = relativeEntries[toOverrideIndex];
              if (
                toOverride.toMiddleware !== entry.toMiddleware ||
                toOverride.relation !== entry.relation
              ) {
                throw new Error(
                  `"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`
                );
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === 'string') return removeByName(toRemove);
          else return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name) entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ': ' + (mw.tags || []).join(',');
          });
        },
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList()
            .map((entry) => entry.middleware)
            .reverse()) {
            handler2 = middleware(handler2, context);
          }
          return handler2;
        },
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1,
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1,
    };
  },
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  'node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/client.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options =
          typeof optionsOrCb !== 'function' ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === 'function' ? optionsOrCb : cb;
        const handler2 = command.resolveMiddleware(
          this.middlewareStack,
          this.config,
          options
        );
        if (callback) {
          handler2(command)
            .then(
              (result) => callback(null, result.output),
              (err) => callback(err)
            )
            .catch(() => {});
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/command.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = '***SensitiveInformation***';
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/create-aggregated-client.js
var require_create_aggregated_client = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/create-aggregated-client.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createAggregatedClient = void 0;
    var createAggregatedClient = (commands, Client) => {
      for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = async function (args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === 'function') {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === 'function') {
            if (typeof optionsOrCb !== 'object')
              throw new Error(
                `Expected http options but got ${typeof optionsOrCb}`
              );
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (
          command[0].toLowerCase() + command.slice(1)
        ).replace(/Command$/, '');
        Client.prototype[methodName] = methodImpl;
      }
    };
    exports.createAggregatedClient = createAggregatedClient;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.logger =
      exports.strictParseByte =
      exports.strictParseShort =
      exports.strictParseInt32 =
      exports.strictParseInt =
      exports.strictParseLong =
      exports.limitedParseFloat32 =
      exports.limitedParseFloat =
      exports.handleFloat =
      exports.limitedParseDouble =
      exports.strictParseFloat32 =
      exports.strictParseFloat =
      exports.strictParseDouble =
      exports.expectUnion =
      exports.expectString =
      exports.expectObject =
      exports.expectNonNull =
      exports.expectByte =
      exports.expectShort =
      exports.expectInt32 =
      exports.expectInt =
      exports.expectLong =
      exports.expectFloat32 =
      exports.expectNumber =
      exports.expectBoolean =
      exports.parseBoolean =
        void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case 'true':
          return true;
        case 'false':
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'number') {
        if (value === 0 || value === 1) {
          exports.logger.warn(
            stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`)
          );
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === 'string') {
        const lower = value.toLowerCase();
        if (lower === 'false' || lower === 'true') {
          exports.logger.warn(
            stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`)
          );
        }
        if (lower === 'false') {
          return false;
        }
        if (lower === 'true') {
          return true;
        }
      }
      if (typeof value === 'boolean') {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'string') {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports.logger.warn(
              stackTraceWarning(`Expected number but observed string: ${value}`)
            );
          }
          return parsed;
        }
      }
      if (typeof value === 'number') {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (
        expected !== void 0 &&
        !Number.isNaN(expected) &&
        expected !== Infinity &&
        expected !== -Infinity
      ) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError('Expected a non-null value');
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'object' && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? 'array' : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === 'string') {
        return value;
      }
      if (['boolean', 'number', 'bigint'].includes(typeof value)) {
        exports.logger.warn(
          stackTraceWarning(`Expected string, got ${typeof value}: ${value}`)
        );
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject)
        .filter(([, v]) => v != null)
        .map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(
          `Unions must have exactly one non-null member. None were found.`
        );
      }
      if (setKeys.length > 1) {
        throw new TypeError(
          `Unions must have exactly one non-null member. Keys ${setKeys} were not null.`
        );
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == 'string') {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == 'string') {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX =
      /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == 'string') {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == 'string') {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case 'NaN':
          return NaN;
        case 'Infinity':
          return Infinity;
        case '-Infinity':
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === 'string') {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message)
        .split('\n')
        .slice(0, 5)
        .filter((s) => !s.includes('stackTraceWarning'))
        .join('\n');
    };
    exports.logger = {
      warn: console.warn,
    };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseEpochTimestamp =
      exports.parseRfc7231DateTime =
      exports.parseRfc3339DateTimeWithOffset =
      exports.parseRfc3339DateTime =
      exports.dateToUtcString =
        void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    var MONTHS = [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString =
        dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString =
        minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString =
        secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/
    );
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-3339 date-times must be expressed as strings');
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError('Invalid RFC-3339 date-time value');
      }
      const [
        _2,
        yearStr,
        monthStr,
        dayStr,
        hours,
        minutes,
        seconds,
        fractionalMilliseconds,
      ] = match;
      const year = (0, parse_utils_1.strictParseShort)(
        stripLeadingZeroes(yearStr)
      );
      const month = parseDateValue(monthStr, 'month', 1, 12);
      const day = parseDateValue(dayStr, 'day', 1, 31);
      return buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds,
      });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(
      /^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/
    );
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-3339 date-times must be expressed as strings');
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError('Invalid RFC-3339 date-time value');
      }
      const [
        _2,
        yearStr,
        monthStr,
        dayStr,
        hours,
        minutes,
        seconds,
        fractionalMilliseconds,
        offsetStr,
      ] = match;
      const year = (0, parse_utils_1.strictParseShort)(
        stripLeadingZeroes(yearStr)
      );
      const month = parseDateValue(monthStr, 'month', 1, 12);
      const day = parseDateValue(dayStr, 'day', 1, 31);
      const date = buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds,
      });
      if (offsetStr.toUpperCase() != 'Z') {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var RFC_850_DATE = new RegExp(
      /^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/
    );
    var ASC_TIME = new RegExp(
      /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/
    );
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== 'string') {
        throw new TypeError('RFC-7231 date-times must be expressed as strings');
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [
          _2,
          dayStr,
          monthStr,
          yearStr,
          hours,
          minutes,
          seconds,
          fractionalMilliseconds,
        ] = match;
        return buildDate(
          (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr, 'day', 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [
          _2,
          dayStr,
          monthStr,
          yearStr,
          hours,
          minutes,
          seconds,
          fractionalMilliseconds,
        ] = match;
        return adjustRfc850Year(
          buildDate(
            parseTwoDigitYear(yearStr),
            parseMonthByShortName(monthStr),
            parseDateValue(dayStr, 'day', 1, 31),
            {
              hours,
              minutes,
              seconds,
              fractionalMilliseconds,
            }
          )
        );
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [
          _2,
          monthStr,
          dayStr,
          hours,
          minutes,
          seconds,
          fractionalMilliseconds,
          yearStr,
        ] = match;
        return buildDate(
          (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)),
          parseMonthByShortName(monthStr),
          parseDateValue(dayStr.trimLeft(), 'day', 1, 31),
          { hours, minutes, seconds, fractionalMilliseconds }
        );
      }
      throw new TypeError('Invalid RFC-7231 date-time value');
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === 'number') {
        valueAsDouble = value;
      } else if (typeof value === 'string') {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError(
          'Epoch timestamps must be expressed as floating point numbers or their string representation'
        );
      }
      if (
        Number.isNaN(valueAsDouble) ||
        valueAsDouble === Infinity ||
        valueAsDouble === -Infinity
      ) {
        throw new TypeError(
          'Epoch timestamps must be valid, non-Infinite, non-NaN numerics'
        );
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(
        Date.UTC(
          year,
          adjustedMonth,
          day,
          parseDateValue(time.hours, 'hour', 0, 23),
          parseDateValue(time.minutes, 'minute', 0, 59),
          parseDateValue(time.seconds, 'seconds', 0, 60),
          parseMilliseconds(time.fractionalMilliseconds)
        )
      );
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = /* @__PURE__ */ new Date().getUTCFullYear();
      const valueInThisCentury =
        Math.floor(thisYear / 100) * 100 +
        (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (
        input.getTime() - /* @__PURE__ */ new Date().getTime() >
        FIFTY_YEARS_IN_MILLIS
      ) {
        return new Date(
          Date.UTC(
            input.getUTCFullYear() - 100,
            input.getUTCMonth(),
            input.getUTCDate(),
            input.getUTCHours(),
            input.getUTCMinutes(),
            input.getUTCSeconds(),
            input.getUTCMilliseconds()
          )
        );
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(
          `Invalid day for ${MONTHS[month]} in ${year}: ${day}`
        );
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(
        stripLeadingZeroes(value)
      );
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(
          `${type} must be between ${lower} and ${upper}, inclusive`
        );
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)('0.' + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == '+') {
        direction = 1;
      } else if (directionStr == '-') {
        direction = -1;
      } else {
        throw new TypeError(
          `Offset direction, ${directionStr}, must be "+" or "-"`
        );
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === '0') {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions)
        .filter(([, v]) => v !== void 0)
        .forEach(([k, v]) => {
          if (exception[k] == void 0 || exception[k] === '') {
            exception[k] = v;
          }
        });
      const message = exception.message || exception.Message || 'UnknownError';
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.withBaseException = exports.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({
      output,
      parsedBody,
      exceptionCtor,
      errorCode,
    }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode
        ? $metadata.httpStatusCode + ''
        : void 0;
      const response = new exceptionCtor({
        name:
          (parsedBody === null || parsedBody === void 0
            ? void 0
            : parsedBody.code) ||
          (parsedBody === null || parsedBody === void 0
            ? void 0
            : parsedBody.Code) ||
          errorCode ||
          statusCode ||
          'UnknownError',
        $fault: 'client',
        $metadata,
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports.throwDefaultError = throwDefaultError;
    var withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        (0, exports.throwDefaultError)({
          output,
          parsedBody,
          exceptionCtor: ExceptionCtor,
          errorCode,
        });
      };
    };
    exports.withBaseException = withBaseException;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId:
          (_b =
            (_a = output.headers['x-amzn-requestid']) !== null && _a !== void 0
              ? _a
              : output.headers['x-amzn-request-id']) !== null && _b !== void 0
            ? _b
            : output.headers['x-amz-request-id'],
        extendedRequestId: output.headers['x-amz-id-2'],
        cfId: output.headers['x-amz-cf-id'],
      };
    };
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case 'standard':
          return {
            retryMode: 'standard',
            connectionTimeout: 3100,
          };
        case 'in-region':
          return {
            retryMode: 'standard',
            connectionTimeout: 1100,
          };
        case 'cross-region':
          return {
            retryMode: 'standard',
            connectionTimeout: 3100,
          };
        case 'mobile':
          return {
            retryMode: 'standard',
            connectionTimeout: 3e4,
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (
        version2 &&
        !warningEmitted &&
        parseInt(version2.substring(1, version2.indexOf('.'))) < 14
      ) {
        warningEmitted = true;
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) =>
      Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = '#text';
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === 'object' && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function () {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true,
      },
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === 'string') {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.take = exports.convertMap = exports.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === 'undefined' && typeof arg2 === 'undefined') {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === 'function') {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        applyInstruction(target, null, instructions, key);
      }
      return target;
    }
    exports.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports.convertMap = convertMap;
    var take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    exports.take = take;
    var mapWithFilter = (target, filter, instructions) => {
      return map(
        target,
        Object.entries(instructions).reduce((_instructions, [key, value]) => {
          if (Array.isArray(value)) {
            _instructions[key] = value;
          } else {
            if (typeof value === 'function') {
              _instructions[key] = [filter, value()];
            } else {
              _instructions[key] = [filter, value];
            }
          }
          return _instructions;
        }, {})
      );
    };
    var applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === 'function') {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] =
          instruction;
        if (
          (typeof filter2 === 'function' && filter2(source[sourceKey])) ||
          (typeof filter2 !== 'function' && !!filter2)
        ) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === 'function') {
        let _value;
        const defaultFilterPassed =
          filter === void 0 && (_value = value()) != null;
        const customFilterPassed =
          (typeof filter === 'function' && !!filter(void 0)) ||
          (typeof filter !== 'function' && !!filter);
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed =
          (typeof filter === 'function' && !!filter(value)) ||
          (typeof filter !== 'function' && !!filter);
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    var nonNullish = (_2) => _2 != null;
    var pass = (_2) => _2;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolvedPath = void 0;
    var extended_encode_uri_component_1 =
      require_extended_encode_uri_component();
    var resolvedPath = (
      resolvedPath2,
      input,
      memberName,
      labelValueProvider,
      uriLabel,
      isGreedyLabel
    ) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error(
            'Empty value provided for input HTTP label: ' + memberName + '.'
          );
        }
        resolvedPath2 = resolvedPath2.replace(
          uriLabel,
          isGreedyLabel
            ? labelValue
                .split('/')
                .map((segment) =>
                  (0,
                  extended_encode_uri_component_1.extendedEncodeURIComponent)(
                    segment
                  )
                )
                .join('/')
            : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(
                labelValue
              )
        );
      } else {
        throw new Error(
          'No value provided for input HTTP label: ' + memberName + '.'
        );
      }
      return resolvedPath2;
    };
    exports.resolvedPath = resolvedPath;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return 'NaN';
      }
      switch (value) {
        case Infinity:
          return 'Infinity';
        case -Infinity:
          return '-Infinity';
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/serde-json.js
var require_serde_json = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/serde-json.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports._json = void 0;
    var _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_2) => _2 != null);
      }
      if (typeof obj === 'object') {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = (0, exports._json)(obj[key]);
        }
        return target;
      }
      return obj;
    };
    exports._json = _json;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error(
          'Invalid number of delimiters (' + numDelimiters + ') for splitEvery.'
        );
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = '';
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === '') {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = '';
        }
      }
      if (currentSegment !== '') {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  },
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  'node_modules/@aws-sdk/smithy-client/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports);
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants(), exports);
    tslib_1.__exportStar(require_create_aggregated_client(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_default_error_handler(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_object_mapping(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_resolve_path(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_serde_json(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isArnBucketName =
      exports.isDnsCompatibleBucketName =
      exports.S3_HOSTNAME_PATTERN =
      exports.DOT_PATTERN =
      exports.resolveParamsForS3 =
        void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket =
        (endpointParams === null || endpointParams === void 0
          ? void 0
          : endpointParams.Bucket) || '';
      if (typeof endpointParams.Bucket === 'string') {
        endpointParams.Bucket = bucket
          .replace(/#/g, encodeURIComponent('#'))
          .replace(/\?/g, encodeURIComponent('?'));
      }
      if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error(
            'Path-style addressing cannot be used with ARN buckets'
          );
        }
      } else if (
        !(0, exports.isDnsCompatibleBucketName)(bucket) ||
        (bucket.indexOf('.') !== -1 &&
          !String(endpointParams.Endpoint).startsWith('http:')) ||
        bucket.toLowerCase() !== bucket ||
        bucket.length < 3
      ) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports.DOT_PATTERN = /\./;
    exports.S3_HOSTNAME_PATTERN =
      /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) =>
      DOMAIN_PATTERN.test(bucketName) &&
      !IP_ADDRESS_PATTERN.test(bucketName) &&
      !DOTS_PATTERN.test(bucketName);
    exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] =
        bucketName.split(':');
      const isArn = arn === 'arn' && bucketName.split(':').length >= 6;
      const isValidArn =
        [arn, partition, service, account, typeOrId].filter(Boolean).length ===
        5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return (
        arn === 'arn' && !!partition && !!service && !!account && !!typeOrId
      );
    };
    exports.isArnBucketName = isArnBucketName;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createConfigValueProvider = void 0;
    var createConfigValueProvider = (
      configKey,
      canonicalEndpointParamKey,
      config
    ) => {
      const configProvider = async () => {
        var _a;
        const configValue =
          (_a = config[configKey]) !== null && _a !== void 0
            ? _a
            : config[canonicalEndpointParamKey];
        if (typeof configValue === 'function') {
          return configValue();
        }
        return configValue;
      };
      if (
        configKey === 'endpoint' ||
        canonicalEndpointParamKey === 'endpoint'
      ) {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === 'object') {
            if ('url' in endpoint) {
              return endpoint.url.href;
            }
            if ('hostname' in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ':' + port : ''}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports.createConfigValueProvider = createConfigValueProvider;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveParams = exports.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (
      commandInput,
      instructionsSupplier,
      clientConfig,
      context
    ) => {
      const endpointParams = await (0, exports.resolveParams)(
        commandInput,
        instructionsSupplier,
        clientConfig
      );
      if (typeof clientConfig.endpointProvider !== 'function') {
        throw new Error('config.endpointProvider is not set.');
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (
      commandInput,
      instructionsSupplier,
      clientConfig
    ) => {
      var _a;
      const endpointParams = {};
      const instructions =
        ((_a =
          instructionsSupplier === null || instructionsSupplier === void 0
            ? void 0
            : instructionsSupplier.getEndpointParameterInstructions) === null ||
        _a === void 0
          ? void 0
          : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case 'staticContextParams':
            endpointParams[name] = instruction.value;
            break;
          case 'contextParams':
            endpointParams[name] = commandInput[instruction.name];
            break;
          case 'clientContextParams':
          case 'builtInParams':
            endpointParams[name] = await (0,
            createConfigValueProvider_1.createConfigValueProvider)(
              instruction.name,
              name,
              clientConfig
            )();
            break;
          default:
            throw new Error(
              'Unrecognized endpoint parameter instruction: ' +
                JSON.stringify(instruction)
            );
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === 's3') {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports.resolveParams = resolveParams;
  },
});

// node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  'node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, '');
      if (querystring) {
        for (const pair of querystring.split('&')) {
          let [key, value = null] = pair.split('=');
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  },
});

// node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  'node_modules/@aws-sdk/url-parser/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs3();
    var parseUrl = (url) => {
      if (typeof url === 'string') {
        return (0, exports.parseUrl)(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query,
      };
    };
    exports.parseUrl = parseUrl;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs4();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === 'object') {
        if ('url' in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports.toEndpointV1 = toEndpointV1;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports);
    tslib_1.__exportStar(require_toEndpointV1(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0,
        getEndpointFromInstructions_1.getEndpointFromInstructions)(
          args.input,
          {
            getEndpointParameterInstructions() {
              return instructions;
            },
          },
          { ...config },
          context
        );
        context.endpointV2 = endpoint;
        context.authSchemes =
          (_a = endpoint.properties) === null || _a === void 0
            ? void 0
            : _a.authSchemes;
        const authScheme =
          (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context['signing_region'] = authScheme.signingRegion;
          context['signing_service'] = authScheme.signingName;
        }
        return next({
          ...args,
        });
      };
    };
    exports.endpointMiddleware = endpointMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware =
      (options, deserializer) => (next, context) => async (args) => {
        const { response } = await next(args);
        try {
          const parsed = await deserializer(response, options);
          return {
            response,
            output: parsed,
          };
        } catch (error) {
          Object.defineProperty(error, '$response', {
            value: response,
          });
          if (!('$metadata' in error)) {
            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
            error.message += '\n  ' + hint;
          }
          throw error;
        }
      };
    exports.deserializerMiddleware = deserializerMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware =
      (options, serializer) => (next, context) => async (args) => {
        var _a;
        const endpoint =
          ((_a = context.endpointV2) === null || _a === void 0
            ? void 0
            : _a.url) && options.urlParser
            ? async () => options.urlParser(context.endpointV2.url)
            : options.endpoint;
        if (!endpoint) {
          throw new Error('No valid endpoint provider available.');
        }
        const request = await serializer(args.input, { ...options, endpoint });
        return next({
          ...args,
          request,
        });
      };
    exports.serializerMiddleware = serializerMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  'node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSerdePlugin =
      exports.serializerMiddlewareOption =
      exports.deserializerMiddlewareOption =
        void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: 'deserializerMiddleware',
      step: 'deserialize',
      tags: ['DESERIALIZER'],
      override: true,
    };
    exports.serializerMiddlewareOption = {
      name: 'serializerMiddleware',
      step: 'serialize',
      tags: ['SERIALIZER'],
      override: true,
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add(
            (0, deserializerMiddleware_1.deserializerMiddleware)(
              config,
              deserializer
            ),
            exports.deserializerMiddlewareOption
          );
          commandStack.add(
            (0, serializerMiddleware_1.serializerMiddleware)(
              config,
              serializer
            ),
            exports.serializerMiddlewareOption
          );
        },
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  },
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  'node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs5();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports.endpointMiddlewareOptions = {
      step: 'serialize',
      tags: ['ENDPOINT_PARAMETERS', 'ENDPOINT_V2', 'ENDPOINT'],
      name: 'endpointV2Middleware',
      override: true,
      relation: 'before',
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name,
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          (0, endpointMiddleware_1.endpointMiddleware)({
            config,
            instructions,
          }),
          exports.endpointMiddlewareOptions
        );
      },
    });
    exports.getEndpointPlugin = getEndpointPlugin;
  },
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  'node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === 'function') return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  },
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  'node_modules/@aws-sdk/util-middleware/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider =
        endpoint != null
          ? async () =>
              (0, toEndpointV1_1.toEndpointV1)(
                await (0, util_middleware_1.normalizeProvider)(endpoint)()
              )
          : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(
          (_b = input.useDualstackEndpoint) !== null && _b !== void 0
            ? _b
            : false
        ),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)(
          (_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false
        ),
      };
    };
    exports.resolveEndpointConfig = resolveEndpointConfig;
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js
var require_types = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports);
    tslib_1.__exportStar(require_endpointMiddleware(), exports);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports);
    tslib_1.__exportStar(require_types(), exports);
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js
var require_FieldPosition = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.FieldPosition = void 0;
    var FieldPosition;
    (function (FieldPosition2) {
      FieldPosition2[(FieldPosition2['HEADER'] = 0)] = 'HEADER';
      FieldPosition2[(FieldPosition2['TRAILER'] = 1)] = 'TRAILER';
    })((FieldPosition = exports.FieldPosition || (exports.FieldPosition = {})));
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js
var require_Field = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Field = void 0;
    var FieldPosition_1 = require_FieldPosition();
    var Field = class {
      constructor({
        name,
        kind = FieldPosition_1.FieldPosition.HEADER,
        values = [],
      }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values
          .map((v) => (v.includes(',') || v.includes(' ') ? `"${v}"` : v))
          .join(', ');
      }
      get() {
        return this.values;
      }
    };
    exports.Field = Field;
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js
var require_Fields = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = 'utf-8' }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind) {
        return Object.values(this.entries).filter(
          (field) => field.kind === kind
        );
      }
    };
    exports.Fields = Fields;
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || 'GET';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
          ? options.protocol.slice(-1) !== ':'
            ? `${options.protocol}:`
            : options.protocol
          : 'https:';
        this.path = options.path
          ? options.path.charAt(0) !== '/'
            ? `/${options.path}`
            : options.path
          : '/';
      }
      static isInstance(request) {
        if (!request) return false;
        const req = request;
        return (
          'method' in req &&
          'protocol' in req &&
          'hostname' in req &&
          'path' in req &&
          typeof req['query'] === 'object' &&
          typeof req['headers'] === 'object'
        );
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers },
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    }
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return (
          typeof resp.statusCode === 'number' &&
          typeof resp.headers === 'object'
        );
      }
    };
    exports.HttpResponse = HttpResponse;
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  },
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  'node_modules/@aws-sdk/protocol-http/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Field(), exports);
    tslib_1.__exportStar(require_FieldPosition(), exports);
    tslib_1.__exportStar(require_Fields(), exports);
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  },
});

// node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, (poolPtr += 16));
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  'node_modules/uuid/dist/esm-node/rng.js'() {
    import_crypto = __toESM(require('crypto'));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  },
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  'node_modules/uuid/dist/esm-node/regex.js'() {
    regex_default =
      /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  },
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === 'string' && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  'node_modules/uuid/dist/esm-node/validate.js'() {
    init_regex();
    validate_default = validate;
  },
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (
    byteToHex[arr[offset + 0]] +
    byteToHex[arr[offset + 1]] +
    byteToHex[arr[offset + 2]] +
    byteToHex[arr[offset + 3]] +
    '-' +
    byteToHex[arr[offset + 4]] +
    byteToHex[arr[offset + 5]] +
    '-' +
    byteToHex[arr[offset + 6]] +
    byteToHex[arr[offset + 7]] +
    '-' +
    byteToHex[arr[offset + 8]] +
    byteToHex[arr[offset + 9]] +
    '-' +
    byteToHex[arr[offset + 10]] +
    byteToHex[arr[offset + 11]] +
    byteToHex[arr[offset + 12]] +
    byteToHex[arr[offset + 13]] +
    byteToHex[arr[offset + 14]] +
    byteToHex[arr[offset + 15]]
  ).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  'node_modules/uuid/dist/esm-node/stringify.js'() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  },
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = (buf && offset) || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [
        seedBytes[0] | 1,
        seedBytes[1],
        seedBytes[2],
        seedBytes[3],
        seedBytes[4],
        seedBytes[5],
      ];
    }
    if (clockseq == null) {
      clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = (clockseq + 1) & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = (tl >>> 24) & 255;
  b[i++] = (tl >>> 16) & 255;
  b[i++] = (tl >>> 8) & 255;
  b[i++] = tl & 255;
  const tmh = ((msecs / 4294967296) * 1e4) & 268435455;
  b[i++] = (tmh >>> 8) & 255;
  b[i++] = tmh & 255;
  b[i++] = ((tmh >>> 24) & 15) | 16;
  b[i++] = (tmh >>> 16) & 255;
  b[i++] = (clockseq >>> 8) | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  'node_modules/uuid/dist/esm-node/v1.js'() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  },
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError('Invalid UUID');
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = (v >>> 16) & 255;
  arr[2] = (v >>> 8) & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776) & 255;
  arr[11] = (v / 4294967296) & 255;
  arr[12] = (v >>> 24) & 255;
  arr[13] = (v >>> 16) & 255;
  arr[14] = (v >>> 8) & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  'node_modules/uuid/dist/esm-node/parse.js'() {
    init_validate();
    parse_default = parse;
  },
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError(
        'Namespace must be array-like (16 iterable integer values, 0-255)'
      );
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = (bytes[6] & 15) | version2;
    bytes[8] = (bytes[8] & 63) | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {}
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  'node_modules/uuid/dist/esm-node/v35.js'() {
    init_stringify();
    init_parse();
    DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
    URL2 = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
  },
});

// node_modules/uuid/dist/esm-node/md5.js
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }
  return import_crypto2.default.createHash('md5').update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  'node_modules/uuid/dist/esm-node/md5.js'() {
    import_crypto2 = __toESM(require('crypto'));
    md5_default = md5;
  },
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  'node_modules/uuid/dist/esm-node/v3.js'() {
    init_v35();
    init_md5();
    v3 = v35_default('v3', 48, md5_default);
    v3_default = v3;
  },
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = (rnds[6] & 15) | 64;
  rnds[8] = (rnds[8] & 63) | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  'node_modules/uuid/dist/esm-node/v4.js'() {
    init_rng();
    init_stringify();
    v4_default = v4;
  },
});

// node_modules/uuid/dist/esm-node/sha1.js
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }
  return import_crypto3.default.createHash('sha1').update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  'node_modules/uuid/dist/esm-node/sha1.js'() {
    import_crypto3 = __toESM(require('crypto'));
    sha1_default = sha1;
  },
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  'node_modules/uuid/dist/esm-node/v5.js'() {
    init_v35();
    init_sha1();
    v5 = v35_default('v5', 80, sha1_default);
    v5_default = v5;
  },
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  'node_modules/uuid/dist/esm-node/nil.js'() {
    nil_default = '00000000-0000-0000-0000-000000000000';
  },
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError('Invalid UUID');
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  'node_modules/uuid/dist/esm-node/version.js'() {
    init_validate();
    version_default = version;
  },
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default,
});
var init_esm_node = __esm({
  'node_modules/uuid/dist/esm-node/index.js'() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js
var require_DynamoDBServiceException = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBServiceException = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var DynamoDBServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, DynamoDBServiceException.prototype);
      }
    };
    exports.DynamoDBServiceException = DynamoDBServiceException;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ImportStatus =
      exports.GlobalTableNotFoundException =
      exports.ExportNotFoundException =
      exports.S3SseAlgorithm =
      exports.ExportStatus =
      exports.ExportFormat =
      exports.TransactionConflictException =
      exports.ReturnValue =
      exports.ResourceInUseException =
      exports.TableStatus =
      exports.IndexStatus =
      exports.GlobalTableAlreadyExistsException =
      exports.TableClass =
      exports.ReplicaStatus =
      exports.GlobalTableStatus =
      exports.TableNotFoundException =
      exports.TableInUseException =
      exports.LimitExceededException =
      exports.ContributorInsightsStatus =
      exports.ContributorInsightsAction =
      exports.ContinuousBackupsUnavailableException =
      exports.PointInTimeRecoveryStatus =
      exports.ContinuousBackupsStatus =
      exports.ReturnValuesOnConditionCheckFailure =
      exports.ConditionalOperator =
      exports.ConditionalCheckFailedException =
      exports.ComparisonOperator =
      exports.ItemCollectionSizeLimitExceededException =
      exports.ReturnItemCollectionMetrics =
      exports.ResourceNotFoundException =
      exports.ProvisionedThroughputExceededException =
      exports.InvalidEndpointException =
      exports.RequestLimitExceeded =
      exports.InternalServerError =
      exports.BatchStatementErrorCodeEnum =
      exports.ReturnConsumedCapacity =
      exports.BackupTypeFilter =
      exports.BackupNotFoundException =
      exports.BackupInUseException =
      exports.TimeToLiveStatus =
      exports.StreamViewType =
      exports.SSEStatus =
      exports.SSEType =
      exports.ProjectionType =
      exports.KeyType =
      exports.BillingMode =
      exports.BackupType =
      exports.BackupStatus =
      exports.ScalarAttributeType =
      exports.AttributeAction =
        void 0;
    exports.TransactionCanceledException =
      exports.AttributeValue =
      exports.IndexNotFoundException =
      exports.ReplicaNotFoundException =
      exports.ReplicaAlreadyExistsException =
      exports.InvalidRestoreTimeException =
      exports.TableAlreadyExistsException =
      exports.Select =
      exports.ImportConflictException =
      exports.PointInTimeRecoveryUnavailableException =
      exports.InvalidExportTimeException =
      exports.ExportConflictException =
      exports.TransactionInProgressException =
      exports.IdempotentParameterMismatchException =
      exports.DuplicateItemException =
      exports.DestinationStatus =
      exports.ImportNotFoundException =
      exports.InputFormat =
      exports.InputCompressionType =
        void 0;
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    exports.AttributeAction = {
      ADD: 'ADD',
      DELETE: 'DELETE',
      PUT: 'PUT',
    };
    exports.ScalarAttributeType = {
      B: 'B',
      N: 'N',
      S: 'S',
    };
    exports.BackupStatus = {
      AVAILABLE: 'AVAILABLE',
      CREATING: 'CREATING',
      DELETED: 'DELETED',
    };
    exports.BackupType = {
      AWS_BACKUP: 'AWS_BACKUP',
      SYSTEM: 'SYSTEM',
      USER: 'USER',
    };
    exports.BillingMode = {
      PAY_PER_REQUEST: 'PAY_PER_REQUEST',
      PROVISIONED: 'PROVISIONED',
    };
    exports.KeyType = {
      HASH: 'HASH',
      RANGE: 'RANGE',
    };
    exports.ProjectionType = {
      ALL: 'ALL',
      INCLUDE: 'INCLUDE',
      KEYS_ONLY: 'KEYS_ONLY',
    };
    exports.SSEType = {
      AES256: 'AES256',
      KMS: 'KMS',
    };
    exports.SSEStatus = {
      DISABLED: 'DISABLED',
      DISABLING: 'DISABLING',
      ENABLED: 'ENABLED',
      ENABLING: 'ENABLING',
      UPDATING: 'UPDATING',
    };
    exports.StreamViewType = {
      KEYS_ONLY: 'KEYS_ONLY',
      NEW_AND_OLD_IMAGES: 'NEW_AND_OLD_IMAGES',
      NEW_IMAGE: 'NEW_IMAGE',
      OLD_IMAGE: 'OLD_IMAGE',
    };
    exports.TimeToLiveStatus = {
      DISABLED: 'DISABLED',
      DISABLING: 'DISABLING',
      ENABLED: 'ENABLED',
      ENABLING: 'ENABLING',
    };
    var BackupInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'BackupInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'BackupInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, BackupInUseException.prototype);
      }
    };
    exports.BackupInUseException = BackupInUseException;
    var BackupNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'BackupNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'BackupNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, BackupNotFoundException.prototype);
      }
    };
    exports.BackupNotFoundException = BackupNotFoundException;
    exports.BackupTypeFilter = {
      ALL: 'ALL',
      AWS_BACKUP: 'AWS_BACKUP',
      SYSTEM: 'SYSTEM',
      USER: 'USER',
    };
    exports.ReturnConsumedCapacity = {
      INDEXES: 'INDEXES',
      NONE: 'NONE',
      TOTAL: 'TOTAL',
    };
    exports.BatchStatementErrorCodeEnum = {
      AccessDenied: 'AccessDenied',
      ConditionalCheckFailed: 'ConditionalCheckFailed',
      DuplicateItem: 'DuplicateItem',
      InternalServerError: 'InternalServerError',
      ItemCollectionSizeLimitExceeded: 'ItemCollectionSizeLimitExceeded',
      ProvisionedThroughputExceeded: 'ProvisionedThroughputExceeded',
      RequestLimitExceeded: 'RequestLimitExceeded',
      ResourceNotFound: 'ResourceNotFound',
      ThrottlingError: 'ThrottlingError',
      TransactionConflict: 'TransactionConflict',
      ValidationError: 'ValidationError',
    };
    var InternalServerError = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InternalServerError',
          $fault: 'server',
          ...opts,
        });
        this.name = 'InternalServerError';
        this.$fault = 'server';
        Object.setPrototypeOf(this, InternalServerError.prototype);
      }
    };
    exports.InternalServerError = InternalServerError;
    var RequestLimitExceeded = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'RequestLimitExceeded',
          $fault: 'client',
          ...opts,
        });
        this.name = 'RequestLimitExceeded';
        this.$fault = 'client';
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
      }
    };
    exports.RequestLimitExceeded = RequestLimitExceeded;
    var InvalidEndpointException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidEndpointException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidEndpointException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidEndpointException = InvalidEndpointException;
    var ProvisionedThroughputExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ProvisionedThroughputExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ProvisionedThroughputExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          ProvisionedThroughputExceededException.prototype
        );
      }
    };
    exports.ProvisionedThroughputExceededException =
      ProvisionedThroughputExceededException;
    var ResourceNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ResourceNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    exports.ReturnItemCollectionMetrics = {
      NONE: 'NONE',
      SIZE: 'SIZE',
    };
    var ItemCollectionSizeLimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ItemCollectionSizeLimitExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ItemCollectionSizeLimitExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          ItemCollectionSizeLimitExceededException.prototype
        );
      }
    };
    exports.ItemCollectionSizeLimitExceededException =
      ItemCollectionSizeLimitExceededException;
    exports.ComparisonOperator = {
      BEGINS_WITH: 'BEGINS_WITH',
      BETWEEN: 'BETWEEN',
      CONTAINS: 'CONTAINS',
      EQ: 'EQ',
      GE: 'GE',
      GT: 'GT',
      IN: 'IN',
      LE: 'LE',
      LT: 'LT',
      NE: 'NE',
      NOT_CONTAINS: 'NOT_CONTAINS',
      NOT_NULL: 'NOT_NULL',
      NULL: 'NULL',
    };
    var ConditionalCheckFailedException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ConditionalCheckFailedException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ConditionalCheckFailedException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
      }
    };
    exports.ConditionalCheckFailedException = ConditionalCheckFailedException;
    exports.ConditionalOperator = {
      AND: 'AND',
      OR: 'OR',
    };
    exports.ReturnValuesOnConditionCheckFailure = {
      ALL_OLD: 'ALL_OLD',
      NONE: 'NONE',
    };
    exports.ContinuousBackupsStatus = {
      DISABLED: 'DISABLED',
      ENABLED: 'ENABLED',
    };
    exports.PointInTimeRecoveryStatus = {
      DISABLED: 'DISABLED',
      ENABLED: 'ENABLED',
    };
    var ContinuousBackupsUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ContinuousBackupsUnavailableException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ContinuousBackupsUnavailableException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          ContinuousBackupsUnavailableException.prototype
        );
      }
    };
    exports.ContinuousBackupsUnavailableException =
      ContinuousBackupsUnavailableException;
    exports.ContributorInsightsAction = {
      DISABLE: 'DISABLE',
      ENABLE: 'ENABLE',
    };
    exports.ContributorInsightsStatus = {
      DISABLED: 'DISABLED',
      DISABLING: 'DISABLING',
      ENABLED: 'ENABLED',
      ENABLING: 'ENABLING',
      FAILED: 'FAILED',
    };
    var LimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'LimitExceededException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'LimitExceededException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, LimitExceededException.prototype);
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var TableInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableInUseException.prototype);
      }
    };
    exports.TableInUseException = TableInUseException;
    var TableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableNotFoundException.prototype);
      }
    };
    exports.TableNotFoundException = TableNotFoundException;
    exports.GlobalTableStatus = {
      ACTIVE: 'ACTIVE',
      CREATING: 'CREATING',
      DELETING: 'DELETING',
      UPDATING: 'UPDATING',
    };
    exports.ReplicaStatus = {
      ACTIVE: 'ACTIVE',
      CREATING: 'CREATING',
      CREATION_FAILED: 'CREATION_FAILED',
      DELETING: 'DELETING',
      INACCESSIBLE_ENCRYPTION_CREDENTIALS:
        'INACCESSIBLE_ENCRYPTION_CREDENTIALS',
      REGION_DISABLED: 'REGION_DISABLED',
      UPDATING: 'UPDATING',
    };
    exports.TableClass = {
      STANDARD: 'STANDARD',
      STANDARD_INFREQUENT_ACCESS: 'STANDARD_INFREQUENT_ACCESS',
    };
    var GlobalTableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'GlobalTableAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'GlobalTableAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          GlobalTableAlreadyExistsException.prototype
        );
      }
    };
    exports.GlobalTableAlreadyExistsException =
      GlobalTableAlreadyExistsException;
    exports.IndexStatus = {
      ACTIVE: 'ACTIVE',
      CREATING: 'CREATING',
      DELETING: 'DELETING',
      UPDATING: 'UPDATING',
    };
    exports.TableStatus = {
      ACTIVE: 'ACTIVE',
      ARCHIVED: 'ARCHIVED',
      ARCHIVING: 'ARCHIVING',
      CREATING: 'CREATING',
      DELETING: 'DELETING',
      INACCESSIBLE_ENCRYPTION_CREDENTIALS:
        'INACCESSIBLE_ENCRYPTION_CREDENTIALS',
      UPDATING: 'UPDATING',
    };
    var ResourceInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ResourceInUseException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceInUseException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    exports.ReturnValue = {
      ALL_NEW: 'ALL_NEW',
      ALL_OLD: 'ALL_OLD',
      NONE: 'NONE',
      UPDATED_NEW: 'UPDATED_NEW',
      UPDATED_OLD: 'UPDATED_OLD',
    };
    var TransactionConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionConflictException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionConflictException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionConflictException.prototype);
      }
    };
    exports.TransactionConflictException = TransactionConflictException;
    exports.ExportFormat = {
      DYNAMODB_JSON: 'DYNAMODB_JSON',
      ION: 'ION',
    };
    exports.ExportStatus = {
      COMPLETED: 'COMPLETED',
      FAILED: 'FAILED',
      IN_PROGRESS: 'IN_PROGRESS',
    };
    exports.S3SseAlgorithm = {
      AES256: 'AES256',
      KMS: 'KMS',
    };
    var ExportNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ExportNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExportNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExportNotFoundException.prototype);
      }
    };
    exports.ExportNotFoundException = ExportNotFoundException;
    var GlobalTableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'GlobalTableNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'GlobalTableNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, GlobalTableNotFoundException.prototype);
      }
    };
    exports.GlobalTableNotFoundException = GlobalTableNotFoundException;
    exports.ImportStatus = {
      CANCELLED: 'CANCELLED',
      CANCELLING: 'CANCELLING',
      COMPLETED: 'COMPLETED',
      FAILED: 'FAILED',
      IN_PROGRESS: 'IN_PROGRESS',
    };
    exports.InputCompressionType = {
      GZIP: 'GZIP',
      NONE: 'NONE',
      ZSTD: 'ZSTD',
    };
    exports.InputFormat = {
      CSV: 'CSV',
      DYNAMODB_JSON: 'DYNAMODB_JSON',
      ION: 'ION',
    };
    var ImportNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ImportNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ImportNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ImportNotFoundException.prototype);
      }
    };
    exports.ImportNotFoundException = ImportNotFoundException;
    exports.DestinationStatus = {
      ACTIVE: 'ACTIVE',
      DISABLED: 'DISABLED',
      DISABLING: 'DISABLING',
      ENABLE_FAILED: 'ENABLE_FAILED',
      ENABLING: 'ENABLING',
    };
    var DuplicateItemException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'DuplicateItemException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'DuplicateItemException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, DuplicateItemException.prototype);
      }
    };
    exports.DuplicateItemException = DuplicateItemException;
    var IdempotentParameterMismatchException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'IdempotentParameterMismatchException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IdempotentParameterMismatchException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          IdempotentParameterMismatchException.prototype
        );
        this.Message = opts.Message;
      }
    };
    exports.IdempotentParameterMismatchException =
      IdempotentParameterMismatchException;
    var TransactionInProgressException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionInProgressException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionInProgressException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TransactionInProgressException = TransactionInProgressException;
    var ExportConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ExportConflictException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExportConflictException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExportConflictException.prototype);
      }
    };
    exports.ExportConflictException = ExportConflictException;
    var InvalidExportTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidExportTimeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidExportTimeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidExportTimeException.prototype);
      }
    };
    exports.InvalidExportTimeException = InvalidExportTimeException;
    var PointInTimeRecoveryUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'PointInTimeRecoveryUnavailableException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'PointInTimeRecoveryUnavailableException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          PointInTimeRecoveryUnavailableException.prototype
        );
      }
    };
    exports.PointInTimeRecoveryUnavailableException =
      PointInTimeRecoveryUnavailableException;
    var ImportConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ImportConflictException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ImportConflictException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ImportConflictException.prototype);
      }
    };
    exports.ImportConflictException = ImportConflictException;
    exports.Select = {
      ALL_ATTRIBUTES: 'ALL_ATTRIBUTES',
      ALL_PROJECTED_ATTRIBUTES: 'ALL_PROJECTED_ATTRIBUTES',
      COUNT: 'COUNT',
      SPECIFIC_ATTRIBUTES: 'SPECIFIC_ATTRIBUTES',
    };
    var TableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TableAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TableAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TableAlreadyExistsException.prototype);
      }
    };
    exports.TableAlreadyExistsException = TableAlreadyExistsException;
    var InvalidRestoreTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'InvalidRestoreTimeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidRestoreTimeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidRestoreTimeException.prototype);
      }
    };
    exports.InvalidRestoreTimeException = InvalidRestoreTimeException;
    var ReplicaAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ReplicaAlreadyExistsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ReplicaAlreadyExistsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ReplicaAlreadyExistsException.prototype);
      }
    };
    exports.ReplicaAlreadyExistsException = ReplicaAlreadyExistsException;
    var ReplicaNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'ReplicaNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ReplicaNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ReplicaNotFoundException.prototype);
      }
    };
    exports.ReplicaNotFoundException = ReplicaNotFoundException;
    var IndexNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'IndexNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IndexNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IndexNotFoundException.prototype);
      }
    };
    exports.IndexNotFoundException = IndexNotFoundException;
    var AttributeValue;
    (function (AttributeValue2) {
      AttributeValue2.visit = (value, visitor) => {
        if (value.S !== void 0) return visitor.S(value.S);
        if (value.N !== void 0) return visitor.N(value.N);
        if (value.B !== void 0) return visitor.B(value.B);
        if (value.SS !== void 0) return visitor.SS(value.SS);
        if (value.NS !== void 0) return visitor.NS(value.NS);
        if (value.BS !== void 0) return visitor.BS(value.BS);
        if (value.M !== void 0) return visitor.M(value.M);
        if (value.L !== void 0) return visitor.L(value.L);
        if (value.NULL !== void 0) return visitor.NULL(value.NULL);
        if (value.BOOL !== void 0) return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(
      (AttributeValue = exports.AttributeValue || (exports.AttributeValue = {}))
    );
    var TransactionCanceledException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: 'TransactionCanceledException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TransactionCanceledException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
      }
    };
    exports.TransactionCanceledException = TransactionCanceledException;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js
var require_Aws_json1_0 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.se_UpdateItemCommand =
      exports.se_UpdateGlobalTableSettingsCommand =
      exports.se_UpdateGlobalTableCommand =
      exports.se_UpdateContributorInsightsCommand =
      exports.se_UpdateContinuousBackupsCommand =
      exports.se_UntagResourceCommand =
      exports.se_TransactWriteItemsCommand =
      exports.se_TransactGetItemsCommand =
      exports.se_TagResourceCommand =
      exports.se_ScanCommand =
      exports.se_RestoreTableToPointInTimeCommand =
      exports.se_RestoreTableFromBackupCommand =
      exports.se_QueryCommand =
      exports.se_PutItemCommand =
      exports.se_ListTagsOfResourceCommand =
      exports.se_ListTablesCommand =
      exports.se_ListImportsCommand =
      exports.se_ListGlobalTablesCommand =
      exports.se_ListExportsCommand =
      exports.se_ListContributorInsightsCommand =
      exports.se_ListBackupsCommand =
      exports.se_ImportTableCommand =
      exports.se_GetItemCommand =
      exports.se_ExportTableToPointInTimeCommand =
      exports.se_ExecuteTransactionCommand =
      exports.se_ExecuteStatementCommand =
      exports.se_EnableKinesisStreamingDestinationCommand =
      exports.se_DisableKinesisStreamingDestinationCommand =
      exports.se_DescribeTimeToLiveCommand =
      exports.se_DescribeTableReplicaAutoScalingCommand =
      exports.se_DescribeTableCommand =
      exports.se_DescribeLimitsCommand =
      exports.se_DescribeKinesisStreamingDestinationCommand =
      exports.se_DescribeImportCommand =
      exports.se_DescribeGlobalTableSettingsCommand =
      exports.se_DescribeGlobalTableCommand =
      exports.se_DescribeExportCommand =
      exports.se_DescribeEndpointsCommand =
      exports.se_DescribeContributorInsightsCommand =
      exports.se_DescribeContinuousBackupsCommand =
      exports.se_DescribeBackupCommand =
      exports.se_DeleteTableCommand =
      exports.se_DeleteItemCommand =
      exports.se_DeleteBackupCommand =
      exports.se_CreateTableCommand =
      exports.se_CreateGlobalTableCommand =
      exports.se_CreateBackupCommand =
      exports.se_BatchWriteItemCommand =
      exports.se_BatchGetItemCommand =
      exports.se_BatchExecuteStatementCommand =
        void 0;
    exports.de_UpdateContributorInsightsCommand =
      exports.de_UpdateContinuousBackupsCommand =
      exports.de_UntagResourceCommand =
      exports.de_TransactWriteItemsCommand =
      exports.de_TransactGetItemsCommand =
      exports.de_TagResourceCommand =
      exports.de_ScanCommand =
      exports.de_RestoreTableToPointInTimeCommand =
      exports.de_RestoreTableFromBackupCommand =
      exports.de_QueryCommand =
      exports.de_PutItemCommand =
      exports.de_ListTagsOfResourceCommand =
      exports.de_ListTablesCommand =
      exports.de_ListImportsCommand =
      exports.de_ListGlobalTablesCommand =
      exports.de_ListExportsCommand =
      exports.de_ListContributorInsightsCommand =
      exports.de_ListBackupsCommand =
      exports.de_ImportTableCommand =
      exports.de_GetItemCommand =
      exports.de_ExportTableToPointInTimeCommand =
      exports.de_ExecuteTransactionCommand =
      exports.de_ExecuteStatementCommand =
      exports.de_EnableKinesisStreamingDestinationCommand =
      exports.de_DisableKinesisStreamingDestinationCommand =
      exports.de_DescribeTimeToLiveCommand =
      exports.de_DescribeTableReplicaAutoScalingCommand =
      exports.de_DescribeTableCommand =
      exports.de_DescribeLimitsCommand =
      exports.de_DescribeKinesisStreamingDestinationCommand =
      exports.de_DescribeImportCommand =
      exports.de_DescribeGlobalTableSettingsCommand =
      exports.de_DescribeGlobalTableCommand =
      exports.de_DescribeExportCommand =
      exports.de_DescribeEndpointsCommand =
      exports.de_DescribeContributorInsightsCommand =
      exports.de_DescribeContinuousBackupsCommand =
      exports.de_DescribeBackupCommand =
      exports.de_DeleteTableCommand =
      exports.de_DeleteItemCommand =
      exports.de_DeleteBackupCommand =
      exports.de_CreateTableCommand =
      exports.de_CreateGlobalTableCommand =
      exports.de_CreateBackupCommand =
      exports.de_BatchWriteItemCommand =
      exports.de_BatchGetItemCommand =
      exports.de_BatchExecuteStatementCommand =
      exports.se_UpdateTimeToLiveCommand =
      exports.se_UpdateTableReplicaAutoScalingCommand =
      exports.se_UpdateTableCommand =
        void 0;
    exports.de_UpdateTimeToLiveCommand =
      exports.de_UpdateTableReplicaAutoScalingCommand =
      exports.de_UpdateTableCommand =
      exports.de_UpdateItemCommand =
      exports.de_UpdateGlobalTableSettingsCommand =
      exports.de_UpdateGlobalTableCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs2();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var models_0_1 = require_models_0();
    var se_BatchExecuteStatementCommand = async (input, context) => {
      const headers = sharedHeaders('BatchExecuteStatement');
      let body;
      body = JSON.stringify(se_BatchExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_BatchExecuteStatementCommand = se_BatchExecuteStatementCommand;
    var se_BatchGetItemCommand = async (input, context) => {
      const headers = sharedHeaders('BatchGetItem');
      let body;
      body = JSON.stringify(se_BatchGetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_BatchGetItemCommand = se_BatchGetItemCommand;
    var se_BatchWriteItemCommand = async (input, context) => {
      const headers = sharedHeaders('BatchWriteItem');
      let body;
      body = JSON.stringify(se_BatchWriteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_BatchWriteItemCommand = se_BatchWriteItemCommand;
    var se_CreateBackupCommand = async (input, context) => {
      const headers = sharedHeaders('CreateBackup');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_CreateBackupCommand = se_CreateBackupCommand;
    var se_CreateGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders('CreateGlobalTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_CreateGlobalTableCommand = se_CreateGlobalTableCommand;
    var se_CreateTableCommand = async (input, context) => {
      const headers = sharedHeaders('CreateTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_CreateTableCommand = se_CreateTableCommand;
    var se_DeleteBackupCommand = async (input, context) => {
      const headers = sharedHeaders('DeleteBackup');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DeleteBackupCommand = se_DeleteBackupCommand;
    var se_DeleteItemCommand = async (input, context) => {
      const headers = sharedHeaders('DeleteItem');
      let body;
      body = JSON.stringify(se_DeleteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DeleteItemCommand = se_DeleteItemCommand;
    var se_DeleteTableCommand = async (input, context) => {
      const headers = sharedHeaders('DeleteTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DeleteTableCommand = se_DeleteTableCommand;
    var se_DescribeBackupCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeBackup');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeBackupCommand = se_DescribeBackupCommand;
    var se_DescribeContinuousBackupsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeContinuousBackups');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeContinuousBackupsCommand =
      se_DescribeContinuousBackupsCommand;
    var se_DescribeContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeContributorInsights');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeContributorInsightsCommand =
      se_DescribeContributorInsightsCommand;
    var se_DescribeEndpointsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeEndpoints');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeEndpointsCommand = se_DescribeEndpointsCommand;
    var se_DescribeExportCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeExport');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeExportCommand = se_DescribeExportCommand;
    var se_DescribeGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeGlobalTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeGlobalTableCommand = se_DescribeGlobalTableCommand;
    var se_DescribeGlobalTableSettingsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeGlobalTableSettings');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeGlobalTableSettingsCommand =
      se_DescribeGlobalTableSettingsCommand;
    var se_DescribeImportCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeImport');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeImportCommand = se_DescribeImportCommand;
    var se_DescribeKinesisStreamingDestinationCommand = async (
      input,
      context
    ) => {
      const headers = sharedHeaders('DescribeKinesisStreamingDestination');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeKinesisStreamingDestinationCommand =
      se_DescribeKinesisStreamingDestinationCommand;
    var se_DescribeLimitsCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeLimits');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeLimitsCommand = se_DescribeLimitsCommand;
    var se_DescribeTableCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeTableCommand = se_DescribeTableCommand;
    var se_DescribeTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeTableReplicaAutoScaling');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeTableReplicaAutoScalingCommand =
      se_DescribeTableReplicaAutoScalingCommand;
    var se_DescribeTimeToLiveCommand = async (input, context) => {
      const headers = sharedHeaders('DescribeTimeToLive');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DescribeTimeToLiveCommand = se_DescribeTimeToLiveCommand;
    var se_DisableKinesisStreamingDestinationCommand = async (
      input,
      context
    ) => {
      const headers = sharedHeaders('DisableKinesisStreamingDestination');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DisableKinesisStreamingDestinationCommand =
      se_DisableKinesisStreamingDestinationCommand;
    var se_EnableKinesisStreamingDestinationCommand = async (
      input,
      context
    ) => {
      const headers = sharedHeaders('EnableKinesisStreamingDestination');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_EnableKinesisStreamingDestinationCommand =
      se_EnableKinesisStreamingDestinationCommand;
    var se_ExecuteStatementCommand = async (input, context) => {
      const headers = sharedHeaders('ExecuteStatement');
      let body;
      body = JSON.stringify(se_ExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ExecuteStatementCommand = se_ExecuteStatementCommand;
    var se_ExecuteTransactionCommand = async (input, context) => {
      const headers = sharedHeaders('ExecuteTransaction');
      let body;
      body = JSON.stringify(se_ExecuteTransactionInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ExecuteTransactionCommand = se_ExecuteTransactionCommand;
    var se_ExportTableToPointInTimeCommand = async (input, context) => {
      const headers = sharedHeaders('ExportTableToPointInTime');
      let body;
      body = JSON.stringify(se_ExportTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ExportTableToPointInTimeCommand =
      se_ExportTableToPointInTimeCommand;
    var se_GetItemCommand = async (input, context) => {
      const headers = sharedHeaders('GetItem');
      let body;
      body = JSON.stringify(se_GetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetItemCommand = se_GetItemCommand;
    var se_ImportTableCommand = async (input, context) => {
      const headers = sharedHeaders('ImportTable');
      let body;
      body = JSON.stringify(se_ImportTableInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ImportTableCommand = se_ImportTableCommand;
    var se_ListBackupsCommand = async (input, context) => {
      const headers = sharedHeaders('ListBackups');
      let body;
      body = JSON.stringify(se_ListBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListBackupsCommand = se_ListBackupsCommand;
    var se_ListContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders('ListContributorInsights');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListContributorInsightsCommand =
      se_ListContributorInsightsCommand;
    var se_ListExportsCommand = async (input, context) => {
      const headers = sharedHeaders('ListExports');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListExportsCommand = se_ListExportsCommand;
    var se_ListGlobalTablesCommand = async (input, context) => {
      const headers = sharedHeaders('ListGlobalTables');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListGlobalTablesCommand = se_ListGlobalTablesCommand;
    var se_ListImportsCommand = async (input, context) => {
      const headers = sharedHeaders('ListImports');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListImportsCommand = se_ListImportsCommand;
    var se_ListTablesCommand = async (input, context) => {
      const headers = sharedHeaders('ListTables');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListTablesCommand = se_ListTablesCommand;
    var se_ListTagsOfResourceCommand = async (input, context) => {
      const headers = sharedHeaders('ListTagsOfResource');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ListTagsOfResourceCommand = se_ListTagsOfResourceCommand;
    var se_PutItemCommand = async (input, context) => {
      const headers = sharedHeaders('PutItem');
      let body;
      body = JSON.stringify(se_PutItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_PutItemCommand = se_PutItemCommand;
    var se_QueryCommand = async (input, context) => {
      const headers = sharedHeaders('Query');
      let body;
      body = JSON.stringify(se_QueryInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_QueryCommand = se_QueryCommand;
    var se_RestoreTableFromBackupCommand = async (input, context) => {
      const headers = sharedHeaders('RestoreTableFromBackup');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_RestoreTableFromBackupCommand = se_RestoreTableFromBackupCommand;
    var se_RestoreTableToPointInTimeCommand = async (input, context) => {
      const headers = sharedHeaders('RestoreTableToPointInTime');
      let body;
      body = JSON.stringify(se_RestoreTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_RestoreTableToPointInTimeCommand =
      se_RestoreTableToPointInTimeCommand;
    var se_ScanCommand = async (input, context) => {
      const headers = sharedHeaders('Scan');
      let body;
      body = JSON.stringify(se_ScanInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_ScanCommand = se_ScanCommand;
    var se_TagResourceCommand = async (input, context) => {
      const headers = sharedHeaders('TagResource');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_TagResourceCommand = se_TagResourceCommand;
    var se_TransactGetItemsCommand = async (input, context) => {
      const headers = sharedHeaders('TransactGetItems');
      let body;
      body = JSON.stringify(se_TransactGetItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_TransactGetItemsCommand = se_TransactGetItemsCommand;
    var se_TransactWriteItemsCommand = async (input, context) => {
      const headers = sharedHeaders('TransactWriteItems');
      let body;
      body = JSON.stringify(se_TransactWriteItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_TransactWriteItemsCommand = se_TransactWriteItemsCommand;
    var se_UntagResourceCommand = async (input, context) => {
      const headers = sharedHeaders('UntagResource');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UntagResourceCommand = se_UntagResourceCommand;
    var se_UpdateContinuousBackupsCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateContinuousBackups');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateContinuousBackupsCommand =
      se_UpdateContinuousBackupsCommand;
    var se_UpdateContributorInsightsCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateContributorInsights');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateContributorInsightsCommand =
      se_UpdateContributorInsightsCommand;
    var se_UpdateGlobalTableCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateGlobalTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateGlobalTableCommand = se_UpdateGlobalTableCommand;
    var se_UpdateGlobalTableSettingsCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateGlobalTableSettings');
      let body;
      body = JSON.stringify(se_UpdateGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateGlobalTableSettingsCommand =
      se_UpdateGlobalTableSettingsCommand;
    var se_UpdateItemCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateItem');
      let body;
      body = JSON.stringify(se_UpdateItemInput(input, context));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateItemCommand = se_UpdateItemCommand;
    var se_UpdateTableCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateTable');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateTableCommand = se_UpdateTableCommand;
    var se_UpdateTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateTableReplicaAutoScaling');
      let body;
      body = JSON.stringify(
        se_UpdateTableReplicaAutoScalingInput(input, context)
      );
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateTableReplicaAutoScalingCommand =
      se_UpdateTableReplicaAutoScalingCommand;
    var se_UpdateTimeToLiveCommand = async (input, context) => {
      const headers = sharedHeaders('UpdateTimeToLive');
      let body;
      body = JSON.stringify((0, smithy_client_1._json)(input));
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_UpdateTimeToLiveCommand = se_UpdateTimeToLiveCommand;
    var de_BatchExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_BatchExecuteStatementCommand = de_BatchExecuteStatementCommand;
    var de_BatchExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_BatchGetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchGetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchGetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_BatchGetItemCommand = de_BatchGetItemCommand;
    var de_BatchGetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_BatchWriteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_BatchWriteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_BatchWriteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_BatchWriteItemCommand = de_BatchWriteItemCommand;
    var de_BatchWriteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_CreateBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_CreateBackupCommand = de_CreateBackupCommand;
    var de_CreateBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case 'ContinuousBackupsUnavailableException':
        case 'com.amazonaws.dynamodb#ContinuousBackupsUnavailableException':
          throw await de_ContinuousBackupsUnavailableExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_CreateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_CreateGlobalTableCommand = de_CreateGlobalTableCommand;
    var de_CreateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#GlobalTableAlreadyExistsException':
          throw await de_GlobalTableAlreadyExistsExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_CreateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CreateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_CreateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_CreateTableCommand = de_CreateTableCommand;
    var de_CreateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DeleteBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DeleteBackupCommand = de_DeleteBackupCommand;
    var de_DeleteBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DeleteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DeleteItemCommand = de_DeleteItemCommand;
    var de_DeleteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await de_ConditionalCheckFailedExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DeleteTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DeleteTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DeleteTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DeleteTableCommand = de_DeleteTableCommand;
    var de_DeleteTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeBackupCommand = de_DescribeBackupCommand;
    var de_DescribeBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeContinuousBackupsCommand =
      de_DescribeContinuousBackupsCommand;
    var de_DescribeContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeContributorInsightsCommand =
      de_DescribeContributorInsightsCommand;
    var de_DescribeContributorInsightsCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeEndpointsCommand = de_DescribeEndpointsCommand;
    var de_DescribeEndpointsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode,
      });
    };
    var de_DescribeExportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeExportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeExportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeExportCommand = de_DescribeExportCommand;
    var de_DescribeExportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExportNotFoundException':
        case 'com.amazonaws.dynamodb#ExportNotFoundException':
          throw await de_ExportNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeGlobalTableCommand = de_DescribeGlobalTableCommand;
    var de_DescribeGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeGlobalTableSettingsCommand =
      de_DescribeGlobalTableSettingsCommand;
    var de_DescribeGlobalTableSettingsCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeImportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeImportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeImportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeImportCommand = de_DescribeImportCommand;
    var de_DescribeImportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ImportNotFoundException':
        case 'com.amazonaws.dynamodb#ImportNotFoundException':
          throw await de_ImportNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeKinesisStreamingDestinationCommand = async (
      output,
      context
    ) => {
      if (output.statusCode >= 300) {
        return de_DescribeKinesisStreamingDestinationCommandError(
          output,
          context
        );
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeKinesisStreamingDestinationCommand =
      de_DescribeKinesisStreamingDestinationCommand;
    var de_DescribeKinesisStreamingDestinationCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeLimitsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeLimitsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeLimitsCommand = de_DescribeLimitsCommand;
    var de_DescribeLimitsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeTableCommand = de_DescribeTableCommand;
    var de_DescribeTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DescribeTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeTableReplicaAutoScalingCommand =
      de_DescribeTableReplicaAutoScalingCommand;
    var de_DescribeTableReplicaAutoScalingCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DescribeTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DescribeTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DescribeTimeToLiveCommand = de_DescribeTimeToLiveCommand;
    var de_DescribeTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_DisableKinesisStreamingDestinationCommand = async (
      output,
      context
    ) => {
      if (output.statusCode >= 300) {
        return de_DisableKinesisStreamingDestinationCommandError(
          output,
          context
        );
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DisableKinesisStreamingDestinationCommand =
      de_DisableKinesisStreamingDestinationCommand;
    var de_DisableKinesisStreamingDestinationCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_EnableKinesisStreamingDestinationCommand = async (
      output,
      context
    ) => {
      if (output.statusCode >= 300) {
        return de_EnableKinesisStreamingDestinationCommandError(
          output,
          context
        );
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_EnableKinesisStreamingDestinationCommand =
      de_EnableKinesisStreamingDestinationCommand;
    var de_EnableKinesisStreamingDestinationCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ExecuteStatementCommand = de_ExecuteStatementCommand;
    var de_ExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await de_ConditionalCheckFailedExceptionRes(
            parsedOutput,
            context
          );
        case 'DuplicateItemException':
        case 'com.amazonaws.dynamodb#DuplicateItemException':
          throw await de_DuplicateItemExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ExecuteTransactionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExecuteTransactionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExecuteTransactionOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ExecuteTransactionCommand = de_ExecuteTransactionCommand;
    var de_ExecuteTransactionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'IdempotentParameterMismatchException':
        case 'com.amazonaws.dynamodb#IdempotentParameterMismatchException':
          throw await de_IdempotentParameterMismatchExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case 'TransactionInProgressException':
        case 'com.amazonaws.dynamodb#TransactionInProgressException':
          throw await de_TransactionInProgressExceptionRes(
            parsedOutput,
            context
          );
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ExportTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ExportTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ExportTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ExportTableToPointInTimeCommand =
      de_ExportTableToPointInTimeCommand;
    var de_ExportTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExportConflictException':
        case 'com.amazonaws.dynamodb#ExportConflictException':
          throw await de_ExportConflictExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidExportTimeException':
        case 'com.amazonaws.dynamodb#InvalidExportTimeException':
          throw await de_InvalidExportTimeExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'PointInTimeRecoveryUnavailableException':
        case 'com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException':
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(
            parsedOutput,
            context
          );
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_GetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetItemCommand = de_GetItemCommand;
    var de_GetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ImportTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ImportTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ImportTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ImportTableCommand = de_ImportTableCommand;
    var de_ImportTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ImportConflictException':
        case 'com.amazonaws.dynamodb#ImportConflictException':
          throw await de_ImportConflictExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListBackupsCommand = de_ListBackupsCommand;
    var de_ListBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListContributorInsightsCommand =
      de_ListContributorInsightsCommand;
    var de_ListContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListExportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListExportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListExportsCommand = de_ListExportsCommand;
    var de_ListExportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListGlobalTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListGlobalTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListGlobalTablesCommand = de_ListGlobalTablesCommand;
    var de_ListGlobalTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListImportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListImportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ListImportsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListImportsCommand = de_ListImportsCommand;
    var de_ListImportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListTablesCommand = de_ListTablesCommand;
    var de_ListTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListTagsOfResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ListTagsOfResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ListTagsOfResourceCommand = de_ListTagsOfResourceCommand;
    var de_ListTagsOfResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_PutItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_PutItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_PutItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_PutItemCommand = de_PutItemCommand;
    var de_PutItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await de_ConditionalCheckFailedExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_QueryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_QueryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_QueryOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_QueryCommand = de_QueryCommand;
    var de_QueryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_RestoreTableFromBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RestoreTableFromBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RestoreTableFromBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_RestoreTableFromBackupCommand = de_RestoreTableFromBackupCommand;
    var de_RestoreTableFromBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'BackupInUseException':
        case 'com.amazonaws.dynamodb#BackupInUseException':
          throw await de_BackupInUseExceptionRes(parsedOutput, context);
        case 'BackupNotFoundException':
        case 'com.amazonaws.dynamodb#BackupNotFoundException':
          throw await de_BackupNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'TableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#TableAlreadyExistsException':
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_RestoreTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_RestoreTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_RestoreTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_RestoreTableToPointInTimeCommand =
      de_RestoreTableToPointInTimeCommand;
    var de_RestoreTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'InvalidRestoreTimeException':
        case 'com.amazonaws.dynamodb#InvalidRestoreTimeException':
          throw await de_InvalidRestoreTimeExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'PointInTimeRecoveryUnavailableException':
        case 'com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException':
          throw await de_PointInTimeRecoveryUnavailableExceptionRes(
            parsedOutput,
            context
          );
        case 'TableAlreadyExistsException':
        case 'com.amazonaws.dynamodb#TableAlreadyExistsException':
          throw await de_TableAlreadyExistsExceptionRes(parsedOutput, context);
        case 'TableInUseException':
        case 'com.amazonaws.dynamodb#TableInUseException':
          throw await de_TableInUseExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ScanCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_ScanCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_ScanOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_ScanCommand = de_ScanCommand;
    var de_ScanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output),
      };
      return response;
    };
    exports.de_TagResourceCommand = de_TagResourceCommand;
    var de_TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_TransactGetItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TransactGetItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TransactGetItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_TransactGetItemsCommand = de_TransactGetItemsCommand;
    var de_TransactGetItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_TransactWriteItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_TransactWriteItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_TransactWriteItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_TransactWriteItemsCommand = de_TransactWriteItemsCommand;
    var de_TransactWriteItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'IdempotentParameterMismatchException':
        case 'com.amazonaws.dynamodb#IdempotentParameterMismatchException':
          throw await de_IdempotentParameterMismatchExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionCanceledException':
        case 'com.amazonaws.dynamodb#TransactionCanceledException':
          throw await de_TransactionCanceledExceptionRes(parsedOutput, context);
        case 'TransactionInProgressException':
        case 'com.amazonaws.dynamodb#TransactionInProgressException':
          throw await de_TransactionInProgressExceptionRes(
            parsedOutput,
            context
          );
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output),
      };
      return response;
    };
    exports.de_UntagResourceCommand = de_UntagResourceCommand;
    var de_UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateContinuousBackupsCommand =
      de_UpdateContinuousBackupsCommand;
    var de_UpdateContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ContinuousBackupsUnavailableException':
        case 'com.amazonaws.dynamodb#ContinuousBackupsUnavailableException':
          throw await de_ContinuousBackupsUnavailableExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateContributorInsightsCommand =
      de_UpdateContributorInsightsCommand;
    var de_UpdateContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateGlobalTableCommand = de_UpdateGlobalTableCommand;
    var de_UpdateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ReplicaAlreadyExistsException':
        case 'com.amazonaws.dynamodb#ReplicaAlreadyExistsException':
          throw await de_ReplicaAlreadyExistsExceptionRes(
            parsedOutput,
            context
          );
        case 'ReplicaNotFoundException':
        case 'com.amazonaws.dynamodb#ReplicaNotFoundException':
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case 'TableNotFoundException':
        case 'com.amazonaws.dynamodb#TableNotFoundException':
          throw await de_TableNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateGlobalTableSettingsCommand =
      de_UpdateGlobalTableSettingsCommand;
    var de_UpdateGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'GlobalTableNotFoundException':
        case 'com.amazonaws.dynamodb#GlobalTableNotFoundException':
          throw await de_GlobalTableNotFoundExceptionRes(parsedOutput, context);
        case 'IndexNotFoundException':
        case 'com.amazonaws.dynamodb#IndexNotFoundException':
          throw await de_IndexNotFoundExceptionRes(parsedOutput, context);
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ReplicaNotFoundException':
        case 'com.amazonaws.dynamodb#ReplicaNotFoundException':
          throw await de_ReplicaNotFoundExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateItemCommand = de_UpdateItemCommand;
    var de_UpdateItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ConditionalCheckFailedException':
        case 'com.amazonaws.dynamodb#ConditionalCheckFailedException':
          throw await de_ConditionalCheckFailedExceptionRes(
            parsedOutput,
            context
          );
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'ItemCollectionSizeLimitExceededException':
        case 'com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException':
          throw await de_ItemCollectionSizeLimitExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'ProvisionedThroughputExceededException':
        case 'com.amazonaws.dynamodb#ProvisionedThroughputExceededException':
          throw await de_ProvisionedThroughputExceededExceptionRes(
            parsedOutput,
            context
          );
        case 'RequestLimitExceeded':
        case 'com.amazonaws.dynamodb#RequestLimitExceeded':
          throw await de_RequestLimitExceededRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TransactionConflictException':
        case 'com.amazonaws.dynamodb#TransactionConflictException':
          throw await de_TransactionConflictExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateTableCommand = de_UpdateTableCommand;
    var de_UpdateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_UpdateTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateTableReplicaAutoScalingCommand =
      de_UpdateTableReplicaAutoScalingCommand;
    var de_UpdateTableReplicaAutoScalingCommandError = async (
      output,
      context
    ) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_UpdateTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_UpdateTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = (0, smithy_client_1._json)(data);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_UpdateTimeToLiveCommand = de_UpdateTimeToLiveCommand;
    var de_UpdateTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerError':
        case 'com.amazonaws.dynamodb#InternalServerError':
          throw await de_InternalServerErrorRes(parsedOutput, context);
        case 'InvalidEndpointException':
        case 'com.amazonaws.dynamodb#InvalidEndpointException':
          throw await de_InvalidEndpointExceptionRes(parsedOutput, context);
        case 'LimitExceededException':
        case 'com.amazonaws.dynamodb#LimitExceededException':
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case 'ResourceInUseException':
        case 'com.amazonaws.dynamodb#ResourceInUseException':
          throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.dynamodb#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_BackupInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.BackupInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_BackupNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.BackupNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ConditionalCheckFailedExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ConditionalCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ContinuousBackupsUnavailableExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ContinuousBackupsUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_DuplicateItemExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.DuplicateItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ExportConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ExportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ExportNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ExportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalTableAlreadyExistsExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.GlobalTableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_GlobalTableNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.GlobalTableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IdempotentParameterMismatchExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ImportConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ImportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ImportNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ImportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IndexNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.IndexNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InternalServerErrorRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidEndpointExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidExportTimeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidExportTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidRestoreTimeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.InvalidRestoreTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ItemCollectionSizeLimitExceededExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ItemCollectionSizeLimitExceededException(
        {
          $metadata: deserializeMetadata(parsedOutput),
          ...deserialized,
        }
      );
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_LimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PointInTimeRecoveryUnavailableExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.PointInTimeRecoveryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ProvisionedThroughputExceededExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicaAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ReplicaAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ReplicaNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ReplicaNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RequestLimitExceededRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.RequestLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableAlreadyExistsExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableInUseExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TableNotFoundExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionCanceledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_TransactionCanceledException(body, context);
      const exception = new models_0_1.TransactionCanceledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TransactionConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_TransactionInProgressExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = (0, smithy_client_1._json)(body);
      const exception = new models_0_1.TransactionInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AttributeUpdates = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValueUpdate(value, context);
        return acc;
      }, {});
    };
    var se_AttributeValue = (input, context) => {
      return models_0_1.AttributeValue.visit(input, {
        B: (value) => ({ B: context.base64Encoder(value) }),
        BOOL: (value) => ({ BOOL: value }),
        BS: (value) => ({ BS: se_BinarySetAttributeValue(value, context) }),
        L: (value) => ({ L: se_ListAttributeValue(value, context) }),
        M: (value) => ({ M: se_MapAttributeValue(value, context) }),
        N: (value) => ({ N: value }),
        NS: (value) => ({ NS: (0, smithy_client_1._json)(value) }),
        NULL: (value) => ({ NULL: value }),
        S: (value) => ({ S: value }),
        SS: (value) => ({ SS: (0, smithy_client_1._json)(value) }),
        _: (name, value) => ({ name: value }),
      });
    };
    var se_AttributeValueList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_AttributeValue(entry, context);
        });
    };
    var se_AttributeValueUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Action: [],
        Value: (_2) => se_AttributeValue(_2, context),
      });
    };
    var se_AutoScalingPolicyUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        PolicyName: [],
        TargetTrackingScalingPolicyConfiguration: (_2) =>
          se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(
            _2,
            context
          ),
      });
    };
    var se_AutoScalingSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AutoScalingDisabled: [],
        AutoScalingRoleArn: [],
        MaximumUnits: [],
        MinimumUnits: [],
        ScalingPolicyUpdate: (_2) => se_AutoScalingPolicyUpdate(_2, context),
      });
    };
    var se_AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (
      input,
      context
    ) => {
      return (0, smithy_client_1.take)(input, {
        DisableScaleIn: [],
        ScaleInCooldown: [],
        ScaleOutCooldown: [],
        TargetValue: smithy_client_1.serializeFloat,
      });
    };
    var se_BatchExecuteStatementInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ReturnConsumedCapacity: [],
        Statements: (_2) => se_PartiQLBatchRequest(_2, context),
      });
    };
    var se_BatchGetItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RequestItems: (_2) => se_BatchGetRequestMap(_2, context),
        ReturnConsumedCapacity: [],
      });
    };
    var se_BatchGetRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_KeysAndAttributes(value, context);
        return acc;
      }, {});
    };
    var se_BatchStatementRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConsistentRead: [],
        Parameters: (_2) => se_PreparedStatementParameters(_2, context),
        Statement: [],
      });
    };
    var se_BatchWriteItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RequestItems: (_2) => se_BatchWriteItemRequestMap(_2, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
      });
    };
    var se_BatchWriteItemRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_WriteRequests(value, context);
        return acc;
      }, {});
    };
    var se_BinarySetAttributeValue = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return context.base64Encoder(entry);
        });
    };
    var se_Condition = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeValueList: (_2) => se_AttributeValueList(_2, context),
        ComparisonOperator: [],
      });
    };
    var se_ConditionCheck = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
      });
    };
    var se_Delete = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
      });
    };
    var se_DeleteItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_2) => se_ExpectedAttributeMap(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        TableName: [],
      });
    };
    var se_DeleteRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Key: (_2) => se_Key(_2, context),
      });
    };
    var se_ExecuteStatementInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConsistentRead: [],
        Limit: [],
        NextToken: [],
        Parameters: (_2) => se_PreparedStatementParameters(_2, context),
        ReturnConsumedCapacity: [],
        Statement: [],
      });
    };
    var se_ExecuteTransactionInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_2) => _2 ?? (0, uuid_1.v4)()],
        ReturnConsumedCapacity: [],
        TransactStatements: (_2) => se_ParameterizedStatements(_2, context),
      });
    };
    var se_ExpectedAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_ExpectedAttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_ExpectedAttributeValue = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeValueList: (_2) => se_AttributeValueList(_2, context),
        ComparisonOperator: [],
        Exists: [],
        Value: (_2) => se_AttributeValue(_2, context),
      });
    };
    var se_ExportTableToPointInTimeInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_2) => _2 ?? (0, uuid_1.v4)()],
        ExportFormat: [],
        ExportTime: (_2) => Math.round(_2.getTime() / 1e3),
        S3Bucket: [],
        S3BucketOwner: [],
        S3Prefix: [],
        S3SseAlgorithm: [],
        S3SseKmsKeyId: [],
        TableArn: [],
      });
    };
    var se_ExpressionAttributeValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_FilterConditionMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    };
    var se_Get = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ExpressionAttributeNames: smithy_client_1._json,
        Key: (_2) => se_Key(_2, context),
        ProjectionExpression: [],
        TableName: [],
      });
    };
    var se_GetItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: [],
        ExpressionAttributeNames: smithy_client_1._json,
        Key: (_2) => se_Key(_2, context),
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        TableName: [],
      });
    };
    var se_GlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
      });
    };
    var se_GlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_GlobalSecondaryIndexAutoScalingUpdate(entry, context);
        });
    };
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedWriteCapacityAutoScalingSettingsUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        ProvisionedWriteCapacityUnits: [],
      });
    };
    var se_GlobalTableGlobalSecondaryIndexSettingsUpdateList = (
      input,
      context
    ) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_GlobalTableGlobalSecondaryIndexSettingsUpdate(
            entry,
            context
          );
        });
    };
    var se_ImportTableInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_2) => _2 ?? (0, uuid_1.v4)()],
        InputCompressionType: [],
        InputFormat: [],
        InputFormatOptions: smithy_client_1._json,
        S3BucketSource: smithy_client_1._json,
        TableCreationParameters: smithy_client_1._json,
      });
    };
    var se_Key = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_KeyConditions = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_Condition(value, context);
        return acc;
      }, {});
    };
    var se_KeyList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_Key(entry, context);
        });
    };
    var se_KeysAndAttributes = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: [],
        ExpressionAttributeNames: smithy_client_1._json,
        Keys: (_2) => se_KeyList(_2, context),
        ProjectionExpression: [],
      });
    };
    var se_ListAttributeValue = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_AttributeValue(entry, context);
        });
    };
    var se_ListBackupsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        BackupType: [],
        ExclusiveStartBackupArn: [],
        Limit: [],
        TableName: [],
        TimeRangeLowerBound: (_2) => Math.round(_2.getTime() / 1e3),
        TimeRangeUpperBound: (_2) => Math.round(_2.getTime() / 1e3),
      });
    };
    var se_MapAttributeValue = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_ParameterizedStatement = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Parameters: (_2) => se_PreparedStatementParameters(_2, context),
        Statement: [],
      });
    };
    var se_ParameterizedStatements = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ParameterizedStatement(entry, context);
        });
    };
    var se_PartiQLBatchRequest = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_BatchStatementRequest(entry, context);
        });
    };
    var se_PreparedStatementParameters = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_AttributeValue(entry, context);
        });
    };
    var se_Put = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Item: (_2) => se_PutItemInputAttributeMap(_2, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
      });
    };
    var se_PutItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_2) => se_ExpectedAttributeMap(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Item: (_2) => se_PutItemInputAttributeMap(_2, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        TableName: [],
      });
    };
    var se_PutItemInputAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = se_AttributeValue(value, context);
        return acc;
      }, {});
    };
    var se_PutRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Item: (_2) => se_PutItemInputAttributeMap(_2, context),
      });
    };
    var se_QueryInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_2) => se_Key(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        FilterExpression: [],
        IndexName: [],
        KeyConditionExpression: [],
        KeyConditions: (_2) => se_KeyConditions(_2, context),
        Limit: [],
        ProjectionExpression: [],
        QueryFilter: (_2) => se_FilterConditionMap(_2, context),
        ReturnConsumedCapacity: [],
        ScanIndexForward: [],
        Select: [],
        TableName: [],
      });
    };
    var se_ReplicaAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexUpdates: (_2) =>
          se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList(_2, context),
        ReplicaProvisionedReadCapacityAutoScalingUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
      });
    };
    var se_ReplicaAutoScalingUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ReplicaAutoScalingUpdate(entry, context);
        });
    };
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
      });
    };
    var se_ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (
      input,
      context
    ) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ReplicaGlobalSecondaryIndexAutoScalingUpdate(
            entry,
            context
          );
        });
    };
    var se_ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        IndexName: [],
        ProvisionedReadCapacityAutoScalingSettingsUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        ProvisionedReadCapacityUnits: [],
      });
    };
    var se_ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
        });
    };
    var se_ReplicaSettingsUpdate = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        RegionName: [],
        ReplicaGlobalSecondaryIndexSettingsUpdate: (_2) =>
          se_ReplicaGlobalSecondaryIndexSettingsUpdateList(_2, context),
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        ReplicaProvisionedReadCapacityUnits: [],
        ReplicaTableClass: [],
      });
    };
    var se_ReplicaSettingsUpdateList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_ReplicaSettingsUpdate(entry, context);
        });
    };
    var se_RestoreTableToPointInTimeInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        BillingModeOverride: [],
        GlobalSecondaryIndexOverride: smithy_client_1._json,
        LocalSecondaryIndexOverride: smithy_client_1._json,
        ProvisionedThroughputOverride: smithy_client_1._json,
        RestoreDateTime: (_2) => Math.round(_2.getTime() / 1e3),
        SSESpecificationOverride: smithy_client_1._json,
        SourceTableArn: [],
        SourceTableName: [],
        TargetTableName: [],
        UseLatestRestorableTime: [],
      });
    };
    var se_ScanInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributesToGet: smithy_client_1._json,
        ConditionalOperator: [],
        ConsistentRead: [],
        ExclusiveStartKey: (_2) => se_Key(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        FilterExpression: [],
        IndexName: [],
        Limit: [],
        ProjectionExpression: [],
        ReturnConsumedCapacity: [],
        ScanFilter: (_2) => se_FilterConditionMap(_2, context),
        Segment: [],
        Select: [],
        TableName: [],
        TotalSegments: [],
      });
    };
    var se_TransactGetItem = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        Get: (_2) => se_Get(_2, context),
      });
    };
    var se_TransactGetItemList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_TransactGetItem(entry, context);
        });
    };
    var se_TransactGetItemsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ReturnConsumedCapacity: [],
        TransactItems: (_2) => se_TransactGetItemList(_2, context),
      });
    };
    var se_TransactWriteItem = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionCheck: (_2) => se_ConditionCheck(_2, context),
        Delete: (_2) => se_Delete(_2, context),
        Put: (_2) => se_Put(_2, context),
        Update: (_2) => se_Update(_2, context),
      });
    };
    var se_TransactWriteItemList = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_TransactWriteItem(entry, context);
        });
    };
    var se_TransactWriteItemsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ClientRequestToken: [true, (_2) => _2 ?? (0, uuid_1.v4)()],
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        TransactItems: (_2) => se_TransactWriteItemList(_2, context),
      });
    };
    var se_Update = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        ConditionExpression: [],
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnValuesOnConditionCheckFailure: [],
        TableName: [],
        UpdateExpression: [],
      });
    };
    var se_UpdateGlobalTableSettingsInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        GlobalTableBillingMode: [],
        GlobalTableGlobalSecondaryIndexSettingsUpdate: (_2) =>
          se_GlobalTableGlobalSecondaryIndexSettingsUpdateList(_2, context),
        GlobalTableName: [],
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        GlobalTableProvisionedWriteCapacityUnits: [],
        ReplicaSettingsUpdate: (_2) =>
          se_ReplicaSettingsUpdateList(_2, context),
      });
    };
    var se_UpdateItemInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        AttributeUpdates: (_2) => se_AttributeUpdates(_2, context),
        ConditionExpression: [],
        ConditionalOperator: [],
        Expected: (_2) => se_ExpectedAttributeMap(_2, context),
        ExpressionAttributeNames: smithy_client_1._json,
        ExpressionAttributeValues: (_2) =>
          se_ExpressionAttributeValueMap(_2, context),
        Key: (_2) => se_Key(_2, context),
        ReturnConsumedCapacity: [],
        ReturnItemCollectionMetrics: [],
        ReturnValues: [],
        TableName: [],
        UpdateExpression: [],
      });
    };
    var se_UpdateTableReplicaAutoScalingInput = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        GlobalSecondaryIndexUpdates: (_2) =>
          se_GlobalSecondaryIndexAutoScalingUpdateList(_2, context),
        ProvisionedWriteCapacityAutoScalingUpdate: (_2) =>
          se_AutoScalingSettingsUpdate(_2, context),
        ReplicaUpdates: (_2) => se_ReplicaAutoScalingUpdateList(_2, context),
        TableName: [],
      });
    };
    var se_WriteRequest = (input, context) => {
      return (0, smithy_client_1.take)(input, {
        DeleteRequest: (_2) => se_DeleteRequest(_2, context),
        PutRequest: (_2) => se_PutRequest(_2, context),
      });
    };
    var se_WriteRequests = (input, context) => {
      return input
        .filter((e) => e != null)
        .map((entry) => {
          return se_WriteRequest(entry, context);
        });
    };
    var de_ArchivalSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ArchivalBackupArn: smithy_client_1.expectString,
        ArchivalDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ArchivalReason: smithy_client_1.expectString,
      });
    };
    var de_AttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_AttributeValue = (output, context) => {
      if (output.B != null) {
        return {
          B: context.base64Decoder(output.B),
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.BOOL) !== void 0) {
        return { BOOL: (0, smithy_client_1.expectBoolean)(output.BOOL) };
      }
      if (output.BS != null) {
        return {
          BS: de_BinarySetAttributeValue(output.BS, context),
        };
      }
      if (output.L != null) {
        return {
          L: de_ListAttributeValue(output.L, context),
        };
      }
      if (output.M != null) {
        return {
          M: de_MapAttributeValue(output.M, context),
        };
      }
      if ((0, smithy_client_1.expectString)(output.N) !== void 0) {
        return { N: (0, smithy_client_1.expectString)(output.N) };
      }
      if (output.NS != null) {
        return {
          NS: (0, smithy_client_1._json)(output.NS),
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.NULL) !== void 0) {
        return { NULL: (0, smithy_client_1.expectBoolean)(output.NULL) };
      }
      if ((0, smithy_client_1.expectString)(output.S) !== void 0) {
        return { S: (0, smithy_client_1.expectString)(output.S) };
      }
      if (output.SS != null) {
        return {
          SS: (0, smithy_client_1._json)(output.SS),
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var de_AutoScalingPolicyDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        PolicyName: smithy_client_1.expectString,
        TargetTrackingScalingPolicyConfiguration: (_2) =>
          de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription(
            _2,
            context
          ),
      });
    };
    var de_AutoScalingPolicyDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_AutoScalingPolicyDescription(entry, context);
        });
      return retVal;
    };
    var de_AutoScalingSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AutoScalingDisabled: smithy_client_1.expectBoolean,
        AutoScalingRoleArn: smithy_client_1.expectString,
        MaximumUnits: smithy_client_1.expectLong,
        MinimumUnits: smithy_client_1.expectLong,
        ScalingPolicies: (_2) =>
          de_AutoScalingPolicyDescriptionList(_2, context),
      });
    };
    var de_AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (
      output,
      context
    ) => {
      return (0, smithy_client_1.take)(output, {
        DisableScaleIn: smithy_client_1.expectBoolean,
        ScaleInCooldown: smithy_client_1.expectInt32,
        ScaleOutCooldown: smithy_client_1.expectInt32,
        TargetValue: smithy_client_1.limitedParseDouble,
      });
    };
    var de_BackupDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDetails: (_2) => de_BackupDetails(_2, context),
        SourceTableDetails: (_2) => de_SourceTableDetails(_2, context),
        SourceTableFeatureDetails: (_2) =>
          de_SourceTableFeatureDetails(_2, context),
      });
    };
    var de_BackupDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupArn: smithy_client_1.expectString,
        BackupCreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        BackupExpiryDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        BackupName: smithy_client_1.expectString,
        BackupSizeBytes: smithy_client_1.expectLong,
        BackupStatus: smithy_client_1.expectString,
        BackupType: smithy_client_1.expectString,
      });
    };
    var de_BackupSummaries = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_BackupSummary(entry, context);
        });
      return retVal;
    };
    var de_BackupSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupArn: smithy_client_1.expectString,
        BackupCreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        BackupExpiryDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        BackupName: smithy_client_1.expectString,
        BackupSizeBytes: smithy_client_1.expectLong,
        BackupStatus: smithy_client_1.expectString,
        BackupType: smithy_client_1.expectString,
        TableArn: smithy_client_1.expectString,
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
      });
    };
    var de_BatchExecuteStatementOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        Responses: (_2) => de_PartiQLBatchResponse(_2, context),
      });
    };
    var de_BatchGetItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        Responses: (_2) => de_BatchGetResponseMap(_2, context),
        UnprocessedKeys: (_2) => de_BatchGetRequestMap(_2, context),
      });
    };
    var de_BatchGetRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_KeysAndAttributes(value, context);
        return acc;
      }, {});
    };
    var de_BatchGetResponseMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemList(value, context);
        return acc;
      }, {});
    };
    var de_BatchStatementResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Error: smithy_client_1._json,
        Item: (_2) => de_AttributeMap(_2, context),
        TableName: smithy_client_1.expectString,
      });
    };
    var de_BatchWriteItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        ItemCollectionMetrics: (_2) =>
          de_ItemCollectionMetricsPerTable(_2, context),
        UnprocessedItems: (_2) => de_BatchWriteItemRequestMap(_2, context),
      });
    };
    var de_BatchWriteItemRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_WriteRequests(value, context);
        return acc;
      }, {});
    };
    var de_BillingModeSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BillingMode: smithy_client_1.expectString,
        LastUpdateToPayPerRequestDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
      });
    };
    var de_BinarySetAttributeValue = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return context.base64Decoder(entry);
        });
      return retVal;
    };
    var de_CancellationReason = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Code: smithy_client_1.expectString,
        Item: (_2) => de_AttributeMap(_2, context),
        Message: smithy_client_1.expectString,
      });
    };
    var de_CancellationReasonList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_CancellationReason(entry, context);
        });
      return retVal;
    };
    var de_Capacity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CapacityUnits: smithy_client_1.limitedParseDouble,
        ReadCapacityUnits: smithy_client_1.limitedParseDouble,
        WriteCapacityUnits: smithy_client_1.limitedParseDouble,
      });
    };
    var de_ConsumedCapacity = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CapacityUnits: smithy_client_1.limitedParseDouble,
        GlobalSecondaryIndexes: (_2) =>
          de_SecondaryIndexesCapacityMap(_2, context),
        LocalSecondaryIndexes: (_2) =>
          de_SecondaryIndexesCapacityMap(_2, context),
        ReadCapacityUnits: smithy_client_1.limitedParseDouble,
        Table: (_2) => de_Capacity(_2, context),
        TableName: smithy_client_1.expectString,
        WriteCapacityUnits: smithy_client_1.limitedParseDouble,
      });
    };
    var de_ConsumedCapacityMultiple = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ConsumedCapacity(entry, context);
        });
      return retVal;
    };
    var de_ContinuousBackupsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsStatus: smithy_client_1.expectString,
        PointInTimeRecoveryDescription: (_2) =>
          de_PointInTimeRecoveryDescription(_2, context),
      });
    };
    var de_CreateBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDetails: (_2) => de_BackupDetails(_2, context),
      });
    };
    var de_CreateGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_2) => de_GlobalTableDescription(_2, context),
      });
    };
    var de_CreateTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_DeleteBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDescription: (_2) => de_BackupDescription(_2, context),
      });
    };
    var de_DeleteItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_2) => de_AttributeMap(_2, context),
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        ItemCollectionMetrics: (_2) => de_ItemCollectionMetrics(_2, context),
      });
    };
    var de_DeleteRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Key: (_2) => de_Key(_2, context),
      });
    };
    var de_DeleteTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_DescribeBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupDescription: (_2) => de_BackupDescription(_2, context),
      });
    };
    var de_DescribeContinuousBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsDescription: (_2) =>
          de_ContinuousBackupsDescription(_2, context),
      });
    };
    var de_DescribeContributorInsightsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContributorInsightsRuleList: smithy_client_1._json,
        ContributorInsightsStatus: smithy_client_1.expectString,
        FailureException: smithy_client_1._json,
        IndexName: smithy_client_1.expectString,
        LastUpdateDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableName: smithy_client_1.expectString,
      });
    };
    var de_DescribeExportOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportDescription: (_2) => de_ExportDescription(_2, context),
      });
    };
    var de_DescribeGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_2) => de_GlobalTableDescription(_2, context),
      });
    };
    var de_DescribeGlobalTableSettingsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableName: smithy_client_1.expectString,
        ReplicaSettings: (_2) => de_ReplicaSettingsDescriptionList(_2, context),
      });
    };
    var de_DescribeImportOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportTableDescription: (_2) => de_ImportTableDescription(_2, context),
      });
    };
    var de_DescribeTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Table: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_DescribeTableReplicaAutoScalingOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableAutoScalingDescription: (_2) =>
          de_TableAutoScalingDescription(_2, context),
      });
    };
    var de_ExecuteStatementOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        Items: (_2) => de_ItemList(_2, context),
        LastEvaluatedKey: (_2) => de_Key(_2, context),
        NextToken: smithy_client_1.expectString,
      });
    };
    var de_ExecuteTransactionOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        Responses: (_2) => de_ItemResponseList(_2, context),
      });
    };
    var de_ExportDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BilledSizeBytes: smithy_client_1.expectLong,
        ClientToken: smithy_client_1.expectString,
        EndTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ExportArn: smithy_client_1.expectString,
        ExportFormat: smithy_client_1.expectString,
        ExportManifest: smithy_client_1.expectString,
        ExportStatus: smithy_client_1.expectString,
        ExportTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        FailureCode: smithy_client_1.expectString,
        FailureMessage: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        S3Bucket: smithy_client_1.expectString,
        S3BucketOwner: smithy_client_1.expectString,
        S3Prefix: smithy_client_1.expectString,
        S3SseAlgorithm: smithy_client_1.expectString,
        S3SseKmsKeyId: smithy_client_1.expectString,
        StartTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableArn: smithy_client_1.expectString,
        TableId: smithy_client_1.expectString,
      });
    };
    var de_ExportTableToPointInTimeOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ExportDescription: (_2) => de_ExportDescription(_2, context),
      });
    };
    var de_GetItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        Item: (_2) => de_AttributeMap(_2, context),
      });
    };
    var de_GlobalSecondaryIndexDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Backfilling: smithy_client_1.expectBoolean,
        IndexArn: smithy_client_1.expectString,
        IndexName: smithy_client_1.expectString,
        IndexSizeBytes: smithy_client_1.expectLong,
        IndexStatus: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        Projection: smithy_client_1._json,
        ProvisionedThroughput: (_2) =>
          de_ProvisionedThroughputDescription(_2, context),
      });
    };
    var de_GlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_GlobalSecondaryIndexDescription(entry, context);
        });
      return retVal;
    };
    var de_GlobalTableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        GlobalTableArn: smithy_client_1.expectString,
        GlobalTableName: smithy_client_1.expectString,
        GlobalTableStatus: smithy_client_1.expectString,
        ReplicationGroup: (_2) => de_ReplicaDescriptionList(_2, context),
      });
    };
    var de_ImportSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CloudWatchLogGroupArn: smithy_client_1.expectString,
        EndTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ImportArn: smithy_client_1.expectString,
        ImportStatus: smithy_client_1.expectString,
        InputFormat: smithy_client_1.expectString,
        S3BucketSource: smithy_client_1._json,
        StartTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableArn: smithy_client_1.expectString,
      });
    };
    var de_ImportSummaryList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ImportSummary(entry, context);
        });
      return retVal;
    };
    var de_ImportTableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ClientToken: smithy_client_1.expectString,
        CloudWatchLogGroupArn: smithy_client_1.expectString,
        EndTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ErrorCount: smithy_client_1.expectLong,
        FailureCode: smithy_client_1.expectString,
        FailureMessage: smithy_client_1.expectString,
        ImportArn: smithy_client_1.expectString,
        ImportStatus: smithy_client_1.expectString,
        ImportedItemCount: smithy_client_1.expectLong,
        InputCompressionType: smithy_client_1.expectString,
        InputFormat: smithy_client_1.expectString,
        InputFormatOptions: smithy_client_1._json,
        ProcessedItemCount: smithy_client_1.expectLong,
        ProcessedSizeBytes: smithy_client_1.expectLong,
        S3BucketSource: smithy_client_1._json,
        StartTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableArn: smithy_client_1.expectString,
        TableCreationParameters: smithy_client_1._json,
        TableId: smithy_client_1.expectString,
      });
    };
    var de_ImportTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportTableDescription: (_2) => de_ImportTableDescription(_2, context),
      });
    };
    var de_ItemCollectionKeyAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_ItemCollectionMetrics = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ItemCollectionKey: (_2) =>
          de_ItemCollectionKeyAttributeMap(_2, context),
        SizeEstimateRangeGB: (_2) =>
          de_ItemCollectionSizeEstimateRange(_2, context),
      });
    };
    var de_ItemCollectionMetricsMultiple = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ItemCollectionMetrics(entry, context);
        });
      return retVal;
    };
    var de_ItemCollectionMetricsPerTable = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_ItemCollectionMetricsMultiple(value, context);
        return acc;
      }, {});
    };
    var de_ItemCollectionSizeEstimateRange = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return (0, smithy_client_1.limitedParseDouble)(entry);
        });
      return retVal;
    };
    var de_ItemList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_AttributeMap(entry, context);
        });
      return retVal;
    };
    var de_ItemResponse = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_2) => de_AttributeMap(_2, context),
      });
    };
    var de_ItemResponseList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ItemResponse(entry, context);
        });
      return retVal;
    };
    var de_Key = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_KeyList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_Key(entry, context);
        });
      return retVal;
    };
    var de_KeysAndAttributes = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        AttributesToGet: smithy_client_1._json,
        ConsistentRead: smithy_client_1.expectBoolean,
        ExpressionAttributeNames: smithy_client_1._json,
        Keys: (_2) => de_KeyList(_2, context),
        ProjectionExpression: smithy_client_1.expectString,
      });
    };
    var de_ListAttributeValue = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_AttributeValue(
            (0, smithy_client_1.expectUnion)(entry),
            context
          );
        });
      return retVal;
    };
    var de_ListBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BackupSummaries: (_2) => de_BackupSummaries(_2, context),
        LastEvaluatedBackupArn: smithy_client_1.expectString,
      });
    };
    var de_ListImportsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ImportSummaryList: (_2) => de_ImportSummaryList(_2, context),
        NextToken: smithy_client_1.expectString,
      });
    };
    var de_MapAttributeValue = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_PartiQLBatchResponse = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_BatchStatementResponse(entry, context);
        });
      return retVal;
    };
    var de_PointInTimeRecoveryDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        EarliestRestorableDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        LatestRestorableDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        PointInTimeRecoveryStatus: smithy_client_1.expectString,
      });
    };
    var de_ProvisionedThroughputDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastDecreaseDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        LastIncreaseDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        NumberOfDecreasesToday: smithy_client_1.expectLong,
        ReadCapacityUnits: smithy_client_1.expectLong,
        WriteCapacityUnits: smithy_client_1.expectLong,
      });
    };
    var de_PutItemInputAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_AttributeValue(
          (0, smithy_client_1.expectUnion)(value),
          context
        );
        return acc;
      }, {});
    };
    var de_PutItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_2) => de_AttributeMap(_2, context),
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        ItemCollectionMetrics: (_2) => de_ItemCollectionMetrics(_2, context),
      });
    };
    var de_PutRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Item: (_2) => de_PutItemInputAttributeMap(_2, context),
      });
    };
    var de_QueryOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        Count: smithy_client_1.expectInt32,
        Items: (_2) => de_ItemList(_2, context),
        LastEvaluatedKey: (_2) => de_Key(_2, context),
        ScannedCount: smithy_client_1.expectInt32,
      });
    };
    var de_ReplicaAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: (_2) =>
          de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(_2, context),
        RegionName: smithy_client_1.expectString,
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ReplicaStatus: smithy_client_1.expectString,
      });
    };
    var de_ReplicaAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaAutoScalingDescription(entry, context);
        });
      return retVal;
    };
    var de_ReplicaDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: smithy_client_1._json,
        KMSMasterKeyId: smithy_client_1.expectString,
        ProvisionedThroughputOverride: smithy_client_1._json,
        RegionName: smithy_client_1.expectString,
        ReplicaInaccessibleDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        ReplicaStatus: smithy_client_1.expectString,
        ReplicaStatusDescription: smithy_client_1.expectString,
        ReplicaStatusPercentProgress: smithy_client_1.expectString,
        ReplicaTableClassSummary: (_2) => de_TableClassSummary(_2, context),
      });
    };
    var de_ReplicaDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaDescription(entry, context);
        });
      return retVal;
    };
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescription = (
      output,
      context
    ) => {
      return (0, smithy_client_1.take)(output, {
        IndexName: smithy_client_1.expectString,
        IndexStatus: smithy_client_1.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ProvisionedWriteCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
      });
    };
    var de_ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (
      output,
      context
    ) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaGlobalSecondaryIndexAutoScalingDescription(
            entry,
            context
          );
        });
      return retVal;
    };
    var de_ReplicaGlobalSecondaryIndexSettingsDescription = (
      output,
      context
    ) => {
      return (0, smithy_client_1.take)(output, {
        IndexName: smithy_client_1.expectString,
        IndexStatus: smithy_client_1.expectString,
        ProvisionedReadCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ProvisionedReadCapacityUnits: smithy_client_1.expectLong,
        ProvisionedWriteCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ProvisionedWriteCapacityUnits: smithy_client_1.expectLong,
      });
    };
    var de_ReplicaGlobalSecondaryIndexSettingsDescriptionList = (
      output,
      context
    ) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaGlobalSecondaryIndexSettingsDescription(
            entry,
            context
          );
        });
      return retVal;
    };
    var de_ReplicaSettingsDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        RegionName: smithy_client_1.expectString,
        ReplicaBillingModeSummary: (_2) => de_BillingModeSummary(_2, context),
        ReplicaGlobalSecondaryIndexSettings: (_2) =>
          de_ReplicaGlobalSecondaryIndexSettingsDescriptionList(_2, context),
        ReplicaProvisionedReadCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ReplicaProvisionedReadCapacityUnits: smithy_client_1.expectLong,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: (_2) =>
          de_AutoScalingSettingsDescription(_2, context),
        ReplicaProvisionedWriteCapacityUnits: smithy_client_1.expectLong,
        ReplicaStatus: smithy_client_1.expectString,
        ReplicaTableClassSummary: (_2) => de_TableClassSummary(_2, context),
      });
    };
    var de_ReplicaSettingsDescriptionList = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_ReplicaSettingsDescription(entry, context);
        });
      return retVal;
    };
    var de_RestoreSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        RestoreDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        RestoreInProgress: smithy_client_1.expectBoolean,
        SourceBackupArn: smithy_client_1.expectString,
        SourceTableArn: smithy_client_1.expectString,
      });
    };
    var de_RestoreTableFromBackupOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_RestoreTableToPointInTimeOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_ScanOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        Count: smithy_client_1.expectInt32,
        Items: (_2) => de_ItemList(_2, context),
        LastEvaluatedKey: (_2) => de_Key(_2, context),
        ScannedCount: smithy_client_1.expectInt32,
      });
    };
    var de_SecondaryIndexesCapacityMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = de_Capacity(value, context);
        return acc;
      }, {});
    };
    var de_SourceTableDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        BillingMode: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        ProvisionedThroughput: smithy_client_1._json,
        TableArn: smithy_client_1.expectString,
        TableCreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableSizeBytes: smithy_client_1.expectLong,
      });
    };
    var de_SourceTableFeatureDetails = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalSecondaryIndexes: smithy_client_1._json,
        LocalSecondaryIndexes: smithy_client_1._json,
        SSEDescription: (_2) => de_SSEDescription(_2, context),
        StreamDescription: smithy_client_1._json,
        TimeToLiveDescription: smithy_client_1._json,
      });
    };
    var de_SSEDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        InaccessibleEncryptionDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        KMSMasterKeyArn: smithy_client_1.expectString,
        SSEType: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
      });
    };
    var de_TableAutoScalingDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Replicas: (_2) => de_ReplicaAutoScalingDescriptionList(_2, context),
        TableName: smithy_client_1.expectString,
        TableStatus: smithy_client_1.expectString,
      });
    };
    var de_TableClassSummary = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        LastUpdateDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        TableClass: smithy_client_1.expectString,
      });
    };
    var de_TableDescription = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ArchivalSummary: (_2) => de_ArchivalSummary(_2, context),
        AttributeDefinitions: smithy_client_1._json,
        BillingModeSummary: (_2) => de_BillingModeSummary(_2, context),
        CreationDateTime: (_2) =>
          (0, smithy_client_1.expectNonNull)(
            (0, smithy_client_1.parseEpochTimestamp)(
              (0, smithy_client_1.expectNumber)(_2)
            )
          ),
        DeletionProtectionEnabled: smithy_client_1.expectBoolean,
        GlobalSecondaryIndexes: (_2) =>
          de_GlobalSecondaryIndexDescriptionList(_2, context),
        GlobalTableVersion: smithy_client_1.expectString,
        ItemCount: smithy_client_1.expectLong,
        KeySchema: smithy_client_1._json,
        LatestStreamArn: smithy_client_1.expectString,
        LatestStreamLabel: smithy_client_1.expectString,
        LocalSecondaryIndexes: smithy_client_1._json,
        ProvisionedThroughput: (_2) =>
          de_ProvisionedThroughputDescription(_2, context),
        Replicas: (_2) => de_ReplicaDescriptionList(_2, context),
        RestoreSummary: (_2) => de_RestoreSummary(_2, context),
        SSEDescription: (_2) => de_SSEDescription(_2, context),
        StreamSpecification: smithy_client_1._json,
        TableArn: smithy_client_1.expectString,
        TableClassSummary: (_2) => de_TableClassSummary(_2, context),
        TableId: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
        TableSizeBytes: smithy_client_1.expectLong,
        TableStatus: smithy_client_1.expectString,
      });
    };
    var de_TransactGetItemsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        Responses: (_2) => de_ItemResponseList(_2, context),
      });
    };
    var de_TransactionCanceledException = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        CancellationReasons: (_2) => de_CancellationReasonList(_2, context),
        Message: smithy_client_1.expectString,
      });
    };
    var de_TransactWriteItemsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ConsumedCapacity: (_2) => de_ConsumedCapacityMultiple(_2, context),
        ItemCollectionMetrics: (_2) =>
          de_ItemCollectionMetricsPerTable(_2, context),
      });
    };
    var de_UpdateContinuousBackupsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        ContinuousBackupsDescription: (_2) =>
          de_ContinuousBackupsDescription(_2, context),
      });
    };
    var de_UpdateGlobalTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableDescription: (_2) => de_GlobalTableDescription(_2, context),
      });
    };
    var de_UpdateGlobalTableSettingsOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        GlobalTableName: smithy_client_1.expectString,
        ReplicaSettings: (_2) => de_ReplicaSettingsDescriptionList(_2, context),
      });
    };
    var de_UpdateItemOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        Attributes: (_2) => de_AttributeMap(_2, context),
        ConsumedCapacity: (_2) => de_ConsumedCapacity(_2, context),
        ItemCollectionMetrics: (_2) => de_ItemCollectionMetrics(_2, context),
      });
    };
    var de_UpdateTableOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableDescription: (_2) => de_TableDescription(_2, context),
      });
    };
    var de_UpdateTableReplicaAutoScalingOutput = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        TableAutoScalingDescription: (_2) =>
          de_TableAutoScalingDescription(_2, context),
      });
    };
    var de_WriteRequest = (output, context) => {
      return (0, smithy_client_1.take)(output, {
        DeleteRequest: (_2) => de_DeleteRequest(_2, context),
        PutRequest: (_2) => de_PutRequest(_2, context),
      });
    };
    var de_WriteRequests = (output, context) => {
      const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
          return de_WriteRequest(entry, context);
        });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId:
        output.headers['x-amzn-requestid'] ??
        output.headers['x-amzn-request-id'] ??
        output.headers['x-amz-request-id'],
      extendedRequestId: output.headers['x-amz-id-2'],
      cfId: output.headers['x-amz-cf-id'],
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return (
        context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
      );
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) =>
        context.utf8Encoder(body)
      );
    var throwDefaultError = (0, smithy_client_1.withBaseException)(
      DynamoDBServiceException_1.DynamoDBServiceException
    );
    var buildHttpRpcRequest = async (
      context,
      headers,
      path,
      resolvedHostname,
      body
    ) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: 'POST',
        path: basePath.endsWith('/')
          ? basePath.slice(0, -1) + path
          : basePath + path,
        headers,
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    function sharedHeaders(operation) {
      return {
        'content-type': 'application/x-amz-json-1.0',
        'x-amz-target': `DynamoDB_20120810.${operation}`,
      };
    }
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          return JSON.parse(encoded);
        }
        return {};
      });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) =>
        Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(',') >= 0) {
          cleanValue = cleanValue.split(',')[0];
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data['__type'] !== void 0) {
        return sanitizeErrorCode(data['__type']);
      }
    };
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchExecuteStatementCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchExecuteStatementCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            BatchExecuteStatementCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchExecuteStatementCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchExecuteStatementCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchExecuteStatementCommand)(
          output,
          context
        );
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js
var require_BatchGetItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchGetItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchGetItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            BatchGetItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchGetItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchGetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchGetItemCommand)(output, context);
      }
    };
    exports.BatchGetItemCommand = BatchGetItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js
var require_BatchWriteItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchWriteItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchWriteItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            BatchWriteItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'BatchWriteItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_BatchWriteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_BatchWriteItemCommand)(output, context);
      }
    };
    exports.BatchWriteItemCommand = BatchWriteItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js
var require_CreateBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateBackupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateBackupCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            CreateBackupCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateBackupCommand)(output, context);
      }
    };
    exports.CreateBackupCommand = CreateBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js
var require_CreateGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateGlobalTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateGlobalTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            CreateGlobalTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateGlobalTableCommand)(output, context);
      }
    };
    exports.CreateGlobalTableCommand = CreateGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js
var require_CreateTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            CreateTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'CreateTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_CreateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_CreateTableCommand)(output, context);
      }
    };
    exports.CreateTableCommand = CreateTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js
var require_DeleteBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteBackupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteBackupCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DeleteBackupCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteBackupCommand)(output, context);
      }
    };
    exports.DeleteBackupCommand = DeleteBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js
var require_DeleteItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DeleteItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteItemCommand)(output, context);
      }
    };
    exports.DeleteItemCommand = DeleteItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js
var require_DeleteTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DeleteTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DeleteTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DeleteTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DeleteTableCommand)(output, context);
      }
    };
    exports.DeleteTableCommand = DeleteTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js
var require_DescribeBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeBackupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeBackupCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeBackupCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeBackupCommand)(output, context);
      }
    };
    exports.DescribeBackupCommand = DescribeBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js
var require_DescribeContinuousBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeContinuousBackupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContinuousBackupsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeContinuousBackupsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeContinuousBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeContinuousBackupsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeContinuousBackupsCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeContinuousBackupsCommand = DescribeContinuousBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js
var require_DescribeContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeContributorInsightsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContributorInsightsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeContributorInsightsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeContributorInsightsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeContributorInsightsCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeContributorInsightsCommand =
      DescribeContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js
var require_DescribeEndpointsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeEndpointsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeEndpointsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeEndpointsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeEndpointsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeEndpointsCommand)(output, context);
      }
    };
    exports.DescribeEndpointsCommand = DescribeEndpointsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js
var require_DescribeExportCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeExportCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeExportCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeExportCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeExportCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeExportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeExportCommand)(output, context);
      }
    };
    exports.DescribeExportCommand = DescribeExportCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js
var require_DescribeGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeGlobalTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeGlobalTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeGlobalTableCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeGlobalTableCommand = DescribeGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js
var require_DescribeGlobalTableSettingsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeGlobalTableSettingsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeGlobalTableSettingsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeGlobalTableSettingsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeGlobalTableSettingsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeGlobalTableSettingsCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeGlobalTableSettingsCommand =
      DescribeGlobalTableSettingsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeImportCommand.js
var require_DescribeImportCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeImportCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeImportCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeImportCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeImportCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeImportCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeImportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeImportCommand)(output, context);
      }
    };
    exports.DescribeImportCommand = DescribeImportCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js
var require_DescribeKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeKinesisStreamingDestinationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeKinesisStreamingDestinationCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeKinesisStreamingDestinationCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeKinesisStreamingDestinationCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeKinesisStreamingDestinationCommand =
      DescribeKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js
var require_DescribeLimitsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeLimitsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeLimitsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeLimitsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeLimitsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeLimitsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeLimitsCommand)(output, context);
      }
    };
    exports.DescribeLimitsCommand = DescribeLimitsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js
var require_DescribeTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTableCommand)(output, context);
      }
    };
    exports.DescribeTableCommand = DescribeTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js
var require_DescribeTableReplicaAutoScalingCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTableReplicaAutoScalingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeTableReplicaAutoScalingCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTableReplicaAutoScalingCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTableReplicaAutoScalingCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTableReplicaAutoScalingCommand)(
          output,
          context
        );
      }
    };
    exports.DescribeTableReplicaAutoScalingCommand =
      DescribeTableReplicaAutoScalingCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js
var require_DescribeTimeToLiveCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DescribeTimeToLiveCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTimeToLiveCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DescribeTimeToLiveCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DescribeTimeToLiveCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DescribeTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DescribeTimeToLiveCommand)(output, context);
      }
    };
    exports.DescribeTimeToLiveCommand = DescribeTimeToLiveCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js
var require_DisableKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DisableKinesisStreamingDestinationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DisableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DisableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'DisableKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_DisableKinesisStreamingDestinationCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_DisableKinesisStreamingDestinationCommand)(
          output,
          context
        );
      }
    };
    exports.DisableKinesisStreamingDestinationCommand =
      DisableKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js
var require_EnableKinesisStreamingDestinationCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EnableKinesisStreamingDestinationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var EnableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            EnableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'EnableKinesisStreamingDestinationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_EnableKinesisStreamingDestinationCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_EnableKinesisStreamingDestinationCommand)(
          output,
          context
        );
      }
    };
    exports.EnableKinesisStreamingDestinationCommand =
      EnableKinesisStreamingDestinationCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteStatementCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteStatementCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ExecuteStatementCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExecuteStatementCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExecuteStatementCommand)(output, context);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteTransactionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteTransactionCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ExecuteTransactionCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExecuteTransactionCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExecuteTransactionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExecuteTransactionCommand)(output, context);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js
var require_ExportTableToPointInTimeCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExportTableToPointInTimeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExportTableToPointInTimeCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ExportTableToPointInTimeCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ExportTableToPointInTimeCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ExportTableToPointInTimeCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ExportTableToPointInTimeCommand)(
          output,
          context
        );
      }
    };
    exports.ExportTableToPointInTimeCommand = ExportTableToPointInTimeCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js
var require_GetItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var GetItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'GetItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_GetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_GetItemCommand)(output, context);
      }
    };
    exports.GetItemCommand = GetItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ImportTableCommand.js
var require_ImportTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ImportTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ImportTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ImportTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ImportTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ImportTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ImportTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ImportTableCommand)(output, context);
      }
    };
    exports.ImportTableCommand = ImportTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js
var require_ListBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListBackupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListBackupsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListBackupsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListBackupsCommand)(output, context);
      }
    };
    exports.ListBackupsCommand = ListBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js
var require_ListContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListContributorInsightsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListContributorInsightsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListContributorInsightsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListContributorInsightsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListContributorInsightsCommand)(
          output,
          context
        );
      }
    };
    exports.ListContributorInsightsCommand = ListContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js
var require_ListExportsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListExportsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListExportsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListExportsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListExportsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListExportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListExportsCommand)(output, context);
      }
    };
    exports.ListExportsCommand = ListExportsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js
var require_ListGlobalTablesCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListGlobalTablesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListGlobalTablesCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListGlobalTablesCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListGlobalTablesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListGlobalTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListGlobalTablesCommand)(output, context);
      }
    };
    exports.ListGlobalTablesCommand = ListGlobalTablesCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListImportsCommand.js
var require_ListImportsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListImportsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListImportsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListImportsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListImportsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListImportsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListImportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListImportsCommand)(output, context);
      }
    };
    exports.ListImportsCommand = ListImportsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js
var require_ListTablesCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListTablesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTablesCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListTablesCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListTablesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListTablesCommand)(output, context);
      }
    };
    exports.ListTablesCommand = ListTablesCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js
var require_ListTagsOfResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListTagsOfResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTagsOfResourceCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListTagsOfResourceCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ListTagsOfResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ListTagsOfResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ListTagsOfResourceCommand)(output, context);
      }
    };
    exports.ListTagsOfResourceCommand = ListTagsOfResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js
var require_PutItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.PutItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var PutItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            PutItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'PutItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_PutItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_PutItemCommand)(output, context);
      }
    };
    exports.PutItemCommand = PutItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.QueryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var QueryCommand2 = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            QueryCommand2.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'QueryCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_QueryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_QueryCommand)(output, context);
      }
    };
    exports.QueryCommand = QueryCommand2;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js
var require_RestoreTableFromBackupCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RestoreTableFromBackupCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableFromBackupCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            RestoreTableFromBackupCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'RestoreTableFromBackupCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_RestoreTableFromBackupCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_RestoreTableFromBackupCommand)(
          output,
          context
        );
      }
    };
    exports.RestoreTableFromBackupCommand = RestoreTableFromBackupCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js
var require_RestoreTableToPointInTimeCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RestoreTableToPointInTimeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableToPointInTimeCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            RestoreTableToPointInTimeCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'RestoreTableToPointInTimeCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_RestoreTableToPointInTimeCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_RestoreTableToPointInTimeCommand)(
          output,
          context
        );
      }
    };
    exports.RestoreTableToPointInTimeCommand = RestoreTableToPointInTimeCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ScanCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ScanCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ScanCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'ScanCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_ScanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_ScanCommand)(output, context);
      }
    };
    exports.ScanCommand = ScanCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TagResourceCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            TagResourceCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TagResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js
var require_TransactGetItemsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactGetItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactGetItemsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            TransactGetItemsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TransactGetItemsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TransactGetItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TransactGetItemsCommand)(output, context);
      }
    };
    exports.TransactGetItemsCommand = TransactGetItemsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js
var require_TransactWriteItemsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactWriteItemsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactWriteItemsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            TransactWriteItemsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'TransactWriteItemsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_TransactWriteItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_TransactWriteItemsCommand)(output, context);
      }
    };
    exports.TransactWriteItemsCommand = TransactWriteItemsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UntagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UntagResourceCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UntagResourceCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js
var require_UpdateContinuousBackupsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateContinuousBackupsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContinuousBackupsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateContinuousBackupsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateContinuousBackupsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateContinuousBackupsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateContinuousBackupsCommand)(
          output,
          context
        );
      }
    };
    exports.UpdateContinuousBackupsCommand = UpdateContinuousBackupsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js
var require_UpdateContributorInsightsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateContributorInsightsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContributorInsightsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateContributorInsightsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateContributorInsightsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateContributorInsightsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateContributorInsightsCommand)(
          output,
          context
        );
      }
    };
    exports.UpdateContributorInsightsCommand = UpdateContributorInsightsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js
var require_UpdateGlobalTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateGlobalTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateGlobalTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateGlobalTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateGlobalTableCommand)(output, context);
      }
    };
    exports.UpdateGlobalTableCommand = UpdateGlobalTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js
var require_UpdateGlobalTableSettingsCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateGlobalTableSettingsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateGlobalTableSettingsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateGlobalTableSettingsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateGlobalTableSettingsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateGlobalTableSettingsCommand)(
          output,
          context
        );
      }
    };
    exports.UpdateGlobalTableSettingsCommand = UpdateGlobalTableSettingsCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js
var require_UpdateItemCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateItemCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateItemCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateItemCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateItemCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateItemCommand)(output, context);
      }
    };
    exports.UpdateItemCommand = UpdateItemCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js
var require_UpdateTableCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTableCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateTableCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTableCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTableCommand)(output, context);
      }
    };
    exports.UpdateTableCommand = UpdateTableCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js
var require_UpdateTableReplicaAutoScalingCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTableReplicaAutoScalingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateTableReplicaAutoScalingCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTableReplicaAutoScalingCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTableReplicaAutoScalingCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTableReplicaAutoScalingCommand)(
          output,
          context
        );
      }
    };
    exports.UpdateTableReplicaAutoScalingCommand =
      UpdateTableReplicaAutoScalingCommand;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js
var require_UpdateTimeToLiveCommand = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateTimeToLiveCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTimeToLiveCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            UpdateTimeToLiveCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'DynamoDBClient';
        const commandName = 'UpdateTimeToLiveCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.se_UpdateTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.de_UpdateTimeToLiveCommand)(output, context);
      }
    };
    exports.UpdateTimeToLiveCommand = UpdateTimeToLiveCommand;
  },
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  'node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function (SelectorType2) {
      SelectorType2['ENV'] = 'env';
      SelectorType2['CONFIG'] = 'shared config entry';
    })((SelectorType = exports.SelectorType || (exports.SelectorType = {})));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj)) return void 0;
      if (obj[key] === 'true') return true;
      if (obj[key] === 'false') return false;
      throw new Error(
        `Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`
      );
    };
    exports.booleanSelector = booleanSelector;
  },
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  'node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports);
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_DUALSTACK_ENDPOINT =
      exports.CONFIG_USE_DUALSTACK_ENDPOINT =
      exports.ENV_USE_DUALSTACK_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs9();
    exports.ENV_USE_DUALSTACK_ENDPOINT = 'AWS_USE_DUALSTACK_ENDPOINT';
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = 'use_dualstack_endpoint';
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) =>
        (0, util_config_provider_1.booleanSelector)(
          env,
          exports.ENV_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_DUALSTACK_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS =
      exports.DEFAULT_USE_FIPS_ENDPOINT =
      exports.CONFIG_USE_FIPS_ENDPOINT =
      exports.ENV_USE_FIPS_ENDPOINT =
        void 0;
    var util_config_provider_1 = require_dist_cjs9();
    exports.ENV_USE_FIPS_ENDPOINT = 'AWS_USE_FIPS_ENDPOINT';
    exports.CONFIG_USE_FIPS_ENDPOINT = 'use_fips_endpoint';
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) =>
        (0, util_config_provider_1.booleanSelector)(
          env,
          exports.ENV_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.ENV
        ),
      configFileSelector: (profile) =>
        (0, util_config_provider_1.booleanSelector)(
          profile,
          exports.CONFIG_USE_FIPS_ENDPOINT,
          util_config_provider_1.SelectorType.CONFIG
        ),
      default: false,
    };
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(
          typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
        ),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(
          (_b = input.useDualstackEndpoint) !== null && _b !== void 0
            ? _b
            : false
        ),
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(
        /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/
      );
      if (!dnsHostRegex.test(region)) {
        throw new Error('Invalid region in client config');
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } =
        (_a = await input.regionInfoProvider(region, {
          useDualstackEndpoint,
          useFipsEndpoint,
        })) !== null && _a !== void 0
          ? _a
          : {};
      if (!hostname) {
        throw new Error('Cannot resolve hostname from client config');
      }
      return input.urlParser(`${tls ? 'https:' : 'http:'}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(
        (_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false
      );
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint
          ? (0, util_middleware_1.normalizeProvider)(
              typeof endpoint === 'string' ? urlParser(endpoint) : endpoint
            )
          : () =>
              (0, getEndpointFromRegion_1.getEndpointFromRegion)({
                ...input,
                useDualstackEndpoint,
                useFipsEndpoint,
              }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint,
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(
      require_NodeUseDualstackEndpointConfigOptions(),
      exports
    );
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS =
      exports.NODE_REGION_CONFIG_OPTIONS =
      exports.REGION_INI_NAME =
      exports.REGION_ENV_NAME =
        void 0;
    exports.REGION_ENV_NAME = 'AWS_REGION';
    exports.REGION_INI_NAME = 'region';
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error('Region is missing');
      },
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: 'credentials',
    };
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) =>
      typeof region === 'string' &&
      (region.startsWith('fips-') || region.endsWith('-fips'));
    exports.isFipsRegion = isFipsRegion;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) =>
      (0, isFipsRegion_1.isFipsRegion)(region)
        ? ['fips-aws-global', 'aws-fips'].includes(region)
          ? 'us-east-1'
          : region.replace(/fips-(dkr-|prod-)?|-fips/, '')
        : region;
    exports.getRealRegion = getRealRegion;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error('Region is missing');
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === 'string') {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion =
            typeof region === 'string' ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== 'function'
            ? Promise.resolve(!!useFipsEndpoint)
            : useFipsEndpoint();
        },
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (
      variants = [],
      { useFipsEndpoint, useDualstackEndpoint }
    ) => {
      var _a;
      return (_a = variants.find(
        ({ tags }) =>
          useFipsEndpoint === tags.includes('fips') &&
          useDualstackEndpoint === tags.includes('dualstack')
      )) === null || _a === void 0
        ? void 0
        : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (
      resolvedRegion,
      { regionHostname, partitionHostname }
    ) =>
      regionHostname
        ? regionHostname
        : partitionHostname
        ? partitionHostname.replace('{region}', resolvedRegion)
        : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) =>
        partitionHash[key].regions.includes(region)
      )) !== null && _a !== void 0
        ? _a
        : 'aws';
    };
    exports.getResolvedPartition = getResolvedPartition;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (
      hostname,
      { signingRegion, regionRegex, useFipsEndpoint }
    ) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex
          .replace('\\\\', '\\')
          .replace(/^\^/g, '\\.')
          .replace(/\$$/g, '\\.');
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (
      region,
      {
        useFipsEndpoint = false,
        useDualstackEndpoint = false,
        signingService,
        regionHash,
        partitionHash,
      }
    ) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(
        region,
        { partitionHash }
      );
      const resolvedRegion =
        region in regionHash
          ? region
          : (_b =
              (_a = partitionHash[partition]) === null || _a === void 0
                ? void 0
                : _a.endpoint) !== null && _b !== void 0
          ? _b
          : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0,
      getHostnameFromVariants_1.getHostnameFromVariants)(
        (_c = regionHash[resolvedRegion]) === null || _c === void 0
          ? void 0
          : _c.variants,
        hostnameOptions
      );
      const partitionHostname = (0,
      getHostnameFromVariants_1.getHostnameFromVariants)(
        (_d = partitionHash[partition]) === null || _d === void 0
          ? void 0
          : _d.variants,
        hostnameOptions
      );
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(
        resolvedRegion,
        { regionHostname, partitionHostname }
      );
      if (hostname === void 0) {
        throw new Error(
          `Endpoint resolution failed for: ${{
            resolvedRegion,
            useFipsEndpoint,
            useDualstackEndpoint,
          }}`
        );
      }
      const signingRegion = (0,
      getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion:
          (_e = regionHash[resolvedRegion]) === null || _e === void 0
            ? void 0
            : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint,
      });
      return {
        partition,
        signingService,
        hostname,
        ...(signingRegion && { signingRegion }),
        ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0
          ? void 0
          : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService,
        }),
      };
    };
    exports.getRegionInfo = getRegionInfo;
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  },
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  'node_modules/@aws-sdk/config-resolver/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  },
});

// node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  'node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getContentLengthPlugin =
      exports.contentLengthMiddlewareOptions =
      exports.contentLengthMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var CONTENT_LENGTH_HEADER = 'content-length';
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (
            body &&
            Object.keys(headers)
              .map((str) => str.toLowerCase())
              .indexOf(CONTENT_LENGTH_HEADER) === -1
          ) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length),
              };
            } catch (error) {}
          }
        }
        return next({
          ...args,
          request,
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: 'build',
      tags: ['SET_CONTENT_LENGTH', 'CONTENT_LENGTH'],
      name: 'contentLengthMiddleware',
      override: true,
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          contentLengthMiddleware(options.bodyLengthChecker),
          exports.contentLengthMiddlewareOptions
        );
      },
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js
var require_configurations = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = void 0;
    var ENV_ENDPOINT_DISCOVERY = [
      'AWS_ENABLE_ENDPOINT_DISCOVERY',
      'AWS_ENDPOINT_DISCOVERY_ENABLED',
    ];
    var CONFIG_ENDPOINT_DISCOVERY = 'endpoint_discovery_enabled';
    var isFalsy = (value) => ['false', '0'].indexOf(value) >= 0;
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
          const envKey = ENV_ENDPOINT_DISCOVERY[i];
          if (envKey in env) {
            const value = env[envKey];
            if (value === '') {
              throw Error(
                `Environment variable ${envKey} can't be empty of undefined, got "${value}"`
              );
            }
            return !isFalsy(value);
          }
        }
      },
      configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
          const value = profile[CONFIG_ENDPOINT_DISCOVERY];
          if (value === void 0) {
            throw Error(
              `Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`
            );
          }
          return !isFalsy(value);
        }
      },
      default: void 0,
    };
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js
var require_getCacheKey = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCacheKey = void 0;
    var getCacheKey = async (commandName, config, options) => {
      const { accessKeyId } = await config.credentials();
      const { identifiers } = options;
      return JSON.stringify({
        ...(accessKeyId && { accessKeyId }),
        ...(identifiers && {
          commandName,
          identifiers: Object.entries(identifiers)
            .sort()
            .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}),
        }),
      });
    };
    exports.getCacheKey = getCacheKey;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js
var require_updateDiscoveredEndpointInCache = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.updateDiscoveredEndpointInCache = void 0;
    var requestQueue = {};
    var updateDiscoveredEndpointInCache = async (config, options) =>
      new Promise((resolve, reject) => {
        const { endpointCache } = config;
        const { cacheKey, commandName, identifiers } = options;
        const endpoints = endpointCache.get(cacheKey);
        if (
          endpoints &&
          endpoints.length === 1 &&
          endpoints[0].Address === ''
        ) {
          if (options.isDiscoveredEndpointRequired) {
            if (!requestQueue[cacheKey]) requestQueue[cacheKey] = [];
            requestQueue[cacheKey].push({ resolve, reject });
          } else {
            resolve();
          }
        } else if (endpoints && endpoints.length > 0) {
          resolve();
        } else {
          const placeholderEndpoints = [
            { Address: '', CachePeriodInMinutes: 1 },
          ];
          endpointCache.set(cacheKey, placeholderEndpoints);
          const command = new options.endpointDiscoveryCommandCtor({
            Operation: commandName.slice(0, -7),
            Identifiers: identifiers,
          });
          const handler2 = command.resolveMiddleware(
            options.clientStack,
            config,
            options.options
          );
          handler2(command)
            .then((result) => {
              endpointCache.set(cacheKey, result.output.Endpoints);
              if (requestQueue[cacheKey]) {
                requestQueue[cacheKey].forEach(({ resolve: resolve2 }) => {
                  resolve2();
                });
                delete requestQueue[cacheKey];
              }
              resolve();
            })
            .catch((error) => {
              endpointCache.delete(cacheKey);
              const errorToThrow = Object.assign(
                new Error(
                  `The operation to discover endpoint failed. Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`
                ),
                { reason: error }
              );
              if (requestQueue[cacheKey]) {
                requestQueue[cacheKey].forEach(({ reject: reject2 }) => {
                  reject2(errorToThrow);
                });
                delete requestQueue[cacheKey];
              }
              if (options.isDiscoveredEndpointRequired) {
                reject(errorToThrow);
              } else {
                endpointCache.set(cacheKey, placeholderEndpoints);
                resolve();
              }
            });
        }
      });
    exports.updateDiscoveredEndpointInCache = updateDiscoveredEndpointInCache;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js
var require_endpointDiscoveryMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.endpointDiscoveryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var getCacheKey_1 = require_getCacheKey();
    var updateDiscoveredEndpointInCache_1 =
      require_updateDiscoveredEndpointInCache();
    var endpointDiscoveryMiddleware =
      (config, middlewareConfig) => (next, context) => async (args) => {
        if (config.isCustomEndpoint) {
          if (config.isClientEndpointDiscoveryEnabled) {
            throw new Error(
              `Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`
            );
          }
          return next(args);
        }
        const { endpointDiscoveryCommandCtor } = config;
        const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
        const { clientName, commandName } = context;
        const isEndpointDiscoveryEnabled =
          await config.endpointDiscoveryEnabled();
        const cacheKey = await (0, getCacheKey_1.getCacheKey)(
          commandName,
          config,
          { identifiers }
        );
        if (isDiscoveredEndpointRequired) {
          if (isEndpointDiscoveryEnabled === false) {
            throw new Error(
              `Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it. Please check your configurations.`
            );
          }
          await (0,
          updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(
            config,
            {
              ...middlewareConfig,
              commandName,
              cacheKey,
              endpointDiscoveryCommandCtor,
            }
          );
        } else if (isEndpointDiscoveryEnabled) {
          (0,
          updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(
            config,
            {
              ...middlewareConfig,
              commandName,
              cacheKey,
              endpointDiscoveryCommandCtor,
            }
          );
        }
        const { request } = args;
        if (cacheKey && protocol_http_1.HttpRequest.isInstance(request)) {
          const endpoint = config.endpointCache.getEndpoint(cacheKey);
          if (endpoint) {
            request.hostname = endpoint;
          }
        }
        return next(args);
      };
    exports.endpointDiscoveryMiddleware = endpointDiscoveryMiddleware;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js
var require_getEndpointDiscoveryPlugin = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointDiscoveryOptionalPlugin =
      exports.getEndpointDiscoveryRequiredPlugin =
      exports.getEndpointDiscoveryPlugin =
      exports.endpointDiscoveryMiddlewareOptions =
        void 0;
    var endpointDiscoveryMiddleware_1 = require_endpointDiscoveryMiddleware();
    exports.endpointDiscoveryMiddlewareOptions = {
      name: 'endpointDiscoveryMiddleware',
      step: 'build',
      tags: ['ENDPOINT_DISCOVERY'],
      override: true,
    };
    var getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(
            pluginConfig,
            middlewareConfig
          ),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryPlugin = getEndpointDiscoveryPlugin;
    var getEndpointDiscoveryRequiredPlugin = (
      pluginConfig,
      middlewareConfig
    ) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(
            pluginConfig,
            { ...middlewareConfig, isDiscoveredEndpointRequired: true }
          ),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryRequiredPlugin =
      getEndpointDiscoveryRequiredPlugin;
    var getEndpointDiscoveryOptionalPlugin = (
      pluginConfig,
      middlewareConfig
    ) => ({
      applyToStack: (commandStack) => {
        commandStack.add(
          (0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(
            pluginConfig,
            { ...middlewareConfig, isDiscoveredEndpointRequired: false }
          ),
          exports.endpointDiscoveryMiddlewareOptions
        );
      },
    });
    exports.getEndpointDiscoveryOptionalPlugin =
      getEndpointDiscoveryOptionalPlugin;
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js
var require_Endpoint = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  'node_modules/obliterator/iterator.js'(exports, module2) {
    function Iterator(next) {
      Object.defineProperty(this, '_next', {
        writable: false,
        enumerable: false,
        value: next,
      });
      this.done = false;
    }
    Iterator.prototype.next = function () {
      if (this.done) return { done: true };
      var step = this._next();
      if (step.done) this.done = true;
      return step;
    };
    if (typeof Symbol !== 'undefined')
      Iterator.prototype[Symbol.iterator] = function () {
        return this;
      };
    Iterator.of = function () {
      var args = arguments,
        l = args.length,
        i = 0;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function () {
      var iterator = new Iterator(null);
      iterator.done = true;
      return iterator;
    };
    Iterator.is = function (value) {
      if (value instanceof Iterator) return true;
      return (
        typeof value === 'object' &&
        value !== null &&
        typeof value.next === 'function'
      );
    };
    module2.exports = Iterator;
  },
});

// node_modules/obliterator/foreach.js
var require_foreach = __commonJS({
  'node_modules/obliterator/foreach.js'(exports, module2) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== 'undefined';
    var SYMBOL_SUPPORT = typeof Symbol !== 'undefined';
    function forEach(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable) throw new Error('obliterator/forEach: invalid iterable.');
      if (typeof callback !== 'function')
        throw new Error('obliterator/forEach: expecting a callback.');
      if (
        Array.isArray(iterable) ||
        (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||
        typeof iterable === 'string' ||
        iterable.toString() === '[object Arguments]'
      ) {
        for (i = 0, l = iterable.length; i < l; i++) callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === 'function') {
        iterable.forEach(callback);
        return;
      }
      if (
        SYMBOL_SUPPORT &&
        Symbol.iterator in iterable &&
        typeof iterable.next !== 'function'
      ) {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === 'function') {
        iterator = iterable;
        i = 0;
        while (((s = iterator.next()), s.done !== true)) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    }
    forEach.forEachWithNullKeys = function (iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error('obliterator/forEachWithNullKeys: invalid iterable.');
      if (typeof callback !== 'function')
        throw new Error(
          'obliterator/forEachWithNullKeys: expecting a callback.'
        );
      if (
        Array.isArray(iterable) ||
        (ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable)) ||
        typeof iterable === 'string' ||
        iterable.toString() === '[object Arguments]'
      ) {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function (value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === 'function') {
        iterable.forEach(callback);
        return;
      }
      if (
        SYMBOL_SUPPORT &&
        Symbol.iterator in iterable &&
        typeof iterable.next !== 'function'
      ) {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === 'function') {
        iterator = iterable;
        i = 0;
        while (((s = iterator.next()), s.done !== true)) {
          callback(s.value, null);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    };
    module2.exports = forEach;
  },
});

// node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  'node_modules/mnemonist/utils/typed-arrays.js'(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function (size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER) return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER) return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER) return Uint32Array;
      return Float64Array;
    };
    exports.getSignedPointerArray = function (size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER) return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER) return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER) return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function (value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128) return Int8Array;
          if (value <= 32767 && value >= -32768) return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255) return Uint8Array;
          if (value <= 65535) return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8,
    };
    exports.getMinimalRepresentation = function (array, getter) {
      var maxType = null,
        maxPriority = 0,
        p,
        t,
        v,
        i,
        l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function (value) {
      return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(value);
    };
    exports.concat = function () {
      var length = 0,
        i,
        o,
        l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function (length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++) array[i] = i;
      return array;
    };
  },
});

// node_modules/mnemonist/utils/iterables.js
var require_iterables = __commonJS({
  'node_modules/mnemonist/utils/iterables.js'(exports) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === 'number') return target.length;
      if (typeof target.size === 'number') return target.size;
      return;
    }
    function toArray(target) {
      var l = guessLength(target);
      var array = typeof l === 'number' ? new Array(l) : [];
      var i = 0;
      forEach(target, function (value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === 'number' ? typed.getPointerArray(l) : Array;
      var array = typeof l === 'number' ? new Array(l) : [];
      var indices = typeof l === 'number' ? new IndexArray(l) : [];
      var i = 0;
      forEach(target, function (value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports.isArrayLike = isArrayLike;
    exports.guessLength = guessLength;
    exports.toArray = toArray;
    exports.toArrayWithIndices = toArrayWithIndices;
  },
});

// node_modules/mnemonist/lru-cache.js
var require_lru_cache = __commonJS({
  'node_modules/mnemonist/lru-cache.js'(exports, module2) {
    var Iterator = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== 'number' || this.capacity <= 0)
        throw new Error(
          'mnemonist/lru-cache: capacity should be positive number.'
        );
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K =
        typeof Keys === 'function' ? new Keys(capacity) : new Array(capacity);
      this.V =
        typeof Values === 'function'
          ? new Values(capacity)
          : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function () {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function (pointer) {
      var oldHead = this.head;
      if (this.head === pointer) return this;
      var previous = this.backward[pointer],
        next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function (key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== 'undefined') {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function (key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== 'undefined') {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function (key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function (key) {
      var pointer = this.items[key];
      if (typeof pointer === 'undefined') return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function (key) {
      var pointer = this.items[key];
      if (typeof pointer === 'undefined') return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function (callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        values = this.V,
        forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache.prototype.keys = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var key = keys[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value: key,
        };
      });
    };
    LRUCache.prototype.values = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        values = this.V,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var value = values[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value,
        };
      });
    };
    LRUCache.prototype.entries = function () {
      var i = 0,
        l = this.size;
      var pointer = this.head,
        keys = this.K,
        values = this.V,
        forward = this.forward;
      return new Iterator(function () {
        if (i >= l) return { done: true };
        var key = keys[pointer],
          value = values[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
          done: false,
          value: [key, value],
        };
      });
    };
    if (typeof Symbol !== 'undefined')
      LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function () {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(),
        step;
      while (((step = iterator.next()), !step.done))
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, 'constructor', {
        value: LRUCache,
        enumerable: false,
      });
      return proxy;
    };
    if (typeof Symbol !== 'undefined')
      LRUCache.prototype[Symbol.for('nodejs.util.inspect.custom')] =
        LRUCache.prototype.inspect;
    LRUCache.from = function (iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== 'number')
          throw new Error(
            'mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.'
          );
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache(Keys, Values, capacity);
      forEach(iterable, function (value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUCache;
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js
var require_EndpointCache = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointCache = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lru_cache_1 = tslib_1.__importDefault(require_lru_cache());
    var EndpointCache = class {
      constructor(capacity) {
        this.cache = new lru_cache_1.default(capacity);
      }
      getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
          return void 0;
        }
        const endpoints = endpointsWithExpiry.map(
          (endpoint) => endpoint.Address
        );
        return endpoints[Math.floor(Math.random() * endpoints.length)];
      }
      get(key) {
        if (!this.has(key)) {
          return;
        }
        const value = this.cache.get(key);
        if (!value) {
          return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter(
          (endpoint) => now < endpoint.Expires
        );
        if (endpointsWithExpiry.length === 0) {
          this.delete(key);
          return void 0;
        }
        return endpointsWithExpiry;
      }
      set(key, endpoints) {
        const now = Date.now();
        this.cache.set(
          key,
          endpoints.map(({ Address, CachePeriodInMinutes }) => ({
            Address,
            Expires: now + CachePeriodInMinutes * 60 * 1e3,
          }))
        );
      }
      delete(key) {
        this.cache.set(key, []);
      }
      has(key) {
        if (!this.cache.has(key)) {
          return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
          return false;
        }
        return endpoints.length > 0;
      }
      clear() {
        this.cache.clear();
      }
    };
    exports.EndpointCache = EndpointCache;
  },
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  'node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Endpoint(), exports);
    tslib_1.__exportStar(require_EndpointCache(), exports);
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js
var require_resolveEndpointDiscoveryConfig = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpointDiscoveryConfig = void 0;
    var endpoint_cache_1 = require_dist_cjs12();
    var resolveEndpointDiscoveryConfig = (
      input,
      { endpointDiscoveryCommandCtor }
    ) => {
      var _a;
      return {
        ...input,
        endpointDiscoveryCommandCtor,
        endpointCache: new endpoint_cache_1.EndpointCache(
          (_a = input.endpointCacheSize) !== null && _a !== void 0 ? _a : 1e3
        ),
        endpointDiscoveryEnabled:
          input.endpointDiscoveryEnabled !== void 0
            ? () => Promise.resolve(input.endpointDiscoveryEnabled)
            : input.endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled:
          input.endpointDiscoveryEnabled !== void 0,
      };
    };
    exports.resolveEndpointDiscoveryConfig = resolveEndpointDiscoveryConfig;
  },
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  'node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_getEndpointDiscoveryPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointDiscoveryConfig(), exports);
  },
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  'node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHostHeaderPlugin =
      exports.hostHeaderMiddlewareOptions =
      exports.hostHeaderMiddleware =
      exports.resolveHostHeaderConfig =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = '' } = options.requestHandler.metadata || {};
      if (
        handlerProtocol.indexOf('h2') >= 0 &&
        !request.headers[':authority']
      ) {
        delete request.headers['host'];
        request.headers[':authority'] = '';
      } else if (!request.headers['host']) {
        let host = request.hostname;
        if (request.port != null) host += `:${request.port}`;
        request.headers['host'] = host;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: 'hostHeaderMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['HOST'],
      override: true,
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.hostHeaderMiddleware)(options),
          exports.hostHeaderMiddlewareOptions
        );
      },
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  },
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getLoggerPlugin =
      exports.loggerMiddlewareOptions =
      exports.loggerMiddleware =
        void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      var _a, _b;
      try {
        const response = await next(args);
        const {
          clientName,
          commandName,
          logger,
          dynamoDbDocumentClientOptions = {},
        } = context;
        const {
          overrideInputFilterSensitiveLog,
          overrideOutputFilterSensitiveLog,
        } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog =
          overrideInputFilterSensitiveLog !== null &&
          overrideInputFilterSensitiveLog !== void 0
            ? overrideInputFilterSensitiveLog
            : context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog =
          overrideOutputFilterSensitiveLog !== null &&
          overrideOutputFilterSensitiveLog !== void 0
            ? overrideOutputFilterSensitiveLog
            : context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        (_a = logger === null || logger === void 0 ? void 0 : logger.info) ===
          null || _a === void 0
          ? void 0
          : _a.call(logger, {
              clientName,
              commandName,
              input: inputFilterSensitiveLog(args.input),
              output: outputFilterSensitiveLog(outputWithoutMetadata),
              metadata: $metadata,
            });
        return response;
      } catch (error) {
        const {
          clientName,
          commandName,
          logger,
          dynamoDbDocumentClientOptions = {},
        } = context;
        const { overrideInputFilterSensitiveLog } =
          dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog =
          overrideInputFilterSensitiveLog !== null &&
          overrideInputFilterSensitiveLog !== void 0
            ? overrideInputFilterSensitiveLog
            : context.inputFilterSensitiveLog;
        (_b = logger === null || logger === void 0 ? void 0 : logger.error) ===
          null || _b === void 0
          ? void 0
          : _b.call(logger, {
              clientName,
              commandName,
              input: inputFilterSensitiveLog(args.input),
              error,
              metadata: error.$metadata,
            });
        throw error;
      }
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: 'loggerMiddleware',
      tags: ['LOGGER'],
      step: 'initialize',
      override: true,
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.loggerMiddleware)(),
          exports.loggerMiddlewareOptions
        );
      },
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  },
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  'node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  },
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  'node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRecursionDetectionPlugin =
      exports.addRecursionDetectionMiddlewareOptions =
      exports.recursionDetectionMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var TRACE_ID_HEADER_NAME = 'X-Amzn-Trace-Id';
    var ENV_LAMBDA_FUNCTION_NAME = 'AWS_LAMBDA_FUNCTION_NAME';
    var ENV_TRACE_ID = '_X_AMZN_TRACE_ID';
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (
        !protocol_http_1.HttpRequest.isInstance(request) ||
        options.runtime !== 'node' ||
        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)
      ) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === 'string' && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request,
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: 'build',
      tags: ['RECURSION_DETECTION'],
      name: 'recursionDetectionMiddleware',
      override: true,
      priority: 'low',
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.recursionDetectionMiddleware)(options),
          exports.addRecursionDetectionMiddlewareOptions
        );
      },
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DEFAULT_RETRY_MODE =
      exports.DEFAULT_MAX_ATTEMPTS =
      exports.RETRY_MODES =
        void 0;
    var RETRY_MODES;
    (function (RETRY_MODES2) {
      RETRY_MODES2['STANDARD'] = 'standard';
      RETRY_MODES2['ADAPTIVE'] = 'adaptive';
    })((RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {})));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = 'STANDARD';
  },
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  'node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES =
      exports.TRANSIENT_ERROR_STATUS_CODES =
      exports.TRANSIENT_ERROR_CODES =
      exports.THROTTLING_ERROR_CODES =
      exports.CLOCK_SKEW_ERROR_CODES =
        void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      'AuthFailure',
      'InvalidSignatureException',
      'RequestExpired',
      'RequestInTheFuture',
      'RequestTimeTooSkewed',
      'SignatureDoesNotMatch',
    ];
    exports.THROTTLING_ERROR_CODES = [
      'BandwidthLimitExceeded',
      'EC2ThrottledException',
      'LimitExceededException',
      'PriorRequestNotComplete',
      'ProvisionedThroughputExceededException',
      'RequestLimitExceeded',
      'RequestThrottled',
      'RequestThrottledException',
      'SlowDown',
      'ThrottledException',
      'Throttling',
      'ThrottlingException',
      'TooManyRequestsException',
      'TransactionInProgressException',
    ];
    exports.TRANSIENT_ERROR_CODES = [
      'AbortError',
      'TimeoutError',
      'RequestTimeout',
      'RequestTimeoutException',
    ];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'EPIPE', 'ETIMEDOUT'];
  },
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  'node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isServerError =
      exports.isTransientError =
      exports.isThrottlingError =
      exports.isClockSkewError =
      exports.isRetryableByTrait =
        void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) =>
      constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return (
        ((_a = error.$metadata) === null || _a === void 0
          ? void 0
          : _a.httpStatusCode) === 429 ||
        constants_1.THROTTLING_ERROR_CODES.includes(error.name) ||
        ((_b = error.$retryable) === null || _b === void 0
          ? void 0
          : _b.throttling) == true
      );
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return (
        constants_1.TRANSIENT_ERROR_CODES.includes(error.name) ||
        constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(
          (error === null || error === void 0 ? void 0 : error.code) || ''
        ) ||
        constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(
          ((_a = error.$metadata) === null || _a === void 0
            ? void 0
            : _a.httpStatusCode) || 0
        )
      );
    };
    exports.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (
        ((_a = error.$metadata) === null || _a === void 0
          ? void 0
          : _a.httpStatusCode) !== void 0
      ) {
        const statusCode = error.$metadata.httpStatusCode;
        if (
          500 <= statusCode &&
          statusCode <= 599 &&
          !(0, exports.isTransientError)(error)
        ) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports.isServerError = isServerError;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs17();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta =
          (_a =
            options === null || options === void 0 ? void 0 : options.beta) !==
            null && _a !== void 0
            ? _a
            : 0.7;
        this.minCapacity =
          (_b =
            options === null || options === void 0
              ? void 0
              : options.minCapacity) !== null && _b !== void 0
            ? _b
            : 1;
        this.minFillRate =
          (_c =
            options === null || options === void 0
              ? void 0
              : options.minFillRate) !== null && _c !== void 0
            ? _c
            : 0.5;
        this.scaleConstant =
          (_d =
            options === null || options === void 0
              ? void 0
              : options.scaleConstant) !== null && _d !== void 0
            ? _d
            : 0.4;
        this.smooth =
          (_e =
            options === null || options === void 0
              ? void 0
              : options.smooth) !== null && _e !== void 0
            ? _e
            : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = ((amount - this.currentCapacity) / this.fillRate) * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(
          this.maxCapacity,
          this.currentCapacity + fillAmount
        );
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled
            ? this.measuredTxRate
            : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(
          Math.pow(
            (this.lastMaxRate * (1 - this.beta)) / this.scaleConstant,
            1 / 3
          )
        );
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(
          this.scaleConstant *
            Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) +
            this.lastMaxRate
        );
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate =
            this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(
            currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth)
          );
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.REQUEST_HEADER =
      exports.INVOCATION_ID_HEADER =
      exports.NO_RETRY_INCREMENT =
      exports.TIMEOUT_RETRY_COST =
      exports.RETRY_COST =
      exports.INITIAL_RETRY_TOKENS =
      exports.THROTTLING_RETRY_DELAY_BASE =
      exports.MAXIMUM_RETRY_DELAY =
      exports.DEFAULT_RETRY_DELAY_BASE =
        void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = 'amz-sdk-invocation-id';
    exports.REQUEST_HEADER = 'amz-sdk-request';
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js
var require_defaultRetryBackoffStrategy = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(
          Math.min(
            constants_1.MAXIMUM_RETRY_DELAY,
            Math.random() * 2 ** attempts * delayBase
          )
        );
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase,
      };
    };
    exports.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js
var require_defaultRetryToken = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryToken = void 0;
    var constants_1 = require_constants3();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var getDefaultRetryToken = (
      initialRetryTokens,
      initialRetryDelay,
      initialRetryCount,
      options
    ) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const retryCost =
        (_a =
          options === null || options === void 0
            ? void 0
            : options.retryCost) !== null && _a !== void 0
          ? _a
          : constants_1.RETRY_COST;
      const timeoutRetryCost =
        (_b =
          options === null || options === void 0
            ? void 0
            : options.timeoutRetryCost) !== null && _b !== void 0
          ? _b
          : constants_1.TIMEOUT_RETRY_COST;
      const retryBackoffStrategy =
        (_c =
          options === null || options === void 0
            ? void 0
            : options.retryBackoffStrategy) !== null && _c !== void 0
          ? _c
          : (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
      let availableCapacity = initialRetryTokens;
      let retryDelay = Math.min(
        constants_1.MAXIMUM_RETRY_DELAY,
        initialRetryDelay
      );
      let lastRetryCost = void 0;
      let retryCount =
        initialRetryCount !== null && initialRetryCount !== void 0
          ? initialRetryCount
          : 0;
      const getCapacityAmount = (errorType) =>
        errorType === 'TRANSIENT' ? timeoutRetryCost : retryCost;
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => retryDelay;
      const getLastRetryCost = () => lastRetryCost;
      const hasRetryTokens = (errorType) =>
        getCapacityAmount(errorType) <= availableCapacity;
      const getRetryTokenCount = (errorInfo) => {
        const errorType = errorInfo.errorType;
        if (!hasRetryTokens(errorType)) {
          throw new Error('No retry token available');
        }
        const capacityAmount = getCapacityAmount(errorType);
        const delayBase =
          errorType === 'THROTTLING'
            ? constants_1.THROTTLING_RETRY_DELAY_BASE
            : constants_1.DEFAULT_RETRY_DELAY_BASE;
        retryBackoffStrategy.setDelayBase(delayBase);
        const delayFromErrorType =
          retryBackoffStrategy.computeNextBackoffDelay(retryCount);
        if (errorInfo.retryAfterHint) {
          const delayFromRetryAfterHint =
            errorInfo.retryAfterHint.getTime() - Date.now();
          retryDelay = Math.max(
            delayFromRetryAfterHint || 0,
            delayFromErrorType
          );
        } else {
          retryDelay = delayFromErrorType;
        }
        retryCount++;
        lastRetryCost = capacityAmount;
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (releaseAmount) => {
        availableCapacity +=
          releaseAmount !== null && releaseAmount !== void 0
            ? releaseAmount
            : constants_1.NO_RETRY_INCREMENT;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return {
        getRetryCount,
        getRetryDelay,
        getLastRetryCost,
        hasRetryTokens,
        getRetryTokenCount,
        releaseRetryTokens,
      };
    };
    exports.getDefaultRetryToken = getDefaultRetryToken;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StandardRetryStrategy = void 0;
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(
          constants_1.INITIAL_RETRY_TOKENS,
          constants_1.DEFAULT_RETRY_DELAY_BASE
        );
        this.maxAttemptsProvider = maxAttemptsProvider;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return this.retryToken;
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {
          tokenToRenew.getRetryTokenCount(errorInfo);
          return tokenToRenew;
        }
        throw new Error('No retry token available');
      }
      recordSuccess(token) {
        this.retryToken.releaseRetryTokens(token.getLastRetryCost());
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(
            `Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`
          );
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount();
        return (
          attempts < maxAttempts &&
          tokenToRenew.hasRetryTokens(errorInfo.errorType) &&
          this.isRetryableError(errorInfo.errorType)
        );
      }
      isRetryableError(errorType) {
        return errorType === 'THROTTLING' || errorType === 'TRANSIENT';
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } =
          options !== null && options !== void 0 ? options : {};
        this.rateLimiter =
          rateLimiter !== null && rateLimiter !== void 0
            ? rateLimiter
            : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy =
          new StandardRetryStrategy_1.StandardRetryStrategy(
            maxAttemptsProvider
          );
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(
          retryTokenScope
        );
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(
          tokenToRenew,
          errorInfo
        );
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/types.js
var require_types2 = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-retry/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  'node_modules/@aws-sdk/util-retry/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_constants3(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs18();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement =
        (_a =
          options === null || options === void 0
            ? void 0
            : options.noRetryIncrement) !== null && _a !== void 0
          ? _a
          : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost =
        (_b =
          options === null || options === void 0
            ? void 0
            : options.retryCost) !== null && _b !== void 0
          ? _b
          : util_retry_1.RETRY_COST;
      const timeoutRetryCost =
        (_c =
          options === null || options === void 0
            ? void 0
            : options.timeoutRetryCost) !== null && _c !== void 0
          ? _c
          : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) =>
        error.name === 'TimeoutError' ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) =>
        getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error('No retry token available');
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity +=
          capacityReleaseAmount !== null && capacityReleaseAmount !== void 0
            ? capacityReleaseAmount
            : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs18();
    var defaultDelayDecider = (delayBase, attempts) =>
      Math.floor(
        Math.min(
          util_retry_1.MAXIMUM_RETRY_DELAY,
          Math.random() * 2 ** attempts * delayBase
        )
      );
    exports.defaultDelayDecider = defaultDelayDecider;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs17();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (
        (0, service_error_classification_1.isRetryableByTrait)(error) ||
        (0, service_error_classification_1.isClockSkewError)(error) ||
        (0, service_error_classification_1.isThrottlingError)(error) ||
        (0, service_error_classification_1.isTransientError)(error)
      );
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js
var require_util = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error) return error;
      if (error instanceof Object) return Object.assign(new Error(), error);
      if (typeof error === 'string') return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports.asSdkError = asSdkError;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy2 = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs17();
    var util_retry_1 = require_dist_cjs18();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider =
          (_a =
            options === null || options === void 0
              ? void 0
              : options.retryDecider) !== null && _a !== void 0
            ? _a
            : retryDecider_1.defaultRetryDecider;
        this.delayDecider =
          (_b =
            options === null || options === void 0
              ? void 0
              : options.delayDecider) !== null && _b !== void 0
            ? _b
            : delayDecider_1.defaultDelayDecider;
        this.retryQuota =
          (_c =
            options === null || options === void 0
              ? void 0
              : options.retryQuota) !== null && _c !== void 0
            ? _c
            : (0, defaultRetryQuota_1.getDefaultRetryQuota)(
                util_retry_1.INITIAL_RETRY_TOKENS
              );
      }
      shouldRetry(error, attempts, maxAttempts) {
        return (
          attempts < maxAttempts &&
          this.retryDecider(error) &&
          this.retryQuota.hasRetryTokens(error)
        );
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${
                attempts + 1
              }; max=${maxAttempts}`;
            }
            if (
              options === null || options === void 0
                ? void 0
                : options.beforeRequest
            ) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (
              options === null || options === void 0
                ? void 0
                : options.afterRequest
            ) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider(
                (0, service_error_classification_1.isThrottlingError)(err)
                  ? util_retry_1.THROTTLING_RETRY_DELAY_BASE
                  : util_retry_1.DEFAULT_RETRY_DELAY_BASE,
                attempts
              );
              const delayFromResponse = getDelayFromRetryAfterHeader(
                err.$response
              );
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response)) return;
      const retryAfterHeaderName = Object.keys(response.headers).find(
        (key) => key.toLowerCase() === 'retry-after'
      );
      if (!retryAfterHeaderName) return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy2 = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs18();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } =
          options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter =
          rateLimiter !== null && rateLimiter !== void 0
            ? rateLimiter
            : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          },
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS =
      exports.CONFIG_RETRY_MODE =
      exports.ENV_RETRY_MODE =
      exports.resolveRetryConfig =
      exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS =
      exports.CONFIG_MAX_ATTEMPTS =
      exports.ENV_MAX_ATTEMPTS =
        void 0;
    var util_middleware_1 = require_dist_cjs6();
    var util_retry_1 = require_dist_cjs18();
    exports.ENV_MAX_ATTEMPTS = 'AWS_MAX_ATTEMPTS';
    exports.CONFIG_MAX_ATTEMPTS = 'max_attempts';
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(
            `Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`
          );
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value) return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(
            `Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`
          );
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS,
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)(
        (_a = input.maxAttempts) !== null && _a !== void 0
          ? _a
          : util_retry_1.DEFAULT_MAX_ATTEMPTS
      );
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(
            input.retryMode
          )();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        },
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = 'AWS_RETRY_MODE';
    exports.CONFIG_RETRY_MODE = 'retry_mode';
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE,
    };
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getOmitRetryHeadersPlugin =
      exports.omitRetryHeadersMiddlewareOptions =
      exports.omitRetryHeadersMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var util_retry_1 = require_dist_cjs18();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: 'omitRetryHeadersMiddleware',
      tags: ['RETRY', 'HEADERS', 'OMIT_RETRY_HEADERS'],
      relation: 'before',
      toMiddleware: 'awsAuthMiddleware',
      override: true,
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          (0, exports.omitRetryHeadersMiddleware)(),
          exports.omitRetryHeadersMiddlewareOptions
        );
      },
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRetryAfterHint =
      exports.getRetryPlugin =
      exports.retryMiddlewareOptions =
      exports.retryMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs17();
    var util_retry_1 = require_dist_cjs18();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(
          context['partition_id']
        );
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${
                attempts + 1
              }; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetyErrorInto(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(
                retryToken,
                retryErrorInfo
              );
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (
          retryStrategy === null || retryStrategy === void 0
            ? void 0
            : retryStrategy.mode
        )
          context.userAgent = [
            ...(context.userAgent || []),
            ['cfg/retry-mode', retryStrategy.mode],
          ];
        return retryStrategy.retry(next, args);
      }
    };
    exports.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) =>
      typeof retryStrategy.acquireInitialRetryToken !== 'undefined' &&
      typeof retryStrategy.refreshRetryTokenForRetry !== 'undefined' &&
      typeof retryStrategy.recordSuccess !== 'undefined';
    var getRetyErrorInto = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error),
      };
      const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return 'THROTTLING';
      if ((0, service_error_classification_1.isTransientError)(error))
        return 'TRANSIENT';
      if ((0, service_error_classification_1.isServerError)(error))
        return 'SERVER_ERROR';
      return 'CLIENT_ERROR';
    };
    exports.retryMiddlewareOptions = {
      name: 'retryMiddleware',
      tags: ['RETRY'],
      step: 'finalizeRequest',
      priority: 'high',
      override: true,
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.retryMiddleware)(options),
          exports.retryMiddlewareOptions
        );
      },
    });
    exports.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response)) return;
      const retryAfterHeaderName = Object.keys(response.headers).find(
        (key) => key.toLowerCase() === 'retry-after'
      );
      if (!retryAfterHeaderName) return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports.getRetryAfterHint = getRetryAfterHint;
  },
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  'node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports);
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = 'ProviderError';
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'CredentialsProviderError';
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = 'TokenProviderError';
        Object.setPrototypeOf(this, TokenProviderError.prototype);
      }
    };
    exports.TokenProviderError = TokenProviderError;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/chain.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(
          new ProviderError_1.ProviderError('No providers in chain')
        );
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (
            !hasResult ||
            (options === null || options === void 0
              ? void 0
              : options.forceRefresh)
          ) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (
          !hasResult ||
          (options === null || options === void 0
            ? void 0
            : options.forceRefresh)
        ) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  },
});

// node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  'node_modules/@aws-sdk/property-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_TokenProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  },
});

// node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  'node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error('Hex encoded strings must have an even number length');
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(
            `Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`
          );
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = '';
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  },
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  'node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) =>
      (typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||
      Object.prototype.toString.call(arg) === '[object ArrayBuffer]';
    exports.isArrayBuffer = isArrayBuffer;
  },
});

// node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  'node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs22();
    var buffer_1 = require('buffer');
    var fromArrayBuffer = (
      input,
      offset = 0,
      length = input.byteLength - offset
    ) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(
          `The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`
        );
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== 'string') {
        throw new TypeError(
          `The "input" argument must be of type string. Received type ${typeof input} (${input})`
        );
      }
      return encoding
        ? buffer_1.Buffer.from(input, encoding)
        : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  },
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js
var require_fromUtf8 = __commonJS({
  'node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, 'utf8');
      return new Uint8Array(
        buf.buffer,
        buf.byteOffset,
        buf.byteLength / Uint8Array.BYTES_PER_ELEMENT
      );
    };
    exports.fromUtf8 = fromUtf8;
  },
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js
var require_toUint8Array = __commonJS({
  'node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === 'string') {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(
          data.buffer,
          data.byteOffset,
          data.byteLength / Uint8Array.BYTES_PER_ELEMENT
        );
      }
      return new Uint8Array(data);
    };
    exports.toUint8Array = toUint8Array;
  },
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js
var require_toUtf8 = __commonJS({
  'node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var toUtf8 = (input) =>
      (0, util_buffer_from_1.fromArrayBuffer)(
        input.buffer,
        input.byteOffset,
        input.byteLength
      ).toString('utf8');
    exports.toUtf8 = toUtf8;
  },
});

// node_modules/@aws-sdk/util-utf8/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  'node_modules/@aws-sdk/util-utf8/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports);
    tslib_1.__exportStar(require_toUint8Array(), exports);
    tslib_1.__exportStar(require_toUtf8(), exports);
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.MAX_PRESIGNED_TTL =
      exports.KEY_TYPE_IDENTIFIER =
      exports.MAX_CACHE_SIZE =
      exports.UNSIGNED_PAYLOAD =
      exports.EVENT_ALGORITHM_IDENTIFIER =
      exports.ALGORITHM_IDENTIFIER_V4A =
      exports.ALGORITHM_IDENTIFIER =
      exports.UNSIGNABLE_PATTERNS =
      exports.SEC_HEADER_PATTERN =
      exports.PROXY_HEADER_PATTERN =
      exports.ALWAYS_UNSIGNABLE_HEADERS =
      exports.HOST_HEADER =
      exports.TOKEN_HEADER =
      exports.SHA256_HEADER =
      exports.SIGNATURE_HEADER =
      exports.GENERATED_HEADERS =
      exports.DATE_HEADER =
      exports.AMZ_DATE_HEADER =
      exports.AUTH_HEADER =
      exports.REGION_SET_PARAM =
      exports.TOKEN_QUERY_PARAM =
      exports.SIGNATURE_QUERY_PARAM =
      exports.EXPIRES_QUERY_PARAM =
      exports.SIGNED_HEADERS_QUERY_PARAM =
      exports.AMZ_DATE_QUERY_PARAM =
      exports.CREDENTIAL_QUERY_PARAM =
      exports.ALGORITHM_QUERY_PARAM =
        void 0;
    exports.ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm';
    exports.CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential';
    exports.AMZ_DATE_QUERY_PARAM = 'X-Amz-Date';
    exports.SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders';
    exports.EXPIRES_QUERY_PARAM = 'X-Amz-Expires';
    exports.SIGNATURE_QUERY_PARAM = 'X-Amz-Signature';
    exports.TOKEN_QUERY_PARAM = 'X-Amz-Security-Token';
    exports.REGION_SET_PARAM = 'X-Amz-Region-Set';
    exports.AUTH_HEADER = 'authorization';
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = 'date';
    exports.GENERATED_HEADERS = [
      exports.AUTH_HEADER,
      exports.AMZ_DATE_HEADER,
      exports.DATE_HEADER,
    ];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = 'x-amz-content-sha256';
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = 'host';
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      'cache-control': true,
      connection: true,
      expect: true,
      from: true,
      'keep-alive': true,
      'max-forwards': true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      'x-amzn-trace-id': true,
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256';
    exports.ALGORITHM_IDENTIFIER_V4A = 'AWS4-ECDSA-P256-SHA256';
    exports.EVENT_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256-PAYLOAD';
    exports.UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD';
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = 'aws4_request';
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.clearCredentialCache =
      exports.getSigningKey =
      exports.createScope =
        void 0;
    var util_hex_encoding_1 = require_dist_cjs21();
    var util_utf8_1 = require_dist_cjs24();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) =>
      `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (
      sha256Constructor,
      credentials,
      shortDate,
      region,
      service
    ) => {
      const credsHash = await hmac(
        sha256Constructor,
        credentials.secretAccessKey,
        credentials.accessKeyId
      );
      const cacheKey = `${shortDate}:${region}:${service}:${(0,
      util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [
        shortDate,
        region,
        service,
        constants_1.KEY_TYPE_IDENTIFIER,
      ]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return (signingKeyCache[cacheKey] = key);
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = (
      { headers },
      unsignableHeaders,
      signableHeaders
    ) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (
          canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS ||
          (unsignableHeaders === null || unsignableHeaders === void 0
            ? void 0
            : unsignableHeaders.has(canonicalHeaderName)) ||
          constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
          constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)
        ) {
          if (
            !signableHeaders ||
            (signableHeaders && !signableHeaders.has(canonicalHeaderName))
          ) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName]
          .trim()
          .replace(/\s+/g, ' ');
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  },
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  'node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) =>
      encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  },
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  'node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) =>
      uri.split('/').map(escape_uri_1.escapeUri).join('/');
    exports.escapeUriPath = escapeUriPath;
  },
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  'node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs25();
    var constants_1 = require_constants4();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === 'string') {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0,
          util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value
            .slice(0)
            .sort()
            .reduce(
              (encoded, value2) =>
                encoded.concat([
                  `${(0, util_uri_escape_1.escapeUri)(key)}=${(0,
                  util_uri_escape_1.escapeUri)(value2)}`,
                ]),
              []
            )
            .join('&');
        }
      }
      return keys
        .map((key) => serialized[key])
        .filter((serialized2) => serialized2)
        .join('&');
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs22();
    var util_hex_encoding_1 = require_dist_cjs21();
    var util_utf8_1 = require_dist_cjs24();
    var constants_1 = require_constants4();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
      } else if (
        typeof body === 'string' ||
        ArrayBuffer.isView(body) ||
        (0, is_array_buffer_1.isArrayBuffer)(body)
      ) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0,
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) =>
      Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param,
        };
      }, {});
    exports.cloneQuery = cloneQuery;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } =
        typeof request.clone === 'function'
          ? request.clone()
          : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (
          lname.slice(0, 6) === 'x-amz-' &&
          !((_a = options.unhoistableHeaders) === null || _a === void 0
            ? void 0
            : _a.has(lname))
        ) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query,
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = (request) => {
      request =
        typeof request.clone === 'function'
          ? request.clone()
          : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (
          constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1
        ) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) =>
      (0, exports.toDate)(time)
        .toISOString()
        .replace(/\.\d{3}Z$/, 'Z');
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === 'number') {
        return new Date(time * 1e3);
      }
      if (typeof time === 'string') {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs21();
    var util_middleware_1 = require_dist_cjs6();
    var util_utf8_1 = require_dist_cjs24();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({
        applyChecksum,
        credentials,
        region,
        service,
        sha256,
        uriEscapePath = true,
      }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum =
          typeof applyChecksum === 'boolean' ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(
          credentials
        );
      }
      async presign(originalRequest, options = {}) {
        const {
          signingDate = /* @__PURE__ */ new Date(),
          expiresIn = 3600,
          unsignableHeaders,
          unhoistableHeaders,
          signableHeaders,
          signingRegion,
          signingService,
        } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region =
          signingRegion !== null && signingRegion !== void 0
            ? signingRegion
            : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject(
            'Signature version 4 presigned URLs must have an expiration date less than one week in the future'
          );
        }
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0
            ? signingService
            : this.service
        );
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)(
          (0, prepareRequest_1.prepareRequest)(originalRequest),
          { unhoistableHeaders }
        );
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] =
            credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] =
          constants_1.ALGORITHM_IDENTIFIER;
        request.query[
          constants_1.CREDENTIAL_QUERY_PARAM
        ] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] =
          getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] =
          await this.getSignature(
            longDate,
            scope,
            this.getSigningKey(credentials, region, shortDate, signingService),
            this.createCanonicalRequest(
              request,
              canonicalHeaders,
              await (0, getPayloadHash_1.getPayloadHash)(
                originalRequest,
                this.sha256
              )
            )
          );
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === 'string') {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent(
        { headers, payload },
        {
          signingDate = /* @__PURE__ */ new Date(),
          priorSignature,
          signingRegion,
          signingService,
        }
      ) {
        const region =
          signingRegion !== null && signingRegion !== void 0
            ? signingRegion
            : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0
            ? signingService
            : this.service
        );
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)(
          { headers: {}, body: payload },
          this.sha256
        );
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(
          await hash.digest()
        );
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload,
        ].join('\n');
        return this.signString(stringToSign, {
          signingDate,
          signingRegion: region,
          signingService,
        });
      }
      async signString(
        stringToSign,
        {
          signingDate = /* @__PURE__ */ new Date(),
          signingRegion,
          signingService,
        } = {}
      ) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region =
          signingRegion !== null && signingRegion !== void 0
            ? signingRegion
            : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(
          await this.getSigningKey(
            credentials,
            region,
            shortDate,
            signingService
          )
        );
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(
        requestToSign,
        {
          signingDate = /* @__PURE__ */ new Date(),
          signableHeaders,
          unsignableHeaders,
          signingRegion,
          signingService,
        } = {}
      ) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region =
          signingRegion !== null && signingRegion !== void 0
            ? signingRegion
            : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(
          shortDate,
          region,
          signingService !== null && signingService !== void 0
            ? signingService
            : this.service
        );
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(
          request,
          this.sha256
        );
        if (
          !(0, headerUtil_1.hasHeader)(
            constants_1.SHA256_HEADER,
            request.headers
          ) &&
          this.applyChecksum
        ) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(
          request,
          unsignableHeaders,
          signableHeaders
        );
        const signature = await this.getSignature(
          longDate,
          scope,
          this.getSigningKey(credentials, region, shortDate, signingService),
          this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
        );
        request.headers[constants_1.AUTH_HEADER] = `${
          constants_1.ALGORITHM_IDENTIFIER
        } Credential=${
          credentials.accessKeyId
        }/${scope}, SignedHeaders=${getCanonicalHeaderList(
          canonicalHeaders
        )}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join('\n')}

${sortedHeaders.join(';')}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split('/')) {
            if (
              (pathSegment === null || pathSegment === void 0
                ? void 0
                : pathSegment.length) === 0
            )
              continue;
            if (pathSegment === '.') continue;
            if (pathSegment === '..') {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${
            (path === null || path === void 0 ? void 0 : path.startsWith('/'))
              ? '/'
              : ''
          }${normalizedPathSegments.join('/')}${
            normalizedPathSegments.length > 0 &&
            (path === null || path === void 0 ? void 0 : path.endsWith('/'))
              ? '/'
              : ''
          }`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, '/');
        }
        return path;
      }
      async getSignature(
        longDate,
        credentialScope,
        keyPromise,
        canonicalRequest
      ) {
        const stringToSign = await this.createStringToSign(
          longDate,
          credentialScope,
          canonicalRequest
        );
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(
          this.sha256,
          credentials,
          shortDate,
          region,
          service || this.service
        );
      }
      validateResolvedCredentials(credentials) {
        if (
          typeof credentials !== 'object' ||
          typeof credentials.accessKeyId !== 'string' ||
          typeof credentials.secretAccessKey !== 'string'
        ) {
          throw new Error('Resolved credential object is not valid');
        }
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, '');
      return {
        longDate,
        shortDate: longDate.slice(0, 8),
      };
    };
    var getCanonicalHeaderList = (headers) =>
      Object.keys(headers).sort().join(';');
  },
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  'node_modules/@aws-sdk/signature-v4/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.prepareRequest =
      exports.moveHeadersToQuery =
      exports.getPayloadHash =
      exports.getCanonicalQuery =
      exports.getCanonicalHeaders =
        void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, 'getCanonicalHeaders', {
      enumerable: true,
      get: function () {
        return getCanonicalHeaders_1.getCanonicalHeaders;
      },
    });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, 'getCanonicalQuery', {
      enumerable: true,
      get: function () {
        return getCanonicalQuery_1.getCanonicalQuery;
      },
    });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, 'getPayloadHash', {
      enumerable: true,
      get: function () {
        return getPayloadHash_1.getPayloadHash;
      },
    });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, 'moveHeadersToQuery', {
      enumerable: true,
      get: function () {
        return moveHeadersToQuery_1.moveHeadersToQuery;
      },
    });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, 'prepareRequest', {
      enumerable: true,
      get: function () {
        return prepareRequest_1.prepareRequest;
      },
    });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs20();
    var signature_v4_1 = require_dist_cjs26();
    var util_middleware_1 = require_dist_cjs6();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const {
        signingEscapePath = true,
        systemClockOffset = input.systemClockOffset || 0,
        sha256,
      } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () =>
          (0, util_middleware_1.normalizeProvider)(input.region)()
            .then(async (region) => [
              (await input.regionInfoProvider(region, {
                useFipsEndpoint: await input.useFipsEndpoint(),
                useDualstackEndpoint: await input.useDualstackEndpoint(),
              })) || {},
              region,
            ])
            .then(([regionInfo, region]) => {
              const { signingRegion, signingService } = regionInfo;
              input.signingRegion =
                input.signingRegion || signingRegion || region;
              input.signingName =
                input.signingName || signingService || input.serviceId;
              const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
              };
              const SignerCtor =
                input.signerConstructor || signature_v4_1.SignatureV4;
              return new SignerCtor(params);
            });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign(
            {},
            {
              name: 'sigv4',
              signingName: input.signingName || input.defaultSigningName,
              signingRegion: await (0, util_middleware_1.normalizeProvider)(
                input.region
              )(),
              properties: {},
            },
            authScheme
          );
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName =
            input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
          };
          const SignerCtor =
            input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials
        ? normalizeCredentialProvider(input.credentials)
        : input.credentialDefaultProvider(input);
      const {
        signingEscapePath = true,
        systemClockOffset = input.systemClockOffset || 0,
        sha256,
      } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(
          new signature_v4_1.SignatureV4({
            credentials: normalizedCreds,
            region: input.region,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath,
          })
        );
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer,
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === 'function') {
        return (0, property_provider_1.memoize)(
          credentials,
          (credentials2) =>
            credentials2.expiration !== void 0 &&
            credentials2.expiration.getTime() - Date.now() <
              CREDENTIAL_EXPIRE_WINDOW,
          (credentials2) => credentials2.expiration !== void 0
        );
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) =>
      new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) =>
      Math.abs(
        (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(
          systemClockOffset
        ).getTime() - clockTime
      ) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (
        (0, isClockSkewed_1.isClockSkewed)(
          clockTimeInMs,
          currentSystemClockOffset
        )
      ) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSigV4AuthPlugin =
      exports.getAwsAuthPlugin =
      exports.awsAuthMiddlewareOptions =
      exports.awsAuthMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) =>
      async function (args) {
        var _a, _b, _c, _d;
        if (!protocol_http_1.HttpRequest.isInstance(args.request))
          return next(args);
        const authScheme =
          (_c =
            (_b =
              (_a = context.endpointV2) === null || _a === void 0
                ? void 0
                : _a.properties) === null || _b === void 0
              ? void 0
              : _b.authSchemes) === null || _c === void 0
            ? void 0
            : _c[0];
        const multiRegionOverride =
          (authScheme === null || authScheme === void 0
            ? void 0
            : authScheme.name) === 'sigv4a'
            ? (_d =
                authScheme === null || authScheme === void 0
                  ? void 0
                  : authScheme.signingRegionSet) === null || _d === void 0
              ? void 0
              : _d.join(',')
            : void 0;
        const signer = await options.signer(authScheme);
        const output = await next({
          ...args,
          request: await signer.sign(args.request, {
            signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(
              options.systemClockOffset
            ),
            signingRegion: multiRegionOverride || context['signing_region'],
            signingService: context['signing_service'],
          }),
        }).catch((error) => {
          var _a2;
          const serverTime =
            (_a2 = error.ServerTime) !== null && _a2 !== void 0
              ? _a2
              : getDateHeader(error.$response);
          if (serverTime) {
            options.systemClockOffset = (0,
            getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
              serverTime,
              options.systemClockOffset
            );
          }
          throw error;
        });
        const dateHeader = getDateHeader(output.response);
        if (dateHeader) {
          options.systemClockOffset = (0,
          getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(
            dateHeader,
            options.systemClockOffset
          );
        }
        return output;
      };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response)
        ? (_b =
            (_a = response.headers) === null || _a === void 0
              ? void 0
              : _a.date) !== null && _b !== void 0
          ? _b
          : (_c = response.headers) === null || _c === void 0
          ? void 0
          : _c.Date
        : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: 'awsAuthMiddleware',
      tags: ['SIGNATURE', 'AWSAUTH'],
      relation: 'after',
      toMiddleware: 'retryMiddleware',
      override: true,
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(
          (0, exports.awsAuthMiddleware)(options),
          exports.awsAuthMiddlewareOptions
        );
      },
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  },
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  'node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations4 = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent:
          typeof input.customUserAgent === 'string'
            ? [[input.customUserAgent]]
            : input.customUserAgent,
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json'(
    exports,
    module2
  ) {
    module2.exports = {
      partitions: [
        {
          id: 'aws',
          outputs: {
            dnsSuffix: 'amazonaws.com',
            dualStackDnsSuffix: 'api.aws',
            name: 'aws',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$',
          regions: {
            'af-south-1': {
              description: 'Africa (Cape Town)',
            },
            'ap-east-1': {
              description: 'Asia Pacific (Hong Kong)',
            },
            'ap-northeast-1': {
              description: 'Asia Pacific (Tokyo)',
            },
            'ap-northeast-2': {
              description: 'Asia Pacific (Seoul)',
            },
            'ap-northeast-3': {
              description: 'Asia Pacific (Osaka)',
            },
            'ap-south-1': {
              description: 'Asia Pacific (Mumbai)',
            },
            'ap-south-2': {
              description: 'Asia Pacific (Hyderabad)',
            },
            'ap-southeast-1': {
              description: 'Asia Pacific (Singapore)',
            },
            'ap-southeast-2': {
              description: 'Asia Pacific (Sydney)',
            },
            'ap-southeast-3': {
              description: 'Asia Pacific (Jakarta)',
            },
            'ap-southeast-4': {
              description: 'Asia Pacific (Melbourne)',
            },
            'aws-global': {
              description: 'AWS Standard global region',
            },
            'ca-central-1': {
              description: 'Canada (Central)',
            },
            'eu-central-1': {
              description: 'Europe (Frankfurt)',
            },
            'eu-central-2': {
              description: 'Europe (Zurich)',
            },
            'eu-north-1': {
              description: 'Europe (Stockholm)',
            },
            'eu-south-1': {
              description: 'Europe (Milan)',
            },
            'eu-south-2': {
              description: 'Europe (Spain)',
            },
            'eu-west-1': {
              description: 'Europe (Ireland)',
            },
            'eu-west-2': {
              description: 'Europe (London)',
            },
            'eu-west-3': {
              description: 'Europe (Paris)',
            },
            'me-central-1': {
              description: 'Middle East (UAE)',
            },
            'me-south-1': {
              description: 'Middle East (Bahrain)',
            },
            'sa-east-1': {
              description: 'South America (Sao Paulo)',
            },
            'us-east-1': {
              description: 'US East (N. Virginia)',
            },
            'us-east-2': {
              description: 'US East (Ohio)',
            },
            'us-west-1': {
              description: 'US West (N. California)',
            },
            'us-west-2': {
              description: 'US West (Oregon)',
            },
          },
        },
        {
          id: 'aws-cn',
          outputs: {
            dnsSuffix: 'amazonaws.com.cn',
            dualStackDnsSuffix: 'api.amazonwebservices.com.cn',
            name: 'aws-cn',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^cn\\-\\w+\\-\\d+$',
          regions: {
            'aws-cn-global': {
              description: 'AWS China global region',
            },
            'cn-north-1': {
              description: 'China (Beijing)',
            },
            'cn-northwest-1': {
              description: 'China (Ningxia)',
            },
          },
        },
        {
          id: 'aws-us-gov',
          outputs: {
            dnsSuffix: 'amazonaws.com',
            dualStackDnsSuffix: 'api.aws',
            name: 'aws-us-gov',
            supportsDualStack: true,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-gov\\-\\w+\\-\\d+$',
          regions: {
            'aws-us-gov-global': {
              description: 'AWS GovCloud (US) global region',
            },
            'us-gov-east-1': {
              description: 'AWS GovCloud (US-East)',
            },
            'us-gov-west-1': {
              description: 'AWS GovCloud (US-West)',
            },
          },
        },
        {
          id: 'aws-iso',
          outputs: {
            dnsSuffix: 'c2s.ic.gov',
            dualStackDnsSuffix: 'c2s.ic.gov',
            name: 'aws-iso',
            supportsDualStack: false,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-iso\\-\\w+\\-\\d+$',
          regions: {
            'aws-iso-global': {
              description: 'AWS ISO (US) global region',
            },
            'us-iso-east-1': {
              description: 'US ISO East',
            },
            'us-iso-west-1': {
              description: 'US ISO WEST',
            },
          },
        },
        {
          id: 'aws-iso-b',
          outputs: {
            dnsSuffix: 'sc2s.sgov.gov',
            dualStackDnsSuffix: 'sc2s.sgov.gov',
            name: 'aws-iso-b',
            supportsDualStack: false,
            supportsFIPS: true,
          },
          regionRegex: '^us\\-isob\\-\\w+\\-\\d+$',
          regions: {
            'aws-iso-b-global': {
              description: 'AWS ISOB (US) global region',
            },
            'us-isob-east-1': {
              description: 'US ISOB East (Ohio)',
            },
          },
        },
      ],
      version: '1.1',
    };
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUserAgentPrefix =
      exports.useDefaultPartitionInfo =
      exports.setPartitionInfo =
      exports.partition =
        void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var selectedPartitionsInfo = partitions_json_1.default;
    var selectedUserAgentPrefix = '';
    var partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData,
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs,
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find(
        (partition2) => partition2.id === 'aws'
      );
      if (!DEFAULT_PARTITION) {
        throw new Error(
          "Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist."
        );
      }
      return {
        ...DEFAULT_PARTITION.outputs,
      };
    };
    exports.partition = partition;
    var setPartitionInfo = (partitionsInfo, userAgentPrefix = '') => {
      selectedPartitionsInfo = partitionsInfo;
      selectedUserAgentPrefix = userAgentPrefix;
    };
    exports.setPartitionInfo = setPartitionInfo;
    var useDefaultPartitionInfo = () => {
      (0, exports.setPartitionInfo)(partitions_json_1.default, '');
    };
    exports.useDefaultPartitionInfo = useDefaultPartitionInfo;
    var getUserAgentPrefix = () => selectedUserAgentPrefix;
    exports.getUserAgentPrefix = getUserAgentPrefix;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.debugId = void 0;
    exports.debugId = 'endpoints';
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== 'object' || input == null) {
        return input;
      }
      if ('ref' in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ('fn' in input) {
        return `${input.fn}(${(input.argv || [])
          .map(toDebugString)
          .join(', ')})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports.toDebugString = toDebugString;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports);
    tslib_1.__exportStar(require_toDebugString(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = 'EndpointError';
      }
    };
    exports.EndpointError = EndpointError;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types3 = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports);
    tslib_1.__exportStar(require_EndpointRuleObject(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports);
    tslib_1.__exportStar(require_RuleSetObject(), exports);
    tslib_1.__exportStar(require_TreeRuleObject(), exports);
    tslib_1.__exportStar(require_shared(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(
      `^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`
    );
    var isIpAddress = (value) =>
      IP_V4_REGEX.test(value) || (value.startsWith('[') && value.endsWith(']'));
    exports.isIpAddress = isIpAddress;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(
      `^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`
    );
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split('.');
      for (const label of labels) {
        if (!(0, exports.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports.isValidHostLabel = isValidHostLabel;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split('.')) {
          if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(':');
      if (segments.length < 6) return null;
      const [arn, partition, service, region, accountId, ...resourceId] =
        segments;
      if (
        arn !== 'arn' ||
        partition === '' ||
        service === '' ||
        resourceId[0] === ''
      )
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes('/')
          ? resourceId[0].split('/')
          : resourceId,
      };
    };
    exports.parseArn = parseArn;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports);
    tslib_1.__exportStar(require_parseArn(), exports);
    tslib_1.__exportStar(require_partition(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports.booleanEquals = booleanEquals;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getAttrPathList = void 0;
    var types_1 = require_types3();
    var getAttrPathList = (path) => {
      const parts = path.split('.');
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf('[');
        if (squareBracketIndex !== -1) {
          if (part.indexOf(']') !== part.length - 1) {
            throw new types_1.EndpointError(
              `Path: '${path}' does not end with ']'`
            );
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(
              `Invalid array index: '${arrayIndex}' in path: '${path}'`
            );
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports.getAttrPathList = getAttrPathList;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getAttr = void 0;
    var types_1 = require_types3();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) =>
      (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
        if (typeof acc !== 'object') {
          throw new types_1.EndpointError(
            `Index '${index}' in '${path}' not found in '${JSON.stringify(
              value
            )}'`
          );
        } else if (Array.isArray(acc)) {
          return acc[parseInt(index)];
        }
        return acc[index];
      }, value);
    exports.getAttr = getAttr;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isSet = void 0;
    var isSet = (value) => value != null;
    exports.isSet = isSet;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.not = void 0;
    var not = (value) => !value;
    exports.not = not;
  },
});

// node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/abort.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/auth.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function (HttpAuthLocation2) {
      HttpAuthLocation2['HEADER'] = 'header';
      HttpAuthLocation2['QUERY'] = 'query';
    })(
      (HttpAuthLocation =
        exports.HttpAuthLocation || (exports.HttpAuthLocation = {}))
    );
  },
});

// node_modules/@aws-sdk/types/dist-cjs/checksum.js
var require_checksum = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/checksum.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client2 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/client.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command2 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/command.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/connection/config.js
var require_config3 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/connection/config.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/connection/manager.js
var require_manager = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/connection/manager.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/connection/pool.js
var require_pool = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/connection/pool.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/connection/index.js
var require_connection = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/connection/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config3(), exports);
    tslib_1.__exportStar(require_manager(), exports);
    tslib_1.__exportStar(require_pool(), exports);
  },
});

// node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/credentials.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/crypto.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/dns.js
var require_dns = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/dns.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.HostAddressType = void 0;
    var HostAddressType;
    (function (HostAddressType2) {
      HostAddressType2['AAAA'] = 'AAAA';
      HostAddressType2['A'] = 'A';
    })(
      (HostAddressType =
        exports.HostAddressType || (exports.HostAddressType = {}))
    );
  },
});

// node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/endpoint.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function (EndpointURLScheme2) {
      EndpointURLScheme2['HTTP'] = 'http';
      EndpointURLScheme2['HTTPS'] = 'https';
    })(
      (EndpointURLScheme =
        exports.EndpointURLScheme || (exports.EndpointURLScheme = {}))
    );
  },
});

// node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/eventStream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/http.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js
var require_AnonymousIdentity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js
var require_AwsCredentialIdentity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js
var require_Identity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js
var require_LoginIdentity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js
var require_TokenIdentity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/identity/index.js
var require_identity = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/identity/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_Identity(), exports);
    tslib_1.__exportStar(require_LoginIdentity(), exports);
    tslib_1.__exportStar(require_TokenIdentity(), exports);
  },
});

// node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/logger.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/middleware.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/pagination.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/profile.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/request.js
var require_request = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/request.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/response.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/retry.js
var require_retry = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/retry.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/serde.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/shapes.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/signature.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/stream.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/token.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/transfer.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RequestHandlerProtocol = void 0;
    var RequestHandlerProtocol;
    (function (RequestHandlerProtocol2) {
      RequestHandlerProtocol2['HTTP_0_9'] = 'http/0.9';
      RequestHandlerProtocol2['HTTP_1_0'] = 'http/1.0';
      RequestHandlerProtocol2['TDS_8_0'] = 'tds/8.0';
    })(
      (RequestHandlerProtocol =
        exports.RequestHandlerProtocol || (exports.RequestHandlerProtocol = {}))
    );
  },
});

// node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util2 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/util.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/waiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  'node_modules/@aws-sdk/types/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports);
    tslib_1.__exportStar(require_auth(), exports);
    tslib_1.__exportStar(require_checksum(), exports);
    tslib_1.__exportStar(require_client2(), exports);
    tslib_1.__exportStar(require_command2(), exports);
    tslib_1.__exportStar(require_connection(), exports);
    tslib_1.__exportStar(require_credentials(), exports);
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_dns(), exports);
    tslib_1.__exportStar(require_endpoint(), exports);
    tslib_1.__exportStar(require_eventStream(), exports);
    tslib_1.__exportStar(require_http(), exports);
    tslib_1.__exportStar(require_identity(), exports);
    tslib_1.__exportStar(require_logger(), exports);
    tslib_1.__exportStar(require_middleware2(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    tslib_1.__exportStar(require_profile(), exports);
    tslib_1.__exportStar(require_request(), exports);
    tslib_1.__exportStar(require_response(), exports);
    tslib_1.__exportStar(require_retry(), exports);
    tslib_1.__exportStar(require_serde(), exports);
    tslib_1.__exportStar(require_shapes(), exports);
    tslib_1.__exportStar(require_signature(), exports);
    tslib_1.__exportStar(require_stream(), exports);
    tslib_1.__exportStar(require_token(), exports);
    tslib_1.__exportStar(require_transfer(), exports);
    tslib_1.__exportStar(require_util2(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseURL = void 0;
    var types_1 = require_dist_cjs28();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443,
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === 'object' && 'hostname' in value) {
            const {
              hostname: hostname2,
              port,
              protocol: protocol2 = '',
              path = '',
              query = {},
            } = value;
            const url = new URL(
              `${protocol2}//${hostname2}${port ? `:${port}` : ''}${path}`
            );
            url.search = Object.entries(query)
              .map(([k, v]) => `${k}=${v}`)
              .join('&');
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(
          `Unable to parse ${JSON.stringify(value)} as a whatwg URL.`
        );
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort =
        urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||
        (typeof value === 'string' &&
          value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));
      const authority = `${host}${
        inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``
      }`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith('/') ? pathname : `${pathname}/`,
        isIp,
      };
    };
    exports.parseURL = parseURL;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports.stringEquals = stringEquals;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports.substring = substring;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.uriEncode = void 0;
    var uriEncode = (value) =>
      encodeURIComponent(value).replace(
        /[!*'()]/g,
        (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`
      );
    exports.uriEncode = uriEncode;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports);
    tslib_1.__exportStar(require_getAttr(), exports);
    tslib_1.__exportStar(require_isSet(), exports);
    tslib_1.__exportStar(require_isValidHostLabel(), exports);
    tslib_1.__exportStar(require_not(), exports);
    tslib_1.__exportStar(require_parseURL(), exports);
    tslib_1.__exportStar(require_stringEquals(), exports);
    tslib_1.__exportStar(require_substring(), exports);
    tslib_1.__exportStar(require_uriEncode(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord,
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf('{', currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(
          template.slice(currentIndex, openingBraceIndex)
        );
        const closingBraceIndex = template.indexOf('}', openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (
          template[openingBraceIndex + 1] === '{' &&
          template[closingBraceIndex + 1] === '}'
        ) {
          evaluatedTemplateArr.push(
            template.slice(openingBraceIndex + 1, closingBraceIndex)
          );
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(
          openingBraceIndex + 1,
          closingBraceIndex
        );
        if (parameterName.includes('#')) {
          const [refName, attrName] = parameterName.split('#');
          evaluatedTemplateArr.push(
            (0, lib_1.getAttr)(templateContext[refName], attrName)
          );
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join('');
    };
    exports.evaluateTemplate = evaluateTemplate;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord,
      };
      return referenceRecord[ref];
    };
    exports.getReferenceValue = getReferenceValue;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateExpression = void 0;
    var types_1 = require_types3();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === 'string') {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj['fn']) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj['ref']) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(
        `'${keyName}': ${String(obj)} is not a string, function or reference.`
      );
    };
    exports.evaluateExpression = evaluateExpression;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) =>
        ['boolean', 'number'].includes(typeof arg)
          ? arg
          : (0, evaluateExpression_1.evaluateExpression)(arg, 'arg', options)
      );
      return fn.split('.').reduce((acc, key) => acc[key], lib)(
        ...evaluatedArgs
      );
    };
    exports.callFunction = callFunction;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types3();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(
          `'${assign}' is already defined in Reference Record.`
        );
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b =
        (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) ===
        null || _b === void 0
        ? void 0
        : _b.call(
            _a,
            debug_1.debugId,
            `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0,
            debug_1.toDebugString)(value)}`
          );
      return {
        result: value === '' ? true : !!value,
        ...(assign != null && { toAssign: { name: assign, value } }),
      };
    };
    exports.evaluateCondition = evaluateCondition;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(
          condition,
          {
            ...options,
            referenceRecord: {
              ...options.referenceRecord,
              ...conditionsReferenceRecord,
            },
          }
        );
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b =
            (_a = options.logger) === null || _a === void 0
              ? void 0
              : _a.debug) === null || _b === void 0
            ? void 0
            : _b.call(
                _a,
                debug_1.debugId,
                `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(
                  toAssign.value
                )}`
              );
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports.evaluateConditions = evaluateConditions;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointHeaders = void 0;
    var types_1 = require_types3();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) =>
      Object.entries(headers).reduce(
        (acc, [headerKey, headerVal]) => ({
          ...acc,
          [headerKey]: headerVal.map((headerValEntry) => {
            const processedExpr = (0, evaluateExpression_1.evaluateExpression)(
              headerValEntry,
              'Header value entry',
              options
            );
            if (typeof processedExpr !== 'string') {
              throw new types_1.EndpointError(
                `Header '${headerKey}' value '${processedExpr}' is not a string`
              );
            }
            return processedExpr;
          }),
        }),
        {}
      );
    exports.getEndpointHeaders = getEndpointHeaders;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointProperty = void 0;
    var types_1 = require_types3();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) =>
          (0, exports.getEndpointProperty)(propertyEntry, options)
        );
      }
      switch (typeof property) {
        case 'string':
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case 'object':
          if (property === null) {
            throw new types_1.EndpointError(
              `Unexpected endpoint property: ${property}`
            );
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(
            property,
            options
          );
        case 'boolean':
          return property;
        default:
          throw new types_1.EndpointError(
            `Unexpected endpoint property type: ${typeof property}`
          );
      }
    };
    exports.getEndpointProperty = getEndpointProperty;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) =>
      Object.entries(properties).reduce(
        (acc, [propertyKey, propertyVal]) => ({
          ...acc,
          [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(
            propertyVal,
            options
          ),
        }),
        {}
      );
    exports.getEndpointProperties = getEndpointProperties;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getEndpointUrl = void 0;
    var types_1 = require_types3();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(
        endpointUrl,
        'Endpoint URL',
        options
      );
      if (typeof expression === 'string') {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(
        `Endpoint URL must be a string, got ${typeof expression}`
      );
    };
    exports.getEndpointUrl = getEndpointUrl;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0,
      evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
      };
      const { url, properties, headers } = endpoint;
      (_b =
        (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) ===
        null || _b === void 0
        ? void 0
        : _b.call(
            _a,
            debug_1.debugId,
            `Resolving endpoint from template: ${(0, debug_1.toDebugString)(
              endpoint
            )}`
          );
      return {
        ...(headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(
            headers,
            endpointRuleOptions
          ),
        }),
        ...(properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(
            properties,
            endpointRuleOptions
          ),
        }),
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions),
      };
    };
    exports.evaluateEndpointRule = evaluateEndpointRule;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateErrorRule = void 0;
    var types_1 = require_types3();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0,
      evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError(
        (0, evaluateExpression_1.evaluateExpression)(error, 'Error', {
          ...options,
          referenceRecord: { ...options.referenceRecord, ...referenceRecord },
        })
      );
    };
    exports.evaluateErrorRule = evaluateErrorRule;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0,
      evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
      });
    };
    exports.evaluateTreeRule = evaluateTreeRule;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.evaluateRules = void 0;
    var types_1 = require_types3();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === 'endpoint') {
          const endpointOrUndefined = (0,
          evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === 'error') {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === 'tree') {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(
            rule,
            options
          );
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports.evaluateRules = evaluateRules;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports);
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types3();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b =
        (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) ===
        null || _b === void 0
        ? void 0
        : _b.call(
            _a,
            debug_1.debugId,
            `Initial EndpointParams: ${(0, debug_1.toDebugString)(
              endpointParams
            )}`
          );
      const paramsWithDefault = Object.entries(parameters)
        .filter(([, v]) => v.default != null)
        .map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] =
            (_c = endpointParams[paramKey]) !== null && _c !== void 0
              ? _c
              : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters)
        .filter(([, v]) => v.required)
        .map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(
            `Missing required parameter: '${requiredParam}'`
          );
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, {
        endpointParams,
        logger,
        referenceRecord: {},
      });
      if (
        (_d = options.endpointParams) === null || _d === void 0
          ? void 0
          : _d.Endpoint
      ) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {}
      }
      (_f =
        (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) ===
        null || _f === void 0
        ? void 0
        : _f.call(
            _e,
            debug_1.debugId,
            `Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`
          );
      return endpoint;
    };
    exports.resolveEndpoint = resolveEndpoint;
  },
});

// node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  'node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports);
    tslib_1.__exportStar(require_resolveEndpoint(), exports);
    tslib_1.__exportStar(require_types3(), exports);
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UA_ESCAPE_REGEX =
      exports.SPACE =
      exports.X_AMZ_USER_AGENT =
      exports.USER_AGENT =
        void 0;
    exports.USER_AGENT = 'user-agent';
    exports.X_AMZ_USER_AGENT = 'x-amz-user-agent';
    exports.SPACE = ' ';
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getUserAgentPlugin =
      exports.getUserAgentMiddlewareOptions =
      exports.userAgentMiddleware =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var util_endpoints_1 = require_dist_cjs29();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request)) return next(args);
      const { headers } = request;
      const userAgent =
        ((_a =
          context === null || context === void 0
            ? void 0
            : context.userAgent) === null || _a === void 0
          ? void 0
          : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(
        escapeUserAgent
      );
      const customUserAgent =
        ((_b =
          options === null || options === void 0
            ? void 0
            : options.customUserAgent) === null || _b === void 0
          ? void 0
          : _b.map(escapeUserAgent)) || [];
      const prefix = (0, util_endpoints_1.getUserAgentPrefix)();
      const sdkUserAgentValue = (prefix ? [prefix] : [])
        .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])
        .join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith('aws-sdk-')),
        ...customUserAgent,
      ].join(constants_1.SPACE);
      if (options.runtime !== 'browser') {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[
            constants_1.X_AMZ_USER_AGENT
          ]
            ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}`
            : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request,
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version2]) => {
      const prefixSeparatorIndex = name.indexOf('/');
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === 'api') {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2]
        .filter((item) => item && item.length > 0)
        .map((item) =>
          item === null || item === void 0
            ? void 0
            : item.replace(constants_1.UA_ESCAPE_REGEX, '_')
        )
        .join('/');
    };
    exports.getUserAgentMiddlewareOptions = {
      name: 'getUserAgentMiddleware',
      step: 'build',
      priority: 'low',
      tags: ['SET_USER_AGENT', 'USER_AGENT'],
      override: true,
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(
          (0, exports.userAgentMiddleware)(config),
          exports.getUserAgentMiddlewareOptions
        );
      },
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  },
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  'node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations4(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/EndpointParameters.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: 'dynamodb',
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  },
});

// node_modules/@aws-sdk/client-dynamodb/package.json
var require_package = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-dynamodb',
      description:
        'AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native',
      version: '3.326.0',
      scripts: {
        build:
          "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps':
          'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client':
          'node ../../scripts/generate-clients/single-service --solo dynamodb',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '3.0.0',
        '@aws-crypto/sha256-js': '3.0.0',
        '@aws-sdk/client-sts': '3.326.0',
        '@aws-sdk/config-resolver': '3.310.0',
        '@aws-sdk/credential-provider-node': '3.326.0',
        '@aws-sdk/fetch-http-handler': '3.310.0',
        '@aws-sdk/hash-node': '3.310.0',
        '@aws-sdk/invalid-dependency': '3.310.0',
        '@aws-sdk/middleware-content-length': '3.325.0',
        '@aws-sdk/middleware-endpoint': '3.325.0',
        '@aws-sdk/middleware-endpoint-discovery': '3.326.0',
        '@aws-sdk/middleware-host-header': '3.325.0',
        '@aws-sdk/middleware-logger': '3.325.0',
        '@aws-sdk/middleware-recursion-detection': '3.325.0',
        '@aws-sdk/middleware-retry': '3.325.0',
        '@aws-sdk/middleware-serde': '3.325.0',
        '@aws-sdk/middleware-signing': '3.325.0',
        '@aws-sdk/middleware-stack': '3.325.0',
        '@aws-sdk/middleware-user-agent': '3.325.0',
        '@aws-sdk/node-config-provider': '3.310.0',
        '@aws-sdk/node-http-handler': '3.321.1',
        '@aws-sdk/protocol-http': '3.310.0',
        '@aws-sdk/smithy-client': '3.325.0',
        '@aws-sdk/types': '3.310.0',
        '@aws-sdk/url-parser': '3.310.0',
        '@aws-sdk/util-base64': '3.310.0',
        '@aws-sdk/util-body-length-browser': '3.310.0',
        '@aws-sdk/util-body-length-node': '3.310.0',
        '@aws-sdk/util-defaults-mode-browser': '3.325.0',
        '@aws-sdk/util-defaults-mode-node': '3.325.0',
        '@aws-sdk/util-endpoints': '3.319.0',
        '@aws-sdk/util-retry': '3.310.0',
        '@aws-sdk/util-user-agent-browser': '3.310.0',
        '@aws-sdk/util-user-agent-node': '3.310.0',
        '@aws-sdk/util-utf8': '3.310.0',
        '@aws-sdk/util-waiter': '3.310.0',
        tslib: '^2.5.0',
        uuid: '^8.3.2',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.310.0',
        '@tsconfig/node14': '1.0.3',
        '@types/node': '^14.14.31',
        '@types/uuid': '^8.3.0',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typedoc: '0.23.23',
        typescript: '~4.9.5',
      },
      engines: {
        node: '>=14.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage:
        'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-dynamodb',
      },
    };
  },
});

// node_modules/fast-xml-parser/src/util.js
var require_util3 = __commonJS({
  'node_modules/fast-xml-parser/src/util.js'(exports) {
    'use strict';
    var nameStartChar =
      ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    var nameChar =
      nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';
    var regexName = new RegExp('^' + nameRegexp + '$');
    var getAllMatches = function (string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function (string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === 'undefined');
    };
    exports.isExist = function (v) {
      return typeof v !== 'undefined';
    };
    exports.isEmptyObject = function (obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function (target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === 'strict') {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function (v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return '';
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  },
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  'node_modules/fast-xml-parser/src/validator.js'(exports) {
    'use strict';
    var util = require_util3();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: [],
    };
    exports.validate = function (xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === '\uFEFF') {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === '<' && xmlData[i + 1] === '?') {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err) return i;
        } else if (xmlData[i] === '<') {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === '!') {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === '/') {
              closingTag = true;
              i++;
            }
            let tagName = '';
            for (
              ;
              i < xmlData.length &&
              xmlData[i] !== '>' &&
              xmlData[i] !== ' ' &&
              xmlData[i] !== '	' &&
              xmlData[i] !== '\n' &&
              xmlData[i] !== '\r';
              i++
            ) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === '/') {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject(
                'InvalidTag',
                msg,
                getLineNumberForPosition(xmlData, i)
              );
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject(
                'InvalidAttr',
                "Attributes for '" + tagName + "' have open quote.",
                getLineNumberForPosition(xmlData, i)
              );
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === '/') {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(
                  isValid.err.code,
                  isValid.err.msg,
                  getLineNumberForPosition(
                    xmlData,
                    attrStrStart + isValid.err.line
                  )
                );
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject(
                  'InvalidTag',
                  "Closing tag '" + tagName + "' doesn't have proper closing.",
                  getLineNumberForPosition(xmlData, i)
                );
              } else if (attrStr.trim().length > 0) {
                return getErrorObject(
                  'InvalidTag',
                  "Closing tag '" +
                    tagName +
                    "' can't have attributes or invalid starting.",
                  getLineNumberForPosition(xmlData, tagStartPos)
                );
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(
                    xmlData,
                    otg.tagStartPos
                  );
                  return getErrorObject(
                    'InvalidTag',
                    "Expected closing tag '" +
                      otg.tagName +
                      "' (opened in line " +
                      openPos.line +
                      ', col ' +
                      openPos.col +
                      ") instead of closing tag '" +
                      tagName +
                      "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(
                  isValid.err.code,
                  isValid.err.msg,
                  getLineNumberForPosition(
                    xmlData,
                    i - attrStr.length + isValid.err.line
                  )
                );
              }
              if (reachedRoot === true) {
                return getErrorObject(
                  'InvalidXml',
                  'Multiple possible root nodes found.',
                  getLineNumberForPosition(xmlData, i)
                );
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === '<') {
                if (xmlData[i + 1] === '!') {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === '?') {
                  i = readPI(xmlData, ++i);
                  if (i.err) return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === '&') {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject(
                    'InvalidChar',
                    "char '&' is not expected.",
                    getLineNumberForPosition(xmlData, i)
                  );
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject(
                    'InvalidXml',
                    'Extra text at the end',
                    getLineNumberForPosition(xmlData, i)
                  );
                }
              }
            }
            if (xmlData[i] === '<') {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject(
            'InvalidChar',
            "char '" + xmlData[i] + "' is not expected.",
            getLineNumberForPosition(xmlData, i)
          );
        }
      }
      if (!tagFound) {
        return getErrorObject('InvalidXml', 'Start tag expected.', 1);
      } else if (tags.length == 1) {
        return getErrorObject(
          'InvalidTag',
          "Unclosed tag '" + tags[0].tagName + "'.",
          getLineNumberForPosition(xmlData, tags[0].tagStartPos)
        );
      } else if (tags.length > 0) {
        return getErrorObject(
          'InvalidXml',
          "Invalid '" +
            JSON.stringify(
              tags.map((t) => t.tagName),
              null,
              4
            ).replace(/\r?\n/g, '') +
            "' found.",
          { line: 1, col: 1 }
        );
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === ' ' || char === '	' || char === '\n' || char === '\r';
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == '?' || xmlData[i] == ' ') {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === 'xml') {
            return getErrorObject(
              'InvalidXml',
              'XML declaration allowed only at the start of the document.',
              getLineNumberForPosition(xmlData, i)
            );
          } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (
        xmlData.length > i + 5 &&
        xmlData[i + 1] === '-' &&
        xmlData[i + 2] === '-'
      ) {
        for (i += 3; i < xmlData.length; i++) {
          if (
            xmlData[i] === '-' &&
            xmlData[i + 1] === '-' &&
            xmlData[i + 2] === '>'
          ) {
            i += 2;
            break;
          }
        }
      } else if (
        xmlData.length > i + 8 &&
        xmlData[i + 1] === 'D' &&
        xmlData[i + 2] === 'O' &&
        xmlData[i + 3] === 'C' &&
        xmlData[i + 4] === 'T' &&
        xmlData[i + 5] === 'Y' &&
        xmlData[i + 6] === 'P' &&
        xmlData[i + 7] === 'E'
      ) {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === '<') {
            angleBracketsCount++;
          } else if (xmlData[i] === '>') {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (
        xmlData.length > i + 9 &&
        xmlData[i + 1] === '[' &&
        xmlData[i + 2] === 'C' &&
        xmlData[i + 3] === 'D' &&
        xmlData[i + 4] === 'A' &&
        xmlData[i + 5] === 'T' &&
        xmlData[i + 6] === 'A' &&
        xmlData[i + 7] === '['
      ) {
        for (i += 8; i < xmlData.length; i++) {
          if (
            xmlData[i] === ']' &&
            xmlData[i + 1] === ']' &&
            xmlData[i + 2] === '>'
          ) {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = '';
      let startChar = '';
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === '') {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = '';
          }
        } else if (xmlData[i] === '>') {
          if (startChar === '') {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== '') {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed,
      };
    }
    var validAttrStrRegxp = new RegExp(
      `(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`,
      'g'
    );
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + matches[i][2] + "' has no space in starting.",
            getPositionFromMatch(matches[i])
          );
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + matches[i][2] + "' is without value.",
            getPositionFromMatch(matches[i])
          );
        } else if (
          matches[i][3] === void 0 &&
          !options.allowBooleanAttributes
        ) {
          return getErrorObject(
            'InvalidAttr',
            "boolean attribute '" + matches[i][2] + "' is not allowed.",
            getPositionFromMatch(matches[i])
          );
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + attrName + "' is an invalid name.",
            getPositionFromMatch(matches[i])
          );
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject(
            'InvalidAttr',
            "Attribute '" + attrName + "' is repeated.",
            getPositionFromMatch(matches[i])
          );
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === 'x') {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ';') return i;
        if (!xmlData[i].match(re)) break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ';') return -1;
      if (xmlData[i] === '#') {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20) continue;
        if (xmlData[i] === ';') break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col,
        },
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1,
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  },
});

// node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js'(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: '@_',
      attributesGroupName: false,
      textNodeName: '#text',
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true,
      },
      tagValueProcessor: function (tagName, val) {
        return val;
      },
      attributeValueProcessor: function (attrName, val) {
        return val;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
    };
    var buildOptions = function (options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/xmlNode.js'(exports, module2) {
    'use strict';
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[':@'] = {};
      }
      add(key, val) {
        if (key === '__proto__') key = '#__proto__';
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node.tagname === '__proto__') node.tagname = '#__proto__';
        if (node[':@'] && Object.keys(node[':@']).length > 0) {
          this.child.push({ [node.tagname]: node.child, [':@']: node[':@'] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js'(
    exports,
    module2
  ) {
    function readDocType(xmlData, i) {
      const entities = {};
      if (
        xmlData[i + 3] === 'O' &&
        xmlData[i + 4] === 'C' &&
        xmlData[i + 5] === 'T' &&
        xmlData[i + 6] === 'Y' &&
        xmlData[i + 7] === 'P' &&
        xmlData[i + 8] === 'E'
      ) {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false,
          entity = false,
          comment = false;
        let exp = '';
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === '<' && !comment) {
            if (
              hasBody &&
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === 'E' &&
              xmlData[i + 3] === 'N' &&
              xmlData[i + 4] === 'T' &&
              xmlData[i + 5] === 'I' &&
              xmlData[i + 6] === 'T' &&
              xmlData[i + 7] === 'Y'
            ) {
              i += 7;
              entity = true;
            } else if (
              hasBody &&
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === 'E' &&
              xmlData[i + 3] === 'L' &&
              xmlData[i + 4] === 'E' &&
              xmlData[i + 5] === 'M' &&
              xmlData[i + 6] === 'E' &&
              xmlData[i + 7] === 'N' &&
              xmlData[i + 8] === 'T'
            ) {
              i += 8;
            } else if (
              hasBody &&
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === 'A' &&
              xmlData[i + 3] === 'T' &&
              xmlData[i + 4] === 'T' &&
              xmlData[i + 5] === 'L' &&
              xmlData[i + 6] === 'I' &&
              xmlData[i + 7] === 'S' &&
              xmlData[i + 8] === 'T'
            ) {
              i += 8;
            } else if (
              hasBody &&
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === 'N' &&
              xmlData[i + 3] === 'O' &&
              xmlData[i + 4] === 'T' &&
              xmlData[i + 5] === 'A' &&
              xmlData[i + 6] === 'T' &&
              xmlData[i + 7] === 'I' &&
              xmlData[i + 8] === 'O' &&
              xmlData[i + 9] === 'N'
            ) {
              i += 9;
            } else if (
              //comment
              xmlData[i + 1] === '!' &&
              xmlData[i + 2] === '-' &&
              xmlData[i + 3] === '-'
            ) {
              comment = true;
            } else {
              throw new Error('Invalid DOCTYPE');
            }
            angleBracketsCount++;
            exp = '';
          } else if (xmlData[i] === '>') {
            if (comment) {
              if (xmlData[i - 1] === '-' && xmlData[i - 2] === '-') {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              if (entity) {
                parseEntityExp(exp, entities);
                entity = false;
              }
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === '[') {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    var entityRegex = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function parseEntityExp(exp, entities) {
      const match = entityRegex.exec(exp);
      if (match) {
        entities[match[1]] = {
          regx: RegExp(`&${match[1]};`, 'g'),
          val: match[3],
        };
      }
    }
    module2.exports = readDocType;
  },
});

// node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  'node_modules/strnum/strnum.js'(exports, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex =
      /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: '.',
      eNotation: true,
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== 'string') return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (
            !options.leadingZeros &&
            leadingZeros.length > 0 &&
            sign &&
            trimmedStr[2] !== '.'
          )
            return str;
          else if (
            !options.leadingZeros &&
            leadingZeros.length > 0 &&
            !sign &&
            trimmedStr[1] !== '.'
          )
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = '' + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation) return num;
              else return str;
            } else if (eNotation) {
              if (options.eNotation) return num;
              else return str;
            } else if (trimmedStr.indexOf('.') !== -1) {
              if (numStr === '0' && numTrimmedByZeros === '') return num;
              else if (numStr === numTrimmedByZeros) return num;
              else if (sign && numStr === '-' + numTrimmedByZeros) return num;
              else return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr) return num;
              else if (sign + numTrimmedByZeros === numStr) return num;
              else return str;
            }
            if (trimmedStr === numStr) return num;
            else if (trimmedStr === sign + numStr) return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf('.') !== -1) {
        numStr = numStr.replace(/0+$/, '');
        if (numStr === '.') numStr = '0';
        else if (numStr[0] === '.') numStr = '0' + numStr;
        else if (numStr[numStr.length - 1] === '.')
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js'(
    exports,
    module2
  ) {
    'use strict';
    var util = require_util3();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx =
      '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'.replace(
        /NAME/g,
        util.nameRegexp
      );
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          apos: { regex: /&(apos|#39|#x27);/g, val: "'" },
          gt: { regex: /&(gt|#62|#x3E);/g, val: '>' },
          lt: { regex: /&(lt|#60|#x3C);/g, val: '<' },
          quot: { regex: /&(quot|#34|#x22);/g, val: '"' },
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: '&' };
        this.htmlEntities = {
          space: { regex: /&(nbsp|#160);/g, val: ' ' },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          cent: { regex: /&(cent|#162);/g, val: '\xA2' },
          pound: { regex: /&(pound|#163);/g, val: '\xA3' },
          yen: { regex: /&(yen|#165);/g, val: '\xA5' },
          euro: { regex: /&(euro|#8364);/g, val: '\u20AC' },
          copyright: { regex: /&(copy|#169);/g, val: '\xA9' },
          reg: { regex: /&(reg|#174);/g, val: '\xAE' },
          inr: { regex: /&(inr|#8377);/g, val: '\u20B9' },
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp('&' + ent + ';', 'g'),
          val: externalEntities[ent],
        };
      }
    }
    function parseTextData(
      val,
      tagName,
      jPath,
      dontTrim,
      hasAttributes,
      isLeafNode,
      escapeEntities
    ) {
      if (val !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val = val.trim();
        }
        if (val.length > 0) {
          if (!escapeEntities) val = this.replaceEntitiesValue(val);
          const newval = this.options.tagValueProcessor(
            tagName,
            val,
            jPath,
            hasAttributes,
            isLeafNode
          );
          if (newval === null || newval === void 0) {
            return val;
          } else if (typeof newval !== typeof val || newval !== val) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(
              val,
              this.options.parseTagValue,
              this.options.numberParseOptions
            );
          } else {
            const trimmedVal = val.trim();
            if (trimmedVal === val) {
              return parseValue(
                val,
                this.options.parseTagValue,
                this.options.numberParseOptions
              );
            } else {
              return val;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(':');
        const prefix = tagname.charAt(0) === '/' ? '/' : '';
        if (tags[0] === 'xmlns') {
          return '';
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(
      `([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`,
      'gm'
    );
    function buildAttributesMap(attrStr, jPath) {
      if (!this.options.ignoreAttributes && typeof attrStr === 'string') {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === '__proto__') aName = '#__proto__';
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(
                attrName,
                oldVal,
                jPath
              );
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function (xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, '\n');
      const xmlObj = new xmlNode('!xml');
      let currentNode = xmlObj;
      let textData = '';
      let jPath = '';
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === '<') {
          if (xmlData[i + 1] === '/') {
            const closeIndex = findClosingIndex(
              xmlData,
              '>',
              i,
              'Closing Tag is not closed.'
            );
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(':');
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf('.'));
            currentNode = this.tagsNodeStack.pop();
            textData = '';
            i = closeIndex;
          } else if (xmlData[i + 1] === '?') {
            let tagData = readTagExp(xmlData, i, false, '?>');
            if (!tagData) throw new Error('Pi Tag is not closed.');
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (
              (this.options.ignoreDeclaration && tagData.tagName === '?xml') ||
              this.options.ignorePiTags
            ) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, '');
              if (
                tagData.tagName !== tagData.tagExp &&
                tagData.attrExpPresent
              ) {
                childNode[':@'] = this.buildAttributesMap(
                  tagData.tagExp,
                  jPath
                );
              }
              currentNode.addChild(childNode);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === '!--') {
            const endIndex = findClosingIndex(
              xmlData,
              '-->',
              i + 4,
              'Comment is not closed.'
            );
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [
                { [this.options.textNodeName]: comment },
              ]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === '!D') {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === '![') {
            const closeIndex =
              findClosingIndex(xmlData, ']]>', i, 'CDATA is not closed.') - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [
                { [this.options.textNodeName]: tagExp },
              ]);
            } else {
              let val = this.parseTextData(
                tagExp,
                currentNode.tagname,
                jPath,
                true,
                false,
                true
              );
              if (val == void 0) val = '';
              currentNode.add(this.options.textNodeName, val);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== '!xml') {
                textData = this.saveTextToParentTag(
                  textData,
                  currentNode,
                  jPath,
                  false
                );
              }
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? '.' + tagName : tagName;
            }
            const lastTag = currentNode;
            if (
              lastTag &&
              this.options.unpairedTags.indexOf(lastTag.tagname) !== -1
            ) {
              currentNode = this.tagsNodeStack.pop();
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = '';
              if (
                tagExp.length > 0 &&
                tagExp.lastIndexOf('/') === tagExp.length - 1
              ) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(
                  xmlData,
                  tagName,
                  closeIndex + 1
                );
                if (!result2) throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[':@'] = this.buildAttributesMap(tagExp, jPath);
              }
              if (tagContent) {
                tagContent = this.parseTextData(
                  tagContent,
                  tagName,
                  jPath,
                  true,
                  attrExpPresent,
                  true,
                  true
                );
              }
              jPath = jPath.substr(0, jPath.lastIndexOf('.'));
              childNode.add(this.options.textNodeName, tagContent);
              currentNode.addChild(childNode);
            } else {
              if (
                tagExp.length > 0 &&
                tagExp.lastIndexOf('/') === tagExp.length - 1
              ) {
                if (tagName[tagName.length - 1] === '/') {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[':@'] = this.buildAttributesMap(tagExp, jPath);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf('.'));
                currentNode.addChild(childNode);
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[':@'] = this.buildAttributesMap(tagExp, jPath);
                }
                currentNode.addChild(childNode);
                currentNode = childNode;
              }
              textData = '';
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    var replaceEntitiesValue = function (val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[':@']
            ? Object.keys(currentNode[':@']).length !== 0
            : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== '')
          currentNode.add(this.options.textNodeName, textData);
        textData = '';
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = '*.' + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = '>') {
      let attrBoundary;
      let tagExp = '';
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary) attrBoundary = '';
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index,
              };
            }
          } else {
            return {
              data: tagExp,
              index,
            };
          }
        } else if (ch === '	') {
          ch = ' ';
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = '>') {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result) return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(':');
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent,
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === '<') {
          if (xmlData[i + 1] === '/') {
            const closeIndex = findClosingIndex(
              xmlData,
              '>',
              i,
              `${tagName} is not closed`
            );
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex,
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === '?') {
            const closeIndex = findClosingIndex(
              xmlData,
              '?>',
              i + 1,
              'StopNode is not closed.'
            );
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === '!--') {
            const closeIndex = findClosingIndex(
              xmlData,
              '-->',
              i + 3,
              'StopNode is not closed.'
            );
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === '![') {
            const closeIndex =
              findClosingIndex(xmlData, ']]>', i, 'StopNode is not closed.') -
              2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, '>');
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (
                openTagName === tagName &&
                tagData.tagExp[tagData.tagExp.length - 1] !== '/'
              ) {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val, shouldParse, options) {
      if (shouldParse && typeof val === 'string') {
        const newval = val.trim();
        if (newval === 'true') return true;
        else if (newval === 'false') return false;
        else return toNumber(val, options);
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return '';
        }
      }
    }
    module2.exports = OrderedObjParser;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/node2json.js'(exports) {
    'use strict';
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = '';
        if (jPath === void 0) newJpath = property;
        else newJpath = jPath + '.' + property;
        if (property === options.textNodeName) {
          if (text === void 0) text = tagObj[property];
          else text += '' + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val, options);
          if (tagObj[':@']) {
            assignAttributes(val, tagObj[':@'], newJpath, options);
          } else if (
            Object.keys(val).length === 1 &&
            val[options.textNodeName] !== void 0 &&
            !options.alwaysCreateTextNode
          ) {
            val = val[options.textNodeName];
          } else if (Object.keys(val).length === 0) {
            if (options.alwaysCreateTextNode) val[options.textNodeName] = '';
            else val = '';
          }
          if (
            compressedObj[property] !== void 0 &&
            compressedObj.hasOwnProperty(property)
          ) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val];
            } else {
              compressedObj[property] = val;
            }
          }
        }
      }
      if (typeof text === 'string') {
        if (text.length > 0) compressedObj[options.textNodeName] = text;
      } else if (text !== void 0) compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ':@') return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + '.' + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const propCount = Object.keys(obj).length;
      if (propCount === 0 || (propCount === 1 && obj[options.textNodeName]))
        return true;
      return false;
    }
    exports.prettify = prettify;
  },
});

// node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  'node_modules/fast-xml-parser/src/xmlparser/XMLParser.js'(exports, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object
       * @param {string|Buffer} xmlData
       * @param {boolean|Object} validationOption
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === 'string') {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error('XML data is accepted in String or Bytes[] form.');
        }
        if (validationOption) {
          if (validationOption === true) validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(
              `${result.err.msg}:${result.err.line}:${result.err.col}`
            );
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key
       * @param {string} value
       */
      addEntity(key, value) {
        if (value.indexOf('&') !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf('&') !== -1 || key.indexOf(';') !== -1) {
          throw new Error(
            "An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'"
          );
        } else if (value === '&') {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  },
});

// node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  'node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js'(
    exports,
    module2
  ) {
    var EOL = '\n';
    function toXml(jArray, options) {
      let indentation = '';
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, '', indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = '';
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = '';
        if (jPath.length === 0) newJPath = tagName;
        else newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr +=
            indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === '?') {
          const attStr2 = attr_to_str(tagObj[':@'], options);
          const tempInd = tagName === '?xml' ? '' : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName =
            piTextNodeName.length !== 0 ? ' ' + piTextNodeName : '';
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== '') {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[':@'], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(
          tagObj[tagName],
          options,
          newJPath,
          newIdentation
        );
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode) xmlStr += tagStart + '>';
          else xmlStr += tagStart + '/>';
        } else if (
          (!tagValue || tagValue.length === 0) &&
          options.suppressEmptyNode
        ) {
          xmlStr += tagStart + '/>';
        } else if (tagValue && tagValue.endsWith('>')) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + '>';
          if (
            tagValue &&
            indentation !== '' &&
            (tagValue.includes('/>') || tagValue.includes('</'))
          ) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ':@') return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = '';
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(
              options.attributeNamePrefix.length
            )}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf('.') + 1);
      for (let index in options.stopNodes) {
        if (
          options.stopNodes[index] === jPath ||
          options.stopNodes[index] === '*.' + tagName
        )
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  },
});

// node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  'node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js'(exports, module2) {
    'use strict';
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: '@_',
      attributesGroupName: false,
      textNodeName: '#text',
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: '  ',
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function (key, a) {
        return a;
      },
      attributeValueProcessor: function (attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp('&', 'g'), val: '&amp;' },
        //it must be on top
        { regex: new RegExp('>', 'g'), val: '&gt;' },
        { regex: new RegExp('<', 'g'), val: '&lt;' },
        { regex: new RegExp("'", 'g'), val: '&apos;' },
        { regex: new RegExp('"', 'g'), val: '&quot;' },
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function () {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = '>\n';
        this.newLine = '\n';
      } else {
        this.indentate = function () {
          return '';
        };
        this.tagEndChar = '>';
        this.newLine = '';
      }
    }
    Builder.prototype.build = function (jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (
          Array.isArray(jObj) &&
          this.options.arrayNodeName &&
          this.options.arrayNodeName.length > 1
        ) {
          jObj = {
            [this.options.arrayNodeName]: jObj,
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function (jObj, level) {
      let attrStr = '';
      let val = '';
      for (let key in jObj) {
        if (typeof jObj[key] === 'undefined') {
        } else if (jObj[key] === null) {
          if (key[0] === '?')
            val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;
          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextValNode(jObj[key], key, '', level);
        } else if (typeof jObj[key] !== 'object') {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, '' + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextValNode(jObj[key], key, '', level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === 'undefined') {
            } else if (item === null) {
              if (key[0] === '?')
                val +=
                  this.indentate(level) + '<' + key + '?' + this.tagEndChar;
              else
                val +=
                  this.indentate(level) + '<' + key + '/' + this.tagEndChar;
            } else if (typeof item === 'object') {
              val += this.processTextOrObjNode(item, key, level);
            } else {
              val += this.buildTextValNode(item, key, '', level);
            }
          }
        } else {
          if (
            this.options.attributesGroupName &&
            key === this.options.attributesGroupName
          ) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val };
    };
    Builder.prototype.buildAttrPairStr = function (attrName, val) {
      val = this.options.attributeValueProcessor(attrName, '' + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === 'true') {
        return ' ' + attrName;
      } else return ' ' + attrName + '="' + val + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (
        object[this.options.textNodeName] !== void 0 &&
        Object.keys(object).length === 1
      ) {
        return this.buildTextValNode(
          object[this.options.textNodeName],
          key,
          result.attrStr,
          level
        );
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function (val, key, attrStr, level) {
      if (val === '') {
        if (key[0] === '?')
          return (
            this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar
          );
        else {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            this.closeTag(key) +
            this.tagEndChar
          );
        }
      } else {
        let tagEndExp = '</' + key + this.tagEndChar;
        let piClosingChar = '';
        if (key[0] === '?') {
          piClosingChar = '?';
          tagEndExp = '';
        }
        if (attrStr && val.indexOf('<') === -1) {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            piClosingChar +
            '>' +
            val +
            tagEndExp
          );
        } else if (
          this.options.commentPropName !== false &&
          key === this.options.commentPropName &&
          piClosingChar.length === 0
        ) {
          return this.indentate(level) + `<!--${val}-->` + this.newLine;
        } else {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            piClosingChar +
            this.tagEndChar +
            val +
            this.indentate(level) +
            tagEndExp
          );
        }
      }
    };
    Builder.prototype.closeTag = function (key) {
      let closeTag = '';
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode) closeTag = '/';
      } else if (this.options.suppressEmptyNode) {
        closeTag = '/';
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function (val, key, attrStr, level) {
      if (
        this.options.cdataPropName !== false &&
        key === this.options.cdataPropName
      ) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (
        this.options.commentPropName !== false &&
        key === this.options.commentPropName
      ) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else if (key[0] === '?') {
        return (
          this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar
        );
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === '') {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            this.closeTag(key) +
            this.tagEndChar
          );
        } else {
          return (
            this.indentate(level) +
            '<' +
            key +
            attrStr +
            '>' +
            textValue +
            '</' +
            key +
            this.tagEndChar
          );
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function (textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  },
});

// node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  'node_modules/fast-xml-parser/src/fxp.js'(exports, module2) {
    'use strict';
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder,
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.InvalidAuthorizationMessageException =
      exports.IDPCommunicationErrorException =
      exports.InvalidIdentityTokenException =
      exports.IDPRejectedClaimException =
      exports.RegionDisabledException =
      exports.PackedPolicyTooLargeException =
      exports.MalformedPolicyDocumentException =
      exports.ExpiredTokenException =
        void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'ExpiredTokenException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExpiredTokenException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'MalformedPolicyDocumentException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'MalformedPolicyDocumentException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'PackedPolicyTooLargeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'PackedPolicyTooLargeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'RegionDisabledException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'RegionDisabledException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'IDPRejectedClaimException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IDPRejectedClaimException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'InvalidIdentityTokenException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidIdentityTokenException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'IDPCommunicationErrorException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'IDPCommunicationErrorException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: 'InvalidAuthorizationMessageException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidAuthorizationMessageException';
        this.$fault = 'client';
        Object.setPrototypeOf(
          this,
          InvalidAuthorizationMessageException.prototype
        );
      }
    };
    exports.InvalidAuthorizationMessageException =
      InvalidAuthorizationMessageException;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.de_GetSessionTokenCommand =
      exports.de_GetFederationTokenCommand =
      exports.de_GetCallerIdentityCommand =
      exports.de_GetAccessKeyInfoCommand =
      exports.de_DecodeAuthorizationMessageCommand =
      exports.de_AssumeRoleWithWebIdentityCommand =
      exports.de_AssumeRoleWithSAMLCommand =
      exports.de_AssumeRoleCommand =
      exports.se_GetSessionTokenCommand =
      exports.se_GetFederationTokenCommand =
      exports.se_GetCallerIdentityCommand =
      exports.se_GetAccessKeyInfoCommand =
      exports.se_DecodeAuthorizationMessageCommand =
      exports.se_AssumeRoleWithWebIdentityCommand =
      exports.se_AssumeRoleWithSAMLCommand =
      exports.se_AssumeRoleCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs2();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        Action: 'AssumeRole',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_AssumeRoleCommand = se_AssumeRoleCommand;
    var se_AssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        Action: 'AssumeRoleWithSAML',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_AssumeRoleWithSAMLCommand = se_AssumeRoleWithSAMLCommand;
    var se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        Action: 'AssumeRoleWithWebIdentity',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_AssumeRoleWithWebIdentityCommand =
      se_AssumeRoleWithWebIdentityCommand;
    var se_DecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        Action: 'DecodeAuthorizationMessage',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_DecodeAuthorizationMessageCommand =
      se_DecodeAuthorizationMessageCommand;
    var se_GetAccessKeyInfoCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        Action: 'GetAccessKeyInfo',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetAccessKeyInfoCommand = se_GetAccessKeyInfoCommand;
    var se_GetCallerIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        Action: 'GetCallerIdentity',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetCallerIdentityCommand = se_GetCallerIdentityCommand;
    var se_GetFederationTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        Action: 'GetFederationToken',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetFederationTokenCommand = se_GetFederationTokenCommand;
    var se_GetSessionTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        Action: 'GetSessionToken',
        Version: '2011-06-15',
      });
      return buildHttpRpcRequest(context, headers, '/', void 0, body);
    };
    exports.se_GetSessionTokenCommand = se_GetSessionTokenCommand;
    var de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_AssumeRoleCommand = de_AssumeRoleCommand;
    var de_AssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(
            parsedOutput,
            context
          );
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(
            parsedOutput,
            context
          );
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_AssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(
        data.AssumeRoleWithSAMLResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_AssumeRoleWithSAMLCommand = de_AssumeRoleWithSAMLCommand;
    var de_AssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'IDPRejectedClaim':
        case 'com.amazonaws.sts#IDPRejectedClaimException':
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case 'InvalidIdentityToken':
        case 'com.amazonaws.sts#InvalidIdentityTokenException':
          throw await de_InvalidIdentityTokenExceptionRes(
            parsedOutput,
            context
          );
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(
            parsedOutput,
            context
          );
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(
            parsedOutput,
            context
          );
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_AssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(
        data.AssumeRoleWithWebIdentityResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_AssumeRoleWithWebIdentityCommand =
      de_AssumeRoleWithWebIdentityCommand;
    var de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'ExpiredTokenException':
        case 'com.amazonaws.sts#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'IDPCommunicationError':
        case 'com.amazonaws.sts#IDPCommunicationErrorException':
          throw await de_IDPCommunicationErrorExceptionRes(
            parsedOutput,
            context
          );
        case 'IDPRejectedClaim':
        case 'com.amazonaws.sts#IDPRejectedClaimException':
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case 'InvalidIdentityToken':
        case 'com.amazonaws.sts#InvalidIdentityTokenException':
          throw await de_InvalidIdentityTokenExceptionRes(
            parsedOutput,
            context
          );
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(
            parsedOutput,
            context
          );
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(
            parsedOutput,
            context
          );
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_DecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_DecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(
        data.DecodeAuthorizationMessageResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_DecodeAuthorizationMessageCommand =
      de_DecodeAuthorizationMessageCommand;
    var de_DecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidAuthorizationMessageException':
        case 'com.amazonaws.sts#InvalidAuthorizationMessageException':
          throw await de_InvalidAuthorizationMessageExceptionRes(
            parsedOutput,
            context
          );
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_GetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(
        data.GetAccessKeyInfoResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetAccessKeyInfoCommand = de_GetAccessKeyInfoCommand;
    var de_GetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
      });
    };
    var de_GetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(
        data.GetCallerIdentityResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetCallerIdentityCommand = de_GetCallerIdentityCommand;
    var de_GetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
      });
    };
    var de_GetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(
        data.GetFederationTokenResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetFederationTokenCommand = de_GetFederationTokenCommand;
    var de_GetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'MalformedPolicyDocument':
        case 'com.amazonaws.sts#MalformedPolicyDocumentException':
          throw await de_MalformedPolicyDocumentExceptionRes(
            parsedOutput,
            context
          );
        case 'PackedPolicyTooLarge':
        case 'com.amazonaws.sts#PackedPolicyTooLargeException':
          throw await de_PackedPolicyTooLargeExceptionRes(
            parsedOutput,
            context
          );
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_GetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_GetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(
        data.GetSessionTokenResult,
        context
      );
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
      };
      return response;
    };
    exports.de_GetSessionTokenCommand = de_GetSessionTokenCommand;
    var de_GetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'RegionDisabledException':
        case 'com.amazonaws.sts#RegionDisabledException':
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody: parsedBody.Error,
            errorCode,
          });
      }
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPCommunicationErrorExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(
        body.Error,
        context
      );
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidAuthorizationMessageExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(
        body.Error,
        context
      );
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(
        body.Error,
        context
      );
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_MalformedPolicyDocumentExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(
        body.Error,
        context
      );
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(
        body.Error,
        context
      );
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var se_AssumeRoleRequest = (input, context) => {
      var _a, _b, _c;
      const entries = {};
      if (input.RoleArn != null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries['RoleSessionName'] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(
          input.PolicyArns,
          context
        );
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = se_tagKeyListType(
          input.TransitiveTagKeys,
          context
        );
        if (
          ((_c = input.TransitiveTagKeys) == null ? void 0 : _c.length) === 0
        ) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries['ExternalId'] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries['SerialNumber'] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries['TokenCode'] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries['SourceIdentity'] = input.SourceIdentity;
      }
      return entries;
    };
    var se_AssumeRoleWithSAMLRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries['PrincipalArn'] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries['SAMLAssertion'] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(
          input.PolicyArns,
          context
        );
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      return entries;
    };
    var se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries['RoleArn'] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries['RoleSessionName'] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries['WebIdentityToken'] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries['ProviderId'] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(
          input.PolicyArns,
          context
        );
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries['Policy'] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      return entries;
    };
    var se_DecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries['EncodedMessage'] = input.EncodedMessage;
      }
      return entries;
    };
    var se_GetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries['AccessKeyId'] = input.AccessKeyId;
      }
      return entries;
    };
    var se_GetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var se_GetFederationTokenRequest = (input, context) => {
      var _a, _b;
      const entries = {};
      if (input.Name != null) {
        entries['Name'] = input.Name;
      }
      if (input.Policy != null) {
        entries['Policy'] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = se_policyDescriptorListType(
          input.PolicyArns,
          context
        );
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = se_tagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var se_GetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries['DurationSeconds'] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries['SerialNumber'] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries['TokenCode'] = input.TokenCode;
      }
      return entries;
    };
    var se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries['arn'] = input.arn;
      }
      return entries;
    };
    var se_Tag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries['Key'] = input.Key;
      }
      if (input.Value != null) {
        entries['Value'] = input.Value;
      }
      return entries;
    };
    var se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output['AssumedRoleId'] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(
          output['AssumedRoleId']
        );
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(
          output['AssumedRoleUser'],
          context
        );
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(
          output['PackedPolicySize']
        );
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(
          output['SourceIdentity']
        );
      }
      return contents;
    };
    var de_AssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(
          output['AssumedRoleUser'],
          context
        );
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(
          output['PackedPolicySize']
        );
      }
      if (output['Subject'] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output['Subject']);
      }
      if (output['SubjectType'] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(
          output['SubjectType']
        );
      }
      if (output['Issuer'] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output['Issuer']);
      }
      if (output['Audience'] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(
          output['Audience']
        );
      }
      if (output['NameQualifier'] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(
          output['NameQualifier']
        );
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(
          output['SourceIdentity']
        );
      }
      return contents;
    };
    var de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      if (output['SubjectFromWebIdentityToken'] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0,
        smithy_client_1.expectString)(output['SubjectFromWebIdentityToken']);
      }
      if (output['AssumedRoleUser'] !== void 0) {
        contents.AssumedRoleUser = de_AssumedRoleUser(
          output['AssumedRoleUser'],
          context
        );
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(
          output['PackedPolicySize']
        );
      }
      if (output['Provider'] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(
          output['Provider']
        );
      }
      if (output['Audience'] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(
          output['Audience']
        );
      }
      if (output['SourceIdentity'] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(
          output['SourceIdentity']
        );
      }
      return contents;
    };
    var de_Credentials = (output, context) => {
      const contents = {};
      if (output['AccessKeyId'] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(
          output['AccessKeyId']
        );
      }
      if (output['SecretAccessKey'] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(
          output['SecretAccessKey']
        );
      }
      if (output['SessionToken'] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(
          output['SessionToken']
        );
      }
      if (output['Expiration'] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)(
          (0, smithy_client_1.parseRfc3339DateTimeWithOffset)(
            output['Expiration']
          )
        );
      }
      return contents;
    };
    var de_DecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {};
      if (output['DecodedMessage'] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(
          output['DecodedMessage']
        );
      }
      return contents;
    };
    var de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_FederatedUser = (output, context) => {
      const contents = {};
      if (output['FederatedUserId'] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(
          output['FederatedUserId']
        );
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var de_GetAccessKeyInfoResponse = (output, context) => {
      const contents = {};
      if (output['Account'] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output['Account']);
      }
      return contents;
    };
    var de_GetCallerIdentityResponse = (output, context) => {
      const contents = {};
      if (output['UserId'] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output['UserId']);
      }
      if (output['Account'] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output['Account']);
      }
      if (output['Arn'] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output['Arn']);
      }
      return contents;
    };
    var de_GetFederationTokenResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      if (output['FederatedUser'] !== void 0) {
        contents.FederatedUser = de_FederatedUser(
          output['FederatedUser'],
          context
        );
      }
      if (output['PackedPolicySize'] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(
          output['PackedPolicySize']
        );
      }
      return contents;
    };
    var de_GetSessionTokenResponse = (output, context) => {
      const contents = {};
      if (output['Credentials'] !== void 0) {
        contents.Credentials = de_Credentials(output['Credentials'], context);
      }
      return contents;
    };
    var de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_InvalidAuthorizationMessageException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output['message'] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output['message']);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId:
        output.headers['x-amzn-requestid'] ??
        output.headers['x-amzn-request-id'] ??
        output.headers['x-amz-request-id'],
      extendedRequestId: output.headers['x-amz-id-2'],
      cfId: output.headers['x-amz-cf-id'],
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return (
        context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
      );
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) =>
        context.utf8Encoder(body)
      );
    var throwDefaultError = (0, smithy_client_1.withBaseException)(
      STSServiceException_1.STSServiceException
    );
    var buildHttpRpcRequest = async (
      context,
      headers,
      path,
      resolvedHostname,
      body
    ) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: 'POST',
        path: basePath.endsWith('/')
          ? basePath.slice(0, -1) + path
          : basePath + path,
        headers,
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var SHARED_HEADERS = {
      'content-type': 'application/x-www-form-urlencoded',
    };
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          const parser = new fast_xml_parser_1.XMLParser({
            attributeNamePrefix: '',
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_2, val) =>
              val.trim() === '' && val.includes('\n') ? '' : void 0,
          });
          parser.addEntity('#xD', '\r');
          parser.addEntity('#10', '\n');
          const parsedObj = parser.parse(encoded);
          const textNodeName = '#text';
          const key = Object.keys(parsedObj)[0];
          const parsedObjToReturn = parsedObj[key];
          if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
          }
          return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
        }
        return {};
      });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) =>
      Object.entries(formEntries)
        .map(
          ([key, value]) =>
            (0, smithy_client_1.extendedEncodeURIComponent)(key) +
            '=' +
            (0, smithy_client_1.extendedEncodeURIComponent)(value)
        )
        .join('&');
    var loadQueryErrorCode = (output, data) => {
      var _a;
      if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return 'NotFound';
      }
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            AssumeRoleCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleWithSAMLCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'AssumeRoleWithWebIdentityCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_AssumeRoleWithWebIdentityCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_AssumeRoleWithWebIdentityCommand)(
          output,
          context
        );
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'DecodeAuthorizationMessageCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_DecodeAuthorizationMessageCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_DecodeAuthorizationMessageCommand)(
          output,
          context
        );
      }
    };
    exports.DecodeAuthorizationMessageCommand =
      DecodeAuthorizationMessageCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetAccessKeyInfoCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetAccessKeyInfoCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetCallerIdentityCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetCallerIdentityCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetFederationTokenCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetFederationTokenCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var middleware_signing_1 = require_dist_cjs27();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: {
            type: 'builtInParams',
            name: 'useGlobalEndpoint',
          },
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetSessionTokenCommand.getEndpointParameterInstructions()
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(configuration)
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'STSClient';
        const commandName = 'GetSessionTokenCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_query_1.se_GetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.de_GetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  },
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  'node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs27();
    var resolveStsAuthConfig = (input, { stsClientCtor }) =>
      (0, middleware_signing_1.resolveAwsAuthConfig)({
        ...input,
        stsClientCtor,
      });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: 'sts',
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  },
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  'node_modules/@aws-sdk/client-sts/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sts',
      description:
        'AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native',
      version: '3.326.0',
      scripts: {
        build:
          "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps':
          'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client':
          'node ../../scripts/generate-clients/single-service --solo sts',
        test: 'yarn test:unit',
        'test:unit': 'jest',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '3.0.0',
        '@aws-crypto/sha256-js': '3.0.0',
        '@aws-sdk/config-resolver': '3.310.0',
        '@aws-sdk/credential-provider-node': '3.326.0',
        '@aws-sdk/fetch-http-handler': '3.310.0',
        '@aws-sdk/hash-node': '3.310.0',
        '@aws-sdk/invalid-dependency': '3.310.0',
        '@aws-sdk/middleware-content-length': '3.325.0',
        '@aws-sdk/middleware-endpoint': '3.325.0',
        '@aws-sdk/middleware-host-header': '3.325.0',
        '@aws-sdk/middleware-logger': '3.325.0',
        '@aws-sdk/middleware-recursion-detection': '3.325.0',
        '@aws-sdk/middleware-retry': '3.325.0',
        '@aws-sdk/middleware-sdk-sts': '3.326.0',
        '@aws-sdk/middleware-serde': '3.325.0',
        '@aws-sdk/middleware-signing': '3.325.0',
        '@aws-sdk/middleware-stack': '3.325.0',
        '@aws-sdk/middleware-user-agent': '3.325.0',
        '@aws-sdk/node-config-provider': '3.310.0',
        '@aws-sdk/node-http-handler': '3.321.1',
        '@aws-sdk/protocol-http': '3.310.0',
        '@aws-sdk/smithy-client': '3.325.0',
        '@aws-sdk/types': '3.310.0',
        '@aws-sdk/url-parser': '3.310.0',
        '@aws-sdk/util-base64': '3.310.0',
        '@aws-sdk/util-body-length-browser': '3.310.0',
        '@aws-sdk/util-body-length-node': '3.310.0',
        '@aws-sdk/util-defaults-mode-browser': '3.325.0',
        '@aws-sdk/util-defaults-mode-node': '3.325.0',
        '@aws-sdk/util-endpoints': '3.319.0',
        '@aws-sdk/util-retry': '3.310.0',
        '@aws-sdk/util-user-agent-browser': '3.310.0',
        '@aws-sdk/util-user-agent-node': '3.310.0',
        '@aws-sdk/util-utf8': '3.310.0',
        'fast-xml-parser': '4.1.2',
        tslib: '^2.5.0',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.310.0',
        '@tsconfig/node14': '1.0.3',
        '@types/node': '^14.14.31',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typedoc: '0.23.23',
        typescript: '~4.9.5',
      },
      engines: {
        node: '>=14.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage:
        'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sts',
      },
    };
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateDefaultCredentialProvider =
      exports.getDefaultRoleAssumerWithWebIdentity =
      exports.getDefaultRoleAssumer =
        void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 =
      require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = 'us-east-1';
    var decorateDefaultRegion = (region) => {
      if (typeof region !== 'function') {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...(requestHandler ? { requestHandler } : {}),
          });
        }
        const { Credentials } = await stsClient.send(
          new AssumeRoleCommand_1.AssumeRoleCommand(params)
        );
        if (
          !Credentials ||
          !Credentials.AccessKeyId ||
          !Credentials.SecretAccessKey
        ) {
          throw new Error(
            `Invalid response from STS.assumeRole call with role ${params.RoleArn}`
          );
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...(requestHandler ? { requestHandler } : {}),
          });
        }
        const { Credentials } = await stsClient.send(
          new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(
            params
          )
        );
        if (
          !Credentials ||
          !Credentials.AccessKeyId ||
          !Credentials.SecretAccessKey
        ) {
          throw new Error(
            `Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`
          );
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity =
      getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) =>
      provider({
        roleAssumer: (0, exports.getDefaultRoleAssumer)(
          input,
          input.stsClientCtor
        ),
        roleAssumerWithWebIdentity: (0,
        exports.getDefaultRoleAssumerWithWebIdentity)(
          input,
          input.stsClientCtor
        ),
        ...input,
      });
    exports.decorateDefaultCredentialProvider =
      decorateDefaultCredentialProvider;
  },
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  'node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv =
      exports.ENV_EXPIRATION =
      exports.ENV_SESSION =
      exports.ENV_SECRET =
      exports.ENV_KEY =
        void 0;
    var property_provider_1 = require_dist_cjs20();
    exports.ENV_KEY = 'AWS_ACCESS_KEY_ID';
    exports.ENV_SECRET = 'AWS_SECRET_ACCESS_KEY';
    exports.ENV_SESSION = 'AWS_SESSION_TOKEN';
    exports.ENV_EXPIRATION = 'AWS_CREDENTIAL_EXPIRATION';
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...(sessionToken && { sessionToken }),
          ...(expiry && { expiration: new Date(expiry) }),
        };
      }
      throw new property_provider_1.CredentialsProviderError(
        'Unable to find environment variable credentials.'
      );
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports);
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require('os');
    var path_1 = require('path');
    var getHomeDir = () => {
      const {
        HOME,
        USERPROFILE,
        HOMEPATH,
        HOMEDRIVE = `C:${path_1.sep}`,
      } = process.env;
      if (HOME) return HOME;
      if (USERPROFILE) return USERPROFILE;
      if (HOMEPATH) return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileName =
      exports.DEFAULT_PROFILE =
      exports.ENV_PROFILE =
        void 0;
    exports.ENV_PROFILE = 'AWS_PROFILE';
    exports.DEFAULT_PROFILE = 'default';
    var getProfileName = (init) =>
      init.profile ||
      process.env[exports.ENV_PROFILE] ||
      exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require('crypto');
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)('sha1');
      const cacheName = hasher.update(id).digest('hex');
      return (0, path_1.join)(
        (0, getHomeDir_1.getHomeDir)(),
        '.aws',
        'sso',
        'cache',
        `${cacheName}.json`
      );
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require('fs');
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(
        id
      );
      const ssoTokenText = await readFile(ssoTokenFilepath, 'utf8');
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = 'AWS_CONFIG_FILE';
    var getConfigFilepath = () =>
      process.env[exports.ENV_CONFIG_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'config');
    exports.getConfigFilepath = getConfigFilepath;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require('path');
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = 'AWS_SHARED_CREDENTIALS_FILE';
    var getCredentialsFilepath = () =>
      process.env[exports.ENV_CREDENTIALS_PATH] ||
      (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), '.aws', 'credentials');
    exports.getCredentialsFilepath = getCredentialsFilepath;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) =>
      Object.entries(data)
        .filter(([key]) => profileKeyRegex.test(key))
        .reduce(
          (acc, [key, value]) => ({
            ...acc,
            [profileKeyRegex.exec(key)[2]]: value,
          }),
          {
            ...(data.default && { default: data.default }),
          }
        );
    exports.getProfileData = getProfileData;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ['__proto__', 'profile __proto__'];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === '[' && line[line.length - 1] === ']';
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf('=');
          const start = 0;
          const end = line.length - 1;
          const isAssignment =
            indexOfEqualsSign !== -1 &&
            indexOfEqualsSign !== start &&
            indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim(),
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require('fs');
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path, options) => {
      if (
        !filePromisesHash[path] ||
        (options === null || options === void 0 ? void 0 : options.ignoreCache)
      ) {
        filePromisesHash[path] = readFile(path, 'utf8');
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const {
        filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(),
        configFilepath = (0, getConfigFilepath_1.getConfigFilepath)(),
      } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath, {
          ignoreCache: init.ignoreCache,
        })
          .then(parseIni_1.parseIni)
          .then(getProfileData_1.getProfileData)
          .catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath, {
          ignoreCache: init.ignoreCache,
        })
          .then(parseIni_1.parseIni)
          .catch(swallowError),
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1],
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) =>
      Object.entries(data)
        .filter(([key]) => ssoSessionKeyRegex.test(key))
        .reduce(
          (acc, [key, value]) => ({
            ...acc,
            [ssoSessionKeyRegex.exec(key)[2]]: value,
          }),
          {}
        );
    exports.getSsoSessionData = getSsoSessionData;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)(
        (_a = init.configFilepath) !== null && _a !== void 0
          ? _a
          : (0, getConfigFilepath_1.getConfigFilepath)()
      )
        .then(parseIni_1.parseIni)
        .then(getSsoSessionData_1.getSsoSessionData)
        .catch(swallowError);
    };
    exports.loadSsoSessionData = loadSsoSessionData;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js
var require_mergeConfigFiles = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/mergeConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.mergeConfigFiles = void 0;
    var mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
    exports.mergeConfigFiles = mergeConfigFiles;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var mergeConfigFiles_1 = require_mergeConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0,
      loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return (0, mergeConfigFiles_1.mergeConfigFiles)(
        parsedFiles.configFile,
        parsedFiles.credentialsFile
      );
    };
    exports.parseKnownFiles = parseKnownFiles;
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types4 = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  'node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types4(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs20();
    var buffer_1 = require('buffer');
    var http_1 = require('http');
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: 'GET',
          ...options,
          hostname:
            (_a = options.hostname) === null || _a === void 0
              ? void 0
              : _a.replace(/^\[(.+)\]$/, '$1'),
        });
        req.on('error', (err) => {
          reject(
            Object.assign(
              new property_provider_1.ProviderError(
                'Unable to connect to instance metadata service'
              ),
              err
            )
          );
          req.destroy();
        });
        req.on('timeout', () => {
          reject(
            new property_provider_1.ProviderError(
              'TimeoutError from instance metadata service'
            )
          );
          req.destroy();
        });
        req.on('response', (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(
              Object.assign(
                new property_provider_1.ProviderError(
                  'Error response received from instance metadata service'
                ),
                { statusCode }
              )
            );
            req.destroy();
          }
          const chunks = [];
          res.on('data', (chunk) => {
            chunks.push(chunk);
          });
          res.on('end', () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.AccessKeyId === 'string' &&
      typeof arg.SecretAccessKey === 'string' &&
      typeof arg.Token === 'string' &&
      typeof arg.Expiration === 'string';
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration),
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.providerConfigFromInit =
      exports.DEFAULT_MAX_RETRIES =
      exports.DEFAULT_TIMEOUT =
        void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({
      maxRetries = exports.DEFAULT_MAX_RETRIES,
      timeout = exports.DEFAULT_TIMEOUT,
    }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromContainerMetadata =
      exports.ENV_CMDS_AUTH_TOKEN =
      exports.ENV_CMDS_RELATIVE_URI =
      exports.ENV_CMDS_FULL_URI =
        void 0;
    var property_provider_1 = require_dist_cjs20();
    var url_1 = require('url');
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry2();
    exports.ENV_CMDS_FULL_URI = 'AWS_CONTAINER_CREDENTIALS_FULL_URI';
    exports.ENV_CMDS_RELATIVE_URI = 'AWS_CONTAINER_CREDENTIALS_RELATIVE_URI';
    exports.ENV_CMDS_AUTH_TOKEN = 'AWS_CONTAINER_AUTHORIZATION_TOKEN';
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0,
      RemoteProviderInit_1.providerConfigFromInit)(init);
      return () =>
        (0, retry_1.retry)(async () => {
          const requestOptions = await getCmdsUri();
          const credsResponse = JSON.parse(
            await requestFromEcsImds(timeout, requestOptions)
          );
          if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
            throw new property_provider_1.CredentialsProviderError(
              'Invalid response received from instance metadata service.'
            );
          }
          return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
        }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN],
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout,
      });
      return buffer.toString();
    };
    var CMDS_IP = '169.254.170.2';
    var GREENGRASS_HOSTS = {
      localhost: true,
      '127.0.0.1': true,
    };
    var GREENGRASS_PROTOCOLS = {
      'http:': true,
      'https:': true,
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI],
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.hostname} is not a valid container metadata service hostname`,
            false
          );
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(
            `${parsed.protocol} is not a valid container metadata service protocol`,
            false
          );
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0,
        };
      }
      throw new property_provider_1.CredentialsProviderError(
        `The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`,
        false
      );
    };
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(
          e.message ||
            `Cannot load config from environment variables with getter: ${envVarSelector}`
        );
      }
    };
    exports.fromEnv = fromEnv;
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var fromSharedConfigFiles =
      (configSelector, { preferredFile = 'config', ...init } = {}) =>
      async () => {
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0,
        shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile =
          preferredFile === 'config'
            ? { ...profileFromCredentials, ...profileFromConfig }
            : { ...profileFromConfig, ...profileFromCredentials };
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            e.message ||
              `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`
          );
        }
      };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs20();
    var isFunction = (func) => typeof func === 'function';
    var fromStatic = (defaultValue) =>
      isFunction(defaultValue)
        ? async () => await defaultValue()
        : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = (
      {
        environmentVariableSelector,
        configFileSelector,
        default: defaultValue,
      },
      configuration = {}
    ) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          (0, fromEnv_1.fromEnv)(environmentVariableSelector),
          (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(
            configFileSelector,
            configuration
          ),
          (0, fromStatic_1.fromStatic)(defaultValue)
        )
      );
    exports.loadConfig = loadConfig;
  },
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  'node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function (Endpoint2) {
      Endpoint2['IPv4'] = 'http://169.254.169.254';
      Endpoint2['IPv6'] = 'http://[fd00:ec2::254]';
    })((Endpoint = exports.Endpoint || (exports.Endpoint = {})));
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS =
      exports.CONFIG_ENDPOINT_NAME =
      exports.ENV_ENDPOINT_NAME =
        void 0;
    exports.ENV_ENDPOINT_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT';
    exports.CONFIG_ENDPOINT_NAME = 'ec2_metadata_service_endpoint';
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0,
    };
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function (EndpointMode2) {
      EndpointMode2['IPv4'] = 'IPv4';
      EndpointMode2['IPv6'] = 'IPv6';
    })((EndpointMode = exports.EndpointMode || (exports.EndpointMode = {})));
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS =
      exports.CONFIG_ENDPOINT_MODE_NAME =
      exports.ENV_ENDPOINT_MODE_NAME =
        void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = 'AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE';
    exports.CONFIG_ENDPOINT_MODE_NAME = 'ec2_metadata_service_endpoint_mode';
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) =>
        profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4,
    };
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs34();
    var url_parser_1 = require_dist_cjs4();
    var Endpoint_1 = require_Endpoint2();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () =>
      (0, url_parser_1.parseUrl)(
        (await getFromEndpointConfig()) || (await getFromEndpointModeConfig())
      );
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () =>
      (0, node_config_provider_1.loadConfig)(
        EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS
      )();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(
        EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS
      )();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(
            `Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(
              EndpointMode_1.EndpointMode
            )}`
          );
      }
    };
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL =
      'https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html';
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval =
        STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +
        Math.floor(
          Math.random() *
            STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS
        );
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn(
        'Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: ' +
          STATIC_STABILITY_DOC_URL
      );
      const originalExpiration =
        (_a = credentials.originalExpiration) !== null && _a !== void 0
          ? _a
          : credentials.expiration;
      return {
        ...credentials,
        ...(originalExpiration ? { originalExpiration } : {}),
        expiration: newExpiration,
      };
    };
    exports.getExtendedInstanceMetadataCredentials =
      getExtendedInstanceMetadataCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 =
      require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger =
        (options === null || options === void 0 ? void 0 : options.logger) ||
        console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (
            credentials.expiration &&
            credentials.expiration.getTime() < Date.now()
          ) {
            credentials = (0,
            getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              credentials,
              logger
            );
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn('Credential renew failed: ', e);
            credentials = (0,
            getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(
              pastCredentials,
              logger
            );
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs20();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry2();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = '/latest/meta-data/iam/security-credentials/';
    var IMDS_TOKEN_PATH = '/latest/api/token';
    var fromInstanceMetadata = (init = {}) =>
      (0, staticStabilityProvider_1.staticStabilityProvider)(
        getInstanceImdsProvider(init),
        { logger: init.logger }
      );
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0,
      RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (
          await (0, retry_1.retry)(async () => {
            let profile2;
            try {
              profile2 = await getProfile(options);
            } catch (err) {
              if (err.statusCode === 401) {
                disableFetchToken = false;
              }
              throw err;
            }
            return profile2;
          }, maxRetries2)
        ).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0,
        getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (
              await getMetadataToken({ ...endpoint, timeout })
            ).toString();
          } catch (error) {
            if (
              (error === null || error === void 0
                ? void 0
                : error.statusCode) === 400
            ) {
              throw Object.assign(error, {
                message: 'EC2 Metadata token request returned error',
              });
            } else if (
              error.message === 'TimeoutError' ||
              [403, 404, 405].includes(error.statusCode)
            ) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              'x-aws-ec2-metadata-token': token,
            },
            timeout,
          });
        }
      };
    };
    var getMetadataToken = async (options) =>
      (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_TOKEN_PATH,
        method: 'PUT',
        headers: {
          'x-aws-ec2-metadata-token-ttl-seconds': '21600',
        },
      });
    var getProfile = async (options) =>
      (
        await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })
      ).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse(
        (
          await (0, httpRequest_1.httpRequest)({
            ...options,
            path: IMDS_PATH + profile,
          })
        ).toString()
      );
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError(
          'Invalid response received from instance metadata service.'
        );
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types5 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types5(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, 'httpRequest', {
      enumerable: true,
      get: function () {
        return httpRequest_1.httpRequest;
      },
    });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, 'getInstanceMetadataEndpoint', {
      enumerable: true,
      get: function () {
        return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
      },
    });
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs32();
    var credential_provider_imds_1 = require_dist_cjs35();
    var property_provider_1 = require_dist_cjs20();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv,
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`
        );
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.role_arn === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1 &&
      ['undefined', 'string'].indexOf(typeof arg.external_id) > -1 &&
      ['undefined', 'string'].indexOf(typeof arg.mfa_serial) > -1 &&
      (isAssumeRoleWithSourceProfile(arg) ||
        isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) =>
      typeof arg.source_profile === 'string' &&
      typeof arg.credential_source === 'undefined';
    var isAssumeRoleWithProviderProfile = (arg) =>
      typeof arg.credential_source === 'string' &&
      typeof arg.source_profile === 'undefined';
    var resolveAssumeRoleCredentials = async (
      profileName,
      profiles,
      options,
      visitedProfiles = {}
    ) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(
          `Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`,
          false
        );
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(
          `Detected a cycle attempting to resolve credentials for profile ${(0,
          shared_ini_file_loader_1.getProfileName)(
            options
          )}. Profiles visited: ` + Object.keys(visitedProfiles).join(', '),
          false
        );
      }
      const sourceCredsProvider = source_profile
        ? (0, resolveProfileData_1.resolveProfileData)(
            source_profile,
            profiles,
            options,
            {
              ...visitedProfiles,
              [source_profile]: true,
            }
          )
        : (0, resolveCredentialSource_1.resolveCredentialSource)(
            data.credential_source,
            profileName
          )();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(
            `Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`,
            false
          );
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(
          `Profile ${profileName} credential_process did not return Version 1.`
        );
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(
          `Profile ${profileName} credential_process returned invalid credentials.`
        );
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(
            `Profile ${profileName} credential_process returned expired credentials.`
          );
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...(data.SessionToken && { sessionToken: data.SessionToken }),
        ...(data.Expiration && { expiration: new Date(data.Expiration) }),
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs20();
    var child_process_1 = require('child_process');
    var util_1 = require('util');
    var getValidatedProcessCredentials_1 =
      require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile['credential_process'];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(
                `Profile ${profileName} credential_process returned invalid JSON.`
              );
            }
            return (0,
            getValidatedProcessCredentials_1.getValidatedProcessCredentials)(
              profileName,
              data
            );
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(
              error.message
            );
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(
            `Profile ${profileName} did not contain credential_process.`
          );
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(
          `Profile ${profileName} could not be found in shared credentials file.`
        );
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(
          init
        );
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(
          (0, shared_ini_file_loader_1.getProfileName)(init),
          profiles
        );
      };
    exports.fromProcess = fromProcess;
  },
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProcessCredentials = exports.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs36();
    var isProcessProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.credential_process === 'string';
    exports.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) =>
      (0, credential_provider_process_1.fromProcess)({
        ...options,
        profile,
      })();
    exports.resolveProcessCredentials = resolveProcessCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) =>
      arg &&
      (typeof arg.sso_start_url === 'string' ||
        typeof arg.sso_account_id === 'string' ||
        typeof arg.sso_session === 'string' ||
        typeof arg.sso_region === 'string' ||
        typeof arg.sso_role_name === 'string');
    exports.isSsoProfile = isSsoProfile;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LogoutRequestFilterSensitiveLog =
      exports.ListAccountsRequestFilterSensitiveLog =
      exports.ListAccountRolesRequestFilterSensitiveLog =
      exports.GetRoleCredentialsResponseFilterSensitiveLog =
      exports.RoleCredentialsFilterSensitiveLog =
      exports.GetRoleCredentialsRequestFilterSensitiveLog =
      exports.UnauthorizedException =
      exports.TooManyRequestsException =
      exports.ResourceNotFoundException =
      exports.InvalidRequestException =
        void 0;
    var smithy_client_1 = require_dist_cjs2();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'InvalidRequestException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidRequestException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'ResourceNotFoundException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ResourceNotFoundException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'TooManyRequestsException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'TooManyRequestsException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: 'UnauthorizedException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'UnauthorizedException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.GetRoleCredentialsRequestFilterSensitiveLog =
      GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.secretAccessKey && {
        secretAccessKey: smithy_client_1.SENSITIVE_STRING,
      }),
      ...(obj.sessionToken && {
        sessionToken: smithy_client_1.SENSITIVE_STRING,
      }),
    });
    exports.RoleCredentialsFilterSensitiveLog =
      RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.roleCredentials && {
        roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(
          obj.roleCredentials
        ),
      }),
    });
    exports.GetRoleCredentialsResponseFilterSensitiveLog =
      GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.ListAccountRolesRequestFilterSensitiveLog =
      ListAccountRolesRequestFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.ListAccountsRequestFilterSensitiveLog =
      ListAccountsRequestFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),
    });
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.de_LogoutCommand =
      exports.de_ListAccountsCommand =
      exports.de_ListAccountRolesCommand =
      exports.de_GetRoleCredentialsCommand =
      exports.se_LogoutCommand =
      exports.se_ListAccountsCommand =
      exports.se_ListAccountRolesCommand =
      exports.se_GetRoleCredentialsCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var se_GetRoleCredentialsCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        'x-amz-sso_bearer_token': input.accessToken,
      });
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/federation/credentials`;
      const query = (0, smithy_client_1.map)({
        role_name: [
          ,
          (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`),
        ],
        account_id: [
          ,
          (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`),
        ],
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.se_GetRoleCredentialsCommand = se_GetRoleCredentialsCommand;
    var se_ListAccountRolesCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        'x-amz-sso_bearer_token': input.accessToken,
      });
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/assignment/roles`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [
          () => input.maxResults !== void 0,
          () => input.maxResults.toString(),
        ],
        account_id: [
          ,
          (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`),
        ],
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.se_ListAccountRolesCommand = se_ListAccountRolesCommand;
    var se_ListAccountsCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        'x-amz-sso_bearer_token': input.accessToken,
      });
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/assignment/accounts`;
      const query = (0, smithy_client_1.map)({
        next_token: [, input.nextToken],
        max_result: [
          () => input.maxResults !== void 0,
          () => input.maxResults.toString(),
        ],
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'GET',
        headers,
        path: resolvedPath,
        query,
        body,
      });
    };
    exports.se_ListAccountsCommand = se_ListAccountsCommand;
    var se_LogoutCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = (0, smithy_client_1.map)({}, isSerializableHeaderValue, {
        'x-amz-sso_bearer_token': input.accessToken,
      });
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.se_LogoutCommand = se_LogoutCommand;
    var de_GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRoleCredentialsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        roleCredentials: smithy_client_1._json,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_GetRoleCredentialsCommand = de_GetRoleCredentialsCommand;
    var de_GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountRolesCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        nextToken: smithy_client_1.expectString,
        roleList: smithy_client_1._json,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountRolesCommand = de_ListAccountRolesCommand;
    var de_ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListAccountsCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        accountList: smithy_client_1._json,
        nextToken: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_ListAccountsCommand = de_ListAccountsCommand;
    var de_ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'ResourceNotFoundException':
        case 'com.amazonaws.sso#ResourceNotFoundException':
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_LogoutCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.de_LogoutCommand = de_LogoutCommand;
    var de_LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InvalidRequestException':
        case 'com.amazonaws.sso#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'TooManyRequestsException':
        case 'com.amazonaws.sso#TooManyRequestsException':
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case 'UnauthorizedException':
        case 'com.amazonaws.sso#UnauthorizedException':
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(
      SSOServiceException_1.SSOServiceException
    );
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId:
        output.headers['x-amzn-requestid'] ??
        output.headers['x-amzn-request-id'] ??
        output.headers['x-amz-request-id'],
      extendedRequestId: output.headers['x-amz-id-2'],
      cfId: output.headers['x-amz-cf-id'],
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return (
        context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
      );
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) =>
        context.utf8Encoder(body)
      );
    var isSerializableHeaderValue = (value) =>
      value !== void 0 &&
      value !== null &&
      value !== '' &&
      (!Object.getOwnPropertyNames(value).includes('length') ||
        value.length != 0) &&
      (!Object.getOwnPropertyNames(value).includes('size') || value.size != 0);
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          return JSON.parse(encoded);
        }
        return {};
      });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) =>
        Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(',') >= 0) {
          cleanValue = cleanValue.split(',')[0];
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data['__type'] !== void 0) {
        return sanitizeErrorCode(data['__type']);
      }
    };
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            GetRoleCredentialsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'GetRoleCredentialsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog:
            models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog:
            models_0_1.GetRoleCredentialsResponseFilterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_GetRoleCredentialsCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_GetRoleCredentialsCommand)(
          output,
          context
        );
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListAccountRolesCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'ListAccountRolesCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog:
            models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            ListAccountsCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'ListAccountsCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog:
            models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.LogoutCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            LogoutCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOClient';
        const commandName = 'LogoutCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: 'awsssoportal',
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  },
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  'node_modules/@aws-sdk/client-sso/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sso',
      description:
        'AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native',
      version: '3.326.0',
      scripts: {
        build:
          "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps':
          'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client':
          'node ../../scripts/generate-clients/single-service --solo sso',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '3.0.0',
        '@aws-crypto/sha256-js': '3.0.0',
        '@aws-sdk/config-resolver': '3.310.0',
        '@aws-sdk/fetch-http-handler': '3.310.0',
        '@aws-sdk/hash-node': '3.310.0',
        '@aws-sdk/invalid-dependency': '3.310.0',
        '@aws-sdk/middleware-content-length': '3.325.0',
        '@aws-sdk/middleware-endpoint': '3.325.0',
        '@aws-sdk/middleware-host-header': '3.325.0',
        '@aws-sdk/middleware-logger': '3.325.0',
        '@aws-sdk/middleware-recursion-detection': '3.325.0',
        '@aws-sdk/middleware-retry': '3.325.0',
        '@aws-sdk/middleware-serde': '3.325.0',
        '@aws-sdk/middleware-stack': '3.325.0',
        '@aws-sdk/middleware-user-agent': '3.325.0',
        '@aws-sdk/node-config-provider': '3.310.0',
        '@aws-sdk/node-http-handler': '3.321.1',
        '@aws-sdk/protocol-http': '3.310.0',
        '@aws-sdk/smithy-client': '3.325.0',
        '@aws-sdk/types': '3.310.0',
        '@aws-sdk/url-parser': '3.310.0',
        '@aws-sdk/util-base64': '3.310.0',
        '@aws-sdk/util-body-length-browser': '3.310.0',
        '@aws-sdk/util-body-length-node': '3.310.0',
        '@aws-sdk/util-defaults-mode-browser': '3.325.0',
        '@aws-sdk/util-defaults-mode-node': '3.325.0',
        '@aws-sdk/util-endpoints': '3.319.0',
        '@aws-sdk/util-retry': '3.310.0',
        '@aws-sdk/util-user-agent-browser': '3.310.0',
        '@aws-sdk/util-user-agent-node': '3.310.0',
        '@aws-sdk/util-utf8': '3.310.0',
        tslib: '^2.5.0',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.310.0',
        '@tsconfig/node14': '1.0.3',
        '@types/node': '^14.14.31',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typedoc: '0.23.23',
        typescript: '~4.9.5',
      },
      engines: {
        node: '>=14.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage:
        'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sso',
      },
    };
  },
});

// node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  'node_modules/@aws-sdk/hash-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var util_utf8_1 = require_dist_cjs24();
    var buffer_1 = require('buffer');
    var crypto_1 = require('crypto');
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update(
          (0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding))
        );
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret
          ? (0, crypto_1.createHmac)(
              this.algorithmIdentifier,
              castSourceData(this.secret)
            )
          : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === 'string') {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(
          toCast.buffer,
          toCast.byteOffset,
          toCast.byteLength
        );
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  },
});

// node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  'node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs25();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === 'string') {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join('&');
    }
    exports.buildQueryString = buildQueryString;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ['ECONNRESET', 'EPIPE', 'ETIMEDOUT'];
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues)
          ? headerValues.join(',')
          : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on('socket', (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(
              Object.assign(
                new Error(
                  `Socket timed out without establishing a connection within ${timeoutInMs} ms`
                ),
                {
                  name: 'TimeoutError',
                }
              )
            );
          }, timeoutInMs);
          socket.on('connect', () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(
          Object.assign(
            new Error(`Connection timed out after ${timeoutInMs} ms`),
            { name: 'TimeoutError' }
          )
        );
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require('stream');
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers['Expect'] || request.headers['expect'];
      if (expect === '100-continue') {
        httpRequest.on('continue', () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttpHandler = exports.DEFAULT_REQUEST_TIMEOUT = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs38();
    var http_1 = require('http');
    var https_1 = require('https');
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    exports.DEFAULT_REQUEST_TIMEOUT = 0;
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'http/1.1' };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((_options) => {
                resolve(this.resolveDefaultConfig(_options));
              })
              .catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const {
          requestTimeout,
          connectionTimeout,
          socketTimeout,
          httpAgent,
          httpsAgent,
        } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout:
            requestTimeout !== null && requestTimeout !== void 0
              ? requestTimeout
              : socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent:
            httpsAgent || new https_1.Agent({ keepAlive, maxSockets }),
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b =
          (_a = this.config) === null || _a === void 0
            ? void 0
            : _a.httpAgent) === null || _b === void 0
          ? void 0
          : _b.destroy();
        (_d =
          (_c = this.config) === null || _c === void 0
            ? void 0
            : _c.httpsAgent) === null || _d === void 0
          ? void 0
          : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error('Node HTTP request handler config is not resolved');
          }
          if (
            abortSignal === null || abortSignal === void 0
              ? void 0
              : abortSignal.aborted
          ) {
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === 'https:';
          const queryString = (0, querystring_builder_1.buildQueryString)(
            request.query || {}
          );
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(
                res.headers
              ),
              body: res,
            });
            resolve({ response: httpResponse });
          });
          req.on('error', (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: 'TimeoutError' }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(
            req,
            reject,
            this.config.connectionTimeout
          );
          (0, set_socket_timeout_1.setSocketTimeout)(
            req,
            reject,
            this.config.requestTimeout
          );
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-connection-pool.js
var require_node_http2_connection_pool = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-connection-pool.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2ConnectionPool = void 0;
    var NodeHttp2ConnectionPool = class {
      constructor(sessions) {
        this.sessions = [];
        this.sessions =
          sessions !== null && sessions !== void 0 ? sessions : [];
      }
      poll() {
        if (this.sessions.length > 0) {
          return this.sessions.shift();
        }
      }
      offerLast(session) {
        this.sessions.push(session);
      }
      contains(session) {
        return this.sessions.includes(session);
      }
      remove(session) {
        this.sessions = this.sessions.filter((s) => s !== session);
      }
      [Symbol.iterator]() {
        return this.sessions[Symbol.iterator]();
      }
      destroy(connection) {
        for (const session of this.sessions) {
          if (session === connection) {
            if (!session.destroyed) {
              session.destroy();
            }
          }
        }
      }
    };
    exports.NodeHttp2ConnectionPool = NodeHttp2ConnectionPool;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-connection-manager.js
var require_node_http2_connection_manager = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-connection-manager.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2ConnectionManager = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var http2_1 = tslib_1.__importDefault(require('http2'));
    var node_http2_connection_pool_1 = require_node_http2_connection_pool();
    var NodeHttp2ConnectionManager = class {
      constructor(config) {
        this.sessionCache = /* @__PURE__ */ new Map();
        this.config = config;
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError('maxConcurrency must be greater than zero.');
        }
      }
      lease(requestContext, connectionConfiguration) {
        const url = this.getUrlString(requestContext);
        const existingPool = this.sessionCache.get(url);
        if (existingPool) {
          const existingSession = existingPool.poll();
          if (existingSession && !this.config.disableConcurrency) {
            return existingSession;
          }
        }
        const session = http2_1.default.connect(url);
        if (this.config.maxConcurrency) {
          session.settings(
            { maxConcurrentStreams: this.config.maxConcurrency },
            (err) => {
              if (err) {
                throw new Error(
                  'Fail to set maxConcurrentStreams to ' +
                    this.config.maxConcurrency +
                    'when creating new session for ' +
                    requestContext.destination.toString()
                );
              }
            }
          );
        }
        session.unref();
        const destroySessionCb = () => {
          session.destroy();
          this.deleteSession(url, session);
        };
        session.on('goaway', destroySessionCb);
        session.on('error', destroySessionCb);
        session.on('frameError', destroySessionCb);
        session.on('close', () => this.deleteSession(url, session));
        if (connectionConfiguration.requestTimeout) {
          session.setTimeout(
            connectionConfiguration.requestTimeout,
            destroySessionCb
          );
        }
        const connectionPool =
          this.sessionCache.get(url) ||
          new node_http2_connection_pool_1.NodeHttp2ConnectionPool();
        connectionPool.offerLast(session);
        this.sessionCache.set(url, connectionPool);
        return session;
      }
      deleteSession(authority, session) {
        const existingConnectionPool = this.sessionCache.get(authority);
        if (!existingConnectionPool) {
          return;
        }
        if (!existingConnectionPool.contains(session)) {
          return;
        }
        existingConnectionPool.remove(session);
        this.sessionCache.set(authority, existingConnectionPool);
      }
      release(requestContext, session) {
        var _a;
        const cacheKey = this.getUrlString(requestContext);
        (_a = this.sessionCache.get(cacheKey)) === null || _a === void 0
          ? void 0
          : _a.offerLast(session);
      }
      destroy() {
        for (const [key, connectionPool] of this.sessionCache) {
          for (const session of connectionPool) {
            if (!session.destroyed) {
              session.destroy();
            }
            connectionPool.remove(session);
          }
          this.sessionCache.delete(key);
        }
      }
      setMaxConcurrentStreams(maxConcurrentStreams) {
        if (this.config.maxConcurrency && this.config.maxConcurrency <= 0) {
          throw new RangeError(
            'maxConcurrentStreams must be greater than zero.'
          );
        }
        this.config.maxConcurrency = maxConcurrentStreams;
      }
      setDisableConcurrentStreams(disableConcurrentStreams) {
        this.config.disableConcurrency = disableConcurrentStreams;
      }
      getUrlString(request) {
        return request.destination.toString();
      }
    };
    exports.NodeHttp2ConnectionManager = NodeHttp2ConnectionManager;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs38();
    var http2_1 = require('http2');
    var get_transformed_headers_1 = require_get_transformed_headers();
    var node_http2_connection_manager_1 =
      require_node_http2_connection_manager();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: 'h2' };
        this.connectionManager =
          new node_http2_connection_manager_1.NodeHttp2ConnectionManager({});
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === 'function') {
            options()
              .then((opts) => {
                resolve(opts || {});
              })
              .catch(reject);
          } else {
            resolve(options || {});
          }
        });
      }
      destroy() {
        this.connectionManager.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
          this.connectionManager.setDisableConcurrentStreams(
            this.config.disableConcurrentStreams || false
          );
          if (this.config.maxConcurrentStreams) {
            this.connectionManager.setMaxConcurrentStreams(
              this.config.maxConcurrentStreams
            );
          }
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          var _a;
          let fulfilled = false;
          if (
            abortSignal === null || abortSignal === void 0
              ? void 0
              : abortSignal.aborted
          ) {
            fulfilled = true;
            const abortError = new Error('Request aborted');
            abortError.name = 'AbortError';
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ''}`;
          const requestContext = { destination: new URL(authority) };
          const session = this.connectionManager.lease(requestContext, {
            requestTimeout:
              (_a = this.config) === null || _a === void 0
                ? void 0
                : _a.sessionTimeout,
            disableConcurrentStreams: disableConcurrentStreams || false,
          });
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(
            query || {}
          );
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString
              ? `${path}?${queryString}`
              : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method,
          });
          session.ref();
          req.on('response', (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[':status'] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(
                headers
              ),
              body: req,
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.connectionManager.deleteSession(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(
                `Stream timed out because of no activity for ${requestTimeout} ms`
              );
              timeoutError.name = 'TimeoutError';
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error('Request aborted');
              abortError.name = 'AbortError';
              reject(abortError);
            };
          }
          req.on('frameError', (type, code, id) => {
            reject(
              new Error(
                `Frame type id ${type} in stream id ${id} has failed with code ${code}.`
              )
            );
          });
          req.on('error', reject);
          req.on('aborted', () => {
            reject(
              new Error(
                `HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`
              )
            );
          });
          req.on('close', () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(
                new Error(
                  'Unexpected error: http2 request did not get a response'
                )
              );
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.Collector = void 0;
    var stream_1 = require('stream');
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) =>
      new Promise((resolve, reject) => {
        const collector = new collector_1.Collector();
        stream.pipe(collector);
        stream.on('error', (err) => {
          collector.end();
          reject(err);
        });
        collector.on('error', reject);
        collector.on('finish', function () {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve(bytes);
        });
      });
    exports.streamCollector = streamCollector;
  },
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  'node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  },
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  'node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require('fs');
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === 'string') {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === 'number') {
        return body.byteLength;
      } else if (typeof body.size === 'number') {
        return body.size;
      } else if (typeof body.path === 'string' || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === 'number') {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  },
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  'node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  },
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  'node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js'(
    exports,
    module2
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (
          typeof require === 'function' &&
          typeof module2 !== 'undefined' &&
          require('aws-crt')
        ) {
          return ['md/crt-avail'];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  },
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  'node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultUserAgent =
      exports.UA_APP_ID_INI_NAME =
      exports.UA_APP_ID_ENV_NAME =
        void 0;
    var node_config_provider_1 = require_dist_cjs34();
    var os_1 = require('os');
    var process_1 = require('process');
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = 'AWS_SDK_UA_APP_ID';
    exports.UA_APP_ID_INI_NAME = 'sdk-ua-app-id';
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ['aws-sdk-js', clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ['lang/js'],
        ['md/nodejs', `${process_1.versions.node}`],
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0,
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId
            ? [...sections, [`app/${appId}`]]
            : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  },
});

// node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  'node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if ((input.length * 3) % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, 'base64');
      return new Uint8Array(
        buffer.buffer,
        buffer.byteOffset,
        buffer.byteLength
      );
    };
    exports.fromBase64 = fromBase64;
  },
});

// node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  'node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs23();
    var toBase64 = (input) =>
      (0, util_buffer_from_1.fromArrayBuffer)(
        input.buffer,
        input.byteOffset,
        input.byteLength
      ).toString('base64');
    exports.toBase64 = toBase64;
  },
});

// node_modules/@aws-sdk/util-base64/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  'node_modules/@aws-sdk/util-base64/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports);
    tslib_1.__exportStar(require_toBase64(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var p = 'required';
    var q = 'fn';
    var r = 'argv';
    var s = 'ref';
    var a = 'PartitionResult';
    var b = 'tree';
    var c = 'error';
    var d = 'endpoint';
    var e = { [p]: false, type: 'String' };
    var f = { [p]: true, default: false, type: 'Boolean' };
    var g = { [s]: 'Endpoint' };
    var h = { [q]: 'booleanEquals', [r]: [{ [s]: 'UseFIPS' }, true] };
    var i = { [q]: 'booleanEquals', [r]: [{ [s]: 'UseDualStack' }, true] };
    var j = {};
    var k = {
      [q]: 'booleanEquals',
      [r]: [true, { [q]: 'getAttr', [r]: [{ [s]: a }, 'supportsFIPS'] }],
    };
    var l = {
      [q]: 'booleanEquals',
      [r]: [true, { [q]: 'getAttr', [r]: [{ [s]: a }, 'supportsDualStack'] }],
    };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = {
      version: '1.0',
      parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e },
      rules: [
        {
          conditions: [
            { [q]: 'aws.partition', [r]: [{ [s]: 'Region' }], assign: a },
          ],
          type: b,
          rules: [
            {
              conditions: [
                { [q]: 'isSet', [r]: m },
                { [q]: 'parseURL', [r]: m, assign: 'url' },
              ],
              type: b,
              rules: [
                {
                  conditions: n,
                  error:
                    'Invalid Configuration: FIPS and custom endpoint are not supported',
                  type: c,
                },
                {
                  type: b,
                  rules: [
                    {
                      conditions: o,
                      error:
                        'Invalid Configuration: Dualstack and custom endpoint are not supported',
                      type: c,
                    },
                    {
                      endpoint: { url: g, properties: j, headers: j },
                      type: d,
                    },
                  ],
                },
              ],
            },
            {
              conditions: [h, i],
              type: b,
              rules: [
                {
                  conditions: [k, l],
                  type: b,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        properties: j,
                        headers: j,
                      },
                      type: d,
                    },
                  ],
                },
                {
                  error:
                    'FIPS and DualStack are enabled, but this partition does not support one or both',
                  type: c,
                },
              ],
            },
            {
              conditions: n,
              type: b,
              rules: [
                {
                  conditions: [k],
                  type: b,
                  rules: [
                    {
                      type: b,
                      rules: [
                        {
                          endpoint: {
                            url: 'https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}',
                            properties: j,
                            headers: j,
                          },
                          type: d,
                        },
                      ],
                    },
                  ],
                },
                {
                  error:
                    'FIPS is enabled but this partition does not support FIPS',
                  type: c,
                },
              ],
            },
            {
              conditions: o,
              type: b,
              rules: [
                {
                  conditions: [l],
                  type: b,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        properties: j,
                        headers: j,
                      },
                      type: d,
                    },
                  ],
                },
                {
                  error:
                    'DualStack is enabled but this partition does not support DualStack',
                  type: c,
                },
              ],
            },
            {
              endpoint: {
                url: 'https://portal.sso.{Region}.{PartitionResult#dnsSuffix}',
                properties: j,
                headers: j,
              },
              type: d,
            },
          ],
        },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs29();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger,
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var url_parser_1 = require_dist_cjs4();
    var util_base64_1 = require_dist_cjs42();
    var util_utf8_1 = require_dist_cjs24();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: '2019-06-10',
      base64Decoder:
        (config == null ? void 0 : config.base64Decoder) ??
        util_base64_1.fromBase64,
      base64Encoder:
        (config == null ? void 0 : config.base64Encoder) ??
        util_base64_1.toBase64,
      disableHostPrefix:
        (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider:
        (config == null ? void 0 : config.endpointProvider) ??
        endpointResolver_1.defaultEndpointResolver,
      logger:
        (config == null ? void 0 : config.logger) ??
        new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? 'SSO',
      urlParser:
        (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder:
        (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder:
        (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.IMDS_REGION_PATH =
      exports.DEFAULTS_MODE_OPTIONS =
      exports.ENV_IMDS_DISABLED =
      exports.AWS_DEFAULT_REGION_ENV =
      exports.AWS_REGION_ENV =
      exports.AWS_EXECUTION_ENV =
        void 0;
    exports.AWS_EXECUTION_ENV = 'AWS_EXECUTION_ENV';
    exports.AWS_REGION_ENV = 'AWS_REGION';
    exports.AWS_DEFAULT_REGION_ENV = 'AWS_DEFAULT_REGION';
    exports.ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    exports.DEFAULTS_MODE_OPTIONS = [
      'in-region',
      'cross-region',
      'mobile',
      'standard',
      'legacy',
    ];
    exports.IMDS_REGION_PATH = '/latest/meta-data/placement/region';
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = 'AWS_DEFAULTS_MODE';
    var AWS_DEFAULTS_MODE_CONFIG = 'defaults_mode';
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: 'legacy',
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_imds_1 = require_dist_cjs35();
    var node_config_provider_1 = require_dist_cjs34();
    var property_provider_1 = require_dist_cjs20();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({
      region = (0, node_config_provider_1.loadConfig)(
        config_resolver_1.NODE_REGION_CONFIG_OPTIONS
      ),
      defaultsMode = (0, node_config_provider_1.loadConfig)(
        defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS
      ),
    } = {}) =>
      (0, property_provider_1.memoize)(async () => {
        const mode =
          typeof defaultsMode === 'function'
            ? await defaultsMode()
            : defaultsMode;
        switch (
          mode === null || mode === void 0 ? void 0 : mode.toLowerCase()
        ) {
          case 'auto':
            return resolveNodeDefaultsModeAuto(region);
          case 'in-region':
          case 'cross-region':
          case 'mobile':
          case 'standard':
          case 'legacy':
            return Promise.resolve(
              mode === null || mode === void 0
                ? void 0
                : mode.toLocaleLowerCase()
            );
          case void 0:
            return Promise.resolve('legacy');
          default:
            throw new Error(
              `Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(
                ', '
              )}, got ${mode}`
            );
        }
      });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion =
          typeof clientRegion === 'function'
            ? await clientRegion()
            : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return 'standard';
        }
        if (resolvedRegion === inferredRegion) {
          return 'in-region';
        } else {
          return 'cross-region';
        }
      }
      return 'standard';
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (
        process.env[constants_1.AWS_EXECUTION_ENV] &&
        (process.env[constants_1.AWS_REGION_ENV] ||
          process.env[constants_1.AWS_DEFAULT_REGION_ENV])
      ) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null &&
          _a !== void 0
          ? _a
          : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0,
          credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (
            await (0, credential_provider_imds_1.httpRequest)({
              ...endpoint,
              path: constants_1.IMDS_REGION_PATH,
            })
          ).toString();
        } catch (e) {}
      }
    };
  },
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  'node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs10();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs19();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs39();
    var util_body_length_node_1 = require_dist_cjs40();
    var util_retry_1 = require_dist_cjs18();
    var util_user_agent_node_1 = require_dist_cjs41();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs2();
    var util_defaults_mode_node_1 = require_dist_cjs43();
    var smithy_client_2 = require_dist_cjs2();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0,
      util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () =>
        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(
        config
      );
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        bodyLengthChecker:
          (config == null ? void 0 : config.bodyLengthChecker) ??
          util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider:
          (config == null ? void 0 : config.defaultUserAgentProvider) ??
          (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version,
          }),
        maxAttempts:
          (config == null ? void 0 : config.maxAttempts) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS
          ),
        region:
          (config == null ? void 0 : config.region) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
          ),
        requestHandler:
          (config == null ? void 0 : config.requestHandler) ??
          new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (config == null ? void 0 : config.retryMode) ??
          (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async () =>
              (await defaultConfigProvider()).retryMode ||
              util_retry_1.DEFAULT_RETRY_MODE,
          }),
        sha256:
          (config == null ? void 0 : config.sha256) ??
          hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (config == null ? void 0 : config.streamCollector) ??
          node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (config == null ? void 0 : config.useDualstackEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS
          ),
        useFipsEndpoint:
          (config == null ? void 0 : config.useFipsEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS
          ),
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs14();
    var middleware_logger_1 = require_dist_cjs15();
    var middleware_recursion_detection_1 = require_dist_cjs16();
    var middleware_retry_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs2();
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0,
        EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(
          _config_2
        );
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(
          _config_4
        );
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(
          _config_5
        );
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use(
          (0, middleware_retry_1.getRetryPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_host_header_1.getHostHeaderPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_logger_1.getLoggerPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(
            this.config
          )
        );
        this.middlewareStack.use(
          (0, middleware_user_agent_1.getUserAgentPlugin)(this.config)
        );
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSO = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var commands = {
      GetRoleCredentialsCommand:
        GetRoleCredentialsCommand_1.GetRoleCredentialsCommand,
      ListAccountRolesCommand:
        ListAccountRolesCommand_1.ListAccountRolesCommand,
      ListAccountsCommand: ListAccountsCommand_1.ListAccountsCommand,
      LogoutCommand: LogoutCommand_1.LogoutCommand,
    };
    var SSO = class extends SSOClient_1.SSOClient {};
    exports.SSO = SSO;
    (0, smithy_client_1.createAggregatedClient)(commands, SSO);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListAccountRolesCommand_1.ListAccountRolesCommand(input),
        ...args
      );
    };
    async function* paginateListAccountRoles(
      config,
      input,
      ...additionalArguments
    ) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input['maxResults'] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected SSO | SSOClient');
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListAccountsCommand_1.ListAccountsCommand(input),
        ...args
      );
    };
    async function* paginateListAccounts(
      config,
      input,
      ...additionalArguments
    ) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input['maxResults'] = config.pageSize;
        if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected SSO | SSOClient');
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  },
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  'node_modules/@aws-sdk/client-sso/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, 'SSOServiceException', {
      enumerable: true,
      get: function () {
        return SSOServiceException_1.SSOServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/constants.js
var require_constants8 = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/constants.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.REFRESH_MESSAGE = exports.EXPIRE_WINDOW_MS = void 0;
    exports.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js
var require_SSOOIDCServiceException = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOOIDCServiceException = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var SSOOIDCServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);
      }
    };
    exports.SSOOIDCServiceException = SSOOIDCServiceException;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js
var require_models_04 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.InvalidClientMetadataException =
      exports.UnsupportedGrantTypeException =
      exports.UnauthorizedClientException =
      exports.SlowDownException =
      exports.InvalidScopeException =
      exports.InvalidRequestException =
      exports.InvalidGrantException =
      exports.InvalidClientException =
      exports.InternalServerException =
      exports.ExpiredTokenException =
      exports.AuthorizationPendingException =
      exports.AccessDeniedException =
        void 0;
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var AccessDeniedException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'AccessDeniedException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'AccessDeniedException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'AuthorizationPendingException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'AuthorizationPendingException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'ExpiredTokenException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'ExpiredTokenException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InternalServerException',
          $fault: 'server',
          ...opts,
        });
        this.name = 'InternalServerException';
        this.$fault = 'server';
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InternalServerException = InternalServerException;
    var InvalidClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidClientException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidClientException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidGrantException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidGrantException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidGrantException = InvalidGrantException;
    var InvalidRequestException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidRequestException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidRequestException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidScopeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidScopeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'SlowDownException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'SlowDownException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'UnauthorizedClientException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'UnauthorizedClientException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'UnsupportedGrantTypeException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'UnsupportedGrantTypeException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: 'InvalidClientMetadataException',
          $fault: 'client',
          ...opts,
        });
        this.name = 'InvalidClientMetadataException';
        this.$fault = 'client';
        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientMetadataException = InvalidClientMetadataException;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson12 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.de_StartDeviceAuthorizationCommand =
      exports.de_RegisterClientCommand =
      exports.de_CreateTokenCommand =
      exports.se_StartDeviceAuthorizationCommand =
      exports.se_RegisterClientCommand =
      exports.se_CreateTokenCommand =
        void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs2();
    var models_0_1 = require_models_04();
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var se_CreateTokenCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = {
        'content-type': 'application/json',
      };
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/token`;
      let body;
      body = JSON.stringify(
        (0, smithy_client_1.take)(input, {
          clientId: [],
          clientSecret: [],
          code: [],
          deviceCode: [],
          grantType: [],
          redirectUri: [],
          refreshToken: [],
          scope: (_2) => (0, smithy_client_1._json)(_2),
        })
      );
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.se_CreateTokenCommand = se_CreateTokenCommand;
    var se_RegisterClientCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = {
        'content-type': 'application/json',
      };
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/client/register`;
      let body;
      body = JSON.stringify(
        (0, smithy_client_1.take)(input, {
          clientName: [],
          clientType: [],
          scopes: (_2) => (0, smithy_client_1._json)(_2),
        })
      );
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.se_RegisterClientCommand = se_RegisterClientCommand;
    var se_StartDeviceAuthorizationCommand = async (input, context) => {
      const {
        hostname,
        protocol = 'https',
        port,
        path: basePath,
      } = await context.endpoint();
      const headers = {
        'content-type': 'application/json',
      };
      const resolvedPath = `${
        (basePath == null ? void 0 : basePath.endsWith('/'))
          ? basePath.slice(0, -1)
          : basePath || ''
      }/device_authorization`;
      let body;
      body = JSON.stringify(
        (0, smithy_client_1.take)(input, {
          clientId: [],
          clientSecret: [],
          startUrl: [],
        })
      );
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: 'POST',
        headers,
        path: resolvedPath,
        body,
      });
    };
    exports.se_StartDeviceAuthorizationCommand =
      se_StartDeviceAuthorizationCommand;
    var de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateTokenCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        accessToken: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        idToken: smithy_client_1.expectString,
        refreshToken: smithy_client_1.expectString,
        tokenType: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_CreateTokenCommand = de_CreateTokenCommand;
    var de_CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'AccessDeniedException':
        case 'com.amazonaws.ssooidc#AccessDeniedException':
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case 'AuthorizationPendingException':
        case 'com.amazonaws.ssooidc#AuthorizationPendingException':
          throw await de_AuthorizationPendingExceptionRes(
            parsedOutput,
            context
          );
        case 'ExpiredTokenException':
        case 'com.amazonaws.ssooidc#ExpiredTokenException':
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case 'InternalServerException':
        case 'com.amazonaws.ssooidc#InternalServerException':
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case 'InvalidClientException':
        case 'com.amazonaws.ssooidc#InvalidClientException':
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case 'InvalidGrantException':
        case 'com.amazonaws.ssooidc#InvalidGrantException':
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case 'InvalidRequestException':
        case 'com.amazonaws.ssooidc#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'InvalidScopeException':
        case 'com.amazonaws.ssooidc#InvalidScopeException':
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case 'SlowDownException':
        case 'com.amazonaws.ssooidc#SlowDownException':
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case 'UnauthorizedClientException':
        case 'com.amazonaws.ssooidc#UnauthorizedClientException':
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case 'UnsupportedGrantTypeException':
        case 'com.amazonaws.ssooidc#UnsupportedGrantTypeException':
          throw await de_UnsupportedGrantTypeExceptionRes(
            parsedOutput,
            context
          );
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RegisterClientCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        authorizationEndpoint: smithy_client_1.expectString,
        clientId: smithy_client_1.expectString,
        clientIdIssuedAt: smithy_client_1.expectLong,
        clientSecret: smithy_client_1.expectString,
        clientSecretExpiresAt: smithy_client_1.expectLong,
        tokenEndpoint: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_RegisterClientCommand = de_RegisterClientCommand;
    var de_RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerException':
        case 'com.amazonaws.ssooidc#InternalServerException':
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case 'InvalidClientMetadataException':
        case 'com.amazonaws.ssooidc#InvalidClientMetadataException':
          throw await de_InvalidClientMetadataExceptionRes(
            parsedOutput,
            context
          );
        case 'InvalidRequestException':
        case 'com.amazonaws.ssooidc#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'InvalidScopeException':
        case 'com.amazonaws.ssooidc#InvalidScopeException':
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var de_StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
      });
      const data = (0, smithy_client_1.expectNonNull)(
        (0, smithy_client_1.expectObject)(
          await parseBody(output.body, context)
        ),
        'body'
      );
      const doc = (0, smithy_client_1.take)(data, {
        deviceCode: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        interval: smithy_client_1.expectInt32,
        userCode: smithy_client_1.expectString,
        verificationUri: smithy_client_1.expectString,
        verificationUriComplete: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      return contents;
    };
    exports.de_StartDeviceAuthorizationCommand =
      de_StartDeviceAuthorizationCommand;
    var de_StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case 'InternalServerException':
        case 'com.amazonaws.ssooidc#InternalServerException':
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case 'InvalidClientException':
        case 'com.amazonaws.ssooidc#InvalidClientException':
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case 'InvalidRequestException':
        case 'com.amazonaws.ssooidc#InvalidRequestException':
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case 'SlowDownException':
        case 'com.amazonaws.ssooidc#SlowDownException':
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case 'UnauthorizedClientException':
        case 'com.amazonaws.ssooidc#UnauthorizedClientException':
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError({
            output,
            parsedBody,
            errorCode,
          });
      }
    };
    var throwDefaultError = (0, smithy_client_1.withBaseException)(
      SSOOIDCServiceException_1.SSOOIDCServiceException
    );
    var de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidClientMetadataExceptionRes = async (
      parsedOutput,
      context
    ) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = (0, smithy_client_1.map)({});
      const data = parsedOutput.body;
      const doc = (0, smithy_client_1.take)(data, {
        error: smithy_client_1.expectString,
        error_description: smithy_client_1.expectString,
      });
      Object.assign(contents, doc);
      const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
      });
      return (0, smithy_client_1.decorateServiceException)(
        exception,
        parsedOutput.body
      );
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId:
        output.headers['x-amzn-requestid'] ??
        output.headers['x-amzn-request-id'] ??
        output.headers['x-amz-request-id'],
      extendedRequestId: output.headers['x-amz-id-2'],
      cfId: output.headers['x-amz-cf-id'],
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return (
        context.streamCollector(streamBody) || Promise.resolve(new Uint8Array())
      );
    };
    var collectBodyString = (streamBody, context) =>
      collectBody(streamBody, context).then((body) =>
        context.utf8Encoder(body)
      );
    var parseBody = (streamBody, context) =>
      collectBodyString(streamBody, context).then((encoded) => {
        if (encoded.length) {
          return JSON.parse(encoded);
        }
        return {};
      });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) =>
        Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === 'number') {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(',') >= 0) {
          cleanValue = cleanValue.split(',')[0];
        }
        if (cleanValue.indexOf(':') >= 0) {
          cleanValue = cleanValue.split(':')[0];
        }
        if (cleanValue.indexOf('#') >= 0) {
          cleanValue = cleanValue.split('#')[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, 'x-amzn-errortype');
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data['__type'] !== void 0) {
        return sanitizeErrorCode(data['__type']);
      }
    };
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js
var require_CreateTokenCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CreateTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var CreateTokenCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            CreateTokenCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOOIDCClient';
        const commandName = 'CreateTokenCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_CreateTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_CreateTokenCommand)(output, context);
      }
    };
    exports.CreateTokenCommand = CreateTokenCommand;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js
var require_RegisterClientCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.RegisterClientCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var RegisterClientCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            RegisterClientCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOOIDCClient';
        const commandName = 'RegisterClientCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_RegisterClientCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_RegisterClientCommand)(output, context);
      }
    };
    exports.RegisterClientCommand = RegisterClientCommand;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js
var require_StartDeviceAuthorizationCommand = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.StartDeviceAuthorizationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_serde_1 = require_dist_cjs5();
    var smithy_client_1 = require_dist_cjs2();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var StartDeviceAuthorizationCommand = class extends smithy_client_1.Command {
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: 'builtInParams', name: 'useFipsEndpoint' },
          Endpoint: { type: 'builtInParams', name: 'endpoint' },
          Region: { type: 'builtInParams', name: 'region' },
          UseDualStack: { type: 'builtInParams', name: 'useDualstackEndpoint' },
        };
      }
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(
          (0, middleware_serde_1.getSerdePlugin)(
            configuration,
            this.serialize,
            this.deserialize
          )
        );
        this.middlewareStack.use(
          (0, middleware_endpoint_1.getEndpointPlugin)(
            configuration,
            StartDeviceAuthorizationCommand.getEndpointParameterInstructions()
          )
        );
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = 'SSOOIDCClient';
        const commandName = 'StartDeviceAuthorizationCommand';
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (_2) => _2,
          outputFilterSensitiveLog: (_2) => _2,
        };
        const { requestHandler } = configuration;
        return stack.resolve(
          (request) => requestHandler.handle(request.request, options || {}),
          handlerExecutionContext
        );
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.se_StartDeviceAuthorizationCommand)(
          input,
          context
        );
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.de_StartDeviceAuthorizationCommand)(
          output,
          context
        );
      }
    };
    exports.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters4 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: 'awsssooidc',
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package4 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/package.json'(exports, module2) {
    module2.exports = {
      name: '@aws-sdk/client-sso-oidc',
      description:
        'AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native',
      version: '3.326.0',
      scripts: {
        build:
          "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        'build:cjs': 'tsc -p tsconfig.cjs.json',
        'build:docs': 'typedoc',
        'build:es': 'tsc -p tsconfig.es.json',
        'build:include:deps':
          'lerna run --scope $npm_package_name --include-dependencies build',
        'build:types': 'tsc -p tsconfig.types.json',
        'build:types:downlevel': 'downlevel-dts dist-types dist-types/ts3.4',
        clean: 'rimraf ./dist-* && rimraf *.tsbuildinfo',
        'extract:docs': 'api-extractor run --local',
        'generate:client':
          'node ../../scripts/generate-clients/single-service --solo sso-oidc',
      },
      main: './dist-cjs/index.js',
      types: './dist-types/index.d.ts',
      module: './dist-es/index.js',
      sideEffects: false,
      dependencies: {
        '@aws-crypto/sha256-browser': '3.0.0',
        '@aws-crypto/sha256-js': '3.0.0',
        '@aws-sdk/config-resolver': '3.310.0',
        '@aws-sdk/fetch-http-handler': '3.310.0',
        '@aws-sdk/hash-node': '3.310.0',
        '@aws-sdk/invalid-dependency': '3.310.0',
        '@aws-sdk/middleware-content-length': '3.325.0',
        '@aws-sdk/middleware-endpoint': '3.325.0',
        '@aws-sdk/middleware-host-header': '3.325.0',
        '@aws-sdk/middleware-logger': '3.325.0',
        '@aws-sdk/middleware-recursion-detection': '3.325.0',
        '@aws-sdk/middleware-retry': '3.325.0',
        '@aws-sdk/middleware-serde': '3.325.0',
        '@aws-sdk/middleware-stack': '3.325.0',
        '@aws-sdk/middleware-user-agent': '3.325.0',
        '@aws-sdk/node-config-provider': '3.310.0',
        '@aws-sdk/node-http-handler': '3.321.1',
        '@aws-sdk/protocol-http': '3.310.0',
        '@aws-sdk/smithy-client': '3.325.0',
        '@aws-sdk/types': '3.310.0',
        '@aws-sdk/url-parser': '3.310.0',
        '@aws-sdk/util-base64': '3.310.0',
        '@aws-sdk/util-body-length-browser': '3.310.0',
        '@aws-sdk/util-body-length-node': '3.310.0',
        '@aws-sdk/util-defaults-mode-browser': '3.325.0',
        '@aws-sdk/util-defaults-mode-node': '3.325.0',
        '@aws-sdk/util-endpoints': '3.319.0',
        '@aws-sdk/util-retry': '3.310.0',
        '@aws-sdk/util-user-agent-browser': '3.310.0',
        '@aws-sdk/util-user-agent-node': '3.310.0',
        '@aws-sdk/util-utf8': '3.310.0',
        tslib: '^2.5.0',
      },
      devDependencies: {
        '@aws-sdk/service-client-documentation-generator': '3.310.0',
        '@tsconfig/node14': '1.0.3',
        '@types/node': '^14.14.31',
        concurrently: '7.0.0',
        'downlevel-dts': '0.10.1',
        rimraf: '3.0.2',
        typedoc: '0.23.23',
        typescript: '~4.9.5',
      },
      engines: {
        node: '>=14.0.0',
      },
      typesVersions: {
        '<4.0': {
          'dist-types/*': ['dist-types/ts3.4/*'],
        },
      },
      files: ['dist-*/**'],
      author: {
        name: 'AWS SDK for JavaScript Team',
        url: 'https://aws.amazon.com/javascript/',
      },
      license: 'Apache-2.0',
      browser: {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.browser',
      },
      'react-native': {
        './dist-es/runtimeConfig': './dist-es/runtimeConfig.native',
      },
      homepage:
        'https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc',
      repository: {
        type: 'git',
        url: 'https://github.com/aws/aws-sdk-js-v3.git',
        directory: 'clients/client-sso-oidc',
      },
    };
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var p = 'required';
    var q = 'fn';
    var r = 'argv';
    var s = 'ref';
    var a = 'PartitionResult';
    var b = 'tree';
    var c = 'error';
    var d = 'endpoint';
    var e = { [p]: false, type: 'String' };
    var f = { [p]: true, default: false, type: 'Boolean' };
    var g = { [s]: 'Endpoint' };
    var h = { [q]: 'booleanEquals', [r]: [{ [s]: 'UseFIPS' }, true] };
    var i = { [q]: 'booleanEquals', [r]: [{ [s]: 'UseDualStack' }, true] };
    var j = {};
    var k = {
      [q]: 'booleanEquals',
      [r]: [true, { [q]: 'getAttr', [r]: [{ [s]: a }, 'supportsFIPS'] }],
    };
    var l = {
      [q]: 'booleanEquals',
      [r]: [true, { [q]: 'getAttr', [r]: [{ [s]: a }, 'supportsDualStack'] }],
    };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = {
      version: '1.0',
      parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e },
      rules: [
        {
          conditions: [
            { [q]: 'aws.partition', [r]: [{ [s]: 'Region' }], assign: a },
          ],
          type: b,
          rules: [
            {
              conditions: [
                { [q]: 'isSet', [r]: m },
                { [q]: 'parseURL', [r]: m, assign: 'url' },
              ],
              type: b,
              rules: [
                {
                  conditions: n,
                  error:
                    'Invalid Configuration: FIPS and custom endpoint are not supported',
                  type: c,
                },
                {
                  type: b,
                  rules: [
                    {
                      conditions: o,
                      error:
                        'Invalid Configuration: Dualstack and custom endpoint are not supported',
                      type: c,
                    },
                    {
                      endpoint: { url: g, properties: j, headers: j },
                      type: d,
                    },
                  ],
                },
              ],
            },
            {
              conditions: [h, i],
              type: b,
              rules: [
                {
                  conditions: [k, l],
                  type: b,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        properties: j,
                        headers: j,
                      },
                      type: d,
                    },
                  ],
                },
                {
                  error:
                    'FIPS and DualStack are enabled, but this partition does not support one or both',
                  type: c,
                },
              ],
            },
            {
              conditions: n,
              type: b,
              rules: [
                {
                  conditions: [k],
                  type: b,
                  rules: [
                    {
                      type: b,
                      rules: [
                        {
                          endpoint: {
                            url: 'https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}',
                            properties: j,
                            headers: j,
                          },
                          type: d,
                        },
                      ],
                    },
                  ],
                },
                {
                  error:
                    'FIPS is enabled but this partition does not support FIPS',
                  type: c,
                },
              ],
            },
            {
              conditions: o,
              type: b,
              rules: [
                {
                  conditions: [l],
                  type: b,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        properties: j,
                        headers: j,
                      },
                      type: d,
                    },
                  ],
                },
                {
                  error:
                    'DualStack is enabled but this partition does not support DualStack',
                  type: c,
                },
              ],
            },
            {
              endpoint: {
                url: 'https://oidc.{Region}.{PartitionResult#dnsSuffix}',
                properties: j,
                headers: j,
              },
              type: d,
            },
          ],
        },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs29();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger,
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var url_parser_1 = require_dist_cjs4();
    var util_base64_1 = require_dist_cjs42();
    var util_utf8_1 = require_dist_cjs24();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: '2019-06-10',
      base64Decoder:
        (config == null ? void 0 : config.base64Decoder) ??
        util_base64_1.fromBase64,
      base64Encoder:
        (config == null ? void 0 : config.base64Encoder) ??
        util_base64_1.toBase64,
      disableHostPrefix:
        (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider:
        (config == null ? void 0 : config.endpointProvider) ??
        endpointResolver_1.defaultEndpointResolver,
      logger:
        (config == null ? void 0 : config.logger) ??
        new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? 'SSO OIDC',
      urlParser:
        (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder:
        (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder:
        (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var config_resolver_1 = require_dist_cjs10();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs19();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs39();
    var util_body_length_node_1 = require_dist_cjs40();
    var util_retry_1 = require_dist_cjs18();
    var util_user_agent_node_1 = require_dist_cjs41();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs2();
    var util_defaults_mode_node_1 = require_dist_cjs43();
    var smithy_client_2 = require_dist_cjs2();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0,
      util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () =>
        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(
        config
      );
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        bodyLengthChecker:
          (config == null ? void 0 : config.bodyLengthChecker) ??
          util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider:
          (config == null ? void 0 : config.defaultUserAgentProvider) ??
          (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version,
          }),
        maxAttempts:
          (config == null ? void 0 : config.maxAttempts) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS
          ),
        region:
          (config == null ? void 0 : config.region) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
          ),
        requestHandler:
          (config == null ? void 0 : config.requestHandler) ??
          new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (config == null ? void 0 : config.retryMode) ??
          (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async () =>
              (await defaultConfigProvider()).retryMode ||
              util_retry_1.DEFAULT_RETRY_MODE,
          }),
        sha256:
          (config == null ? void 0 : config.sha256) ??
          hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (config == null ? void 0 : config.streamCollector) ??
          node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (config == null ? void 0 : config.useDualstackEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS
          ),
        useFipsEndpoint:
          (config == null ? void 0 : config.useFipsEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS
          ),
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js
var require_SSOOIDCClient = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOOIDCClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs14();
    var middleware_logger_1 = require_dist_cjs15();
    var middleware_recursion_detection_1 = require_dist_cjs16();
    var middleware_retry_1 = require_dist_cjs19();
    var middleware_user_agent_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs2();
    var EndpointParameters_1 = require_EndpointParameters4();
    var runtimeConfig_1 = require_runtimeConfig2();
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0,
        EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(
          _config_2
        );
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(
          _config_4
        );
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(
          _config_5
        );
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use(
          (0, middleware_retry_1.getRetryPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_host_header_1.getHostHeaderPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_logger_1.getLoggerPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(
            this.config
          )
        );
        this.middlewareStack.use(
          (0, middleware_user_agent_1.getUserAgentPlugin)(this.config)
        );
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOOIDCClient = SSOOIDCClient;
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js
var require_SSOOIDC = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOOIDC = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var CreateTokenCommand_1 = require_CreateTokenCommand();
    var RegisterClientCommand_1 = require_RegisterClientCommand();
    var StartDeviceAuthorizationCommand_1 =
      require_StartDeviceAuthorizationCommand();
    var SSOOIDCClient_1 = require_SSOOIDCClient();
    var commands = {
      CreateTokenCommand: CreateTokenCommand_1.CreateTokenCommand,
      RegisterClientCommand: RegisterClientCommand_1.RegisterClientCommand,
      StartDeviceAuthorizationCommand:
        StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand,
    };
    var SSOOIDC = class extends SSOOIDCClient_1.SSOOIDCClient {};
    exports.SSOOIDC = SSOOIDC;
    (0, smithy_client_1.createAggregatedClient)(commands, SSOOIDC);
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CreateTokenCommand(), exports);
    tslib_1.__exportStar(require_RegisterClientCommand(), exports);
    tslib_1.__exportStar(require_StartDeviceAuthorizationCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js
var require_models2 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_04(), exports);
  },
});

// node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  'node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.SSOOIDCServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOOIDC(), exports);
    tslib_1.__exportStar(require_SSOOIDCClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    Object.defineProperty(exports, 'SSOOIDCServiceException', {
      enumerable: true,
      get: function () {
        return SSOOIDCServiceException_1.SSOOIDCServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js
var require_getSsoOidcClient = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSsoOidcClient = void 0;
    var client_sso_oidc_1 = require_dist_cjs45();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({
        region: ssoRegion,
      });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports.getSsoOidcClient = getSsoOidcClient;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js
var require_getNewSsoOidcToken = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getNewSsoOidcToken = void 0;
    var client_sso_oidc_1 = require_dist_cjs45();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(
        new client_sso_oidc_1.CreateTokenCommand({
          clientId: ssoToken.clientId,
          clientSecret: ssoToken.clientSecret,
          refreshToken: ssoToken.refreshToken,
          grantType: 'refresh_token',
        })
      );
    };
    exports.getNewSsoOidcToken = getNewSsoOidcToken;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js
var require_validateTokenExpiry = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs20();
    var constants_1 = require_constants8();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(
          `Token is expired. ${constants_1.REFRESH_MESSAGE}`,
          false
        );
      }
    };
    exports.validateTokenExpiry = validateTokenExpiry;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js
var require_validateTokenKey = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs20();
    var constants_1 = require_constants8();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === 'undefined') {
        throw new property_provider_1.TokenProviderError(
          `Value not present for '${key}' in SSO Token${
            forRefresh ? '. Cannot refresh' : ''
          }. ${constants_1.REFRESH_MESSAGE}`,
          false
        );
      }
    };
    exports.validateTokenKey = validateTokenKey;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js
var require_writeSSOTokenToFile = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var fs_1 = require('fs');
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(
        id
      );
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports.writeSSOTokenToFile = writeSSOTokenToFile;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js
var require_fromSso = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSso = void 0;
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var constants_1 = require_constants8();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(
          init
        );
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.TokenProviderError(
            `Profile '${profileName}' could not be found in shared credentials file.`,
            false
          );
        } else if (!profile['sso_session']) {
          throw new property_provider_1.TokenProviderError(
            `Profile '${profileName}' is missing required property 'sso_session'.`
          );
        }
        const ssoSessionName = profile['sso_session'];
        const ssoSessions = await (0,
        shared_ini_file_loader_1.loadSsoSessionData)(init);
        const ssoSession = ssoSessions[ssoSessionName];
        if (!ssoSession) {
          throw new property_provider_1.TokenProviderError(
            `Sso session '${ssoSessionName}' could not be found in shared credentials file.`,
            false
          );
        }
        for (const ssoSessionRequiredKey of ['sso_start_url', 'sso_region']) {
          if (!ssoSession[ssoSessionRequiredKey]) {
            throw new property_provider_1.TokenProviderError(
              `Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`,
              false
            );
          }
        }
        const ssoStartUrl = ssoSession['sso_start_url'];
        const ssoRegion = ssoSession['sso_region'];
        let ssoToken;
        try {
          ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(
            ssoSessionName
          );
        } catch (e) {
          throw new property_provider_1.TokenProviderError(
            `The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`,
            false
          );
        }
        (0, validateTokenKey_1.validateTokenKey)(
          'accessToken',
          ssoToken.accessToken
        );
        (0, validateTokenKey_1.validateTokenKey)(
          'expiresAt',
          ssoToken.expiresAt
        );
        const { accessToken, expiresAt } = ssoToken;
        const existingToken = {
          token: accessToken,
          expiration: new Date(expiresAt),
        };
        if (
          existingToken.expiration.getTime() - Date.now() >
          constants_1.EXPIRE_WINDOW_MS
        ) {
          return existingToken;
        }
        if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
          (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
          return existingToken;
        }
        (0, validateTokenKey_1.validateTokenKey)(
          'clientId',
          ssoToken.clientId,
          true
        );
        (0, validateTokenKey_1.validateTokenKey)(
          'clientSecret',
          ssoToken.clientSecret,
          true
        );
        (0, validateTokenKey_1.validateTokenKey)(
          'refreshToken',
          ssoToken.refreshToken,
          true
        );
        try {
          lastRefreshAttemptTime.setTime(Date.now());
          const newSsoOidcToken = await (0,
          getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
          (0, validateTokenKey_1.validateTokenKey)(
            'accessToken',
            newSsoOidcToken.accessToken
          );
          (0, validateTokenKey_1.validateTokenKey)(
            'expiresIn',
            newSsoOidcToken.expiresIn
          );
          const newTokenExpiration = new Date(
            Date.now() + newSsoOidcToken.expiresIn * 1e3
          );
          try {
            await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(
              ssoSessionName,
              {
                ...ssoToken,
                accessToken: newSsoOidcToken.accessToken,
                expiresAt: newTokenExpiration.toISOString(),
                refreshToken: newSsoOidcToken.refreshToken,
              }
            );
          } catch (error) {}
          return {
            token: newSsoOidcToken.accessToken,
            expiration: newTokenExpiration,
          };
        } catch (error) {
          (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
          return existingToken;
        }
      };
    exports.fromSso = fromSso;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromStatic =
      ({ token }) =>
      async () => {
        if (!token || !token.token) {
          throw new property_provider_1.TokenProviderError(
            `Please pass a valid token to fromStatic`,
            false
          );
        }
        return token;
      };
    exports.fromStatic = fromStatic;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js
var require_nodeProvider = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          (0, fromSso_1.fromSso)(init),
          async () => {
            throw new property_provider_1.TokenProviderError(
              'Could not load token from any providers',
              false
            );
          }
        ),
        (token) =>
          token.expiration !== void 0 &&
          token.expiration.getTime() - Date.now() < 3e5,
        (token) => token.expiration !== void 0
      );
    exports.nodeProvider = nodeProvider;
  },
});

// node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  'node_modules/@aws-sdk/token-providers/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSso(), exports);
    tslib_1.__exportStar(require_fromStatic3(), exports);
    tslib_1.__exportStar(require_nodeProvider(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs44();
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var token_providers_1 = require_dist_cjs46();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({
      ssoStartUrl,
      ssoSession,
      ssoAccountId,
      ssoRegion,
      ssoRoleName,
      ssoClient,
      profile,
    }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString(),
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            e.message,
            SHOULD_FAIL_CREDENTIAL_CHAIN
          );
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(
            ssoStartUrl
          );
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(
            `The SSO session associated with this profile is invalid. ${refreshMessage}`,
            SHOULD_FAIL_CREDENTIAL_CHAIN
          );
        }
      }
      if (
        new Date(token.expiresAt).getTime() - Date.now() <=
        EXPIRE_WINDOW_MS
      ) {
        throw new property_provider_1.CredentialsProviderError(
          `The SSO session associated with this profile has expired. ${refreshMessage}`,
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      const { accessToken } = token;
      const sso =
        ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(
          new client_sso_1.GetRoleCredentialsCommand({
            accountId: ssoAccountId,
            roleName: ssoRoleName,
            accessToken,
          })
        );
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(
          e,
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      const {
        roleCredentials: {
          accessKeyId,
          secretAccessKey,
          sessionToken,
          expiration,
        } = {},
      } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError(
          'SSO returns an invalid temporary credential.',
          SHOULD_FAIL_CREDENTIAL_CHAIN
        );
      }
      return {
        accessKeyId,
        secretAccessKey,
        sessionToken,
        expiration: new Date(expiration),
      };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs20();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } =
        profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(
          `Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(
            profile
          ).join(', ')}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,
          false
        );
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO =
      (init = {}) =>
      async () => {
        const {
          ssoStartUrl,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          ssoSession,
        } = init;
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        if (
          !ssoStartUrl &&
          !ssoAccountId &&
          !ssoRegion &&
          !ssoRoleName &&
          !ssoSession
        ) {
          const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(
            init
          );
          const profile = profiles[profileName];
          if (!profile) {
            throw new property_provider_1.CredentialsProviderError(
              `Profile ${profileName} was not found.`
            );
          }
          if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
            throw new property_provider_1.CredentialsProviderError(
              `Profile ${profileName} is not configured with SSO credentials.`
            );
          }
          if (
            profile === null || profile === void 0
              ? void 0
              : profile.sso_session
          ) {
            const ssoSessions = await (0,
            shared_ini_file_loader_1.loadSsoSessionData)(init);
            const session = ssoSessions[profile.sso_session];
            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
            if (ssoRegion && ssoRegion !== session.sso_region) {
              throw new property_provider_1.CredentialsProviderError(
                `Conflicting SSO region` + conflictMsg,
                false
              );
            }
            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
              throw new property_provider_1.CredentialsProviderError(
                `Conflicting SSO start_url` + conflictMsg,
                false
              );
            }
            profile.sso_region = session.sso_region;
            profile.sso_start_url = session.sso_start_url;
          }
          const {
            sso_start_url,
            sso_account_id,
            sso_region,
            sso_role_name,
            sso_session,
          } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
          return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
            ssoStartUrl: sso_start_url,
            ssoSession: sso_session,
            ssoAccountId: sso_account_id,
            ssoRegion: sso_region,
            ssoRoleName: sso_role_name,
            ssoClient,
            profile: profileName,
          });
        } else if (
          !ssoStartUrl ||
          !ssoAccountId ||
          !ssoRegion ||
          !ssoRoleName
        ) {
          throw new property_provider_1.CredentialsProviderError(
            'Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"'
          );
        } else {
          return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
            ssoStartUrl,
            ssoSession,
            ssoAccountId,
            ssoRegion,
            ssoRoleName,
            ssoClient,
            profile: profileName,
          });
        }
      };
    exports.fromSSO = fromSSO;
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types6 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types6(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs47();
    var credential_provider_sso_2 = require_dist_cjs47();
    Object.defineProperty(exports, 'isSsoProfile', {
      enumerable: true,
      get: function () {
        return credential_provider_sso_2.isSsoProfile;
      },
    });
    var resolveSsoCredentials = (data) => {
      const {
        sso_start_url,
        sso_account_id,
        sso_session,
        sso_region,
        sso_role_name,
      } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name,
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.aws_access_key_id === 'string' &&
      typeof arg.aws_secret_access_key === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) =>
      Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
      });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fromWebToken = (init) => () => {
      const {
        roleArn,
        roleSessionName,
        webIdentityToken,
        providerId,
        policyArns,
        policy,
        durationSeconds,
        roleAssumerWithWebIdentity,
      } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(
          `Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`,
          false
        );
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName:
          roleSessionName !== null && roleSessionName !== void 0
            ? roleSessionName
            : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds,
      });
    };
    exports.fromWebToken = fromWebToken;
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs20();
    var fs_1 = require('fs');
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = 'AWS_WEB_IDENTITY_TOKEN_FILE';
    var ENV_ROLE_ARN = 'AWS_ROLE_ARN';
    var ENV_ROLE_SESSION_NAME = 'AWS_ROLE_SESSION_NAME';
    var fromTokenFile =
      (init = {}) =>
      async () => {
        return resolveTokenFile(init);
      };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile =
        (_a =
          init === null || init === void 0
            ? void 0
            : init.webIdentityTokenFile) !== null && _a !== void 0
          ? _a
          : process.env[ENV_TOKEN_FILE];
      const roleArn =
        (_b = init === null || init === void 0 ? void 0 : init.roleArn) !==
          null && _b !== void 0
          ? _b
          : process.env[ENV_ROLE_ARN];
      const roleSessionName =
        (_c =
          init === null || init === void 0 ? void 0 : init.roleSessionName) !==
          null && _c !== void 0
          ? _c
          : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError(
          'Web identity configuration not specified'
        );
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, {
          encoding: 'ascii',
        }),
        roleArn,
        roleSessionName,
      })();
    };
  },
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile =
      void 0;
    var credential_provider_web_identity_1 = require_dist_cjs48();
    var isWebIdentityProfile = (arg) =>
      Boolean(arg) &&
      typeof arg === 'object' &&
      typeof arg.web_identity_token_file === 'string' &&
      typeof arg.role_arn === 'string' &&
      ['undefined', 'string'].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) =>
      (0, credential_provider_web_identity_1.fromTokenFile)({
        webIdentityTokenFile: profile.web_identity_token_file,
        roleArn: profile.role_arn,
        roleSessionName: profile.role_session_name,
        roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
      })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs20();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 =
      require_resolveWebIdentityCredentials();
    var resolveProfileData = async (
      profileName,
      profiles,
      options,
      visitedProfiles = {}
    ) => {
      const data = profiles[profileName];
      if (
        Object.keys(visitedProfiles).length > 0 &&
        (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)
      ) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(
          profileName,
          profiles,
          options,
          visitedProfiles
        );
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0,
        resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(
          data,
          options
        );
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(
          options,
          profileName
        );
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(
        `Profile ${profileName} could not be found or parsed in shared credentials file.`
      );
    };
    exports.resolveProfileData = resolveProfileData;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni =
      (init = {}) =>
      async () => {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(
          init
        );
        return (0, resolveProfileData_1.resolveProfileData)(
          (0, shared_ini_file_loader_1.getProfileName)(init),
          profiles,
          init
        );
      };
    exports.fromIni = fromIni;
  },
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports);
  },
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  'node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs35();
    var property_provider_1 = require_dist_cjs20();
    exports.ENV_IMDS_DISABLED = 'AWS_EC2_METADATA_DISABLED';
    var remoteProvider = (init) => {
      if (
        process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] ||
        process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]
      ) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError(
            'EC2 Instance Metadata Service access disabled'
          );
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  },
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  'node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs32();
    var credential_provider_ini_1 = require_dist_cjs49();
    var credential_provider_process_1 = require_dist_cjs36();
    var credential_provider_sso_1 = require_dist_cjs47();
    var credential_provider_web_identity_1 = require_dist_cjs48();
    var property_provider_1 = require_dist_cjs20();
    var shared_ini_file_loader_1 = require_dist_cjs33();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) =>
      (0, property_provider_1.memoize)(
        (0, property_provider_1.chain)(
          ...(init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE]
            ? []
            : [(0, credential_provider_env_1.fromEnv)()]),
          (0, credential_provider_sso_1.fromSSO)(init),
          (0, credential_provider_ini_1.fromIni)(init),
          (0, credential_provider_process_1.fromProcess)(init),
          (0, credential_provider_web_identity_1.fromTokenFile)(init),
          (0, remoteProvider_1.remoteProvider)(init),
          async () => {
            throw new property_provider_1.CredentialsProviderError(
              'Could not load credentials from any providers',
              false
            );
          }
        ),
        (credentials) =>
          credentials.expiration !== void 0 &&
          credentials.expiration.getTime() - Date.now() < 3e5,
        (credentials) => credentials.expiration !== void 0
      );
    exports.defaultProvider = defaultProvider;
  },
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  'node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var G = 'required';
    var H = 'type';
    var I = 'fn';
    var J = 'argv';
    var K = 'ref';
    var L = 'properties';
    var M = 'headers';
    var a = false;
    var b = true;
    var c = 'PartitionResult';
    var d = 'tree';
    var e = 'booleanEquals';
    var f = 'stringEquals';
    var g = 'sigv4';
    var h = 'us-east-1';
    var i = 'sts';
    var j = 'endpoint';
    var k = 'https://sts.{Region}.{PartitionResult#dnsSuffix}';
    var l = 'error';
    var m = 'getAttr';
    var n = { [G]: false, [H]: 'String' };
    var o = { [G]: true, default: false, [H]: 'Boolean' };
    var p = { [K]: 'Region' };
    var q = { [K]: 'UseFIPS' };
    var r = { [K]: 'UseDualStack' };
    var s = { [I]: 'isSet', [J]: [{ [K]: 'Endpoint' }] };
    var t = { [K]: 'Endpoint' };
    var u = {
      url: 'https://sts.amazonaws.com',
      [L]: { authSchemes: [{ name: g, signingRegion: h, signingName: i }] },
      [M]: {},
    };
    var v = {};
    var w = {
      conditions: [{ [I]: f, [J]: [p, 'aws-global'] }],
      [j]: u,
      [H]: j,
    };
    var x = { [I]: e, [J]: [q, true] };
    var y = { [I]: e, [J]: [r, true] };
    var z = {
      [I]: e,
      [J]: [true, { [I]: m, [J]: [{ [K]: c }, 'supportsFIPS'] }],
    };
    var A = { [K]: c };
    var B = { [I]: e, [J]: [true, { [I]: m, [J]: [A, 'supportsDualStack'] }] };
    var C = { url: k, [L]: {}, [M]: {} };
    var D = [t];
    var E = [x];
    var F = [y];
    var _data = {
      version: '1.0',
      parameters: {
        Region: n,
        UseDualStack: o,
        UseFIPS: o,
        Endpoint: n,
        UseGlobalEndpoint: o,
      },
      rules: [
        {
          conditions: [{ [I]: 'aws.partition', [J]: [p], assign: c }],
          [H]: d,
          rules: [
            {
              conditions: [
                { [I]: e, [J]: [{ [K]: 'UseGlobalEndpoint' }, b] },
                { [I]: e, [J]: [q, a] },
                { [I]: e, [J]: [r, a] },
                { [I]: 'not', [J]: [s] },
              ],
              [H]: d,
              rules: [
                {
                  conditions: [{ [I]: f, [J]: [p, 'ap-northeast-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'ap-south-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'ap-southeast-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'ap-southeast-2'] }],
                  endpoint: u,
                  [H]: j,
                },
                w,
                {
                  conditions: [{ [I]: f, [J]: [p, 'ca-central-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-central-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-north-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-west-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-west-2'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'eu-west-3'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'sa-east-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                { conditions: [{ [I]: f, [J]: [p, h] }], endpoint: u, [H]: j },
                {
                  conditions: [{ [I]: f, [J]: [p, 'us-east-2'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'us-west-1'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  conditions: [{ [I]: f, [J]: [p, 'us-west-2'] }],
                  endpoint: u,
                  [H]: j,
                },
                {
                  endpoint: {
                    url: k,
                    [L]: {
                      authSchemes: [
                        { name: g, signingRegion: '{Region}', signingName: i },
                      ],
                    },
                    [M]: v,
                  },
                  [H]: j,
                },
              ],
            },
            {
              conditions: [s, { [I]: 'parseURL', [J]: D, assign: 'url' }],
              [H]: d,
              rules: [
                {
                  conditions: E,
                  error:
                    'Invalid Configuration: FIPS and custom endpoint are not supported',
                  [H]: l,
                },
                {
                  [H]: d,
                  rules: [
                    {
                      conditions: F,
                      error:
                        'Invalid Configuration: Dualstack and custom endpoint are not supported',
                      [H]: l,
                    },
                    { endpoint: { url: t, [L]: v, [M]: v }, [H]: j },
                  ],
                },
              ],
            },
            {
              conditions: [x, y],
              [H]: d,
              rules: [
                {
                  conditions: [z, B],
                  [H]: d,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        [L]: v,
                        [M]: v,
                      },
                      [H]: j,
                    },
                  ],
                },
                {
                  error:
                    'FIPS and DualStack are enabled, but this partition does not support one or both',
                  [H]: l,
                },
              ],
            },
            {
              conditions: E,
              [H]: d,
              rules: [
                {
                  conditions: [z],
                  [H]: d,
                  rules: [
                    {
                      [H]: d,
                      rules: [
                        {
                          conditions: [
                            {
                              [I]: f,
                              [J]: ['aws-us-gov', { [I]: m, [J]: [A, 'name'] }],
                            },
                          ],
                          endpoint: C,
                          [H]: j,
                        },
                        {
                          endpoint: {
                            url: 'https://sts-fips.{Region}.{PartitionResult#dnsSuffix}',
                            [L]: v,
                            [M]: v,
                          },
                          [H]: j,
                        },
                      ],
                    },
                  ],
                },
                {
                  error:
                    'FIPS is enabled but this partition does not support FIPS',
                  [H]: l,
                },
              ],
            },
            {
              conditions: F,
              [H]: d,
              rules: [
                {
                  conditions: [B],
                  [H]: d,
                  rules: [
                    {
                      endpoint: {
                        url: 'https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}',
                        [L]: v,
                        [M]: v,
                      },
                      [H]: j,
                    },
                  ],
                },
                {
                  error:
                    'DualStack is enabled but this partition does not support DualStack',
                  [H]: l,
                },
              ],
            },
            { [H]: d, rules: [w, { endpoint: C, [H]: j }] },
          ],
        },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs29();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger,
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var url_parser_1 = require_dist_cjs4();
    var util_base64_1 = require_dist_cjs42();
    var util_utf8_1 = require_dist_cjs24();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: '2011-06-15',
      base64Decoder:
        (config == null ? void 0 : config.base64Decoder) ??
        util_base64_1.fromBase64,
      base64Encoder:
        (config == null ? void 0 : config.base64Encoder) ??
        util_base64_1.toBase64,
      disableHostPrefix:
        (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider:
        (config == null ? void 0 : config.endpointProvider) ??
        endpointResolver_1.defaultEndpointResolver,
      logger:
        (config == null ? void 0 : config.logger) ??
        new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? 'STS',
      urlParser:
        (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder:
        (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder:
        (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs50();
    var hash_node_1 = require_dist_cjs37();
    var middleware_retry_1 = require_dist_cjs19();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs39();
    var util_body_length_node_1 = require_dist_cjs40();
    var util_retry_1 = require_dist_cjs18();
    var util_user_agent_node_1 = require_dist_cjs41();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs2();
    var util_defaults_mode_node_1 = require_dist_cjs43();
    var smithy_client_2 = require_dist_cjs2();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0,
      util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () =>
        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(
        config
      );
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        bodyLengthChecker:
          (config == null ? void 0 : config.bodyLengthChecker) ??
          util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider:
          (config == null ? void 0 : config.credentialDefaultProvider) ??
          (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(
            credential_provider_node_1.defaultProvider
          ),
        defaultUserAgentProvider:
          (config == null ? void 0 : config.defaultUserAgentProvider) ??
          (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version,
          }),
        maxAttempts:
          (config == null ? void 0 : config.maxAttempts) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS
          ),
        region:
          (config == null ? void 0 : config.region) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
          ),
        requestHandler:
          (config == null ? void 0 : config.requestHandler) ??
          new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (config == null ? void 0 : config.retryMode) ??
          (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async () =>
              (await defaultConfigProvider()).retryMode ||
              util_retry_1.DEFAULT_RETRY_MODE,
          }),
        sha256:
          (config == null ? void 0 : config.sha256) ??
          hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (config == null ? void 0 : config.streamCollector) ??
          node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (config == null ? void 0 : config.useDualstackEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS
          ),
        useFipsEndpoint:
          (config == null ? void 0 : config.useFipsEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS
          ),
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_host_header_1 = require_dist_cjs14();
    var middleware_logger_1 = require_dist_cjs15();
    var middleware_recursion_detection_1 = require_dist_cjs16();
    var middleware_retry_1 = require_dist_cjs19();
    var middleware_sdk_sts_1 = require_dist_cjs31();
    var middleware_user_agent_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs2();
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig3();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0,
        EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(
          _config_2
        );
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(
          _config_4
        );
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(
          _config_5,
          { stsClientCtor: STSClient }
        );
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(
          _config_6
        );
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use(
          (0, middleware_retry_1.getRetryPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_host_header_1.getHostHeaderPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_logger_1.getLoggerPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(
            this.config
          )
        );
        this.middlewareStack.use(
          (0, middleware_user_agent_1.getUserAgentPlugin)(this.config)
        );
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/STS.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STS = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 =
      require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 =
      require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var commands = {
      AssumeRoleCommand: AssumeRoleCommand_1.AssumeRoleCommand,
      AssumeRoleWithSAMLCommand:
        AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand:
        AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand:
        DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand:
        GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand,
      GetCallerIdentityCommand:
        GetCallerIdentityCommand_1.GetCallerIdentityCommand,
      GetFederationTokenCommand:
        GetFederationTokenCommand_1.GetFederationTokenCommand,
      GetSessionTokenCommand: GetSessionTokenCommand_1.GetSessionTokenCommand,
    };
    var STS = class extends STSClient_1.STSClient {};
    exports.STS = STS;
    (0, smithy_client_1.createAggregatedClient)(commands, STS);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.decorateDefaultCredentialProvider =
      exports.getDefaultRoleAssumerWithWebIdentity =
      exports.getDefaultRoleAssumer =
        void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations) return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) =>
      (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(
        stsOptions,
        getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins)
      );
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) =>
      (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(
        stsOptions,
        getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins)
      );
    exports.getDefaultRoleAssumerWithWebIdentity =
      getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) =>
      provider({
        roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
        roleAssumerWithWebIdentity: (0,
        exports.getDefaultRoleAssumerWithWebIdentity)(input),
        ...input,
      });
    exports.decorateDefaultCredentialProvider =
      decorateDefaultCredentialProvider;
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models3 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports);
  },
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  'node_modules/@aws-sdk/client-sts/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, 'STSServiceException', {
      enumerable: true,
      get: function () {
        return STSServiceException_1.STSServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/ruleset.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ruleSet = void 0;
    var u = 'required';
    var v = 'fn';
    var w = 'argv';
    var x = 'ref';
    var a = 'isSet';
    var b = 'tree';
    var c = 'error';
    var d = 'endpoint';
    var e = 'PartitionResult';
    var f = 'getAttr';
    var g = 'stringEquals';
    var h = { [u]: false, type: 'String' };
    var i = { [u]: true, default: false, type: 'Boolean' };
    var j = { [x]: 'Endpoint' };
    var k = { [v]: 'booleanEquals', [w]: [{ [x]: 'UseFIPS' }, true] };
    var l = { [v]: 'booleanEquals', [w]: [{ [x]: 'UseDualStack' }, true] };
    var m = {};
    var n = { [x]: 'Region' };
    var o = {
      [v]: 'booleanEquals',
      [w]: [true, { [v]: f, [w]: [{ [x]: e }, 'supportsFIPS'] }],
    };
    var p = { [x]: e };
    var q = {
      [v]: 'booleanEquals',
      [w]: [true, { [v]: f, [w]: [p, 'supportsDualStack'] }],
    };
    var r = [k];
    var s = [l];
    var t = [n];
    var _data = {
      version: '1.0',
      parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h },
      rules: [
        {
          conditions: [{ [v]: a, [w]: [j] }],
          type: b,
          rules: [
            {
              conditions: r,
              error:
                'Invalid Configuration: FIPS and custom endpoint are not supported',
              type: c,
            },
            {
              type: b,
              rules: [
                {
                  conditions: s,
                  error:
                    'Invalid Configuration: Dualstack and custom endpoint are not supported',
                  type: c,
                },
                { endpoint: { url: j, properties: m, headers: m }, type: d },
              ],
            },
          ],
        },
        {
          type: b,
          rules: [
            {
              conditions: [{ [v]: a, [w]: t }],
              type: b,
              rules: [
                {
                  conditions: [{ [v]: 'aws.partition', [w]: t, assign: e }],
                  type: b,
                  rules: [
                    {
                      conditions: [k, l],
                      type: b,
                      rules: [
                        {
                          conditions: [o, q],
                          type: b,
                          rules: [
                            {
                              type: b,
                              rules: [
                                {
                                  endpoint: {
                                    url: 'https://dynamodb-fips.{Region}.{PartitionResult#dualStackDnsSuffix}',
                                    properties: m,
                                    headers: m,
                                  },
                                  type: d,
                                },
                              ],
                            },
                          ],
                        },
                        {
                          error:
                            'FIPS and DualStack are enabled, but this partition does not support one or both',
                          type: c,
                        },
                      ],
                    },
                    {
                      conditions: r,
                      type: b,
                      rules: [
                        {
                          conditions: [o],
                          type: b,
                          rules: [
                            {
                              type: b,
                              rules: [
                                {
                                  conditions: [
                                    {
                                      [v]: g,
                                      [w]: [
                                        'aws-us-gov',
                                        { [v]: f, [w]: [p, 'name'] },
                                      ],
                                    },
                                  ],
                                  endpoint: {
                                    url: 'https://dynamodb.{Region}.amazonaws.com',
                                    properties: m,
                                    headers: m,
                                  },
                                  type: d,
                                },
                                {
                                  endpoint: {
                                    url: 'https://dynamodb-fips.{Region}.{PartitionResult#dnsSuffix}',
                                    properties: m,
                                    headers: m,
                                  },
                                  type: d,
                                },
                              ],
                            },
                          ],
                        },
                        {
                          error:
                            'FIPS is enabled but this partition does not support FIPS',
                          type: c,
                        },
                      ],
                    },
                    {
                      conditions: s,
                      type: b,
                      rules: [
                        {
                          conditions: [q],
                          type: b,
                          rules: [
                            {
                              type: b,
                              rules: [
                                {
                                  endpoint: {
                                    url: 'https://dynamodb.{Region}.{PartitionResult#dualStackDnsSuffix}',
                                    properties: m,
                                    headers: m,
                                  },
                                  type: d,
                                },
                              ],
                            },
                          ],
                        },
                        {
                          error:
                            'DualStack is enabled but this partition does not support DualStack',
                          type: c,
                        },
                      ],
                    },
                    {
                      type: b,
                      rules: [
                        {
                          conditions: [{ [v]: g, [w]: [n, 'local'] }],
                          endpoint: {
                            url: 'http://localhost:8000',
                            properties: {
                              authSchemes: [
                                {
                                  name: 'sigv4',
                                  signingName: 'dynamodb',
                                  signingRegion: 'us-east-1',
                                },
                              ],
                            },
                            headers: m,
                          },
                          type: d,
                        },
                        {
                          endpoint: {
                            url: 'https://dynamodb.{Region}.{PartitionResult#dnsSuffix}',
                            properties: m,
                            headers: m,
                          },
                          type: d,
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            { error: 'Invalid Configuration: Missing Region', type: c },
          ],
        },
      ],
    };
    exports.ruleSet = _data;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoint/endpointResolver.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs29();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger,
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var url_parser_1 = require_dist_cjs4();
    var util_base64_1 = require_dist_cjs42();
    var util_utf8_1 = require_dist_cjs24();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => ({
      apiVersion: '2012-08-10',
      base64Decoder:
        (config == null ? void 0 : config.base64Decoder) ??
        util_base64_1.fromBase64,
      base64Encoder:
        (config == null ? void 0 : config.base64Encoder) ??
        util_base64_1.toBase64,
      disableHostPrefix:
        (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider:
        (config == null ? void 0 : config.endpointProvider) ??
        endpointResolver_1.defaultEndpointResolver,
      logger:
        (config == null ? void 0 : config.logger) ??
        new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? 'DynamoDB',
      urlParser:
        (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      utf8Decoder:
        (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_1.fromUtf8,
      utf8Encoder:
        (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_1.toUtf8,
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs51();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs50();
    var hash_node_1 = require_dist_cjs37();
    var middleware_endpoint_discovery_1 = require_dist_cjs13();
    var middleware_retry_1 = require_dist_cjs19();
    var node_config_provider_1 = require_dist_cjs34();
    var node_http_handler_1 = require_dist_cjs39();
    var util_body_length_node_1 = require_dist_cjs40();
    var util_retry_1 = require_dist_cjs18();
    var util_user_agent_node_1 = require_dist_cjs41();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs2();
    var util_defaults_mode_node_1 = require_dist_cjs43();
    var smithy_client_2 = require_dist_cjs2();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0,
      util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () =>
        defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(
        config
      );
      return {
        ...clientSharedValues,
        ...config,
        runtime: 'node',
        defaultsMode,
        bodyLengthChecker:
          (config == null ? void 0 : config.bodyLengthChecker) ??
          util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider:
          (config == null ? void 0 : config.credentialDefaultProvider) ??
          (0, client_sts_1.decorateDefaultCredentialProvider)(
            credential_provider_node_1.defaultProvider
          ),
        defaultUserAgentProvider:
          (config == null ? void 0 : config.defaultUserAgentProvider) ??
          (0, util_user_agent_node_1.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: package_json_1.default.version,
          }),
        endpointDiscoveryEnabledProvider:
          (config == null ? void 0 : config.endpointDiscoveryEnabledProvider) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_endpoint_discovery_1.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS
          ),
        maxAttempts:
          (config == null ? void 0 : config.maxAttempts) ??
          (0, node_config_provider_1.loadConfig)(
            middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS
          ),
        region:
          (config == null ? void 0 : config.region) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_REGION_CONFIG_OPTIONS,
            config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS
          ),
        requestHandler:
          (config == null ? void 0 : config.requestHandler) ??
          new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode:
          (config == null ? void 0 : config.retryMode) ??
          (0, node_config_provider_1.loadConfig)({
            ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
            default: async () =>
              (await defaultConfigProvider()).retryMode ||
              util_retry_1.DEFAULT_RETRY_MODE,
          }),
        sha256:
          (config == null ? void 0 : config.sha256) ??
          hash_node_1.Hash.bind(null, 'sha256'),
        streamCollector:
          (config == null ? void 0 : config.streamCollector) ??
          node_http_handler_1.streamCollector,
        useDualstackEndpoint:
          (config == null ? void 0 : config.useDualstackEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS
          ),
        useFipsEndpoint:
          (config == null ? void 0 : config.useFipsEndpoint) ??
          (0, node_config_provider_1.loadConfig)(
            config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS
          ),
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js
var require_DynamoDBClient = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs7();
    var middleware_endpoint_discovery_1 = require_dist_cjs13();
    var middleware_host_header_1 = require_dist_cjs14();
    var middleware_logger_1 = require_dist_cjs15();
    var middleware_recursion_detection_1 = require_dist_cjs16();
    var middleware_retry_1 = require_dist_cjs19();
    var middleware_signing_1 = require_dist_cjs27();
    var middleware_user_agent_1 = require_dist_cjs30();
    var smithy_client_1 = require_dist_cjs2();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig4();
    var DynamoDBClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0,
        EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(
          _config_2
        );
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(
          _config_4
        );
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(
          _config_5
        );
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(
          _config_6
        );
        const _config_8 = (0,
        middleware_endpoint_discovery_1.resolveEndpointDiscoveryConfig)(
          _config_7,
          {
            endpointDiscoveryCommandCtor:
              DescribeEndpointsCommand_1.DescribeEndpointsCommand,
          }
        );
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use(
          (0, middleware_retry_1.getRetryPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_content_length_1.getContentLengthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_host_header_1.getHostHeaderPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_logger_1.getLoggerPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(
            this.config
          )
        );
        this.middlewareStack.use(
          (0, middleware_signing_1.getAwsAuthPlugin)(this.config)
        );
        this.middlewareStack.use(
          (0, middleware_user_agent_1.getUserAgentPlugin)(this.config)
        );
      }
      destroy() {
        super.destroy();
      }
    };
    exports.DynamoDBClient = DynamoDBClient2;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js
var require_DynamoDB = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDB = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand();
    var BatchGetItemCommand_1 = require_BatchGetItemCommand();
    var BatchWriteItemCommand_1 = require_BatchWriteItemCommand();
    var CreateBackupCommand_1 = require_CreateBackupCommand();
    var CreateGlobalTableCommand_1 = require_CreateGlobalTableCommand();
    var CreateTableCommand_1 = require_CreateTableCommand();
    var DeleteBackupCommand_1 = require_DeleteBackupCommand();
    var DeleteItemCommand_1 = require_DeleteItemCommand();
    var DeleteTableCommand_1 = require_DeleteTableCommand();
    var DescribeBackupCommand_1 = require_DescribeBackupCommand();
    var DescribeContinuousBackupsCommand_1 =
      require_DescribeContinuousBackupsCommand();
    var DescribeContributorInsightsCommand_1 =
      require_DescribeContributorInsightsCommand();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var DescribeExportCommand_1 = require_DescribeExportCommand();
    var DescribeGlobalTableCommand_1 = require_DescribeGlobalTableCommand();
    var DescribeGlobalTableSettingsCommand_1 =
      require_DescribeGlobalTableSettingsCommand();
    var DescribeImportCommand_1 = require_DescribeImportCommand();
    var DescribeKinesisStreamingDestinationCommand_1 =
      require_DescribeKinesisStreamingDestinationCommand();
    var DescribeLimitsCommand_1 = require_DescribeLimitsCommand();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var DescribeTableReplicaAutoScalingCommand_1 =
      require_DescribeTableReplicaAutoScalingCommand();
    var DescribeTimeToLiveCommand_1 = require_DescribeTimeToLiveCommand();
    var DisableKinesisStreamingDestinationCommand_1 =
      require_DisableKinesisStreamingDestinationCommand();
    var EnableKinesisStreamingDestinationCommand_1 =
      require_EnableKinesisStreamingDestinationCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand();
    var ExportTableToPointInTimeCommand_1 =
      require_ExportTableToPointInTimeCommand();
    var GetItemCommand_1 = require_GetItemCommand();
    var ImportTableCommand_1 = require_ImportTableCommand();
    var ListBackupsCommand_1 = require_ListBackupsCommand();
    var ListContributorInsightsCommand_1 =
      require_ListContributorInsightsCommand();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var ListGlobalTablesCommand_1 = require_ListGlobalTablesCommand();
    var ListImportsCommand_1 = require_ListImportsCommand();
    var ListTablesCommand_1 = require_ListTablesCommand();
    var ListTagsOfResourceCommand_1 = require_ListTagsOfResourceCommand();
    var PutItemCommand_1 = require_PutItemCommand();
    var QueryCommand_1 = require_QueryCommand();
    var RestoreTableFromBackupCommand_1 =
      require_RestoreTableFromBackupCommand();
    var RestoreTableToPointInTimeCommand_1 =
      require_RestoreTableToPointInTimeCommand();
    var ScanCommand_1 = require_ScanCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var TransactGetItemsCommand_1 = require_TransactGetItemsCommand();
    var TransactWriteItemsCommand_1 = require_TransactWriteItemsCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateContinuousBackupsCommand_1 =
      require_UpdateContinuousBackupsCommand();
    var UpdateContributorInsightsCommand_1 =
      require_UpdateContributorInsightsCommand();
    var UpdateGlobalTableCommand_1 = require_UpdateGlobalTableCommand();
    var UpdateGlobalTableSettingsCommand_1 =
      require_UpdateGlobalTableSettingsCommand();
    var UpdateItemCommand_1 = require_UpdateItemCommand();
    var UpdateTableCommand_1 = require_UpdateTableCommand();
    var UpdateTableReplicaAutoScalingCommand_1 =
      require_UpdateTableReplicaAutoScalingCommand();
    var UpdateTimeToLiveCommand_1 = require_UpdateTimeToLiveCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var commands = {
      BatchExecuteStatementCommand:
        BatchExecuteStatementCommand_1.BatchExecuteStatementCommand,
      BatchGetItemCommand: BatchGetItemCommand_1.BatchGetItemCommand,
      BatchWriteItemCommand: BatchWriteItemCommand_1.BatchWriteItemCommand,
      CreateBackupCommand: CreateBackupCommand_1.CreateBackupCommand,
      CreateGlobalTableCommand:
        CreateGlobalTableCommand_1.CreateGlobalTableCommand,
      CreateTableCommand: CreateTableCommand_1.CreateTableCommand,
      DeleteBackupCommand: DeleteBackupCommand_1.DeleteBackupCommand,
      DeleteItemCommand: DeleteItemCommand_1.DeleteItemCommand,
      DeleteTableCommand: DeleteTableCommand_1.DeleteTableCommand,
      DescribeBackupCommand: DescribeBackupCommand_1.DescribeBackupCommand,
      DescribeContinuousBackupsCommand:
        DescribeContinuousBackupsCommand_1.DescribeContinuousBackupsCommand,
      DescribeContributorInsightsCommand:
        DescribeContributorInsightsCommand_1.DescribeContributorInsightsCommand,
      DescribeEndpointsCommand:
        DescribeEndpointsCommand_1.DescribeEndpointsCommand,
      DescribeExportCommand: DescribeExportCommand_1.DescribeExportCommand,
      DescribeGlobalTableCommand:
        DescribeGlobalTableCommand_1.DescribeGlobalTableCommand,
      DescribeGlobalTableSettingsCommand:
        DescribeGlobalTableSettingsCommand_1.DescribeGlobalTableSettingsCommand,
      DescribeImportCommand: DescribeImportCommand_1.DescribeImportCommand,
      DescribeKinesisStreamingDestinationCommand:
        DescribeKinesisStreamingDestinationCommand_1.DescribeKinesisStreamingDestinationCommand,
      DescribeLimitsCommand: DescribeLimitsCommand_1.DescribeLimitsCommand,
      DescribeTableCommand: DescribeTableCommand_1.DescribeTableCommand,
      DescribeTableReplicaAutoScalingCommand:
        DescribeTableReplicaAutoScalingCommand_1.DescribeTableReplicaAutoScalingCommand,
      DescribeTimeToLiveCommand:
        DescribeTimeToLiveCommand_1.DescribeTimeToLiveCommand,
      DisableKinesisStreamingDestinationCommand:
        DisableKinesisStreamingDestinationCommand_1.DisableKinesisStreamingDestinationCommand,
      EnableKinesisStreamingDestinationCommand:
        EnableKinesisStreamingDestinationCommand_1.EnableKinesisStreamingDestinationCommand,
      ExecuteStatementCommand:
        ExecuteStatementCommand_1.ExecuteStatementCommand,
      ExecuteTransactionCommand:
        ExecuteTransactionCommand_1.ExecuteTransactionCommand,
      ExportTableToPointInTimeCommand:
        ExportTableToPointInTimeCommand_1.ExportTableToPointInTimeCommand,
      GetItemCommand: GetItemCommand_1.GetItemCommand,
      ImportTableCommand: ImportTableCommand_1.ImportTableCommand,
      ListBackupsCommand: ListBackupsCommand_1.ListBackupsCommand,
      ListContributorInsightsCommand:
        ListContributorInsightsCommand_1.ListContributorInsightsCommand,
      ListExportsCommand: ListExportsCommand_1.ListExportsCommand,
      ListGlobalTablesCommand:
        ListGlobalTablesCommand_1.ListGlobalTablesCommand,
      ListImportsCommand: ListImportsCommand_1.ListImportsCommand,
      ListTablesCommand: ListTablesCommand_1.ListTablesCommand,
      ListTagsOfResourceCommand:
        ListTagsOfResourceCommand_1.ListTagsOfResourceCommand,
      PutItemCommand: PutItemCommand_1.PutItemCommand,
      QueryCommand: QueryCommand_1.QueryCommand,
      RestoreTableFromBackupCommand:
        RestoreTableFromBackupCommand_1.RestoreTableFromBackupCommand,
      RestoreTableToPointInTimeCommand:
        RestoreTableToPointInTimeCommand_1.RestoreTableToPointInTimeCommand,
      ScanCommand: ScanCommand_1.ScanCommand,
      TagResourceCommand: TagResourceCommand_1.TagResourceCommand,
      TransactGetItemsCommand:
        TransactGetItemsCommand_1.TransactGetItemsCommand,
      TransactWriteItemsCommand:
        TransactWriteItemsCommand_1.TransactWriteItemsCommand,
      UntagResourceCommand: UntagResourceCommand_1.UntagResourceCommand,
      UpdateContinuousBackupsCommand:
        UpdateContinuousBackupsCommand_1.UpdateContinuousBackupsCommand,
      UpdateContributorInsightsCommand:
        UpdateContributorInsightsCommand_1.UpdateContributorInsightsCommand,
      UpdateGlobalTableCommand:
        UpdateGlobalTableCommand_1.UpdateGlobalTableCommand,
      UpdateGlobalTableSettingsCommand:
        UpdateGlobalTableSettingsCommand_1.UpdateGlobalTableSettingsCommand,
      UpdateItemCommand: UpdateItemCommand_1.UpdateItemCommand,
      UpdateTableCommand: UpdateTableCommand_1.UpdateTableCommand,
      UpdateTableReplicaAutoScalingCommand:
        UpdateTableReplicaAutoScalingCommand_1.UpdateTableReplicaAutoScalingCommand,
      UpdateTimeToLiveCommand:
        UpdateTimeToLiveCommand_1.UpdateTimeToLiveCommand,
    };
    var DynamoDB = class extends DynamoDBClient_1.DynamoDBClient {};
    exports.DynamoDB = DynamoDB;
    (0, smithy_client_1.createAggregatedClient)(commands, DynamoDB);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_BatchExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_BatchGetItemCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteItemCommand(), exports);
    tslib_1.__exportStar(require_CreateBackupCommand(), exports);
    tslib_1.__exportStar(require_CreateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_CreateTableCommand(), exports);
    tslib_1.__exportStar(require_DeleteBackupCommand(), exports);
    tslib_1.__exportStar(require_DeleteItemCommand(), exports);
    tslib_1.__exportStar(require_DeleteTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeBackupCommand(), exports);
    tslib_1.__exportStar(require_DescribeContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEndpointsCommand(), exports);
    tslib_1.__exportStar(require_DescribeExportCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_DescribeImportCommand(), exports);
    tslib_1.__exportStar(
      require_DescribeKinesisStreamingDestinationCommand(),
      exports
    );
    tslib_1.__exportStar(require_DescribeLimitsCommand(), exports);
    tslib_1.__exportStar(require_DescribeTableCommand(), exports);
    tslib_1.__exportStar(
      require_DescribeTableReplicaAutoScalingCommand(),
      exports
    );
    tslib_1.__exportStar(require_DescribeTimeToLiveCommand(), exports);
    tslib_1.__exportStar(
      require_DisableKinesisStreamingDestinationCommand(),
      exports
    );
    tslib_1.__exportStar(
      require_EnableKinesisStreamingDestinationCommand(),
      exports
    );
    tslib_1.__exportStar(require_ExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand(), exports);
    tslib_1.__exportStar(require_ExportTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_GetItemCommand(), exports);
    tslib_1.__exportStar(require_ImportTableCommand(), exports);
    tslib_1.__exportStar(require_ListBackupsCommand(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_ListExportsCommand(), exports);
    tslib_1.__exportStar(require_ListGlobalTablesCommand(), exports);
    tslib_1.__exportStar(require_ListImportsCommand(), exports);
    tslib_1.__exportStar(require_ListTablesCommand(), exports);
    tslib_1.__exportStar(require_ListTagsOfResourceCommand(), exports);
    tslib_1.__exportStar(require_PutItemCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableFromBackupCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_ScanCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_TransactGetItemsCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteItemsCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_UpdateContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdateItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateTableCommand(), exports);
    tslib_1.__exportStar(
      require_UpdateTableReplicaAutoScalingCommand(),
      exports
    );
    tslib_1.__exportStar(require_UpdateTimeToLiveCommand(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js
var require_models4 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js
var require_ListContributorInsightsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListContributorInsights = void 0;
    var ListContributorInsightsCommand_1 =
      require_ListContributorInsightsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListContributorInsightsCommand_1.ListContributorInsightsCommand(
          input
        ),
        ...args
      );
    };
    async function* paginateListContributorInsights(
      config,
      input,
      ...additionalArguments
    ) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input['MaxResults'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListContributorInsights = paginateListContributorInsights;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js
var require_ListExportsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListExports = void 0;
    var ListExportsCommand_1 = require_ListExportsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListExportsCommand_1.ListExportsCommand(input),
        ...args
      );
    };
    async function* paginateListExports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input['MaxResults'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListExports = paginateListExports;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListImportsPaginator.js
var require_ListImportsPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListImportsPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListImports = void 0;
    var ListImportsCommand_1 = require_ListImportsCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListImportsCommand_1.ListImportsCommand(input),
        ...args
      );
    };
    async function* paginateListImports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input['PageSize'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListImports = paginateListImports;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js
var require_ListTablesPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateListTables = void 0;
    var ListTablesCommand_1 = require_ListTablesCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(
        new ListTablesCommand_1.ListTablesCommand(input),
        ...args
      );
    };
    async function* paginateListTables(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartTableName = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedTableName;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListTables = paginateListTables;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error('Invalid client, expected DynamoDB | DynamoDBClient');
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsPaginator(), exports);
    tslib_1.__exportStar(require_ListExportsPaginator(), exports);
    tslib_1.__exportStar(require_ListImportsPaginator(), exports);
    tslib_1.__exportStar(require_ListTablesPaginator(), exports);
    tslib_1.__exportStar(require_QueryPaginator(), exports);
    tslib_1.__exportStar(require_ScanPaginator(), exports);
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.checkExceptions =
      exports.WaiterState =
      exports.waiterServiceDefaults =
        void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120,
    };
    var WaiterState;
    (function (WaiterState2) {
      WaiterState2['ABORTED'] = 'ABORTED';
      WaiterState2['FAILURE'] = 'FAILURE';
      WaiterState2['SUCCESS'] = 'SUCCESS';
      WaiterState2['RETRY'] = 'RETRY';
      WaiterState2['TIMEOUT'] = 'TIMEOUT';
    })((WaiterState = exports.WaiterState || (exports.WaiterState = {})));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(
          `${JSON.stringify({
            ...result,
            reason: 'Request was aborted',
          })}`
        );
        abortError.name = 'AbortError';
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(
          `${JSON.stringify({
            ...result,
            reason: 'Waiter has timed out',
          })}`
        );
        timeoutError.name = 'TimeoutError';
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter2();
    var exponentialBackoffWithJitter = (
      minDelay,
      maxDelay,
      attemptCeiling,
      attempt
    ) => {
      if (attempt > attemptCeiling) return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async (
      { minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal },
      input,
      acceptorChecks
    ) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (
          ((_a =
            abortController === null || abortController === void 0
              ? void 0
              : abortController.signal) === null || _a === void 0
            ? void 0
            : _a.aborted) ||
          (abortSignal === null || abortSignal === void 0
            ? void 0
            : abortSignal.aborted)
        ) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(
          minDelay,
          maxDelay,
          attemptCeiling,
          currentAttempt
        );
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(
          client,
          input
        );
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime must be greater than 0`
        );
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(
          `WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`
        );
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate(), exports);
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter2();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () =>
          resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options,
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [
        (0, poller_1.runPolling)(params, input, acceptorChecks),
      ];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  },
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  'node_modules/@aws-sdk/util-waiter/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter2(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js
var require_waitForTableExists = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.waitUntilTableExists = exports.waitForTableExists = void 0;
    var util_waiter_1 = require_dist_cjs52();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(
          new DescribeTableCommand_1.DescribeTableCommand(input)
        );
        reason = result;
        try {
          const returnComparator = () => {
            return result.Table.TableStatus;
          };
          if (returnComparator() === 'ACTIVE') {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {}
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == 'ResourceNotFoundException') {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(
        { ...serviceDefaults, ...params },
        input,
        checkState
      );
    };
    exports.waitForTableExists = waitForTableExists;
    var waitUntilTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(
        { ...serviceDefaults, ...params },
        input,
        checkState
      );
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableExists = waitUntilTableExists;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js
var require_waitForTableNotExists = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.waitUntilTableNotExists = exports.waitForTableNotExists = void 0;
    var util_waiter_1 = require_dist_cjs52();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(
          new DescribeTableCommand_1.DescribeTableCommand(input)
        );
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == 'ResourceNotFoundException') {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(
        { ...serviceDefaults, ...params },
        input,
        checkState
      );
    };
    exports.waitForTableNotExists = waitForTableNotExists;
    var waitUntilTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(
        { ...serviceDefaults, ...params },
        input,
        checkState
      );
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableNotExists = waitUntilTableNotExists;
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForTableExists(), exports);
    tslib_1.__exportStar(require_waitForTableNotExists(), exports);
  },
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js
var require_dist_cjs53 = __commonJS({
  'node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DynamoDB(), exports);
    tslib_1.__exportStar(require_DynamoDBClient(), exports);
    tslib_1.__exportStar(require_commands4(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    Object.defineProperty(exports, 'DynamoDBServiceException', {
      enumerable: true,
      get: function () {
        return DynamoDBServiceException_1.DynamoDBServiceException;
      },
    });
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js
var require_convertToAttr = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.convertToAttr = void 0;
    var convertToAttr = (data, options) => {
      var _a, _b, _c, _d, _e, _f;
      if (data === void 0) {
        throw new Error(
          `Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`
        );
      } else if (data === null && typeof data === 'object') {
        return convertToNullAttr();
      } else if (Array.isArray(data)) {
        return convertToListAttr(data, options);
      } else if (
        ((_a = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _a === void 0
          ? void 0
          : _a.name) === 'Set'
      ) {
        return convertToSetAttr(data, options);
      } else if (
        ((_b = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _b === void 0
          ? void 0
          : _b.name) === 'Map'
      ) {
        return convertToMapAttrFromIterable(data, options);
      } else if (
        ((_c = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _c === void 0
          ? void 0
          : _c.name) === 'Object' ||
        (!data.constructor && typeof data === 'object')
      ) {
        return convertToMapAttrFromEnumerableProps(data, options);
      } else if (isBinary(data)) {
        if (
          data.length === 0 &&
          (options === null || options === void 0
            ? void 0
            : options.convertEmptyValues)
        ) {
          return convertToNullAttr();
        }
        return convertToBinaryAttr(data);
      } else if (
        typeof data === 'boolean' ||
        ((_d = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _d === void 0
          ? void 0
          : _d.name) === 'Boolean'
      ) {
        return { BOOL: data.valueOf() };
      } else if (
        typeof data === 'number' ||
        ((_e = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _e === void 0
          ? void 0
          : _e.name) === 'Number'
      ) {
        return convertToNumberAttr(data);
      } else if (typeof data === 'bigint') {
        return convertToBigIntAttr(data);
      } else if (
        typeof data === 'string' ||
        ((_f = data === null || data === void 0 ? void 0 : data.constructor) ===
          null || _f === void 0
          ? void 0
          : _f.name) === 'String'
      ) {
        if (
          data.length === 0 &&
          (options === null || options === void 0
            ? void 0
            : options.convertEmptyValues)
        ) {
          return convertToNullAttr();
        }
        return convertToStringAttr(data);
      } else if (
        (options === null || options === void 0
          ? void 0
          : options.convertClassInstanceToMap) &&
        typeof data === 'object'
      ) {
        return convertToMapAttrFromEnumerableProps(data, options);
      }
      throw new Error(
        `Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`
      );
    };
    exports.convertToAttr = convertToAttr;
    var convertToListAttr = (data, options) => ({
      L: data
        .filter(
          (item) =>
            !(options === null || options === void 0
              ? void 0
              : options.removeUndefinedValues) ||
            ((options === null || options === void 0
              ? void 0
              : options.removeUndefinedValues) &&
              item !== void 0)
        )
        .map((item) => (0, exports.convertToAttr)(item, options)),
    });
    var convertToSetAttr = (set, options) => {
      const setToOperate = (
        options === null || options === void 0
          ? void 0
          : options.removeUndefinedValues
      )
        ? new Set([...set].filter((value) => value !== void 0))
        : set;
      if (
        !(options === null || options === void 0
          ? void 0
          : options.removeUndefinedValues) &&
        setToOperate.has(void 0)
      ) {
        throw new Error(
          `Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`
        );
      }
      if (setToOperate.size === 0) {
        if (
          options === null || options === void 0
            ? void 0
            : options.convertEmptyValues
        ) {
          return convertToNullAttr();
        }
        throw new Error(
          `Pass a non-empty set, or options.convertEmptyValues=true.`
        );
      }
      const item = setToOperate.values().next().value;
      if (typeof item === 'number') {
        return {
          NS: Array.from(setToOperate)
            .map(convertToNumberAttr)
            .map((item2) => item2.N),
        };
      } else if (typeof item === 'bigint') {
        return {
          NS: Array.from(setToOperate)
            .map(convertToBigIntAttr)
            .map((item2) => item2.N),
        };
      } else if (typeof item === 'string') {
        return {
          SS: Array.from(setToOperate)
            .map(convertToStringAttr)
            .map((item2) => item2.S),
        };
      } else if (isBinary(item)) {
        return {
          BS: Array.from(setToOperate)
            .map(convertToBinaryAttr)
            .map((item2) => item2.B),
        };
      } else {
        throw new Error(
          `Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`
        );
      }
    };
    var convertToMapAttrFromIterable = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const [key, value] of data2) {
          if (
            typeof value !== 'function' &&
            (value !== void 0 ||
              !(options === null || options === void 0
                ? void 0
                : options.removeUndefinedValues))
          ) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data),
    });
    var convertToMapAttrFromEnumerableProps = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const key in data2) {
          const value = data2[key];
          if (
            typeof value !== 'function' &&
            (value !== void 0 ||
              !(options === null || options === void 0
                ? void 0
                : options.removeUndefinedValues))
          ) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data),
    });
    var convertToNullAttr = () => ({ NULL: true });
    var convertToBinaryAttr = (data) => ({ B: data });
    var convertToStringAttr = (data) => ({ S: data.toString() });
    var convertToBigIntAttr = (data) => ({ N: data.toString() });
    var validateBigIntAndThrow = (errorPrefix) => {
      throw new Error(
        `${errorPrefix} ${
          typeof BigInt === 'function'
            ? 'Use BigInt.'
            : 'Pass string value instead.'
        } `
      );
    };
    var convertToNumberAttr = (num) => {
      if (
        [Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY]
          .map((val) => val.toString())
          .includes(num.toString())
      ) {
        throw new Error(
          `Special numeric value ${num.toString()} is not allowed`
        );
      } else if (num > Number.MAX_SAFE_INTEGER) {
        validateBigIntAndThrow(
          `Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`
        );
      } else if (num < Number.MIN_SAFE_INTEGER) {
        validateBigIntAndThrow(
          `Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`
        );
      }
      return { N: num.toString() };
    };
    var isBinary = (data) => {
      const binaryTypes = [
        'ArrayBuffer',
        'Blob',
        'Buffer',
        'DataView',
        'File',
        'Int8Array',
        'Uint8Array',
        'Uint8ClampedArray',
        'Int16Array',
        'Uint16Array',
        'Int32Array',
        'Uint32Array',
        'Float32Array',
        'Float64Array',
        'BigInt64Array',
        'BigUint64Array',
      ];
      if (data === null || data === void 0 ? void 0 : data.constructor) {
        return binaryTypes.includes(data.constructor.name);
      }
      return false;
    };
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js
var require_convertToNative = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.convertToNative = void 0;
    var convertToNative = (data, options) => {
      for (const [key, value] of Object.entries(data)) {
        if (value !== void 0) {
          switch (key) {
            case 'NULL':
              return null;
            case 'BOOL':
              return Boolean(value);
            case 'N':
              return convertNumber(value, options);
            case 'B':
              return convertBinary(value);
            case 'S':
              return convertString(value);
            case 'L':
              return convertList(value, options);
            case 'M':
              return convertMap(value, options);
            case 'NS':
              return new Set(value.map((item) => convertNumber(item, options)));
            case 'BS':
              return new Set(value.map(convertBinary));
            case 'SS':
              return new Set(value.map(convertString));
            default:
              throw new Error(`Unsupported type passed: ${key}`);
          }
        }
      }
      throw new Error(`No value defined: ${JSON.stringify(data)}`);
    };
    exports.convertToNative = convertToNative;
    var convertNumber = (numString, options) => {
      if (
        options === null || options === void 0 ? void 0 : options.wrapNumbers
      ) {
        return { value: numString };
      }
      const num = Number(numString);
      const infinityValues = [
        Number.POSITIVE_INFINITY,
        Number.NEGATIVE_INFINITY,
      ];
      if (
        (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) &&
        !infinityValues.includes(num)
      ) {
        if (typeof BigInt === 'function') {
          try {
            return BigInt(numString);
          } catch (error) {
            throw new Error(
              `${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`
            );
          }
        } else {
          throw new Error(
            `${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`
          );
        }
      }
      return num;
    };
    var convertString = (stringValue) => stringValue;
    var convertBinary = (binaryValue) => binaryValue;
    var convertList = (list, options) =>
      list.map((item) => (0, exports.convertToNative)(item, options));
    var convertMap = (map, options) =>
      Object.entries(map).reduce(
        (acc, [key, value]) => (
          (acc[key] = (0, exports.convertToNative)(value, options)), acc
        ),
        {}
      );
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js
var require_marshall = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.marshall = void 0;
    var convertToAttr_1 = require_convertToAttr();
    function marshall(data, options) {
      const attributeValue = (0, convertToAttr_1.convertToAttr)(data, options);
      const [key, value] = Object.entries(attributeValue)[0];
      switch (key) {
        case 'M':
        case 'L':
          return value;
        case 'SS':
        case 'NS':
        case 'BS':
        case 'S':
        case 'N':
        case 'B':
        case 'NULL':
        case 'BOOL':
        case '$unknown':
        default:
          return attributeValue;
      }
    }
    exports.marshall = marshall;
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js
var require_models5 = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js
var require_unmarshall = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.unmarshall = void 0;
    var convertToNative_1 = require_convertToNative();
    var unmarshall = (data, options) =>
      (0, convertToNative_1.convertToNative)({ M: data }, options);
    exports.unmarshall = unmarshall;
  },
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js
var require_dist_cjs54 = __commonJS({
  'node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_convertToAttr(), exports);
    tslib_1.__exportStar(require_convertToNative(), exports);
    tslib_1.__exportStar(require_marshall(), exports);
    tslib_1.__exportStar(require_models5(), exports);
    tslib_1.__exportStar(require_unmarshall(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/utils.js
var require_utils3 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/utils.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.unmarshallOutput = exports.marshallInput = void 0;
    var util_dynamodb_1 = require_dist_cjs54();
    var processObj = (obj, processFunc, children) => {
      if (obj !== void 0) {
        if (!children || (Array.isArray(children) && children.length === 0)) {
          return processFunc(obj);
        } else {
          if (Array.isArray(children)) {
            return processKeysInObj(obj, processFunc, children);
          } else {
            return processAllKeysInObj(obj, processFunc, children.children);
          }
        }
      }
      return void 0;
    };
    var processKeyInObj = (obj, processFunc, children) => {
      if (Array.isArray(obj)) {
        return obj.map((item) => processObj(item, processFunc, children));
      }
      return processObj(obj, processFunc, children);
    };
    var processKeysInObj = (obj, processFunc, keyNodes) => {
      const accumulator = { ...obj };
      return keyNodes.reduce((acc, { key, children }) => {
        acc[key] = processKeyInObj(acc[key], processFunc, children);
        return acc;
      }, accumulator);
    };
    var processAllKeysInObj = (obj, processFunc, children) =>
      Object.entries(obj).reduce((acc, [key, value]) => {
        acc[key] = processKeyInObj(value, processFunc, children);
        return acc;
      }, {});
    var marshallInput = (obj, keyNodes, options) => {
      const marshallFunc = (toMarshall) =>
        (0, util_dynamodb_1.marshall)(toMarshall, options);
      return processKeysInObj(obj, marshallFunc, keyNodes);
    };
    exports.marshallInput = marshallInput;
    var unmarshallOutput = (obj, keyNodes, options) => {
      const unmarshallFunc = (toMarshall) =>
        (0, util_dynamodb_1.unmarshall)(toMarshall, options);
      return processKeysInObj(obj, unmarshallFunc, keyNodes);
    };
    exports.unmarshallOutput = unmarshallOutput;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/baseCommand/DynamoDBDocumentClientCommand.js
var require_DynamoDBDocumentClientCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/baseCommand/DynamoDBDocumentClientCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocumentClientCommand = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var utils_1 = require_utils3();
    var DynamoDBDocumentClientCommand = class extends smithy_client_1.Command {
      addMarshallingMiddleware(configuration) {
        const { marshallOptions, unmarshallOptions } =
          configuration.translateConfig || {};
        this.clientCommand.middlewareStack.addRelativeTo(
          (next, context) => async (args) => {
            args.input = (0, utils_1.marshallInput)(
              this.input,
              this.inputKeyNodes,
              marshallOptions
            );
            context.dynamoDbDocumentClientOptions =
              context.dynamoDbDocumentClientOptions ||
              DynamoDBDocumentClientCommand.defaultLogFilterOverrides;
            const input = args.input;
            context.dynamoDbDocumentClientOptions.overrideInputFilterSensitiveLog =
              () => {
                var _a;
                return (_a = context.inputFilterSensitiveLog) === null ||
                  _a === void 0
                  ? void 0
                  : _a.call(context, input);
              };
            return next(args);
          },
          {
            name: 'DocumentMarshall',
            relation: 'before',
            toMiddleware: 'serializerMiddleware',
            override: true,
          }
        );
        this.clientCommand.middlewareStack.addRelativeTo(
          (next, context) => async (args) => {
            const deserialized = await next(args);
            const output = deserialized.output;
            context.dynamoDbDocumentClientOptions =
              context.dynamoDbDocumentClientOptions ||
              DynamoDBDocumentClientCommand.defaultLogFilterOverrides;
            context.dynamoDbDocumentClientOptions.overrideOutputFilterSensitiveLog =
              () => {
                var _a;
                return (_a = context.outputFilterSensitiveLog) === null ||
                  _a === void 0
                  ? void 0
                  : _a.call(context, output);
              };
            deserialized.output = (0, utils_1.unmarshallOutput)(
              deserialized.output,
              this.outputKeyNodes,
              unmarshallOptions
            );
            return deserialized;
          },
          {
            name: 'DocumentUnmarshall',
            relation: 'before',
            toMiddleware: 'deserializerMiddleware',
            override: true,
          }
        );
      }
    };
    exports.DynamoDBDocumentClientCommand = DynamoDBDocumentClientCommand;
    DynamoDBDocumentClientCommand.defaultLogFilterOverrides = {
      overrideInputFilterSensitiveLog(...args) {},
      overrideOutputFilterSensitiveLog(...args) {},
    };
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchExecuteStatementCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var BatchExecuteStatementCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Statements', children: [{ key: 'Parameters' }] },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: [{ key: 'Item' }] },
        ];
        this.clientCommand = new client_dynamodb_1.BatchExecuteStatementCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchGetCommand.js
var require_BatchGetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchGetCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchGetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var BatchGetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'RequestItems',
            children: {
              children: [{ key: 'Keys' }],
            },
          },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: {} },
          {
            key: 'UnprocessedKeys',
            children: {
              children: [{ key: 'Keys' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.BatchGetItemCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchGetCommand = BatchGetCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchWriteCommand.js
var require_BatchWriteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/BatchWriteCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.BatchWriteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var BatchWriteCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'RequestItems',
            children: {
              children: [
                { key: 'PutRequest', children: [{ key: 'Item' }] },
                { key: 'DeleteRequest', children: [{ key: 'Key' }] },
              ],
            },
          },
        ];
        this.outputKeyNodes = [
          {
            key: 'UnprocessedItems',
            children: {
              children: [
                { key: 'PutRequest', children: [{ key: 'Item' }] },
                { key: 'DeleteRequest', children: [{ key: 'Key' }] },
              ],
            },
          },
          {
            key: 'ItemCollectionMetrics',
            children: {
              children: [{ key: 'ItemCollectionKey' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.BatchWriteItemCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.BatchWriteCommand = BatchWriteCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/DeleteCommand.js
var require_DeleteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/DeleteCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DeleteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var DeleteCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Key' },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          {
            key: 'ItemCollectionMetrics',
            children: [{ key: 'ItemCollectionKey' }],
          },
        ];
        this.clientCommand = new client_dynamodb_1.DeleteItemCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.DeleteCommand = DeleteCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteStatementCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var ExecuteStatementCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'Parameters' }];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.ExecuteStatementCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ExecuteTransactionCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var ExecuteTransactionCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'TransactStatements', children: [{ key: 'Parameters' }] },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: [{ key: 'Item' }] },
        ];
        this.clientCommand = new client_dynamodb_1.ExecuteTransactionCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/GetCommand.js
var require_GetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/GetCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.GetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var GetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: 'Key' }];
        this.outputKeyNodes = [{ key: 'Item' }];
        this.clientCommand = new client_dynamodb_1.GetItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.GetCommand = GetCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/PutCommand.js
var require_PutCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/PutCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.PutCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var PutCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Item' },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          {
            key: 'ItemCollectionMetrics',
            children: [{ key: 'ItemCollectionKey' }],
          },
        ];
        this.clientCommand = new client_dynamodb_1.PutItemCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.PutCommand = PutCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/QueryCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.QueryCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var QueryCommand2 = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'KeyConditions',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          {
            key: 'QueryFilter',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          { key: 'ExclusiveStartKey' },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.QueryCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.QueryCommand = QueryCommand2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/ScanCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ScanCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var ScanCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'ScanFilter',
            children: {
              children: [{ key: 'AttributeValueList' }],
            },
          },
          { key: 'ExclusiveStartKey' },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [{ key: 'Items' }, { key: 'LastEvaluatedKey' }];
        this.clientCommand = new client_dynamodb_1.ScanCommand(this.input);
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.ScanCommand = ScanCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactGetCommand.js
var require_TransactGetCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactGetCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactGetCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var TransactGetCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'TransactItems',
            children: [{ key: 'Get', children: [{ key: 'Key' }] }],
          },
        ];
        this.outputKeyNodes = [
          { key: 'Responses', children: [{ key: 'Item' }] },
        ];
        this.clientCommand = new client_dynamodb_1.TransactGetItemsCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.TransactGetCommand = TransactGetCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactWriteCommand.js
var require_TransactWriteCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/TransactWriteCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.TransactWriteCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var TransactWriteCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          {
            key: 'TransactItems',
            children: [
              {
                key: 'ConditionCheck',
                children: [
                  { key: 'Key' },
                  { key: 'ExpressionAttributeValues' },
                ],
              },
              {
                key: 'Put',
                children: [
                  { key: 'Item' },
                  { key: 'ExpressionAttributeValues' },
                ],
              },
              {
                key: 'Delete',
                children: [
                  { key: 'Key' },
                  { key: 'ExpressionAttributeValues' },
                ],
              },
              {
                key: 'Update',
                children: [
                  { key: 'Key' },
                  { key: 'ExpressionAttributeValues' },
                ],
              },
            ],
          },
        ];
        this.outputKeyNodes = [
          {
            key: 'ItemCollectionMetrics',
            children: {
              children: [{ key: 'ItemCollectionKey' }],
            },
          },
        ];
        this.clientCommand = new client_dynamodb_1.TransactWriteItemsCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.TransactWriteCommand = TransactWriteCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/UpdateCommand.js
var require_UpdateCommand = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/UpdateCommand.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.UpdateCommand = void 0;
    var client_dynamodb_1 = require_dist_cjs53();
    var DynamoDBDocumentClientCommand_1 =
      require_DynamoDBDocumentClientCommand();
    var UpdateCommand = class extends DynamoDBDocumentClientCommand_1.DynamoDBDocumentClientCommand {
      constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
          { key: 'Key' },
          {
            key: 'AttributeUpdates',
            children: {
              children: [{ key: 'Value' }],
            },
          },
          {
            key: 'Expected',
            children: {
              children: [{ key: 'Value' }, { key: 'AttributeValueList' }],
            },
          },
          { key: 'ExpressionAttributeValues' },
        ];
        this.outputKeyNodes = [
          { key: 'Attributes' },
          {
            key: 'ItemCollectionMetrics',
            children: [{ key: 'ItemCollectionKey' }],
          },
        ];
        this.clientCommand = new client_dynamodb_1.UpdateItemCommand(
          this.input
        );
        this.middlewareStack = this.clientCommand.middlewareStack;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.addMarshallingMiddleware(configuration);
        const stack = clientStack.concat(this.middlewareStack);
        const handler2 = this.clientCommand.resolveMiddleware(
          stack,
          configuration,
          options
        );
        return async () => handler2(this.clientCommand);
      }
    };
    exports.UpdateCommand = UpdateCommand;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocumentClient.js
var require_DynamoDBDocumentClient = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocumentClient.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocumentClient = void 0;
    var smithy_client_1 = require_dist_cjs2();
    var DynamoDBDocumentClient2 = class extends smithy_client_1.Client {
      constructor(client, translateConfig) {
        super(client.config);
        this.config = client.config;
        this.config.translateConfig = translateConfig;
        this.middlewareStack = client.middlewareStack;
      }
      static from(client, translateConfig) {
        return new DynamoDBDocumentClient2(client, translateConfig);
      }
      destroy() {}
    };
    exports.DynamoDBDocumentClient = DynamoDBDocumentClient2;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocument.js
var require_DynamoDBDocument = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/DynamoDBDocument.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DynamoDBDocument = void 0;
    var BatchExecuteStatementCommand_1 =
      require_BatchExecuteStatementCommand2();
    var BatchGetCommand_1 = require_BatchGetCommand();
    var BatchWriteCommand_1 = require_BatchWriteCommand();
    var DeleteCommand_1 = require_DeleteCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand2();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand2();
    var GetCommand_1 = require_GetCommand();
    var PutCommand_1 = require_PutCommand();
    var QueryCommand_1 = require_QueryCommand2();
    var ScanCommand_1 = require_ScanCommand2();
    var TransactGetCommand_1 = require_TransactGetCommand();
    var TransactWriteCommand_1 = require_TransactWriteCommand();
    var UpdateCommand_1 = require_UpdateCommand();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var DynamoDBDocument = class extends DynamoDBDocumentClient_1.DynamoDBDocumentClient {
      static from(client, translateConfig) {
        return new DynamoDBDocument(client, translateConfig);
      }
      batchExecuteStatement(args, optionsOrCb, cb) {
        const command =
          new BatchExecuteStatementCommand_1.BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGet(args, optionsOrCb, cb) {
        const command = new BatchGetCommand_1.BatchGetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchWrite(args, optionsOrCb, cb) {
        const command = new BatchWriteCommand_1.BatchWriteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      delete(args, optionsOrCb, cb) {
        const command = new DeleteCommand_1.DeleteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand_1.ExecuteStatementCommand(
          args
        );
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeTransaction(args, optionsOrCb, cb) {
        const command =
          new ExecuteTransactionCommand_1.ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      get(args, optionsOrCb, cb) {
        const command = new GetCommand_1.GetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      put(args, optionsOrCb, cb) {
        const command = new PutCommand_1.PutCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      query(args, optionsOrCb, cb) {
        const command = new QueryCommand_1.QueryCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scan(args, optionsOrCb, cb) {
        const command = new ScanCommand_1.ScanCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactGet(args, optionsOrCb, cb) {
        const command = new TransactGetCommand_1.TransactGetCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactWrite(args, optionsOrCb, cb) {
        const command = new TransactWriteCommand_1.TransactWriteCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      update(args, optionsOrCb, cb) {
        const command = new UpdateCommand_1.UpdateCommand(args);
        if (typeof optionsOrCb === 'function') {
          this.send(command, optionsOrCb);
        } else if (typeof cb === 'function') {
          if (typeof optionsOrCb !== 'object')
            throw new Error(
              `Expect http options but get ${typeof optionsOrCb}`
            );
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.DynamoDBDocument = DynamoDBDocument;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/index.js
var require_commands5 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/commands/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_BatchExecuteStatementCommand2(), exports);
    tslib_1.__exportStar(require_BatchGetCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteCommand(), exports);
    tslib_1.__exportStar(require_DeleteCommand(), exports);
    tslib_1.__exportStar(require_ExecuteStatementCommand2(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand2(), exports);
    tslib_1.__exportStar(require_GetCommand(), exports);
    tslib_1.__exportStar(require_PutCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand2(), exports);
    tslib_1.__exportStar(require_ScanCommand2(), exports);
    tslib_1.__exportStar(require_TransactGetCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteCommand(), exports);
    tslib_1.__exportStar(require_UpdateCommand(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/Interfaces.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/QueryPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand2();
    var DynamoDBDocument_1 = require_DynamoDBDocument();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.query(input, ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBDocument_1.DynamoDBDocument) {
          page = await makePagedRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else if (
          config.client instanceof
          DynamoDBDocumentClient_1.DynamoDBDocumentClient
        ) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error(
            'Invalid client, expected DynamoDBDocument | DynamoDBDocumentClient'
          );
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator2 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/ScanPaginator.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand2();
    var DynamoDBDocument_1 = require_DynamoDBDocument();
    var DynamoDBDocumentClient_1 = require_DynamoDBDocumentClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.scan(input, ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input['Limit'] = config.pageSize;
        if (config.client instanceof DynamoDBDocument_1.DynamoDBDocument) {
          page = await makePagedRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else if (
          config.client instanceof
          DynamoDBDocumentClient_1.DynamoDBDocumentClient
        ) {
          page = await makePagedClientRequest(
            config.client,
            input,
            ...additionalArguments
          );
        } else {
          throw new Error(
            'Invalid client, expected DynamoDBDocument | DynamoDBDocumentClient'
          );
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/index.js
var require_pagination4 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/pagination/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces3(), exports);
    tslib_1.__exportStar(require_QueryPaginator2(), exports);
    tslib_1.__exportStar(require_ScanPaginator2(), exports);
  },
});

// node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js
var require_dist_cjs55 = __commonJS({
  'node_modules/@aws-sdk/lib-dynamodb/dist-cjs/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DynamoDBDocument(), exports);
    tslib_1.__exportStar(require_DynamoDBDocumentClient(), exports);
    tslib_1.__exportStar(require_commands5(), exports);
    tslib_1.__exportStar(require_pagination4(), exports);
  },
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  'node_modules/lodash/lodash.js'(exports, module2) {
    (function () {
      var undefined2;
      var VERSION = '4.17.21';
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT =
          'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function',
        INVALID_TEMPL_VAR_ERROR_TEXT =
          'Invalid `variable` option passed into `_.template`';
      var HASH_UNDEFINED = '__lodash_hash_undefined__';
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = '__lodash_placeholder__';
      var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
      var HOT_COUNT = 800,
        HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 17976931348623157e292,
        NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ['ary', WRAP_ARY_FLAG],
        ['bind', WRAP_BIND_FLAG],
        ['bindKey', WRAP_BIND_KEY_FLAG],
        ['curry', WRAP_CURRY_FLAG],
        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
        ['flip', WRAP_FLIP_FLAG],
        ['partial', WRAP_PARTIAL_FLAG],
        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
        ['rearg', WRAP_REARG_FLAG],
      ];
      var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
      var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
      var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName =
          /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange =
          rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange =
          ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange =
          rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc =
          '[^' +
          rsAstralRange +
          rsBreakRange +
          rsDigits +
          rsDingbatRange +
          rsLowerRange +
          rsUpperRange +
          ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';
      var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin =
          '(?:' +
          rsZWJ +
          '(?:' +
          [rsNonAstral, rsRegional, rsSurrPair].join('|') +
          ')' +
          rsOptVar +
          reOptMod +
          ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji =
          '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol =
          '(?:' +
          [
            rsNonAstral + rsCombo + '?',
            rsCombo,
            rsRegional,
            rsSurrPair,
            rsAstral,
          ].join('|') +
          ')';
      var reApos = RegExp(rsApos, 'g');
      var reComboMark = RegExp(rsCombo, 'g');
      var reUnicode = RegExp(
        rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq,
        'g'
      );
      var reUnicodeWord = RegExp(
        [
          rsUpper +
            '?' +
            rsLower +
            '+' +
            rsOptContrLower +
            '(?=' +
            [rsBreak, rsUpper, '$'].join('|') +
            ')',
          rsMiscUpper +
            '+' +
            rsOptContrUpper +
            '(?=' +
            [rsBreak, rsUpper + rsMiscLower, '$'].join('|') +
            ')',
          rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
          rsUpper + '+' + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji,
        ].join('|'),
        'g'
      );
      var reHasUnicode = RegExp(
        '[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']'
      );
      var reHasUnicodeWord =
        /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout',
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] =
        typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] =
        typedArrayTags[int16Tag] =
        typedArrayTags[int32Tag] =
        typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] =
        typedArrayTags[uint16Tag] =
        typedArrayTags[uint32Tag] =
          true;
      typedArrayTags[argsTag] =
        typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] =
        typedArrayTags[boolTag] =
        typedArrayTags[dataViewTag] =
        typedArrayTags[dateTag] =
        typedArrayTags[errorTag] =
        typedArrayTags[funcTag] =
        typedArrayTags[mapTag] =
        typedArrayTags[numberTag] =
        typedArrayTags[objectTag] =
        typedArrayTags[regexpTag] =
        typedArrayTags[setTag] =
        typedArrayTags[stringTag] =
        typedArrayTags[weakMapTag] =
          false;
      var cloneableTags = {};
      cloneableTags[argsTag] =
        cloneableTags[arrayTag] =
        cloneableTags[arrayBufferTag] =
        cloneableTags[dataViewTag] =
        cloneableTags[boolTag] =
        cloneableTags[dateTag] =
        cloneableTags[float32Tag] =
        cloneableTags[float64Tag] =
        cloneableTags[int8Tag] =
        cloneableTags[int16Tag] =
        cloneableTags[int32Tag] =
        cloneableTags[mapTag] =
        cloneableTags[numberTag] =
        cloneableTags[objectTag] =
        cloneableTags[regexpTag] =
        cloneableTags[setTag] =
        cloneableTags[stringTag] =
        cloneableTags[symbolTag] =
        cloneableTags[uint8Tag] =
        cloneableTags[uint8ClampedTag] =
        cloneableTags[uint16Tag] =
        cloneableTags[uint32Tag] =
          true;
      cloneableTags[errorTag] =
        cloneableTags[funcTag] =
        cloneableTags[weakMapTag] =
          false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        '\xC0': 'A',
        '\xC1': 'A',
        '\xC2': 'A',
        '\xC3': 'A',
        '\xC4': 'A',
        '\xC5': 'A',
        '\xE0': 'a',
        '\xE1': 'a',
        '\xE2': 'a',
        '\xE3': 'a',
        '\xE4': 'a',
        '\xE5': 'a',
        '\xC7': 'C',
        '\xE7': 'c',
        '\xD0': 'D',
        '\xF0': 'd',
        '\xC8': 'E',
        '\xC9': 'E',
        '\xCA': 'E',
        '\xCB': 'E',
        '\xE8': 'e',
        '\xE9': 'e',
        '\xEA': 'e',
        '\xEB': 'e',
        '\xCC': 'I',
        '\xCD': 'I',
        '\xCE': 'I',
        '\xCF': 'I',
        '\xEC': 'i',
        '\xED': 'i',
        '\xEE': 'i',
        '\xEF': 'i',
        '\xD1': 'N',
        '\xF1': 'n',
        '\xD2': 'O',
        '\xD3': 'O',
        '\xD4': 'O',
        '\xD5': 'O',
        '\xD6': 'O',
        '\xD8': 'O',
        '\xF2': 'o',
        '\xF3': 'o',
        '\xF4': 'o',
        '\xF5': 'o',
        '\xF6': 'o',
        '\xF8': 'o',
        '\xD9': 'U',
        '\xDA': 'U',
        '\xDB': 'U',
        '\xDC': 'U',
        '\xF9': 'u',
        '\xFA': 'u',
        '\xFB': 'u',
        '\xFC': 'u',
        '\xDD': 'Y',
        '\xFD': 'y',
        '\xFF': 'y',
        '\xC6': 'Ae',
        '\xE6': 'ae',
        '\xDE': 'Th',
        '\xFE': 'th',
        '\xDF': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',
        '\u0102': 'A',
        '\u0104': 'A',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u0105': 'a',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u010E': 'D',
        '\u0110': 'D',
        '\u010F': 'd',
        '\u0111': 'd',
        '\u0112': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u0118': 'E',
        '\u011A': 'E',
        '\u0113': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u0119': 'e',
        '\u011B': 'e',
        '\u011C': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u0122': 'G',
        '\u011D': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u0123': 'g',
        '\u0124': 'H',
        '\u0126': 'H',
        '\u0125': 'h',
        '\u0127': 'h',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u012E': 'I',
        '\u0130': 'I',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u012F': 'i',
        '\u0131': 'i',
        '\u0134': 'J',
        '\u0135': 'j',
        '\u0136': 'K',
        '\u0137': 'k',
        '\u0138': 'k',
        '\u0139': 'L',
        '\u013B': 'L',
        '\u013D': 'L',
        '\u013F': 'L',
        '\u0141': 'L',
        '\u013A': 'l',
        '\u013C': 'l',
        '\u013E': 'l',
        '\u0140': 'l',
        '\u0142': 'l',
        '\u0143': 'N',
        '\u0145': 'N',
        '\u0147': 'N',
        '\u014A': 'N',
        '\u0144': 'n',
        '\u0146': 'n',
        '\u0148': 'n',
        '\u014B': 'n',
        '\u014C': 'O',
        '\u014E': 'O',
        '\u0150': 'O',
        '\u014D': 'o',
        '\u014F': 'o',
        '\u0151': 'o',
        '\u0154': 'R',
        '\u0156': 'R',
        '\u0158': 'R',
        '\u0155': 'r',
        '\u0157': 'r',
        '\u0159': 'r',
        '\u015A': 'S',
        '\u015C': 'S',
        '\u015E': 'S',
        '\u0160': 'S',
        '\u015B': 's',
        '\u015D': 's',
        '\u015F': 's',
        '\u0161': 's',
        '\u0162': 'T',
        '\u0164': 'T',
        '\u0166': 'T',
        '\u0163': 't',
        '\u0165': 't',
        '\u0167': 't',
        '\u0168': 'U',
        '\u016A': 'U',
        '\u016C': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u0172': 'U',
        '\u0169': 'u',
        '\u016B': 'u',
        '\u016D': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u0173': 'u',
        '\u0174': 'W',
        '\u0175': 'w',
        '\u0176': 'Y',
        '\u0177': 'y',
        '\u0178': 'Y',
        '\u0179': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u017A': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u0132': 'IJ',
        '\u0133': 'ij',
        '\u0152': 'Oe',
        '\u0153': 'oe',
        '\u0149': "'n",
        '\u017F': 's',
      };
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
      };
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'",
      };
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029',
      };
      var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
      var freeGlobal =
        typeof global == 'object' &&
        global &&
        global.Object === Object &&
        global;
      var freeSelf =
        typeof self == 'object' && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function('return this')();
      var freeExports =
        typeof exports == 'object' && exports && !exports.nodeType && exports;
      var freeModule =
        freeExports &&
        typeof module2 == 'object' &&
        module2 &&
        !module2.nodeType &&
        module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = (function () {
        try {
          var types =
            freeModule &&
            freeModule.require &&
            freeModule.require('util').types;
          if (types) {
            return types;
          }
          return (
            freeProcess && freeProcess.binding && freeProcess.binding('util')
          );
        } catch (e) {}
      })();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1,
          length = values.length,
          offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
          length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty('length');
      function asciiToArray(string) {
        return string.split('');
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function (value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
          length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function (object) {
          return object == null ? undefined2 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function (key) {
          return object == null ? undefined2 : object[key];
        };
      }
      function baseReduce(
        collection,
        iteratee,
        accumulator,
        initAccum,
        eachFunc
      ) {
        eachFunc(collection, function (value, index, collection2) {
          accumulator = initAccum
            ? ((initAccum = false), value)
            : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result,
          index = -1,
          length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined2) {
            result = result === undefined2 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1,
          result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function (key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string
          ? string
              .slice(0, trimmedEndIndex(string) + 1)
              .replace(reTrimStart, '')
          : string;
      }
      function baseUnary(func) {
        return function (value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function (key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1,
          length = strSymbols.length;
        while (
          ++index < length &&
          baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
        ) {}
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length,
          result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined2 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data,
          result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1,
          result = Array(map.size);
        map.forEach(function (value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1,
          result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1,
          result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
          length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {}
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = (reUnicode.lastIndex = 0);
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context =
          context == null
            ? root
            : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
        var Array2 = context.Array,
          Date2 = context.Date,
          Error2 = context.Error,
          Function2 = context.Function,
          Math2 = context.Math,
          Object2 = context.Object,
          RegExp2 = context.RegExp,
          String2 = context.String,
          TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype,
          funcProto = Function2.prototype,
          objectProto = Object2.prototype;
        var coreJsData = context['__core-js_shared__'];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = (function () {
          var uid = /[^.]+$/.exec(
            (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ''
          );
          return uid ? 'Symbol(src)_1.' + uid : '';
        })();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          '^' +
            funcToString
              .call(hasOwnProperty)
              .replace(reRegExpChar, '\\$&')
              .replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                '$1.*?'
              ) +
            '$'
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2,
          Symbol2 = context.Symbol,
          Uint8Array2 = context.Uint8Array,
          allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2,
          getPrototype = overArg(Object2.getPrototypeOf, Object2),
          objectCreate = Object2.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2,
          symIterator = Symbol2 ? Symbol2.iterator : undefined2,
          symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = (function () {
          try {
            var func = getNative(Object2, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        })();
        var ctxClearTimeout =
            context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now,
          ctxSetTimeout =
            context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil,
          nativeFloor = Math2.floor,
          nativeGetSymbols = Object2.getOwnPropertySymbols,
          nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object2.keys, Object2),
          nativeMax = Math2.max,
          nativeMin = Math2.min,
          nativeNow = Date2.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math2.random,
          nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, 'DataView'),
          Map2 = getNative(context, 'Map'),
          Promise2 = getNative(context, 'Promise'),
          Set2 = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object2, 'create');
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map2),
          promiseCtorString = toSource(Promise2),
          setCtorString = toSource(Set2),
          weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2,
          symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (
            isObjectLike(value) &&
            !isArray(value) &&
            !(value instanceof LazyWrapper)
          ) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = (function () {
          function object() {}
          return function (proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined2;
            return result2;
          };
        })();
        function baseLodash() {}
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          escape: reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          evaluate: reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          interpolate: reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          variable: '',
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          imports: {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            _: lodash,
          },
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);
          if (
            !isArr ||
            (!isRight && arrLength == length && takeCount == length)
          ) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer: while (length-- && resIndex < takeCount) {
            index += dir;
            var iterIndex = -1,
              value = array[index];
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex],
                iteratee2 = data.iteratee,
                type = data.type,
                computed = iteratee2(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined2 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate
            ? data[key] !== undefined2
            : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] =
            nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            hash: new Hash(),
            map: new (Map2 || ListCache)(),
            string: new Hash(),
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)['delete'](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
            size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1,
            length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = (this.__data__ = new ListCache(entries));
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__,
            result2 = data['delete'](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result2 = skipIndexes ? baseTimes(value.length, String2) : [],
            length = result2.length;
          for (var key in value) {
            if (
              (inherited || hasOwnProperty.call(value, key)) &&
              !(
                skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
                (key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
                  (isBuff && (key == 'offset' || key == 'parent')) || // PhantomJS 2 has enumerable non-index properties on typed arrays.
                  (isType &&
                    (key == 'buffer' ||
                      key == 'byteLength' ||
                      key == 'byteOffset')) || // Skip index properties.
                  isIndex(key, length))
              )
            ) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (
            (value !== undefined2 && !eq(object[key], value)) ||
            (value === undefined2 && !(key in object))
          ) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (
            !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined2 && !(key in object))
          ) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function (value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object, key, {
              configurable: true,
              enumerable: true,
              value: value,
              writable: true,
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1,
            length = paths.length,
            result2 = Array2(length),
            skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined2 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object
              ? customizer(value, key, object, stack)
              : customizer(value);
          }
          if (result2 !== undefined2) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result2, value))
                  : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function (subValue) {
              result2.add(
                baseClone(subValue, bitmask, customizer, subValue, value, stack)
              );
            });
          } else if (isMap(value)) {
            value.forEach(function (subValue, key2) {
              result2.set(
                key2,
                baseClone(subValue, bitmask, customizer, key2, value, stack)
              );
            });
          }
          var keysFunc = isFull
            ? isFlat
              ? getAllKeysIn
              : getAllKeys
            : isFlat
            ? keysIn
            : keys;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function (subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(
              result2,
              key2,
              baseClone(subValue, bitmask, customizer, key2, value, stack)
            );
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function (object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length],
              predicate = source[key],
              value = object[key];
            if (
              (value === undefined2 && !(key in object)) ||
              !predicate(value)
            ) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function () {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1,
            includes2 = arrayIncludes,
            isCommon = true,
            length = array.length,
            result2 = [],
            valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer: while (++index < length) {
            var value = array[index],
              computed = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed, comparator)) {
              result2.push(value);
            }
          }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function (value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1,
            length = array.length;
          while (++index < length) {
            var value = array[index],
              current = iteratee2(value);
            if (
              current != null &&
              (computed === undefined2
                ? current === current && !isSymbol(current)
                : comparator(current, computed))
            ) {
              var computed = current,
                result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function (value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1,
            length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function (key) {
            return isFunction(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0,
            length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined2;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object)
            ? result2
            : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value)
            ? getRawTag(value)
            : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return (
            number >= nativeMin(start, end) && number < nativeMax(start, end)
          );
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array2(othLength),
            maxLength = Infinity,
            result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] =
              !comparator &&
              (iteratee2 || (length >= 120 && array.length >= 120))
                ? new SetCache(othIndex && array)
                : undefined2;
          }
          array = arrays[0];
          var index = -1,
            seen = caches[0];
          outer: while (++index < length && result2.length < maxLength) {
            var value = array[index],
              computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (
              !(seen
                ? cacheHas(seen, computed)
                : includes2(result2, computed, comparator))
            ) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (
                  !(cache
                    ? cacheHas(cache, computed)
                    : includes2(arrays[othIndex], computed, comparator))
                ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function (value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined2 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (
            value == null ||
            other == null ||
            (!isObjectLike(value) && !isObjectLike(other))
          ) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(
            value,
            other,
            bitmask,
            customizer,
            baseIsEqual,
            stack
          );
        }
        function baseIsEqualDeep(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object)
              ? equalArrays(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                )
              : equalByTag(
                  object,
                  other,
                  objTag,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                );
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped =
                objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped =
                othIsObj && hasOwnProperty.call(other, '__wrapped__');
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(
                objUnwrapped,
                othUnwrapped,
                bitmask,
                customizer,
                stack
              );
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          );
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
            length = index,
            noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (
              noCustomizer && data[2]
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
            ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
              objValue = object[key],
              srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(
                  objValue,
                  srcValue,
                  key,
                  object,
                  source,
                  stack
                );
              }
              if (
                !(result2 === undefined2
                  ? baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                      customizer,
                      stack
                    )
                  : result2)
              ) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return (
            isObjectLike(value) &&
            isLength(value.length) &&
            !!typedArrayTags[baseGetTag(value)]
          );
        }
        function baseIteratee(value) {
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == 'object') {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != 'constructor') {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
            result2 = [];
          for (var key in object) {
            if (
              !(
                key == 'constructor' &&
                (isProto || !hasOwnProperty.call(object, key))
              )
            ) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1,
            result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function (value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function (object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function (object) {
            var objValue = get(object, path);
            return objValue === undefined2 && objValue === srcValue
              ? hasIn(object, path)
              : baseIsEqual(
                  srcValue,
                  objValue,
                  COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                );
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(
            source,
            function (srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(
                  object,
                  source,
                  key,
                  srcIndex,
                  baseMerge,
                  customizer,
                  stack
                );
              } else {
                var newValue = customizer
                  ? customizer(
                      safeGet(object, key),
                      srcValue,
                      key + '',
                      object,
                      source,
                      stack
                    )
                  : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            },
            keysIn
          );
        }
        function baseMergeDeep(
          object,
          source,
          key,
          srcIndex,
          mergeFunc,
          customizer,
          stack
        ) {
          var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, key + '', object, source, stack)
            : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function (iteratee2) {
              if (isArray(iteratee2)) {
                return function (value) {
                  return baseGet(
                    value,
                    iteratee2.length === 1 ? iteratee2[0] : iteratee2
                  );
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function (value, key, collection2) {
            var criteria = arrayMap(iteratees, function (iteratee2) {
              return iteratee2(value);
            });
            return { criteria: criteria, index: ++index, value: value };
          });
          return baseSortBy(result2, function (object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function (value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1,
            length = paths.length,
            result2 = {};
          while (++index < length) {
            var path = paths[index],
              value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function (object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values2.length,
            seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0,
              value = values2[index],
              computed = iteratee2 ? iteratee2(value) : value;
            while (
              (fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1
            ) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
            lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = '';
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + '');
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
              newValue = value;
            if (
              key === '__proto__' ||
              key === 'constructor' ||
              key === 'prototype'
            ) {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer
                ? customizer(objValue, key, nested)
                : undefined2;
              if (newValue === undefined2) {
                newValue = isObject(objValue)
                  ? objValue
                  : isIndex(path[index + 1])
                  ? []
                  : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap
          ? identity
          : function (func, data) {
              metaMap.set(func, data);
              return func;
            };
        var baseSetToString = !defineProperty
          ? identity
          : function (func, string) {
              return defineProperty(func, 'toString', {
                configurable: true,
                enumerable: false,
                value: constant(string),
                writable: true,
              });
            };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1,
            length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : (end - start) >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function (value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
            high = array == null ? low : array.length;
          if (
            typeof value == 'number' &&
            value === value &&
            high <= HALF_MAX_ARRAY_LENGTH
          ) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                computed = array[mid];
              if (
                computed !== null &&
                !isSymbol(computed) &&
                (retHighest ? computed <= value : computed < value)
              ) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0,
            high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
              computed = iteratee2(array[mid]),
              othIsDefined = computed !== undefined2,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow =
                othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow =
                othIsReflexive &&
                othIsDefined &&
                !othIsNull &&
                (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1,
            length = array.length,
            resIndex = 0,
            result2 = [];
          while (++index < length) {
            var value = array[index],
              computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == 'string') {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result2 = value + '';
          return result2 == '0' && 1 / value == -INFINITY ? '-0' : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1,
            includes2 = arrayIncludes,
            length = array.length,
            isCommon = true,
            result2 = [],
            seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer: while (++index < length) {
            var value = array[index],
              computed = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed);
              }
              result2.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result2) {
                seen.push(computed);
              }
              result2.push(value);
            }
          }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(
            object,
            path,
            updater(baseGet(object, path)),
            customizer
          );
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
            index = fromRight ? length : -1;
          while (
            (fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)
          ) {}
          return isDrop
            ? baseSlice(
                array,
                fromRight ? 0 : index,
                fromRight ? index + 1 : length
              )
            : baseSlice(
                array,
                fromRight ? index + 1 : 0,
                fromRight ? length : index
              );
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(
            actions,
            function (result3, action) {
              return action.func.apply(
                action.thisArg,
                arrayPush([result3], action.args)
              );
            },
            result2
          );
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
            result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index],
              othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(
                  result2[index] || array,
                  arrays[othIndex],
                  iteratee2,
                  comparator
                );
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1,
            length = props.length,
            valsLength = values2.length,
            result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined2;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == 'function' ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 =
          ctxClearTimeout ||
          function (id) {
            return root.clearTimeout(id);
          };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
            result2 = allocUnsafe
              ? allocUnsafe(length)
              : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(dataView.buffer)
            : dataView.buffer;
          return new dataView.constructor(
            buffer,
            dataView.byteOffset,
            dataView.byteLength
          );
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(
            regexp.source,
            reFlags.exec(regexp)
          );
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(typedArray.buffer)
            : typedArray.buffer;
          return new typedArray.constructor(
            buffer,
            typedArray.byteOffset,
            typedArray.length
          );
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);
            if (
              (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol &&
                othIsDefined &&
                othIsReflexive &&
                !othIsNull &&
                !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive
            ) {
              return 1;
            }
            if (
              (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol &&
                valIsDefined &&
                valIsReflexive &&
                !valIsNull &&
                !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive
            ) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(
              objCriteria[index],
              othCriteria[index]
            );
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == 'desc' ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result2 = Array2(leftLength + rangeLength),
            isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result2 = Array2(rangeLength + rightLength),
            isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1,
            length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1,
            length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function (collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
            return func(
              collection,
              setter,
              getIteratee(iteratee2, 2),
              accumulator
            );
          };
        }
        function createAssigner(assigner) {
          return baseRest(function (object, sources) {
            var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined2,
              guard = length > 2 ? sources[2] : undefined2;
            customizer =
              assigner.length > 3 && typeof customizer == 'function'
                ? (length--, customizer)
                : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function (collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function (object, iteratee2, keysFunc) {
            var index = -1,
              iterable = Object2(object),
              props = keysFunc(object),
              length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);
          function wrapper() {
            var fn =
              this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function (string) {
            string = toString(string);
            var strSymbols = hasUnicode(string)
              ? stringToArray(string)
              : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols
              ? castSlice(strSymbols, 1).join('')
              : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function (string) {
            return arrayReduce(
              words(deburr(string).replace(reApos, '')),
              callback,
              ''
            );
          };
        }
        function createCtor(Ctor) {
          return function () {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(
                  args[0],
                  args[1],
                  args[2],
                  args[3],
                  args[4],
                  args[5]
                );
              case 7:
                return new Ctor(
                  args[0],
                  args[1],
                  args[2],
                  args[3],
                  args[4],
                  args[5],
                  args[6]
                );
            }
            var thisBinding = baseCreate(Ctor.prototype),
              result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length,
              args = Array2(length),
              index = length,
              placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders =
              length < 3 &&
              args[0] !== placeholder &&
              args[length - 1] !== placeholder
                ? []
                : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn =
              this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function (collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function (key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1
              ? iterable[iteratee2 ? collection[index] : index]
              : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function (funcs) {
            var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != 'function') {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined2;
              if (
                data &&
                isLaziable(data[0]) &&
                data[1] ==
                  (WRAP_ARY_FLAG |
                    WRAP_CURRY_FLAG |
                    WRAP_PARTIAL_FLAG |
                    WRAP_REARG_FLAG) &&
                !data[4].length &&
                data[9] == 1
              ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper =
                  func.length == 1 && isLaziable(func)
                    ? wrapper[funcName]()
                    : wrapper.thru(func);
              }
            }
            return function () {
              var args = arguments,
                value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0,
                result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ) {
          var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length,
              args = Array2(length),
              index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(
                args,
                partialsRight,
                holdersRight,
                isCurried
              );
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function (object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function (value, other) {
            var result2;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result2 = value;
            }
            if (other !== undefined2) {
              if (result2 === undefined2) {
                return other;
              }
              if (typeof value == 'string' || typeof other == 'string') {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function (iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function (args) {
              var thisArg = this;
              return arrayFunc(iteratees, function (iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? ' ' : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(
            chars,
            nativeCeil(length / stringSize(chars))
          );
          return hasUnicode(chars)
            ? castSlice(stringToArray(result2), 0, length).join('')
            : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array2(leftLength + argsLength),
              fn =
                this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function (start, end, step) {
            if (
              step &&
              typeof step != 'number' &&
              isIterateeCall(start, end, step)
            ) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step =
              step === undefined2 ? (start < end ? 1 : -1) : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function (value, other) {
            if (!(typeof value == 'string' && typeof other == 'string')) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(
          func,
          bitmask,
          wrapFunc,
          placeholder,
          thisArg,
          partials,
          holders,
          argPos,
          ary2,
          arity
        ) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined2,
            newHoldersRight = isCurry ? undefined2 : holders,
            newPartials = isCurry ? partials : undefined2,
            newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity,
          ];
          var result2 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function (number, precision) {
            number = toNumber(number);
            precision =
              precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
              pair = (toString(value) + 'e').split('e');
              return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(
          Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY
        )
          ? noop
          : function (values2) {
              return new Set2(values2);
            };
        function createToPairs(keysFunc) {
          return function (object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          argPos,
          ary2,
          arity
        ) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
              holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity,
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] =
            newData[9] === undefined2
              ? isBindKey
                ? 0
                : func.length
              : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (
            bitmask == WRAP_CURRY_FLAG ||
            bitmask == WRAP_CURRY_RIGHT_FLAG
          ) {
            result2 = createCurry(func, bitmask, arity);
          } else if (
            (bitmask == WRAP_PARTIAL_FLAG ||
              bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
            !holders.length
          ) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (
            objValue === undefined2 ||
            (eq(objValue, objectProto[key]) &&
              !hasOwnProperty.call(object, key))
          ) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(
          objValue,
          srcValue,
          key,
          object,
          source,
          stack
        ) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(
              objValue,
              srcValue,
              undefined2,
              customDefaultsMerge,
              stack
            );
            stack['delete'](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined2 : value;
        }
        function equalArrays(
          array,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1,
            result2 = true,
            seen =
              bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index],
              othValue = other[index];
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (
                !arraySome(other, function (othValue2, othIndex) {
                  if (
                    !cacheHas(seen, othIndex) &&
                    (arrValue === othValue2 ||
                      equalFunc(
                        arrValue,
                        othValue2,
                        bitmask,
                        customizer,
                        stack
                      ))
                  ) {
                    return seen.push(othIndex);
                  }
                })
              ) {
                result2 = false;
                break;
              }
            } else if (
              !(
                arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )
            ) {
              result2 = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result2;
        }
        function equalByTag(
          object,
          other,
          tag,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          switch (tag) {
            case dataViewTag:
              if (
                object.byteLength != other.byteLength ||
                object.byteOffset != other.byteOffset
              ) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (
                object.byteLength != other.byteLength ||
                !equalFunc(new Uint8Array2(object), new Uint8Array2(other))
              ) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return (
                object.name == other.name && object.message == other.message
              );
            case regexpTag:
            case stringTag:
              return object == other + '';
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(
                convert(object),
                convert(other),
                bitmask,
                customizer,
                equalFunc,
                stack
              );
              stack['delete'](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
              othValue = other[key];
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            if (
              !(compared === undefined2
                ? objValue === othValue ||
                  equalFunc(objValue, othValue, bitmask, customizer, stack)
                : compared)
            ) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor,
              othCtor = other.constructor;
            if (
              objCtor != othCtor &&
              'constructor' in object &&
              'constructor' in other &&
              !(
                typeof objCtor == 'function' &&
                objCtor instanceof objCtor &&
                typeof othCtor == 'function' &&
                othCtor instanceof othCtor
              )
            ) {
              result2 = false;
            }
          }
          stack['delete'](object);
          stack['delete'](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten), func + '');
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap
          ? noop
          : function (func) {
              return metaMap.get(func);
            };
        function getFuncName(func) {
          var result2 = func.name + '',
            array = realNames[result2],
            length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length],
              otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, 'placeholder')
            ? lodash
            : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length
            ? result2(arguments[0], arguments[1])
            : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object),
            length = result2.length;
          while (length--) {
            var key = result2[length],
              value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {}
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols
          ? stubArray
          : function (object) {
              if (object == null) {
                return [];
              }
              object = Object2(object);
              return arrayFilter(nativeGetSymbols(object), function (symbol) {
                return propertyIsEnumerable.call(object, symbol);
              });
            };
        var getSymbolsIn = !nativeGetSymbols
          ? stubArray
          : function (object) {
              var result2 = [];
              while (object) {
                arrayPush(result2, getSymbols(object));
                object = getPrototype(object);
              }
              return result2;
            };
        var getTag = baseGetTag;
        if (
          (DataView &&
            getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map2 && getTag(new Map2()) != mapTag) ||
          (Promise2 && getTag(Promise2.resolve()) != promiseTag) ||
          (Set2 && getTag(new Set2()) != setTag) ||
          (WeakMap && getTag(new WeakMap()) != weakMapTag)
        ) {
          getTag = function (value) {
            var result2 = baseGetTag(value),
              Ctor = result2 == objectTag ? value.constructor : undefined2,
              ctorString = Ctor ? toSource(Ctor) : '';
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1,
            length = transforms.length;
          while (++index < length) {
            var data = transforms[index],
              size2 = data.size;
            switch (data.type) {
              case 'drop':
                start += size2;
                break;
              case 'dropRight':
                end -= size2;
                break;
              case 'take':
                end = nativeMin(end, start + size2);
                break;
              case 'takeRight':
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { start: start, end: end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1,
            length = path.length,
            result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return (
            !!length &&
            isLength(length) &&
            isIndex(key, length) &&
            (isArray(object) || isArguments(object))
          );
        }
        function initCloneArray(array) {
          var length = array.length,
            result2 = new array.constructor(length);
          if (
            length &&
            typeof array[0] == 'string' &&
            hasOwnProperty.call(array, 'index')
          ) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == 'function' && !isPrototype(object)
            ? baseCreate(getPrototype(object))
            : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(
            reWrapComment,
            '{\n/* [wrapped with ' + details + '] */\n'
          );
        }
        function isFlattenable(value) {
          return (
            isArray(value) ||
            isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol])
          );
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return (
            !!length &&
            (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
            value > -1 &&
            value % 1 == 0 &&
            value < length
          );
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (
            type == 'number'
              ? isArrayLike(object) && isIndex(index, object.length)
              : type == 'string' && index in object
          ) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (
            type == 'number' ||
            type == 'symbol' ||
            type == 'boolean' ||
            value == null ||
            isSymbol(value)
          ) {
            return true;
          }
          return (
            reIsPlainProp.test(value) ||
            !reIsDeepProp.test(value) ||
            (object != null && value in Object2(object))
          );
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == 'string' ||
            type == 'number' ||
            type == 'symbol' ||
            type == 'boolean'
            ? value !== '__proto__'
            : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func),
            other = lodash[funcName];
          if (
            typeof other != 'function' ||
            !(funcName in LazyWrapper.prototype)
          ) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor,
            proto =
              (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function (object) {
            if (object == null) {
              return false;
            }
            return (
              object[key] === srcValue &&
              (srcValue !== undefined2 || key in Object2(object))
            );
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function (key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon =
              newBitmask <
              (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo =
            (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
            (srcBitmask == WRAP_ARY_FLAG &&
              bitmask == WRAP_REARG_FLAG &&
              data[7].length <= source[8]) ||
            (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
              source[7].length <= source[8] &&
              bitmask == WRAP_CURRY_FLAG);
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials
              ? composeArgs(partials, value, source[4])
              : value;
            data[4] = partials
              ? replaceHolders(data[3], PLACEHOLDER)
              : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials
              ? composeArgsRight(partials, value, source[6])
              : value;
            data[6] = partials
              ? replaceHolders(data[5], PLACEHOLDER)
              : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] =
              data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function () {
            var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2
            ? object
            : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength)
              ? oldArray[index]
              : undefined2;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === 'constructor' && typeof object[key] === 'function') {
            return;
          }
          if (key == '__proto__') {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 =
          ctxSetTimeout ||
          function (func, wait) {
            return root.setTimeout(func, wait);
          };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + '';
          return setToString(
            wrapper,
            insertWrapDetails(
              source,
              updateWrapDetails(getWrapDetails(source), bitmask)
            )
          );
        }
        function shortOut(func) {
          var count = 0,
            lastCalled = 0;
          return function () {
            var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1,
            length = array.length,
            lastIndex = length - 1;
          size2 = size2 === undefined2 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex),
              value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function (string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push('');
          }
          string.replace(
            rePropName,
            function (match, number, quote, subString) {
              result2.push(
                quote ? subString.replace(reEscapeChar, '$1') : number || match
              );
            }
          );
          return result2;
        });
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result2 = value + '';
          return result2 == '0' && 1 / value == -INFINITY ? '-0' : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return func + '';
            } catch (e) {}
          }
          return '';
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function (pair) {
            var value = '_.' + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(
            wrapper.__wrapped__,
            wrapper.__chain__
          );
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (
            guard ? isIterateeCall(array, size2, guard) : size2 === undefined2
          ) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0,
            resIndex = 0,
            result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, (index += size2));
          }
          return result2;
        }
        function compact(array) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1),
            array = arguments[0],
            index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(
            isArray(array) ? copyArray(array) : [array],
            baseFlatten(args, 1)
          );
        }
        var difference = baseRest(function (array, values2) {
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values2, 1, isArrayLikeObject, true)
              )
            : [];
        });
        var differenceBy = baseRest(function (array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values2, 1, isArrayLikeObject, true),
                getIteratee(iteratee2, 2)
              )
            : [];
        });
        var differenceWith = baseRest(function (array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values2, 1, isArrayLikeObject, true),
                undefined2,
                comparator
              )
            : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), true, true)
            : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), true)
            : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (
            start &&
            typeof start != 'number' &&
            isIterateeCall(array, value, start)
          ) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index =
              fromIndex < 0
                ? nativeMax(length + index, 0)
                : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function (arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped)
            : [];
        });
        var intersectionBy = baseRest(function (arrays) {
          var iteratee2 = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped, getIteratee(iteratee2, 2))
            : [];
        });
        var intersectionWith = baseRest(function (arrays) {
          var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped, undefined2, comparator)
            : [];
        });
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index =
              index < 0
                ? nativeMax(length + index, 0)
                : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length
            ? baseNth(array, toInteger(n))
            : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length
            ? basePullAll(array, values2)
            : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length
            ? basePullAll(array, values2, getIteratee(iteratee2, 2))
            : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length
            ? basePullAll(array, values2, undefined2, comparator)
            : array;
        }
        var pullAt = flatRest(function (array, indexes) {
          var length = array == null ? 0 : array.length,
            result2 = baseAt(array, indexes);
          basePullAt(
            array,
            arrayMap(indexes, function (index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending)
          );
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1,
            indexes = [],
            length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (
            end &&
            typeof end != 'number' &&
            isIterateeCall(array, start, end)
          ) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(
            array,
            value,
            getIteratee(iteratee2, 2),
            true
          );
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length
            ? baseSortedUniq(array, getIteratee(iteratee2, 2))
            : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), false, true)
            : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3))
            : [];
        }
        var union = baseRest(function (arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function (arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseUniq(
            baseFlatten(arrays, 1, isArrayLikeObject, true),
            getIteratee(iteratee2, 2)
          );
        });
        var unionWith = baseRest(function (arrays) {
          var comparator = last(arrays);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return baseUniq(
            baseFlatten(arrays, 1, isArrayLikeObject, true),
            undefined2,
            comparator
          );
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length
            ? baseUniq(array, getIteratee(iteratee2, 2))
            : [];
        }
        function uniqWith(array, comparator) {
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return array && array.length
            ? baseUniq(array, undefined2, comparator)
            : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function (group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function (index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function (group) {
            return apply(iteratee2, undefined2, group);
          });
        }
        var without = baseRest(function (array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function (arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function (arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined2;
          }
          return baseXor(
            arrayFilter(arrays, isArrayLikeObject),
            getIteratee(iteratee2, 2)
          );
        });
        var xorWith = baseRest(function (arrays) {
          var comparator = last(arrays);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return baseXor(
            arrayFilter(arrays, isArrayLikeObject),
            undefined2,
            comparator
          );
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function (arrays) {
          var length = arrays.length,
            iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee2 =
            typeof iteratee2 == 'function'
              ? (arrays.pop(), iteratee2)
              : undefined2;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function (paths) {
          var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function (object) {
              return baseAt(object, paths);
            };
          if (
            length > 1 ||
            this.__actions__.length ||
            !(value instanceof LazyWrapper) ||
            !isIndex(start)
          ) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            func: thru,
            args: [interceptor],
            thisArg: undefined2,
          });
          return new LodashWrapper(value, this.__chain__).thru(function (
            array
          ) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length,
            value = done ? undefined2 : this.__values__[this.__index__++];
          return { done: done, value: value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2,
            parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined2;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              func: thru,
              args: [reverse],
              thisArg: undefined2,
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function (result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function (result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection)
            ? collection
            : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection)
            ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
            : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function (collection, path, args) {
          var index = -1,
            isFunc = typeof path == 'function',
            result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function (value) {
            result2[++index] = isFunc
              ? apply(path, value, args)
              : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function (result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(
          function (result2, value, key) {
            result2[key ? 0 : 1].push(value);
          },
          function () {
            return [[], []];
          }
        );
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
          return func(
            collection,
            getIteratee(iteratee2, 4),
            accumulator,
            initAccum,
            baseEach
          );
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
          return func(
            collection,
            getIteratee(iteratee2, 4),
            accumulator,
            initAccum,
            baseEachRight
          );
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection)
              ? stringSize(collection)
              : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function (collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (
            length > 1 &&
            isIterateeCall(collection, iteratees[0], iteratees[1])
          ) {
            iteratees = [];
          } else if (
            length > 2 &&
            isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
          ) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now =
          ctxNow ||
          function () {
            return root.Date.now();
          };
        function after(n, func) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function () {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(
            func,
            WRAP_ARY_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            n
          );
        }
        function before(n, func) {
          var result2;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function () {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result2;
          };
        }
        var bind = baseRest(function (func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function (object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(
            func,
            WRAP_CURRY_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            arity
          );
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result2 = createWrap(
            func,
            WRAP_CURRY_RIGHT_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            arity
          );
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce(func, wait, options) {
          var lastArgs,
            lastThis,
            maxWait,
            result2,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing
              ? nativeMax(toNumber(options.maxWait) || 0, wait)
              : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs,
              thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
            return maxing
              ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
              : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
            return (
              lastCallTime === undefined2 ||
              timeSinceLastCall >= wait ||
              timeSinceLastCall < 0 ||
              (maxing && timeSinceLastInvoke >= maxWait)
            );
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(),
              isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function (func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function (func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (
            typeof func != 'function' ||
            (resolver != null && typeof resolver != 'function')
          ) {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function () {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function () {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function (func, transforms) {
          transforms =
            transforms.length == 1 && isArray(transforms[0])
              ? arrayMap(transforms[0], baseUnary(getIteratee()))
              : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function (args) {
            var index = -1,
              length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function (func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(
            func,
            WRAP_PARTIAL_FLAG,
            undefined2,
            partials,
            holders
          );
        });
        var partialRight = baseRest(function (func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(
            func,
            WRAP_PARTIAL_RIGHT_FLAG,
            undefined2,
            partials,
            holders
          );
        });
        var rearg = flatRest(function (func, indexes) {
          return createWrap(
            func,
            WRAP_REARG_FLAG,
            undefined2,
            undefined2,
            undefined2,
            indexes
          );
        });
        function rest(func, start) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function (args) {
            var array = args[start],
              otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true,
            trailing = true;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            leading: leading,
            maxWait: wait,
            trailing: trailing,
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseClone(
            value,
            CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
            customizer
          );
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function (value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(
          (function () {
            return arguments;
          })()
        )
          ? baseIsArguments
          : function (value) {
              return (
                isObjectLike(value) &&
                hasOwnProperty.call(value, 'callee') &&
                !propertyIsEnumerable.call(value, 'callee')
              );
            };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer
          ? baseUnary(nodeIsArrayBuffer)
          : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return (
            value === true ||
            value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag)
          );
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return (
            isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value)
          );
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (
            isArrayLike(value) &&
            (isArray(value) ||
              typeof value == 'string' ||
              typeof value.splice == 'function' ||
              isBuffer(value) ||
              isTypedArray(value) ||
              isArguments(value))
          ) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          var result2 = customizer ? customizer(value, other) : undefined2;
          return result2 === undefined2
            ? baseIsEqual(value, other, undefined2, customizer)
            : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return (
            tag == errorTag ||
            tag == domExcTag ||
            (typeof value.message == 'string' &&
              typeof value.name == 'string' &&
              !isPlainObject(value))
          );
        }
        function isFinite(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return (
            tag == funcTag ||
            tag == genTag ||
            tag == asyncTag ||
            tag == proxyTag
          );
        }
        function isInteger(value) {
          return typeof value == 'number' && value == toInteger(value);
        }
        function isLength(value) {
          return (
            typeof value == 'number' &&
            value > -1 &&
            value % 1 == 0 &&
            value <= MAX_SAFE_INTEGER
          );
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return (
            object === source ||
            baseIsMatch(object, source, getMatchData(source))
          );
        }
        function isMatchWith(object, source, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return (
            typeof value == 'number' ||
            (isObjectLike(value) && baseGetTag(value) == numberTag)
          );
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor =
            hasOwnProperty.call(proto, 'constructor') && proto.constructor;
          return (
            typeof Ctor == 'function' &&
            Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString
          );
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return (
            isInteger(value) &&
            value >= -MAX_SAFE_INTEGER &&
            value <= MAX_SAFE_INTEGER
          );
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return (
            typeof value == 'string' ||
            (!isArray(value) &&
              isObjectLike(value) &&
              baseGetTag(value) == stringTag)
          );
        }
        function isSymbol(value) {
          return (
            typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag)
          );
        }
        var isTypedArray = nodeIsTypedArray
          ? baseUnary(nodeIsTypedArray)
          : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function (value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value),
            func =
              tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value),
            remainder = result2 % 1;
          return result2 === result2
            ? remainder
              ? result2 - remainder
              : result2
            : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other =
              typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? other + '' : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value)
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : reIsBadHex.test(value)
            ? NAN
            : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value
            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
            : value === 0
            ? value
            : 0;
        }
        function toString(value) {
          return value == null ? '' : baseToString(value);
        }
        var assign = createAssigner(function (object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function (object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function (
          object,
          source,
          srcIndex,
          customizer
        ) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function (
          object,
          source,
          srcIndex,
          customizer
        ) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function (object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (
                value === undefined2 ||
                (eq(value, objectProto[key]) &&
                  !hasOwnProperty.call(object, key))
              ) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function (args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(
            object,
            getIteratee(predicate, 3),
            baseForOwnRight
          );
        }
        function forIn(object, iteratee2) {
          return object == null
            ? object
            : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null
            ? object
            : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined2 : baseGet(object, path);
          return result2 === undefined2 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function (result2, value, key) {
          if (value != null && typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function (result2, value, key) {
          if (value != null && typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object)
            ? arrayLikeKeys(object, true)
            : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function (value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function (value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function (object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function (
          object,
          source,
          srcIndex,
          customizer
        ) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function (object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function (path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(
              result2,
              CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
              customOmitClone
            );
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function (object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function (prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function (value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1,
            length = path.length;
          if (!length) {
            length = 1;
            object = undefined2;
          }
          while (++index < length) {
            var value =
              object == null ? undefined2 : object[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return object == null
            ? object
            : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction(Ctor)
                ? baseCreate(getPrototype(object))
                : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(
            object,
            function (value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            }
          );
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null
            ? object
            : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return object == null
            ? object
            : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (
            floating &&
            typeof floating != 'boolean' &&
            isIterateeCall(lower, upper, floating)
          ) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == 'boolean') {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == 'boolean') {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(
              lower +
                rand *
                  (upper -
                    lower +
                    freeParseFloat('1e-' + ((rand + '').length - 1))),
              upper
            );
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function (result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return (
            string &&
            string.replace(reLatin, deburrLetter).replace(reComboMark, '')
          );
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position =
            position === undefined2
              ? length
              : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string)
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string)
            ? string.replace(reRegExpChar, '\\$&')
            : string;
        }
        var kebabCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? '-' : '') + word.toLowerCase();
        });
        var lowerCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? ' ' : '') + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst('toLowerCase');
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return (
            createPadding(nativeFloor(mid), chars) +
            string +
            createPadding(nativeCeil(mid), chars)
          );
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length
            ? string + createPadding(length - strLength, chars)
            : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length
            ? createPadding(length - strLength, chars) + string
            : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(
            toString(string).replace(reTrimStart, ''),
            radix || 0
          );
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments,
            string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? '_' : '') + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (
            limit &&
            typeof limit != 'number' &&
            isIterateeCall(string, separator, limit)
          ) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (
            string &&
            (typeof separator == 'string' ||
              (separator != null && !isRegExp(separator)))
          ) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? ' ' : '') + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position =
            position == null
              ? 0
              : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith(
              {},
              options.imports,
              settings.imports,
              customDefaultsAssignIn
            ),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);
          var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source +
              '|' +
              interpolate.source +
              '|' +
              (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                .source +
              '|' +
              (options.evaluate || reNoMatch).source +
              '|$',
            'g'
          );
          var sourceURL =
            '//# sourceURL=' +
            (hasOwnProperty.call(options, 'sourceURL')
              ? (options.sourceURL + '').replace(/\s/g, ' ')
              : 'lodash.templateSources[' + ++templateCounter + ']') +
            '\n';
          string.replace(
            reDelimiters,
            function (
              match,
              escapeValue,
              interpolateValue,
              esTemplateValue,
              evaluateValue,
              offset
            ) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string
                .slice(index, offset)
                .replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source +=
                  "' +\n((__t = (" +
                  interpolateValue +
                  ")) == null ? '' : __t) +\n'";
              }
              index = offset + match.length;
              return match;
            }
          );
          source += "';\n";
          var variable =
            hasOwnProperty.call(options, 'variable') && options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (
            isEvaluating ? source.replace(reEmptyStringLeading, '') : source
          )
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');
          source =
            'function(' +
            (variable || 'obj') +
            ') {\n' +
            (variable ? '' : 'obj || (obj = {});\n') +
            "var __t, __p = ''" +
            (isEscaping ? ', __e = _.escape' : '') +
            (isEvaluating
              ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n"
              : ';\n') +
            source +
            'return __p\n}';
          var result2 = attempt(function () {
            return Function2(importsKeys, sourceURL + 'return ' + source).apply(
              undefined2,
              importsValues
            );
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join('');
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join('');
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join('');
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator =
              'separator' in options ? options.separator : separator;
            length = 'length' in options ? toInteger(options.length) : length;
            omission =
              'omission' in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols
            ? castSlice(strSymbols, 0, end).join('')
            : string.slice(0, end);
          if (separator === undefined2) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                substring = result2;
              if (!separator.global) {
                separator = RegExp2(
                  separator.source,
                  toString(reFlags.exec(separator)) + 'g'
                );
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape2(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string)
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }
        var upperCase = createCompounder(function (result2, word, index) {
          return result2 + (index ? ' ' : '') + word.toUpperCase();
        });
        var upperFirst = createCaseFirst('toUpperCase');
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string)
              ? unicodeWords(string)
              : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function (func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function (object, methodNames) {
          arrayEach(methodNames, function (key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();
          pairs = !length
            ? []
            : arrayMap(pairs, function (pair) {
                if (typeof pair[1] != 'function') {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                return [toIteratee(pair[0]), pair[1]];
              });
          return baseRest(function (args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function () {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(
            typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG)
          );
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(
            path,
            baseClone(srcValue, CLONE_DEEP_FLAG)
          );
        }
        var method = baseRest(function (path, args) {
          return function (object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function (object, args) {
          return function (path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source),
            methodNames = baseFunctions(source, props);
          if (
            options == null &&
            !(isObject(source) && (methodNames.length || !props.length))
          ) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 =
              !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);
          arrayEach(methodNames, function (methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function () {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__),
                    actions = (result2.__actions__ = copyArray(
                      this.__actions__
                    ));
                  actions.push({
                    func: func,
                    args: arguments,
                    thisArg: object,
                  });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {}
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function (args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path)
            ? baseProperty(toKey(path))
            : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function (path) {
            return object == null ? undefined2 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return '';
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value)
            ? [value]
            : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function (augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound('ceil');
        var divide = createMathOperation(function (dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound('floor');
        function max(array) {
          return array && array.length
            ? baseExtremum(array, identity, baseGt)
            : undefined2;
        }
        function maxBy(array, iteratee2) {
          return array && array.length
            ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt)
            : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length
            ? baseExtremum(array, identity, baseLt)
            : undefined2;
        }
        function minBy(array, iteratee2) {
          return array && array.length
            ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt)
            : undefined2;
        }
        var multiply = createMathOperation(function (multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound('round');
        var subtract = createMathOperation(function (minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length
            ? baseSum(array, getIteratee(iteratee2, 2))
            : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN2;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape2;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(
          lodash,
          (function () {
            var source = {};
            baseForOwn(lodash, function (func, methodName) {
              if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          })(),
          { chain: false }
        );
        lodash.VERSION = VERSION;
        arrayEach(
          ['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'],
          function (methodName) {
            lodash[methodName].placeholder = lodash;
          }
        );
        arrayEach(['drop', 'take'], function (methodName, index) {
          LazyWrapper.prototype[methodName] = function (n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result2 =
              this.__filtered__ && !index
                ? new LazyWrapper(this)
                : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                size: nativeMin(n, MAX_ARRAY_LENGTH),
                type: methodName + (result2.__dir__ < 0 ? 'Right' : ''),
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + 'Right'] = function (n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
          var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function (iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              iteratee: getIteratee(iteratee2, 3),
              type: type,
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(['head', 'last'], function (methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');
          LazyWrapper.prototype[methodName] = function () {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(['initial', 'tail'], function (methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');
          LazyWrapper.prototype[methodName] = function () {
            return this.__filtered__
              ? new LazyWrapper(this)
              : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function () {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function (predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function (predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
          if (typeof path == 'function') {
            return new LazyWrapper(this);
          }
          return this.map(function (value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function (predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function (start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result2 =
              end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function (predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function () {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
              methodName
            ),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc =
              lodash[
                isTaker
                  ? 'take' + (methodName == 'last' ? 'Right' : '')
                  : methodName
              ],
            retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function () {
            var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee2 = args[0],
              useLazy = isLazy || isArray(value);
            var interceptor = function (value2) {
              var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (
              useLazy &&
              checkIteratee &&
              typeof iteratee2 == 'function' &&
              iteratee2.length != 1
            ) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({
                func: thru,
                args: [interceptor],
                thisArg: undefined2,
              });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped
              ? isTaker
                ? result2.value()[0]
                : result2.value()
              : result2;
          };
        });
        arrayEach(
          ['pop', 'push', 'shift', 'sort', 'splice', 'unshift'],
          function (methodName) {
            var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName)
                ? 'tap'
                : 'thru',
              retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function () {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function (value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          }
        );
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + '';
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ name: methodName, func: lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [
          {
            name: 'wrapper',
            func: undefined2,
          },
        ];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON =
          lodash.prototype.valueOf =
          lodash.prototype.value =
            wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _2 = runInContext();
      if (
        typeof define == 'function' &&
        typeof define.amd == 'object' &&
        define.amd
      ) {
        root._ = _2;
        define(function () {
          return _2;
        });
      } else if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root._ = _2;
      }
    }).call(exports);
  },
});

// node_modules/ajv/dist/compile/codegen/code.js
var require_code = __commonJS({
  'node_modules/ajv/dist/compile/codegen/code.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.regexpCode =
      exports.getEsmExportName =
      exports.getProperty =
      exports.safeStringify =
      exports.stringify =
      exports.strConcat =
      exports.addCodeArg =
      exports.str =
      exports._ =
      exports.nil =
      exports._Code =
      exports.Name =
      exports.IDENTIFIER =
      exports._CodeOrName =
        void 0;
    var _CodeOrName = class {};
    exports._CodeOrName = _CodeOrName;
    exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
    var Name = class extends _CodeOrName {
      constructor(s) {
        super();
        if (!exports.IDENTIFIER.test(s))
          throw new Error('CodeGen: name must be a valid identifier');
        this.str = s;
      }
      toString() {
        return this.str;
      }
      emptyStr() {
        return false;
      }
      get names() {
        return { [this.str]: 1 };
      }
    };
    exports.Name = Name;
    var _Code = class extends _CodeOrName {
      constructor(code) {
        super();
        this._items = typeof code === 'string' ? [code] : code;
      }
      toString() {
        return this.str;
      }
      emptyStr() {
        if (this._items.length > 1) return false;
        const item = this._items[0];
        return item === '' || item === '""';
      }
      get str() {
        var _a;
        return (_a = this._str) !== null && _a !== void 0
          ? _a
          : (this._str = this._items.reduce((s, c) => `${s}${c}`, ''));
      }
      get names() {
        var _a;
        return (_a = this._names) !== null && _a !== void 0
          ? _a
          : (this._names = this._items.reduce((names, c) => {
              if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;
              return names;
            }, {}));
      }
    };
    exports._Code = _Code;
    exports.nil = new _Code('');
    function _2(strs, ...args) {
      const code = [strs[0]];
      let i = 0;
      while (i < args.length) {
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
      }
      return new _Code(code);
    }
    exports._ = _2;
    var plus = new _Code('+');
    function str(strs, ...args) {
      const expr = [safeStringify(strs[0])];
      let i = 0;
      while (i < args.length) {
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
      }
      optimize(expr);
      return new _Code(expr);
    }
    exports.str = str;
    function addCodeArg(code, arg) {
      if (arg instanceof _Code) code.push(...arg._items);
      else if (arg instanceof Name) code.push(arg);
      else code.push(interpolate(arg));
    }
    exports.addCodeArg = addCodeArg;
    function optimize(expr) {
      let i = 1;
      while (i < expr.length - 1) {
        if (expr[i] === plus) {
          const res = mergeExprItems(expr[i - 1], expr[i + 1]);
          if (res !== void 0) {
            expr.splice(i - 1, 3, res);
            continue;
          }
          expr[i++] = '+';
        }
        i++;
      }
    }
    function mergeExprItems(a, b) {
      if (b === '""') return a;
      if (a === '""') return b;
      if (typeof a == 'string') {
        if (b instanceof Name || a[a.length - 1] !== '"') return;
        if (typeof b != 'string') return `${a.slice(0, -1)}${b}"`;
        if (b[0] === '"') return a.slice(0, -1) + b.slice(1);
        return;
      }
      if (typeof b == 'string' && b[0] === '"' && !(a instanceof Name))
        return `"${a}${b.slice(1)}`;
      return;
    }
    function strConcat(c1, c2) {
      return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
    }
    exports.strConcat = strConcat;
    function interpolate(x) {
      return typeof x == 'number' || typeof x == 'boolean' || x === null
        ? x
        : safeStringify(Array.isArray(x) ? x.join(',') : x);
    }
    function stringify2(x) {
      return new _Code(safeStringify(x));
    }
    exports.stringify = stringify2;
    function safeStringify(x) {
      return JSON.stringify(x)
        .replace(/\u2028/g, '\\u2028')
        .replace(/\u2029/g, '\\u2029');
    }
    exports.safeStringify = safeStringify;
    function getProperty(key) {
      return typeof key == 'string' && exports.IDENTIFIER.test(key)
        ? new _Code(`.${key}`)
        : _2`[${key}]`;
    }
    exports.getProperty = getProperty;
    function getEsmExportName(key) {
      if (typeof key == 'string' && exports.IDENTIFIER.test(key)) {
        return new _Code(`${key}`);
      }
      throw new Error(
        `CodeGen: invalid export name: ${key}, use explicit $id name mapping`
      );
    }
    exports.getEsmExportName = getEsmExportName;
    function regexpCode(rx) {
      return new _Code(rx.toString());
    }
    exports.regexpCode = regexpCode;
  },
});

// node_modules/ajv/dist/compile/codegen/scope.js
var require_scope = __commonJS({
  'node_modules/ajv/dist/compile/codegen/scope.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.ValueScope =
      exports.ValueScopeName =
      exports.Scope =
      exports.varKinds =
      exports.UsedValueState =
        void 0;
    var code_1 = require_code();
    var ValueError = class extends Error {
      constructor(name) {
        super(`CodeGen: "code" for ${name} not defined`);
        this.value = name.value;
      }
    };
    var UsedValueState;
    (function (UsedValueState2) {
      UsedValueState2[(UsedValueState2['Started'] = 0)] = 'Started';
      UsedValueState2[(UsedValueState2['Completed'] = 1)] = 'Completed';
    })(
      (UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}))
    );
    exports.varKinds = {
      const: new code_1.Name('const'),
      let: new code_1.Name('let'),
      var: new code_1.Name('var'),
    };
    var Scope = class {
      constructor({ prefixes, parent } = {}) {
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
      }
      toName(nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name
          ? nameOrPrefix
          : this.name(nameOrPrefix);
      }
      name(prefix) {
        return new code_1.Name(this._newName(prefix));
      }
      _newName(prefix) {
        const ng = this._names[prefix] || this._nameGroup(prefix);
        return `${prefix}${ng.index++}`;
      }
      _nameGroup(prefix) {
        var _a, _b;
        if (
          ((_b =
            (_a = this._parent) === null || _a === void 0
              ? void 0
              : _a._prefixes) === null || _b === void 0
            ? void 0
            : _b.has(prefix)) ||
          (this._prefixes && !this._prefixes.has(prefix))
        ) {
          throw new Error(
            `CodeGen: prefix "${prefix}" is not allowed in this scope`
          );
        }
        return (this._names[prefix] = { prefix, index: 0 });
      }
    };
    exports.Scope = Scope;
    var ValueScopeName = class extends code_1.Name {
      constructor(prefix, nameStr) {
        super(nameStr);
        this.prefix = prefix;
      }
      setValue(value, { property, itemIndex }) {
        this.value = value;
        this.scopePath = (0, code_1._)`.${new code_1.Name(
          property
        )}[${itemIndex}]`;
      }
    };
    exports.ValueScopeName = ValueScopeName;
    var line = (0, code_1._)`\n`;
    var ValueScope = class extends Scope {
      constructor(opts) {
        super(opts);
        this._values = {};
        this._scope = opts.scope;
        this.opts = { ...opts, _n: opts.lines ? line : code_1.nil };
      }
      get() {
        return this._scope;
      }
      name(prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
      }
      value(nameOrPrefix, value) {
        var _a;
        if (value.ref === void 0)
          throw new Error('CodeGen: ref must be passed in value');
        const name = this.toName(nameOrPrefix);
        const { prefix } = name;
        const valueKey =
          (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        let vs = this._values[prefix];
        if (vs) {
          const _name = vs.get(valueKey);
          if (_name) return _name;
        } else {
          vs = this._values[prefix] = /* @__PURE__ */ new Map();
        }
        vs.set(valueKey, name);
        const s = this._scope[prefix] || (this._scope[prefix] = []);
        const itemIndex = s.length;
        s[itemIndex] = value.ref;
        name.setValue(value, { property: prefix, itemIndex });
        return name;
      }
      getValue(prefix, keyOrRef) {
        const vs = this._values[prefix];
        if (!vs) return;
        return vs.get(keyOrRef);
      }
      scopeRefs(scopeName, values = this._values) {
        return this._reduceValues(values, (name) => {
          if (name.scopePath === void 0)
            throw new Error(`CodeGen: name "${name}" has no value`);
          return (0, code_1._)`${scopeName}${name.scopePath}`;
        });
      }
      scopeCode(values = this._values, usedValues, getCode) {
        return this._reduceValues(
          values,
          (name) => {
            if (name.value === void 0)
              throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
          },
          usedValues,
          getCode
        );
      }
      _reduceValues(values, valueCode, usedValues = {}, getCode) {
        let code = code_1.nil;
        for (const prefix in values) {
          const vs = values[prefix];
          if (!vs) continue;
          const nameSet = (usedValues[prefix] =
            usedValues[prefix] || /* @__PURE__ */ new Map());
          vs.forEach((name) => {
            if (nameSet.has(name)) return;
            nameSet.set(name, UsedValueState.Started);
            let c = valueCode(name);
            if (c) {
              const def = this.opts.es5
                ? exports.varKinds.var
                : exports.varKinds.const;
              code = (0,
              code_1._)`${code}${def} ${name} = ${c};${this.opts._n}`;
            } else if (
              (c =
                getCode === null || getCode === void 0 ? void 0 : getCode(name))
            ) {
              code = (0, code_1._)`${code}${c}${this.opts._n}`;
            } else {
              throw new ValueError(name);
            }
            nameSet.set(name, UsedValueState.Completed);
          });
        }
        return code;
      }
    };
    exports.ValueScope = ValueScope;
  },
});

// node_modules/ajv/dist/compile/codegen/index.js
var require_codegen = __commonJS({
  'node_modules/ajv/dist/compile/codegen/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.or =
      exports.and =
      exports.not =
      exports.CodeGen =
      exports.operators =
      exports.varKinds =
      exports.ValueScopeName =
      exports.ValueScope =
      exports.Scope =
      exports.Name =
      exports.regexpCode =
      exports.stringify =
      exports.getProperty =
      exports.nil =
      exports.strConcat =
      exports.str =
      exports._ =
        void 0;
    var code_1 = require_code();
    var scope_1 = require_scope();
    var code_2 = require_code();
    Object.defineProperty(exports, '_', {
      enumerable: true,
      get: function () {
        return code_2._;
      },
    });
    Object.defineProperty(exports, 'str', {
      enumerable: true,
      get: function () {
        return code_2.str;
      },
    });
    Object.defineProperty(exports, 'strConcat', {
      enumerable: true,
      get: function () {
        return code_2.strConcat;
      },
    });
    Object.defineProperty(exports, 'nil', {
      enumerable: true,
      get: function () {
        return code_2.nil;
      },
    });
    Object.defineProperty(exports, 'getProperty', {
      enumerable: true,
      get: function () {
        return code_2.getProperty;
      },
    });
    Object.defineProperty(exports, 'stringify', {
      enumerable: true,
      get: function () {
        return code_2.stringify;
      },
    });
    Object.defineProperty(exports, 'regexpCode', {
      enumerable: true,
      get: function () {
        return code_2.regexpCode;
      },
    });
    Object.defineProperty(exports, 'Name', {
      enumerable: true,
      get: function () {
        return code_2.Name;
      },
    });
    var scope_2 = require_scope();
    Object.defineProperty(exports, 'Scope', {
      enumerable: true,
      get: function () {
        return scope_2.Scope;
      },
    });
    Object.defineProperty(exports, 'ValueScope', {
      enumerable: true,
      get: function () {
        return scope_2.ValueScope;
      },
    });
    Object.defineProperty(exports, 'ValueScopeName', {
      enumerable: true,
      get: function () {
        return scope_2.ValueScopeName;
      },
    });
    Object.defineProperty(exports, 'varKinds', {
      enumerable: true,
      get: function () {
        return scope_2.varKinds;
      },
    });
    exports.operators = {
      GT: new code_1._Code('>'),
      GTE: new code_1._Code('>='),
      LT: new code_1._Code('<'),
      LTE: new code_1._Code('<='),
      EQ: new code_1._Code('==='),
      NEQ: new code_1._Code('!=='),
      NOT: new code_1._Code('!'),
      OR: new code_1._Code('||'),
      AND: new code_1._Code('&&'),
      ADD: new code_1._Code('+'),
    };
    var Node = class {
      optimizeNodes() {
        return this;
      }
      optimizeNames(_names, _constants) {
        return this;
      }
    };
    var Def = class extends Node {
      constructor(varKind, name, rhs) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.rhs = rhs;
      }
      render({ es5, _n }) {
        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
        const rhs = this.rhs === void 0 ? '' : ` = ${this.rhs}`;
        return `${varKind} ${this.name}${rhs};` + _n;
      }
      optimizeNames(names, constants) {
        if (!names[this.name.str]) return;
        if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
      }
      get names() {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
      }
    };
    var Assign = class extends Node {
      constructor(lhs, rhs, sideEffects) {
        super();
        this.lhs = lhs;
        this.rhs = rhs;
        this.sideEffects = sideEffects;
      }
      render({ _n }) {
        return `${this.lhs} = ${this.rhs};` + _n;
      }
      optimizeNames(names, constants) {
        if (
          this.lhs instanceof code_1.Name &&
          !names[this.lhs.str] &&
          !this.sideEffects
        )
          return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
      }
      get names() {
        const names =
          this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };
        return addExprNames(names, this.rhs);
      }
    };
    var AssignOp = class extends Assign {
      constructor(lhs, op, rhs, sideEffects) {
        super(lhs, rhs, sideEffects);
        this.op = op;
      }
      render({ _n }) {
        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
      }
    };
    var Label = class extends Node {
      constructor(label) {
        super();
        this.label = label;
        this.names = {};
      }
      render({ _n }) {
        return `${this.label}:` + _n;
      }
    };
    var Break = class extends Node {
      constructor(label) {
        super();
        this.label = label;
        this.names = {};
      }
      render({ _n }) {
        const label = this.label ? ` ${this.label}` : '';
        return `break${label};` + _n;
      }
    };
    var Throw = class extends Node {
      constructor(error) {
        super();
        this.error = error;
      }
      render({ _n }) {
        return `throw ${this.error};` + _n;
      }
      get names() {
        return this.error.names;
      }
    };
    var AnyCode = class extends Node {
      constructor(code) {
        super();
        this.code = code;
      }
      render({ _n }) {
        return `${this.code};` + _n;
      }
      optimizeNodes() {
        return `${this.code}` ? this : void 0;
      }
      optimizeNames(names, constants) {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
      }
      get names() {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
      }
    };
    var ParentNode = class extends Node {
      constructor(nodes = []) {
        super();
        this.nodes = nodes;
      }
      render(opts) {
        return this.nodes.reduce((code, n) => code + n.render(opts), '');
      }
      optimizeNodes() {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
          const n = nodes[i].optimizeNodes();
          if (Array.isArray(n)) nodes.splice(i, 1, ...n);
          else if (n) nodes[i] = n;
          else nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : void 0;
      }
      optimizeNames(names, constants) {
        const { nodes } = this;
        let i = nodes.length;
        while (i--) {
          const n = nodes[i];
          if (n.optimizeNames(names, constants)) continue;
          subtractNames(names, n.names);
          nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : void 0;
      }
      get names() {
        return this.nodes.reduce((names, n) => addNames(names, n.names), {});
      }
    };
    var BlockNode = class extends ParentNode {
      render(opts) {
        return '{' + opts._n + super.render(opts) + '}' + opts._n;
      }
    };
    var Root = class extends ParentNode {};
    var Else = class extends BlockNode {};
    Else.kind = 'else';
    var If = class extends BlockNode {
      constructor(condition, nodes) {
        super(nodes);
        this.condition = condition;
      }
      render(opts) {
        let code = `if(${this.condition})` + super.render(opts);
        if (this.else) code += 'else ' + this.else.render(opts);
        return code;
      }
      optimizeNodes() {
        super.optimizeNodes();
        const cond = this.condition;
        if (cond === true) return this.nodes;
        let e = this.else;
        if (e) {
          const ns = e.optimizeNodes();
          e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
        }
        if (e) {
          if (cond === false) return e instanceof If ? e : e.nodes;
          if (this.nodes.length) return this;
          return new If(not(cond), e instanceof If ? [e] : e.nodes);
        }
        if (cond === false || !this.nodes.length) return void 0;
        return this;
      }
      optimizeNames(names, constants) {
        var _a;
        this.else =
          (_a = this.else) === null || _a === void 0
            ? void 0
            : _a.optimizeNames(names, constants);
        if (!(super.optimizeNames(names, constants) || this.else)) return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
      }
      get names() {
        const names = super.names;
        addExprNames(names, this.condition);
        if (this.else) addNames(names, this.else.names);
        return names;
      }
    };
    If.kind = 'if';
    var For = class extends BlockNode {};
    For.kind = 'for';
    var ForLoop = class extends For {
      constructor(iteration) {
        super();
        this.iteration = iteration;
      }
      render(opts) {
        return `for(${this.iteration})` + super.render(opts);
      }
      optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants)) return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
      }
      get names() {
        return addNames(super.names, this.iteration.names);
      }
    };
    var ForRange = class extends For {
      constructor(varKind, name, from, to) {
        super();
        this.varKind = varKind;
        this.name = name;
        this.from = from;
        this.to = to;
      }
      render(opts) {
        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
        const { name, from, to } = this;
        return (
          `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` +
          super.render(opts)
        );
      }
      get names() {
        const names = addExprNames(super.names, this.from);
        return addExprNames(names, this.to);
      }
    };
    var ForIter = class extends For {
      constructor(loop, varKind, name, iterable) {
        super();
        this.loop = loop;
        this.varKind = varKind;
        this.name = name;
        this.iterable = iterable;
      }
      render(opts) {
        return (
          `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` +
          super.render(opts)
        );
      }
      optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants)) return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
      }
      get names() {
        return addNames(super.names, this.iterable.names);
      }
    };
    var Func = class extends BlockNode {
      constructor(name, args, async) {
        super();
        this.name = name;
        this.args = args;
        this.async = async;
      }
      render(opts) {
        const _async = this.async ? 'async ' : '';
        return (
          `${_async}function ${this.name}(${this.args})` + super.render(opts)
        );
      }
    };
    Func.kind = 'func';
    var Return = class extends ParentNode {
      render(opts) {
        return 'return ' + super.render(opts);
      }
    };
    Return.kind = 'return';
    var Try = class extends BlockNode {
      render(opts) {
        let code = 'try' + super.render(opts);
        if (this.catch) code += this.catch.render(opts);
        if (this.finally) code += this.finally.render(opts);
        return code;
      }
      optimizeNodes() {
        var _a, _b;
        super.optimizeNodes();
        (_a = this.catch) === null || _a === void 0
          ? void 0
          : _a.optimizeNodes();
        (_b = this.finally) === null || _b === void 0
          ? void 0
          : _b.optimizeNodes();
        return this;
      }
      optimizeNames(names, constants) {
        var _a, _b;
        super.optimizeNames(names, constants);
        (_a = this.catch) === null || _a === void 0
          ? void 0
          : _a.optimizeNames(names, constants);
        (_b = this.finally) === null || _b === void 0
          ? void 0
          : _b.optimizeNames(names, constants);
        return this;
      }
      get names() {
        const names = super.names;
        if (this.catch) addNames(names, this.catch.names);
        if (this.finally) addNames(names, this.finally.names);
        return names;
      }
    };
    var Catch = class extends BlockNode {
      constructor(error) {
        super();
        this.error = error;
      }
      render(opts) {
        return `catch(${this.error})` + super.render(opts);
      }
    };
    Catch.kind = 'catch';
    var Finally = class extends BlockNode {
      render(opts) {
        return 'finally' + super.render(opts);
      }
    };
    Finally.kind = 'finally';
    var CodeGen = class {
      constructor(extScope, opts = {}) {
        this._values = {};
        this._blockStarts = [];
        this._constants = {};
        this.opts = { ...opts, _n: opts.lines ? '\n' : '' };
        this._extScope = extScope;
        this._scope = new scope_1.Scope({ parent: extScope });
        this._nodes = [new Root()];
      }
      toString() {
        return this._root.render(this.opts);
      }
      // returns unique name in the internal scope
      name(prefix) {
        return this._scope.name(prefix);
      }
      // reserves unique name in the external scope
      scopeName(prefix) {
        return this._extScope.name(prefix);
      }
      // reserves unique name in the external scope and assigns value to it
      scopeValue(prefixOrName, value) {
        const name = this._extScope.value(prefixOrName, value);
        const vs =
          this._values[name.prefix] ||
          (this._values[name.prefix] = /* @__PURE__ */ new Set());
        vs.add(name);
        return name;
      }
      getScopeValue(prefix, keyOrRef) {
        return this._extScope.getValue(prefix, keyOrRef);
      }
      // return code that assigns values in the external scope to the names that are used internally
      // (same names that were returned by gen.scopeName or gen.scopeValue)
      scopeRefs(scopeName) {
        return this._extScope.scopeRefs(scopeName, this._values);
      }
      scopeCode() {
        return this._extScope.scopeCode(this._values);
      }
      _def(varKind, nameOrPrefix, rhs, constant) {
        const name = this._scope.toName(nameOrPrefix);
        if (rhs !== void 0 && constant) this._constants[name.str] = rhs;
        this._leafNode(new Def(varKind, name, rhs));
        return name;
      }
      // `const` declaration (`var` in es5 mode)
      const(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
      }
      // `let` declaration with optional assignment (`var` in es5 mode)
      let(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
      }
      // `var` declaration with optional assignment
      var(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
      }
      // assignment code
      assign(lhs, rhs, sideEffects) {
        return this._leafNode(new Assign(lhs, rhs, sideEffects));
      }
      // `+=` code
      add(lhs, rhs) {
        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
      }
      // appends passed SafeExpr to code or executes Block
      code(c) {
        if (typeof c == 'function') c();
        else if (c !== code_1.nil) this._leafNode(new AnyCode(c));
        return this;
      }
      // returns code for object literal for the passed argument list of key-value pairs
      object(...keyValues) {
        const code = ['{'];
        for (const [key, value] of keyValues) {
          if (code.length > 1) code.push(',');
          code.push(key);
          if (key !== value || this.opts.es5) {
            code.push(':');
            (0, code_1.addCodeArg)(code, value);
          }
        }
        code.push('}');
        return new code_1._Code(code);
      }
      // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
      if(condition, thenBody, elseBody) {
        this._blockNode(new If(condition));
        if (thenBody && elseBody) {
          this.code(thenBody).else().code(elseBody).endIf();
        } else if (thenBody) {
          this.code(thenBody).endIf();
        } else if (elseBody) {
          throw new Error('CodeGen: "else" body without "then" body');
        }
        return this;
      }
      // `else if` clause - invalid without `if` or after `else` clauses
      elseIf(condition) {
        return this._elseNode(new If(condition));
      }
      // `else` clause - only valid after `if` or `else if` clauses
      else() {
        return this._elseNode(new Else());
      }
      // end `if` statement (needed if gen.if was used only with condition)
      endIf() {
        return this._endBlockNode(If, Else);
      }
      _for(node, forBody) {
        this._blockNode(node);
        if (forBody) this.code(forBody).endFor();
        return this;
      }
      // a generic `for` clause (or statement if `forBody` is passed)
      for(iteration, forBody) {
        return this._for(new ForLoop(iteration), forBody);
      }
      // `for` statement for a range of values
      forRange(
        nameOrPrefix,
        from,
        to,
        forBody,
        varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let
      ) {
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForRange(varKind, name, from, to), () =>
          forBody(name)
        );
      }
      // `for-of` statement (in es5 mode replace with a normal for loop)
      forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
        const name = this._scope.toName(nameOrPrefix);
        if (this.opts.es5) {
          const arr =
            iterable instanceof code_1.Name
              ? iterable
              : this.var('_arr', iterable);
          return this.forRange('_i', 0, (0, code_1._)`${arr}.length`, (i) => {
            this.var(name, (0, code_1._)`${arr}[${i}]`);
            forBody(name);
          });
        }
        return this._for(new ForIter('of', varKind, name, iterable), () =>
          forBody(name)
        );
      }
      // `for-in` statement.
      // With option `ownProperties` replaced with a `for-of` loop for object keys
      forIn(
        nameOrPrefix,
        obj,
        forBody,
        varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const
      ) {
        if (this.opts.ownProperties) {
          return this.forOf(
            nameOrPrefix,
            (0, code_1._)`Object.keys(${obj})`,
            forBody
          );
        }
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForIter('in', varKind, name, obj), () =>
          forBody(name)
        );
      }
      // end `for` loop
      endFor() {
        return this._endBlockNode(For);
      }
      // `label` statement
      label(label) {
        return this._leafNode(new Label(label));
      }
      // `break` statement
      break(label) {
        return this._leafNode(new Break(label));
      }
      // `return` statement
      return(value) {
        const node = new Return();
        this._blockNode(node);
        this.code(value);
        if (node.nodes.length !== 1)
          throw new Error('CodeGen: "return" should have one node');
        return this._endBlockNode(Return);
      }
      // `try` statement
      try(tryBody, catchCode, finallyCode) {
        if (!catchCode && !finallyCode)
          throw new Error('CodeGen: "try" without "catch" and "finally"');
        const node = new Try();
        this._blockNode(node);
        this.code(tryBody);
        if (catchCode) {
          const error = this.name('e');
          this._currNode = node.catch = new Catch(error);
          catchCode(error);
        }
        if (finallyCode) {
          this._currNode = node.finally = new Finally();
          this.code(finallyCode);
        }
        return this._endBlockNode(Catch, Finally);
      }
      // `throw` statement
      throw(error) {
        return this._leafNode(new Throw(error));
      }
      // start self-balancing block
      block(body, nodeCount) {
        this._blockStarts.push(this._nodes.length);
        if (body) this.code(body).endBlock(nodeCount);
        return this;
      }
      // end the current self-balancing block
      endBlock(nodeCount) {
        const len = this._blockStarts.pop();
        if (len === void 0)
          throw new Error('CodeGen: not in self-balancing block');
        const toClose = this._nodes.length - len;
        if (toClose < 0 || (nodeCount !== void 0 && toClose !== nodeCount)) {
          throw new Error(
            `CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`
          );
        }
        this._nodes.length = len;
        return this;
      }
      // `function` heading (or definition if funcBody is passed)
      func(name, args = code_1.nil, async, funcBody) {
        this._blockNode(new Func(name, args, async));
        if (funcBody) this.code(funcBody).endFunc();
        return this;
      }
      // end function definition
      endFunc() {
        return this._endBlockNode(Func);
      }
      optimize(n = 1) {
        while (n-- > 0) {
          this._root.optimizeNodes();
          this._root.optimizeNames(this._root.names, this._constants);
        }
      }
      _leafNode(node) {
        this._currNode.nodes.push(node);
        return this;
      }
      _blockNode(node) {
        this._currNode.nodes.push(node);
        this._nodes.push(node);
      }
      _endBlockNode(N1, N2) {
        const n = this._currNode;
        if (n instanceof N1 || (N2 && n instanceof N2)) {
          this._nodes.pop();
          return this;
        }
        throw new Error(
          `CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`
        );
      }
      _elseNode(node) {
        const n = this._currNode;
        if (!(n instanceof If)) {
          throw new Error('CodeGen: "else" without "if"');
        }
        this._currNode = n.else = node;
        return this;
      }
      get _root() {
        return this._nodes[0];
      }
      get _currNode() {
        const ns = this._nodes;
        return ns[ns.length - 1];
      }
      set _currNode(node) {
        const ns = this._nodes;
        ns[ns.length - 1] = node;
      }
    };
    exports.CodeGen = CodeGen;
    function addNames(names, from) {
      for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0);
      return names;
    }
    function addExprNames(names, from) {
      return from instanceof code_1._CodeOrName
        ? addNames(names, from.names)
        : names;
    }
    function optimizeExpr(expr, names, constants) {
      if (expr instanceof code_1.Name) return replaceName(expr);
      if (!canOptimize(expr)) return expr;
      return new code_1._Code(
        expr._items.reduce((items, c) => {
          if (c instanceof code_1.Name) c = replaceName(c);
          if (c instanceof code_1._Code) items.push(...c._items);
          else items.push(c);
          return items;
        }, [])
      );
      function replaceName(n) {
        const c = constants[n.str];
        if (c === void 0 || names[n.str] !== 1) return n;
        delete names[n.str];
        return c;
      }
      function canOptimize(e) {
        return (
          e instanceof code_1._Code &&
          e._items.some(
            (c) =>
              c instanceof code_1.Name &&
              names[c.str] === 1 &&
              constants[c.str] !== void 0
          )
        );
      }
    }
    function subtractNames(names, from) {
      for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0);
    }
    function not(x) {
      return typeof x == 'boolean' || typeof x == 'number' || x === null
        ? !x
        : (0, code_1._)`!${par(x)}`;
    }
    exports.not = not;
    var andCode = mappend(exports.operators.AND);
    function and(...args) {
      return args.reduce(andCode);
    }
    exports.and = and;
    var orCode = mappend(exports.operators.OR);
    function or(...args) {
      return args.reduce(orCode);
    }
    exports.or = or;
    function mappend(op) {
      return (x, y) =>
        x === code_1.nil
          ? y
          : y === code_1.nil
          ? x
          : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
    }
    function par(x) {
      return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
    }
  },
});

// node_modules/ajv/dist/compile/util.js
var require_util4 = __commonJS({
  'node_modules/ajv/dist/compile/util.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.checkStrictMode =
      exports.getErrorPath =
      exports.Type =
      exports.useFunc =
      exports.setEvaluated =
      exports.evaluatedPropsToName =
      exports.mergeEvaluated =
      exports.eachItem =
      exports.unescapeJsonPointer =
      exports.escapeJsonPointer =
      exports.escapeFragment =
      exports.unescapeFragment =
      exports.schemaRefOrVal =
      exports.schemaHasRulesButRef =
      exports.schemaHasRules =
      exports.checkUnknownRules =
      exports.alwaysValidSchema =
      exports.toHash =
        void 0;
    var codegen_1 = require_codegen();
    var code_1 = require_code();
    function toHash(arr) {
      const hash = {};
      for (const item of arr) hash[item] = true;
      return hash;
    }
    exports.toHash = toHash;
    function alwaysValidSchema(it, schema) {
      if (typeof schema == 'boolean') return schema;
      if (Object.keys(schema).length === 0) return true;
      checkUnknownRules(it, schema);
      return !schemaHasRules(schema, it.self.RULES.all);
    }
    exports.alwaysValidSchema = alwaysValidSchema;
    function checkUnknownRules(it, schema = it.schema) {
      const { opts, self: self2 } = it;
      if (!opts.strictSchema) return;
      if (typeof schema === 'boolean') return;
      const rules = self2.RULES.keywords;
      for (const key in schema) {
        if (!rules[key]) checkStrictMode(it, `unknown keyword: "${key}"`);
      }
    }
    exports.checkUnknownRules = checkUnknownRules;
    function schemaHasRules(schema, rules) {
      if (typeof schema == 'boolean') return !schema;
      for (const key in schema) if (rules[key]) return true;
      return false;
    }
    exports.schemaHasRules = schemaHasRules;
    function schemaHasRulesButRef(schema, RULES) {
      if (typeof schema == 'boolean') return !schema;
      for (const key in schema)
        if (key !== '$ref' && RULES.all[key]) return true;
      return false;
    }
    exports.schemaHasRulesButRef = schemaHasRulesButRef;
    function schemaRefOrVal(
      { topSchemaRef, schemaPath },
      schema,
      keyword,
      $data
    ) {
      if (!$data) {
        if (typeof schema == 'number' || typeof schema == 'boolean')
          return schema;
        if (typeof schema == 'string') return (0, codegen_1._)`${schema}`;
      }
      return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0,
      codegen_1.getProperty)(keyword)}`;
    }
    exports.schemaRefOrVal = schemaRefOrVal;
    function unescapeFragment(str) {
      return unescapeJsonPointer(decodeURIComponent(str));
    }
    exports.unescapeFragment = unescapeFragment;
    function escapeFragment(str) {
      return encodeURIComponent(escapeJsonPointer(str));
    }
    exports.escapeFragment = escapeFragment;
    function escapeJsonPointer(str) {
      if (typeof str == 'number') return `${str}`;
      return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }
    exports.escapeJsonPointer = escapeJsonPointer;
    function unescapeJsonPointer(str) {
      return str.replace(/~1/g, '/').replace(/~0/g, '~');
    }
    exports.unescapeJsonPointer = unescapeJsonPointer;
    function eachItem(xs, f) {
      if (Array.isArray(xs)) {
        for (const x of xs) f(x);
      } else {
        f(xs);
      }
    }
    exports.eachItem = eachItem;
    function makeMergeEvaluated({
      mergeNames,
      mergeToName,
      mergeValues,
      resultToName,
    }) {
      return (gen, from, to, toName) => {
        const res =
          to === void 0
            ? from
            : to instanceof codegen_1.Name
            ? (from instanceof codegen_1.Name
                ? mergeNames(gen, from, to)
                : mergeToName(gen, from, to),
              to)
            : from instanceof codegen_1.Name
            ? (mergeToName(gen, to, from), from)
            : mergeValues(from, to);
        return toName === codegen_1.Name && !(res instanceof codegen_1.Name)
          ? resultToName(gen, res)
          : res;
      };
    }
    exports.mergeEvaluated = {
      props: makeMergeEvaluated({
        mergeNames: (gen, from, to) =>
          gen.if(
            (0, codegen_1._)`${to} !== true && ${from} !== undefined`,
            () => {
              gen.if(
                (0, codegen_1._)`${from} === true`,
                () => gen.assign(to, true),
                () =>
                  gen
                    .assign(to, (0, codegen_1._)`${to} || {}`)
                    .code((0, codegen_1._)`Object.assign(${to}, ${from})`)
              );
            }
          ),
        mergeToName: (gen, from, to) =>
          gen.if((0, codegen_1._)`${to} !== true`, () => {
            if (from === true) {
              gen.assign(to, true);
            } else {
              gen.assign(to, (0, codegen_1._)`${to} || {}`);
              setEvaluated(gen, to, from);
            }
          }),
        mergeValues: (from, to) => (from === true ? true : { ...from, ...to }),
        resultToName: evaluatedPropsToName,
      }),
      items: makeMergeEvaluated({
        mergeNames: (gen, from, to) =>
          gen.if(
            (0, codegen_1._)`${to} !== true && ${from} !== undefined`,
            () =>
              gen.assign(
                to,
                (0,
                codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`
              )
          ),
        mergeToName: (gen, from, to) =>
          gen.if((0, codegen_1._)`${to} !== true`, () =>
            gen.assign(
              to,
              from === true
                ? true
                : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`
            )
          ),
        mergeValues: (from, to) => (from === true ? true : Math.max(from, to)),
        resultToName: (gen, items) => gen.var('items', items),
      }),
    };
    function evaluatedPropsToName(gen, ps) {
      if (ps === true) return gen.var('props', true);
      const props = gen.var('props', (0, codegen_1._)`{}`);
      if (ps !== void 0) setEvaluated(gen, props, ps);
      return props;
    }
    exports.evaluatedPropsToName = evaluatedPropsToName;
    function setEvaluated(gen, props, ps) {
      Object.keys(ps).forEach((p) =>
        gen.assign(
          (0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`,
          true
        )
      );
    }
    exports.setEvaluated = setEvaluated;
    var snippets = {};
    function useFunc(gen, f) {
      return gen.scopeValue('func', {
        ref: f,
        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code)),
      });
    }
    exports.useFunc = useFunc;
    var Type;
    (function (Type2) {
      Type2[(Type2['Num'] = 0)] = 'Num';
      Type2[(Type2['Str'] = 1)] = 'Str';
    })((Type = exports.Type || (exports.Type = {})));
    function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
      if (dataProp instanceof codegen_1.Name) {
        const isNumber = dataPropType === Type.Num;
        return jsPropertySyntax
          ? isNumber
            ? (0, codegen_1._)`"[" + ${dataProp} + "]"`
            : (0, codegen_1._)`"['" + ${dataProp} + "']"`
          : isNumber
          ? (0, codegen_1._)`"/" + ${dataProp}`
          : (0,
            codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
      }
      return jsPropertySyntax
        ? (0, codegen_1.getProperty)(dataProp).toString()
        : '/' + escapeJsonPointer(dataProp);
    }
    exports.getErrorPath = getErrorPath;
    function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
      if (!mode) return;
      msg = `strict mode: ${msg}`;
      if (mode === true) throw new Error(msg);
      it.self.logger.warn(msg);
    }
    exports.checkStrictMode = checkStrictMode;
  },
});

// node_modules/ajv/dist/compile/names.js
var require_names = __commonJS({
  'node_modules/ajv/dist/compile/names.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var names = {
      // validation function arguments
      data: new codegen_1.Name('data'),
      // args passed from referencing schema
      valCxt: new codegen_1.Name('valCxt'),
      instancePath: new codegen_1.Name('instancePath'),
      parentData: new codegen_1.Name('parentData'),
      parentDataProperty: new codegen_1.Name('parentDataProperty'),
      rootData: new codegen_1.Name('rootData'),
      dynamicAnchors: new codegen_1.Name('dynamicAnchors'),
      // function scoped variables
      vErrors: new codegen_1.Name('vErrors'),
      errors: new codegen_1.Name('errors'),
      this: new codegen_1.Name('this'),
      // "globals"
      self: new codegen_1.Name('self'),
      scope: new codegen_1.Name('scope'),
      // JTD serialize/parse name for JSON string and position
      json: new codegen_1.Name('json'),
      jsonPos: new codegen_1.Name('jsonPos'),
      jsonLen: new codegen_1.Name('jsonLen'),
      jsonPart: new codegen_1.Name('jsonPart'),
    };
    exports.default = names;
  },
});

// node_modules/ajv/dist/compile/errors.js
var require_errors = __commonJS({
  'node_modules/ajv/dist/compile/errors.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.extendErrors =
      exports.resetErrorsCount =
      exports.reportExtraError =
      exports.reportError =
      exports.keyword$DataError =
      exports.keywordError =
        void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var names_1 = require_names();
    exports.keywordError = {
      message: ({ keyword }) =>
        (0, codegen_1.str)`must pass "${keyword}" keyword validation`,
    };
    exports.keyword$DataError = {
      message: ({ keyword, schemaType }) =>
        schemaType
          ? (0,
            codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)`
          : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`,
    };
    function reportError(
      cxt,
      error = exports.keywordError,
      errorPaths,
      overrideAllErrors
    ) {
      const { it } = cxt;
      const { gen, compositeRule, allErrors } = it;
      const errObj = errorObjectCode(cxt, error, errorPaths);
      if (
        overrideAllErrors !== null && overrideAllErrors !== void 0
          ? overrideAllErrors
          : compositeRule || allErrors
      ) {
        addError(gen, errObj);
      } else {
        returnErrors(it, (0, codegen_1._)`[${errObj}]`);
      }
    }
    exports.reportError = reportError;
    function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
      const { it } = cxt;
      const { gen, compositeRule, allErrors } = it;
      const errObj = errorObjectCode(cxt, error, errorPaths);
      addError(gen, errObj);
      if (!(compositeRule || allErrors)) {
        returnErrors(it, names_1.default.vErrors);
      }
    }
    exports.reportExtraError = reportExtraError;
    function resetErrorsCount(gen, errsCount) {
      gen.assign(names_1.default.errors, errsCount);
      gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () =>
        gen.if(
          errsCount,
          () =>
            gen.assign(
              (0, codegen_1._)`${names_1.default.vErrors}.length`,
              errsCount
            ),
          () => gen.assign(names_1.default.vErrors, null)
        )
      );
    }
    exports.resetErrorsCount = resetErrorsCount;
    function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
      if (errsCount === void 0) throw new Error('ajv implementation error');
      const err = gen.name('err');
      gen.forRange('i', errsCount, names_1.default.errors, (i) => {
        gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
        gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () =>
          gen.assign(
            (0, codegen_1._)`${err}.instancePath`,
            (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)
          )
        );
        gen.assign(
          (0, codegen_1._)`${err}.schemaPath`,
          (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`
        );
        if (it.opts.verbose) {
          gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
          gen.assign((0, codegen_1._)`${err}.data`, data);
        }
      });
    }
    exports.extendErrors = extendErrors;
    function addError(gen, errObj) {
      const err = gen.const('err', errObj);
      gen.if(
        (0, codegen_1._)`${names_1.default.vErrors} === null`,
        () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`),
        (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`
      );
      gen.code((0, codegen_1._)`${names_1.default.errors}++`);
    }
    function returnErrors(it, errs) {
      const { gen, validateName, schemaEnv } = it;
      if (schemaEnv.$async) {
        gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
      } else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
        gen.return(false);
      }
    }
    var E = {
      keyword: new codegen_1.Name('keyword'),
      schemaPath: new codegen_1.Name('schemaPath'),
      params: new codegen_1.Name('params'),
      propertyName: new codegen_1.Name('propertyName'),
      message: new codegen_1.Name('message'),
      schema: new codegen_1.Name('schema'),
      parentSchema: new codegen_1.Name('parentSchema'),
    };
    function errorObjectCode(cxt, error, errorPaths) {
      const { createErrors } = cxt.it;
      if (createErrors === false) return (0, codegen_1._)`{}`;
      return errorObject(cxt, error, errorPaths);
    }
    function errorObject(cxt, error, errorPaths = {}) {
      const { gen, it } = cxt;
      const keyValues = [
        errorInstancePath(it, errorPaths),
        errorSchemaPath(cxt, errorPaths),
      ];
      extraErrorProps(cxt, error, keyValues);
      return gen.object(...keyValues);
    }
    function errorInstancePath({ errorPath }, { instancePath }) {
      const instPath = instancePath
        ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(
            instancePath,
            util_1.Type.Str
          )}`
        : errorPath;
      return [
        names_1.default.instancePath,
        (0, codegen_1.strConcat)(names_1.default.instancePath, instPath),
      ];
    }
    function errorSchemaPath(
      { keyword, it: { errSchemaPath } },
      { schemaPath, parentSchema }
    ) {
      let schPath = parentSchema
        ? errSchemaPath
        : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
      if (schemaPath) {
        schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(
          schemaPath,
          util_1.Type.Str
        )}`;
      }
      return [E.schemaPath, schPath];
    }
    function extraErrorProps(cxt, { params, message }, keyValues) {
      const { keyword, data, schemaValue, it } = cxt;
      const { opts, propertyName, topSchemaRef, schemaPath } = it;
      keyValues.push(
        [E.keyword, keyword],
        [
          E.params,
          typeof params == 'function'
            ? params(cxt)
            : params || (0, codegen_1._)`{}`,
        ]
      );
      if (opts.messages) {
        keyValues.push([
          E.message,
          typeof message == 'function' ? message(cxt) : message,
        ]);
      }
      if (opts.verbose) {
        keyValues.push(
          [E.schema, schemaValue],
          [E.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`],
          [names_1.default.data, data]
        );
      }
      if (propertyName) keyValues.push([E.propertyName, propertyName]);
    }
  },
});

// node_modules/ajv/dist/compile/validate/boolSchema.js
var require_boolSchema = __commonJS({
  'node_modules/ajv/dist/compile/validate/boolSchema.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var boolError = {
      message: 'boolean schema is false',
    };
    function topBoolOrEmptySchema(it) {
      const { gen, schema, validateName } = it;
      if (schema === false) {
        falseSchemaError(it, false);
      } else if (typeof schema == 'object' && schema.$async === true) {
        gen.return(names_1.default.data);
      } else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, null);
        gen.return(true);
      }
    }
    exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
    function boolOrEmptySchema(it, valid) {
      const { gen, schema } = it;
      if (schema === false) {
        gen.var(valid, false);
        falseSchemaError(it);
      } else {
        gen.var(valid, true);
      }
    }
    exports.boolOrEmptySchema = boolOrEmptySchema;
    function falseSchemaError(it, overrideAllErrors) {
      const { gen, data } = it;
      const cxt = {
        gen,
        keyword: 'false schema',
        data,
        schema: false,
        schemaCode: false,
        schemaValue: false,
        params: {},
        it,
      };
      (0, errors_1.reportError)(cxt, boolError, void 0, overrideAllErrors);
    }
  },
});

// node_modules/ajv/dist/compile/rules.js
var require_rules = __commonJS({
  'node_modules/ajv/dist/compile/rules.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getRules = exports.isJSONType = void 0;
    var _jsonTypes = [
      'string',
      'number',
      'integer',
      'boolean',
      'null',
      'object',
      'array',
    ];
    var jsonTypes = new Set(_jsonTypes);
    function isJSONType(x) {
      return typeof x == 'string' && jsonTypes.has(x);
    }
    exports.isJSONType = isJSONType;
    function getRules() {
      const groups = {
        number: { type: 'number', rules: [] },
        string: { type: 'string', rules: [] },
        array: { type: 'array', rules: [] },
        object: { type: 'object', rules: [] },
      };
      return {
        types: { ...groups, integer: true, boolean: true, null: true },
        rules: [
          { rules: [] },
          groups.number,
          groups.string,
          groups.array,
          groups.object,
        ],
        post: { rules: [] },
        all: {},
        keywords: {},
      };
    }
    exports.getRules = getRules;
  },
});

// node_modules/ajv/dist/compile/validate/applicability.js
var require_applicability = __commonJS({
  'node_modules/ajv/dist/compile/validate/applicability.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.shouldUseRule =
      exports.shouldUseGroup =
      exports.schemaHasRulesForType =
        void 0;
    function schemaHasRulesForType({ schema, self: self2 }, type) {
      const group = self2.RULES.types[type];
      return group && group !== true && shouldUseGroup(schema, group);
    }
    exports.schemaHasRulesForType = schemaHasRulesForType;
    function shouldUseGroup(schema, group) {
      return group.rules.some((rule) => shouldUseRule(schema, rule));
    }
    exports.shouldUseGroup = shouldUseGroup;
    function shouldUseRule(schema, rule) {
      var _a;
      return (
        schema[rule.keyword] !== void 0 ||
        ((_a = rule.definition.implements) === null || _a === void 0
          ? void 0
          : _a.some((kwd) => schema[kwd] !== void 0))
      );
    }
    exports.shouldUseRule = shouldUseRule;
  },
});

// node_modules/ajv/dist/compile/validate/dataType.js
var require_dataType = __commonJS({
  'node_modules/ajv/dist/compile/validate/dataType.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.reportTypeError =
      exports.checkDataTypes =
      exports.checkDataType =
      exports.coerceAndCheckDataType =
      exports.getJSONTypes =
      exports.getSchemaTypes =
      exports.DataType =
        void 0;
    var rules_1 = require_rules();
    var applicability_1 = require_applicability();
    var errors_1 = require_errors();
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var DataType;
    (function (DataType2) {
      DataType2[(DataType2['Correct'] = 0)] = 'Correct';
      DataType2[(DataType2['Wrong'] = 1)] = 'Wrong';
    })((DataType = exports.DataType || (exports.DataType = {})));
    function getSchemaTypes(schema) {
      const types = getJSONTypes(schema.type);
      const hasNull = types.includes('null');
      if (hasNull) {
        if (schema.nullable === false)
          throw new Error('type: null contradicts nullable: false');
      } else {
        if (!types.length && schema.nullable !== void 0) {
          throw new Error('"nullable" cannot be used without "type"');
        }
        if (schema.nullable === true) types.push('null');
      }
      return types;
    }
    exports.getSchemaTypes = getSchemaTypes;
    function getJSONTypes(ts) {
      const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
      if (types.every(rules_1.isJSONType)) return types;
      throw new Error(
        'type must be JSONType or JSONType[]: ' + types.join(',')
      );
    }
    exports.getJSONTypes = getJSONTypes;
    function coerceAndCheckDataType(it, types) {
      const { gen, data, opts } = it;
      const coerceTo = coerceToTypes(types, opts.coerceTypes);
      const checkTypes =
        types.length > 0 &&
        !(
          coerceTo.length === 0 &&
          types.length === 1 &&
          (0, applicability_1.schemaHasRulesForType)(it, types[0])
        );
      if (checkTypes) {
        const wrongType = checkDataTypes(
          types,
          data,
          opts.strictNumbers,
          DataType.Wrong
        );
        gen.if(wrongType, () => {
          if (coerceTo.length) coerceData(it, types, coerceTo);
          else reportTypeError(it);
        });
      }
      return checkTypes;
    }
    exports.coerceAndCheckDataType = coerceAndCheckDataType;
    var COERCIBLE = /* @__PURE__ */ new Set([
      'string',
      'number',
      'integer',
      'boolean',
      'null',
    ]);
    function coerceToTypes(types, coerceTypes) {
      return coerceTypes
        ? types.filter(
            (t) =>
              COERCIBLE.has(t) || (coerceTypes === 'array' && t === 'array')
          )
        : [];
    }
    function coerceData(it, types, coerceTo) {
      const { gen, data, opts } = it;
      const dataType = gen.let('dataType', (0, codegen_1._)`typeof ${data}`);
      const coerced = gen.let('coerced', (0, codegen_1._)`undefined`);
      if (opts.coerceTypes === 'array') {
        gen.if(
          (0,
          codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`,
          () =>
            gen
              .assign(data, (0, codegen_1._)`${data}[0]`)
              .assign(dataType, (0, codegen_1._)`typeof ${data}`)
              .if(checkDataTypes(types, data, opts.strictNumbers), () =>
                gen.assign(coerced, data)
              )
        );
      }
      gen.if((0, codegen_1._)`${coerced} !== undefined`);
      for (const t of coerceTo) {
        if (
          COERCIBLE.has(t) ||
          (t === 'array' && opts.coerceTypes === 'array')
        ) {
          coerceSpecificType(t);
        }
      }
      gen.else();
      reportTypeError(it);
      gen.endIf();
      gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
        gen.assign(data, coerced);
        assignParentData(it, coerced);
      });
      function coerceSpecificType(t) {
        switch (t) {
          case 'string':
            gen
              .elseIf(
                (0,
                codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`
              )
              .assign(coerced, (0, codegen_1._)`"" + ${data}`)
              .elseIf((0, codegen_1._)`${data} === null`)
              .assign(coerced, (0, codegen_1._)`""`);
            return;
          case 'number':
            gen
              .elseIf(
                (0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`
              )
              .assign(coerced, (0, codegen_1._)`+${data}`);
            return;
          case 'integer':
            gen
              .elseIf(
                (0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`
              )
              .assign(coerced, (0, codegen_1._)`+${data}`);
            return;
          case 'boolean':
            gen
              .elseIf(
                (0,
                codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`
              )
              .assign(coerced, false)
              .elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`)
              .assign(coerced, true);
            return;
          case 'null':
            gen.elseIf(
              (0,
              codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`
            );
            gen.assign(coerced, null);
            return;
          case 'array':
            gen
              .elseIf(
                (0,
                codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`
              )
              .assign(coerced, (0, codegen_1._)`[${data}]`);
        }
      }
    }
    function assignParentData({ gen, parentData, parentDataProperty }, expr) {
      gen.if((0, codegen_1._)`${parentData} !== undefined`, () =>
        gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr)
      );
    }
    function checkDataType(
      dataType,
      data,
      strictNums,
      correct = DataType.Correct
    ) {
      const EQ =
        correct === DataType.Correct
          ? codegen_1.operators.EQ
          : codegen_1.operators.NEQ;
      let cond;
      switch (dataType) {
        case 'null':
          return (0, codegen_1._)`${data} ${EQ} null`;
        case 'array':
          cond = (0, codegen_1._)`Array.isArray(${data})`;
          break;
        case 'object':
          cond = (0,
          codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
          break;
        case 'integer':
          cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
          break;
        case 'number':
          cond = numCond();
          break;
        default:
          return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
      }
      return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
      function numCond(_cond = codegen_1.nil) {
        return (0, codegen_1.and)(
          (0, codegen_1._)`typeof ${data} == "number"`,
          _cond,
          strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil
        );
      }
    }
    exports.checkDataType = checkDataType;
    function checkDataTypes(dataTypes, data, strictNums, correct) {
      if (dataTypes.length === 1) {
        return checkDataType(dataTypes[0], data, strictNums, correct);
      }
      let cond;
      const types = (0, util_1.toHash)(dataTypes);
      if (types.array && types.object) {
        const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
        cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
        delete types.null;
        delete types.array;
        delete types.object;
      } else {
        cond = codegen_1.nil;
      }
      if (types.number) delete types.integer;
      for (const t in types)
        cond = (0, codegen_1.and)(
          cond,
          checkDataType(t, data, strictNums, correct)
        );
      return cond;
    }
    exports.checkDataTypes = checkDataTypes;
    var typeError = {
      message: ({ schema }) => `must be ${schema}`,
      params: ({ schema, schemaValue }) =>
        typeof schema == 'string'
          ? (0, codegen_1._)`{type: ${schema}}`
          : (0, codegen_1._)`{type: ${schemaValue}}`,
    };
    function reportTypeError(it) {
      const cxt = getTypeErrorContext(it);
      (0, errors_1.reportError)(cxt, typeError);
    }
    exports.reportTypeError = reportTypeError;
    function getTypeErrorContext(it) {
      const { gen, data, schema } = it;
      const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, 'type');
      return {
        gen,
        keyword: 'type',
        data,
        schema: schema.type,
        schemaCode,
        schemaValue: schemaCode,
        parentSchema: schema,
        params: {},
        it,
      };
    }
  },
});

// node_modules/ajv/dist/compile/validate/defaults.js
var require_defaults = __commonJS({
  'node_modules/ajv/dist/compile/validate/defaults.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.assignDefaults = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    function assignDefaults(it, ty) {
      const { properties, items } = it.schema;
      if (ty === 'object' && properties) {
        for (const key in properties) {
          assignDefault(it, key, properties[key].default);
        }
      } else if (ty === 'array' && Array.isArray(items)) {
        items.forEach((sch, i) => assignDefault(it, i, sch.default));
      }
    }
    exports.assignDefaults = assignDefaults;
    function assignDefault(it, prop, defaultValue) {
      const { gen, compositeRule, data, opts } = it;
      if (defaultValue === void 0) return;
      const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(
        prop
      )}`;
      if (compositeRule) {
        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
        return;
      }
      let condition = (0, codegen_1._)`${childData} === undefined`;
      if (opts.useDefaults === 'empty') {
        condition = (0,
        codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
      }
      gen.if(
        condition,
        (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(
          defaultValue
        )}`
      );
    }
  },
});

// node_modules/ajv/dist/vocabularies/code.js
var require_code2 = __commonJS({
  'node_modules/ajv/dist/vocabularies/code.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateUnion =
      exports.validateArray =
      exports.usePattern =
      exports.callValidateCode =
      exports.schemaProperties =
      exports.allSchemaProperties =
      exports.noPropertyInData =
      exports.propertyInData =
      exports.isOwnProperty =
      exports.hasPropFunc =
      exports.reportMissingProp =
      exports.checkMissingProp =
      exports.checkReportMissingProp =
        void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var names_1 = require_names();
    var util_2 = require_util4();
    function checkReportMissingProp(cxt, prop) {
      const { gen, data, it } = cxt;
      gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
        cxt.setParams({ missingProperty: (0, codegen_1._)`${prop}` }, true);
        cxt.error();
      });
    }
    exports.checkReportMissingProp = checkReportMissingProp;
    function checkMissingProp(
      { gen, data, it: { opts } },
      properties,
      missing
    ) {
      return (0, codegen_1.or)(
        ...properties.map((prop) =>
          (0, codegen_1.and)(
            noPropertyInData(gen, data, prop, opts.ownProperties),
            (0, codegen_1._)`${missing} = ${prop}`
          )
        )
      );
    }
    exports.checkMissingProp = checkMissingProp;
    function reportMissingProp(cxt, missing) {
      cxt.setParams({ missingProperty: missing }, true);
      cxt.error();
    }
    exports.reportMissingProp = reportMissingProp;
    function hasPropFunc(gen) {
      return gen.scopeValue('func', {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ref: Object.prototype.hasOwnProperty,
        code: (0, codegen_1._)`Object.prototype.hasOwnProperty`,
      });
    }
    exports.hasPropFunc = hasPropFunc;
    function isOwnProperty(gen, data, property) {
      return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
    }
    exports.isOwnProperty = isOwnProperty;
    function propertyInData(gen, data, property, ownProperties) {
      const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(
        property
      )} !== undefined`;
      return ownProperties
        ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}`
        : cond;
    }
    exports.propertyInData = propertyInData;
    function noPropertyInData(gen, data, property, ownProperties) {
      const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(
        property
      )} === undefined`;
      return ownProperties
        ? (0, codegen_1.or)(
            cond,
            (0, codegen_1.not)(isOwnProperty(gen, data, property))
          )
        : cond;
    }
    exports.noPropertyInData = noPropertyInData;
    function allSchemaProperties(schemaMap) {
      return schemaMap
        ? Object.keys(schemaMap).filter((p) => p !== '__proto__')
        : [];
    }
    exports.allSchemaProperties = allSchemaProperties;
    function schemaProperties(it, schemaMap) {
      return allSchemaProperties(schemaMap).filter(
        (p) => !(0, util_1.alwaysValidSchema)(it, schemaMap[p])
      );
    }
    exports.schemaProperties = schemaProperties;
    function callValidateCode(
      {
        schemaCode,
        data,
        it: { gen, topSchemaRef, schemaPath, errorPath },
        it,
      },
      func,
      context,
      passSchema
    ) {
      const dataAndSchema = passSchema
        ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}`
        : data;
      const valCxt = [
        [
          names_1.default.instancePath,
          (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath),
        ],
        [names_1.default.parentData, it.parentData],
        [names_1.default.parentDataProperty, it.parentDataProperty],
        [names_1.default.rootData, names_1.default.rootData],
      ];
      if (it.opts.dynamicRef)
        valCxt.push([
          names_1.default.dynamicAnchors,
          names_1.default.dynamicAnchors,
        ]);
      const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
      return context !== codegen_1.nil
        ? (0, codegen_1._)`${func}.call(${context}, ${args})`
        : (0, codegen_1._)`${func}(${args})`;
    }
    exports.callValidateCode = callValidateCode;
    var newRegExp = (0, codegen_1._)`new RegExp`;
    function usePattern({ gen, it: { opts } }, pattern) {
      const u = opts.unicodeRegExp ? 'u' : '';
      const { regExp } = opts.code;
      const rx = regExp(pattern, u);
      return gen.scopeValue('pattern', {
        key: rx.toString(),
        ref: rx,
        code: (0, codegen_1._)`${
          regExp.code === 'new RegExp'
            ? newRegExp
            : (0, util_2.useFunc)(gen, regExp)
        }(${pattern}, ${u})`,
      });
    }
    exports.usePattern = usePattern;
    function validateArray(cxt) {
      const { gen, data, keyword, it } = cxt;
      const valid = gen.name('valid');
      if (it.allErrors) {
        const validArr = gen.let('valid', true);
        validateItems(() => gen.assign(validArr, false));
        return validArr;
      }
      gen.var(valid, true);
      validateItems(() => gen.break());
      return valid;
      function validateItems(notValid) {
        const len = gen.const('len', (0, codegen_1._)`${data}.length`);
        gen.forRange('i', 0, len, (i) => {
          cxt.subschema(
            {
              keyword,
              dataProp: i,
              dataPropType: util_1.Type.Num,
            },
            valid
          );
          gen.if((0, codegen_1.not)(valid), notValid);
        });
      }
    }
    exports.validateArray = validateArray;
    function validateUnion(cxt) {
      const { gen, schema, keyword, it } = cxt;
      if (!Array.isArray(schema)) throw new Error('ajv implementation error');
      const alwaysValid = schema.some((sch) =>
        (0, util_1.alwaysValidSchema)(it, sch)
      );
      if (alwaysValid && !it.opts.unevaluated) return;
      const valid = gen.let('valid', false);
      const schValid = gen.name('_valid');
      gen.block(() =>
        schema.forEach((_sch, i) => {
          const schCxt = cxt.subschema(
            {
              keyword,
              schemaProp: i,
              compositeRule: true,
            },
            schValid
          );
          gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
          const merged = cxt.mergeValidEvaluated(schCxt, schValid);
          if (!merged) gen.if((0, codegen_1.not)(valid));
        })
      );
      cxt.result(
        valid,
        () => cxt.reset(),
        () => cxt.error(true)
      );
    }
    exports.validateUnion = validateUnion;
  },
});

// node_modules/ajv/dist/compile/validate/keyword.js
var require_keyword = __commonJS({
  'node_modules/ajv/dist/compile/validate/keyword.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateKeywordUsage =
      exports.validSchemaType =
      exports.funcKeywordCode =
      exports.macroKeywordCode =
        void 0;
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var code_1 = require_code2();
    var errors_1 = require_errors();
    function macroKeywordCode(cxt, def) {
      const { gen, keyword, schema, parentSchema, it } = cxt;
      const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
      const schemaRef = useKeyword(gen, keyword, macroSchema);
      if (it.opts.validateSchema !== false)
        it.self.validateSchema(macroSchema, true);
      const valid = gen.name('valid');
      cxt.subschema(
        {
          schema: macroSchema,
          schemaPath: codegen_1.nil,
          errSchemaPath: `${it.errSchemaPath}/${keyword}`,
          topSchemaRef: schemaRef,
          compositeRule: true,
        },
        valid
      );
      cxt.pass(valid, () => cxt.error(true));
    }
    exports.macroKeywordCode = macroKeywordCode;
    function funcKeywordCode(cxt, def) {
      var _a;
      const { gen, keyword, schema, parentSchema, $data, it } = cxt;
      checkAsyncKeyword(it, def);
      const validate2 =
        !$data && def.compile
          ? def.compile.call(it.self, schema, parentSchema, it)
          : def.validate;
      const validateRef = useKeyword(gen, keyword, validate2);
      const valid = gen.let('valid');
      cxt.block$data(valid, validateKeyword);
      cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
      function validateKeyword() {
        if (def.errors === false) {
          assignValid();
          if (def.modifying) modifyData(cxt);
          reportErrs(() => cxt.error());
        } else {
          const ruleErrs = def.async ? validateAsync() : validateSync();
          if (def.modifying) modifyData(cxt);
          reportErrs(() => addErrs(cxt, ruleErrs));
        }
      }
      function validateAsync() {
        const ruleErrs = gen.let('ruleErrs', null);
        gen.try(
          () => assignValid((0, codegen_1._)`await `),
          (e) =>
            gen.assign(valid, false).if(
              (0, codegen_1._)`${e} instanceof ${it.ValidationError}`,
              () => gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`),
              () => gen.throw(e)
            )
        );
        return ruleErrs;
      }
      function validateSync() {
        const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
        gen.assign(validateErrs, null);
        assignValid(codegen_1.nil);
        return validateErrs;
      }
      function assignValid(
        _await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil
      ) {
        const passCxt = it.opts.passContext
          ? names_1.default.this
          : names_1.default.self;
        const passSchema = !(
          ('compile' in def && !$data) ||
          def.schema === false
        );
        gen.assign(
          valid,
          (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(
            cxt,
            validateRef,
            passCxt,
            passSchema
          )}`,
          def.modifying
        );
      }
      function reportErrs(errors) {
        var _a2;
        gen.if(
          (0, codegen_1.not)(
            (_a2 = def.valid) !== null && _a2 !== void 0 ? _a2 : valid
          ),
          errors
        );
      }
    }
    exports.funcKeywordCode = funcKeywordCode;
    function modifyData(cxt) {
      const { gen, data, it } = cxt;
      gen.if(it.parentData, () =>
        gen.assign(
          data,
          (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`
        )
      );
    }
    function addErrs(cxt, errs) {
      const { gen } = cxt;
      gen.if(
        (0, codegen_1._)`Array.isArray(${errs})`,
        () => {
          gen
            .assign(
              names_1.default.vErrors,
              (0,
              codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`
            )
            .assign(
              names_1.default.errors,
              (0, codegen_1._)`${names_1.default.vErrors}.length`
            );
          (0, errors_1.extendErrors)(cxt);
        },
        () => cxt.error()
      );
    }
    function checkAsyncKeyword({ schemaEnv }, def) {
      if (def.async && !schemaEnv.$async)
        throw new Error('async keyword in sync schema');
    }
    function useKeyword(gen, keyword, result) {
      if (result === void 0)
        throw new Error(`keyword "${keyword}" failed to compile`);
      return gen.scopeValue(
        'keyword',
        typeof result == 'function'
          ? { ref: result }
          : { ref: result, code: (0, codegen_1.stringify)(result) }
      );
    }
    function validSchemaType(schema, schemaType, allowUndefined = false) {
      return (
        !schemaType.length ||
        schemaType.some((st) =>
          st === 'array'
            ? Array.isArray(schema)
            : st === 'object'
            ? schema && typeof schema == 'object' && !Array.isArray(schema)
            : typeof schema == st ||
              (allowUndefined && typeof schema == 'undefined')
        )
      );
    }
    exports.validSchemaType = validSchemaType;
    function validateKeywordUsage(
      { schema, opts, self: self2, errSchemaPath },
      def,
      keyword
    ) {
      if (
        Array.isArray(def.keyword)
          ? !def.keyword.includes(keyword)
          : def.keyword !== keyword
      ) {
        throw new Error('ajv implementation error');
      }
      const deps = def.dependencies;
      if (
        deps === null || deps === void 0
          ? void 0
          : deps.some(
              (kwd) => !Object.prototype.hasOwnProperty.call(schema, kwd)
            )
      ) {
        throw new Error(
          `parent schema must have dependencies of ${keyword}: ${deps.join(
            ','
          )}`
        );
      }
      if (def.validateSchema) {
        const valid = def.validateSchema(schema[keyword]);
        if (!valid) {
          const msg =
            `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` +
            self2.errorsText(def.validateSchema.errors);
          if (opts.validateSchema === 'log') self2.logger.error(msg);
          else throw new Error(msg);
        }
      }
    }
    exports.validateKeywordUsage = validateKeywordUsage;
  },
});

// node_modules/ajv/dist/compile/validate/subschema.js
var require_subschema = __commonJS({
  'node_modules/ajv/dist/compile/validate/subschema.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.extendSubschemaMode =
      exports.extendSubschemaData =
      exports.getSubschema =
        void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    function getSubschema(
      it,
      { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }
    ) {
      if (keyword !== void 0 && schema !== void 0) {
        throw new Error('both "keyword" and "schema" passed, only one allowed');
      }
      if (keyword !== void 0) {
        const sch = it.schema[keyword];
        return schemaProp === void 0
          ? {
              schema: sch,
              schemaPath: (0, codegen_1._)`${it.schemaPath}${(0,
              codegen_1.getProperty)(keyword)}`,
              errSchemaPath: `${it.errSchemaPath}/${keyword}`,
            }
          : {
              schema: sch[schemaProp],
              schemaPath: (0, codegen_1._)`${it.schemaPath}${(0,
              codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(
                schemaProp
              )}`,
              errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0,
              util_1.escapeFragment)(schemaProp)}`,
            };
      }
      if (schema !== void 0) {
        if (
          schemaPath === void 0 ||
          errSchemaPath === void 0 ||
          topSchemaRef === void 0
        ) {
          throw new Error(
            '"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"'
          );
        }
        return {
          schema,
          schemaPath,
          topSchemaRef,
          errSchemaPath,
        };
      }
      throw new Error('either "keyword" or "schema" must be passed');
    }
    exports.getSubschema = getSubschema;
    function extendSubschemaData(
      subschema,
      it,
      { dataProp, dataPropType: dpType, data, dataTypes, propertyName }
    ) {
      if (data !== void 0 && dataProp !== void 0) {
        throw new Error('both "data" and "dataProp" passed, only one allowed');
      }
      const { gen } = it;
      if (dataProp !== void 0) {
        const { errorPath, dataPathArr, opts } = it;
        const nextData = gen.let(
          'data',
          (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`,
          true
        );
        dataContextProps(nextData);
        subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0,
        util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
        subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
      }
      if (data !== void 0) {
        const nextData =
          data instanceof codegen_1.Name ? data : gen.let('data', data, true);
        dataContextProps(nextData);
        if (propertyName !== void 0) subschema.propertyName = propertyName;
      }
      if (dataTypes) subschema.dataTypes = dataTypes;
      function dataContextProps(_nextData) {
        subschema.data = _nextData;
        subschema.dataLevel = it.dataLevel + 1;
        subschema.dataTypes = [];
        it.definedProperties = /* @__PURE__ */ new Set();
        subschema.parentData = it.data;
        subschema.dataNames = [...it.dataNames, _nextData];
      }
    }
    exports.extendSubschemaData = extendSubschemaData;
    function extendSubschemaMode(
      subschema,
      { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }
    ) {
      if (compositeRule !== void 0) subschema.compositeRule = compositeRule;
      if (createErrors !== void 0) subschema.createErrors = createErrors;
      if (allErrors !== void 0) subschema.allErrors = allErrors;
      subschema.jtdDiscriminator = jtdDiscriminator;
      subschema.jtdMetadata = jtdMetadata;
    }
    exports.extendSubschemaMode = extendSubschemaMode;
  },
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  'node_modules/fast-deep-equal/index.js'(exports, module2) {
    'use strict';
    module2.exports = function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; ) if (!equal(a[i], b[i])) return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a[key], b[key])) return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  },
});

// node_modules/json-schema-traverse/index.js
var require_json_schema_traverse = __commonJS({
  'node_modules/json-schema-traverse/index.js'(exports, module2) {
    'use strict';
    var traverse = (module2.exports = function (schema, opts, cb) {
      if (typeof opts == 'function') {
        cb = opts;
        opts = {};
      }
      cb = opts.cb || cb;
      var pre = typeof cb == 'function' ? cb : cb.pre || function () {};
      var post = cb.post || function () {};
      _traverse(opts, pre, post, schema, '', schema);
    });
    traverse.keywords = {
      additionalItems: true,
      items: true,
      contains: true,
      additionalProperties: true,
      propertyNames: true,
      not: true,
      if: true,
      then: true,
      else: true,
    };
    traverse.arrayKeywords = {
      items: true,
      allOf: true,
      anyOf: true,
      oneOf: true,
    };
    traverse.propsKeywords = {
      $defs: true,
      definitions: true,
      properties: true,
      patternProperties: true,
      dependencies: true,
    };
    traverse.skipKeywords = {
      default: true,
      enum: true,
      const: true,
      required: true,
      maximum: true,
      minimum: true,
      exclusiveMaximum: true,
      exclusiveMinimum: true,
      multipleOf: true,
      maxLength: true,
      minLength: true,
      pattern: true,
      format: true,
      maxItems: true,
      minItems: true,
      uniqueItems: true,
      maxProperties: true,
      minProperties: true,
    };
    function _traverse(
      opts,
      pre,
      post,
      schema,
      jsonPtr,
      rootSchema,
      parentJsonPtr,
      parentKeyword,
      parentSchema,
      keyIndex
    ) {
      if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
        pre(
          schema,
          jsonPtr,
          rootSchema,
          parentJsonPtr,
          parentKeyword,
          parentSchema,
          keyIndex
        );
        for (var key in schema) {
          var sch = schema[key];
          if (Array.isArray(sch)) {
            if (key in traverse.arrayKeywords) {
              for (var i = 0; i < sch.length; i++)
                _traverse(
                  opts,
                  pre,
                  post,
                  sch[i],
                  jsonPtr + '/' + key + '/' + i,
                  rootSchema,
                  jsonPtr,
                  key,
                  schema,
                  i
                );
            }
          } else if (key in traverse.propsKeywords) {
            if (sch && typeof sch == 'object') {
              for (var prop in sch)
                _traverse(
                  opts,
                  pre,
                  post,
                  sch[prop],
                  jsonPtr + '/' + key + '/' + escapeJsonPtr(prop),
                  rootSchema,
                  jsonPtr,
                  key,
                  schema,
                  prop
                );
            }
          } else if (
            key in traverse.keywords ||
            (opts.allKeys && !(key in traverse.skipKeywords))
          ) {
            _traverse(
              opts,
              pre,
              post,
              sch,
              jsonPtr + '/' + key,
              rootSchema,
              jsonPtr,
              key,
              schema
            );
          }
        }
        post(
          schema,
          jsonPtr,
          rootSchema,
          parentJsonPtr,
          parentKeyword,
          parentSchema,
          keyIndex
        );
      }
    }
    function escapeJsonPtr(str) {
      return str.replace(/~/g, '~0').replace(/\//g, '~1');
    }
  },
});

// node_modules/ajv/dist/compile/resolve.js
var require_resolve = __commonJS({
  'node_modules/ajv/dist/compile/resolve.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getSchemaRefs =
      exports.resolveUrl =
      exports.normalizeId =
      exports._getFullPath =
      exports.getFullPath =
      exports.inlineRef =
        void 0;
    var util_1 = require_util4();
    var equal = require_fast_deep_equal();
    var traverse = require_json_schema_traverse();
    var SIMPLE_INLINED = /* @__PURE__ */ new Set([
      'type',
      'format',
      'pattern',
      'maxLength',
      'minLength',
      'maxProperties',
      'minProperties',
      'maxItems',
      'minItems',
      'maximum',
      'minimum',
      'uniqueItems',
      'multipleOf',
      'required',
      'enum',
      'const',
    ]);
    function inlineRef(schema, limit = true) {
      if (typeof schema == 'boolean') return true;
      if (limit === true) return !hasRef(schema);
      if (!limit) return false;
      return countKeys(schema) <= limit;
    }
    exports.inlineRef = inlineRef;
    var REF_KEYWORDS = /* @__PURE__ */ new Set([
      '$ref',
      '$recursiveRef',
      '$recursiveAnchor',
      '$dynamicRef',
      '$dynamicAnchor',
    ]);
    function hasRef(schema) {
      for (const key in schema) {
        if (REF_KEYWORDS.has(key)) return true;
        const sch = schema[key];
        if (Array.isArray(sch) && sch.some(hasRef)) return true;
        if (typeof sch == 'object' && hasRef(sch)) return true;
      }
      return false;
    }
    function countKeys(schema) {
      let count = 0;
      for (const key in schema) {
        if (key === '$ref') return Infinity;
        count++;
        if (SIMPLE_INLINED.has(key)) continue;
        if (typeof schema[key] == 'object') {
          (0, util_1.eachItem)(schema[key], (sch) => (count += countKeys(sch)));
        }
        if (count === Infinity) return Infinity;
      }
      return count;
    }
    function getFullPath(resolver, id = '', normalize) {
      if (normalize !== false) id = normalizeId(id);
      const p = resolver.parse(id);
      return _getFullPath(resolver, p);
    }
    exports.getFullPath = getFullPath;
    function _getFullPath(resolver, p) {
      const serialized = resolver.serialize(p);
      return serialized.split('#')[0] + '#';
    }
    exports._getFullPath = _getFullPath;
    var TRAILING_SLASH_HASH = /#\/?$/;
    function normalizeId(id) {
      return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
    }
    exports.normalizeId = normalizeId;
    function resolveUrl(resolver, baseId, id) {
      id = normalizeId(id);
      return resolver.resolve(baseId, id);
    }
    exports.resolveUrl = resolveUrl;
    var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
    function getSchemaRefs(schema, baseId) {
      if (typeof schema == 'boolean') return {};
      const { schemaId, uriResolver } = this.opts;
      const schId = normalizeId(schema[schemaId] || baseId);
      const baseIds = { '': schId };
      const pathPrefix = getFullPath(uriResolver, schId, false);
      const localRefs = {};
      const schemaRefs = /* @__PURE__ */ new Set();
      traverse(schema, { allKeys: true }, (sch, jsonPtr, _2, parentJsonPtr) => {
        if (parentJsonPtr === void 0) return;
        const fullPath = pathPrefix + jsonPtr;
        let baseId2 = baseIds[parentJsonPtr];
        if (typeof sch[schemaId] == 'string')
          baseId2 = addRef.call(this, sch[schemaId]);
        addAnchor.call(this, sch.$anchor);
        addAnchor.call(this, sch.$dynamicAnchor);
        baseIds[jsonPtr] = baseId2;
        function addRef(ref) {
          const _resolve = this.opts.uriResolver.resolve;
          ref = normalizeId(baseId2 ? _resolve(baseId2, ref) : ref);
          if (schemaRefs.has(ref)) throw ambiguos(ref);
          schemaRefs.add(ref);
          let schOrRef = this.refs[ref];
          if (typeof schOrRef == 'string') schOrRef = this.refs[schOrRef];
          if (typeof schOrRef == 'object') {
            checkAmbiguosRef(sch, schOrRef.schema, ref);
          } else if (ref !== normalizeId(fullPath)) {
            if (ref[0] === '#') {
              checkAmbiguosRef(sch, localRefs[ref], ref);
              localRefs[ref] = sch;
            } else {
              this.refs[ref] = fullPath;
            }
          }
          return ref;
        }
        function addAnchor(anchor) {
          if (typeof anchor == 'string') {
            if (!ANCHOR.test(anchor))
              throw new Error(`invalid anchor "${anchor}"`);
            addRef.call(this, `#${anchor}`);
          }
        }
      });
      return localRefs;
      function checkAmbiguosRef(sch1, sch2, ref) {
        if (sch2 !== void 0 && !equal(sch1, sch2)) throw ambiguos(ref);
      }
      function ambiguos(ref) {
        return new Error(`reference "${ref}" resolves to more than one schema`);
      }
    }
    exports.getSchemaRefs = getSchemaRefs;
  },
});

// node_modules/ajv/dist/compile/validate/index.js
var require_validate2 = __commonJS({
  'node_modules/ajv/dist/compile/validate/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.getData =
      exports.KeywordCxt =
      exports.validateFunctionCode =
        void 0;
    var boolSchema_1 = require_boolSchema();
    var dataType_1 = require_dataType();
    var applicability_1 = require_applicability();
    var dataType_2 = require_dataType();
    var defaults_1 = require_defaults();
    var keyword_1 = require_keyword();
    var subschema_1 = require_subschema();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var resolve_1 = require_resolve();
    var util_1 = require_util4();
    var errors_1 = require_errors();
    function validateFunctionCode(it) {
      if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
          topSchemaObjCode(it);
          return;
        }
      }
      validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
    }
    exports.validateFunctionCode = validateFunctionCode;
    function validateFunction(
      { gen, validateName, schema, schemaEnv, opts },
      body
    ) {
      if (opts.code.es5) {
        gen.func(
          validateName,
          (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`,
          schemaEnv.$async,
          () => {
            gen.code(
              (0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`
            );
            destructureValCxtES5(gen, opts);
            gen.code(body);
          }
        );
      } else {
        gen.func(
          validateName,
          (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`,
          schemaEnv.$async,
          () => gen.code(funcSourceUrl(schema, opts)).code(body)
        );
      }
    }
    function destructureValCxt(opts) {
      return (0, codegen_1._)`{${names_1.default.instancePath}="", ${
        names_1.default.parentData
      }, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${
        names_1.default.data
      }${
        opts.dynamicRef
          ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}`
          : codegen_1.nil
      }}={}`;
    }
    function destructureValCxtES5(gen, opts) {
      gen.if(
        names_1.default.valCxt,
        () => {
          gen.var(
            names_1.default.instancePath,
            (0,
            codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`
          );
          gen.var(
            names_1.default.parentData,
            (0,
            codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`
          );
          gen.var(
            names_1.default.parentDataProperty,
            (0,
            codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`
          );
          gen.var(
            names_1.default.rootData,
            (0,
            codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`
          );
          if (opts.dynamicRef)
            gen.var(
              names_1.default.dynamicAnchors,
              (0,
              codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`
            );
        },
        () => {
          gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
          gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
          gen.var(
            names_1.default.parentDataProperty,
            (0, codegen_1._)`undefined`
          );
          gen.var(names_1.default.rootData, names_1.default.data);
          if (opts.dynamicRef)
            gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
        }
      );
    }
    function topSchemaObjCode(it) {
      const { schema, opts, gen } = it;
      validateFunction(it, () => {
        if (opts.$comment && schema.$comment) commentKeyword(it);
        checkNoDefault(it);
        gen.let(names_1.default.vErrors, null);
        gen.let(names_1.default.errors, 0);
        if (opts.unevaluated) resetEvaluated(it);
        typeAndKeywords(it);
        returnResults(it);
      });
      return;
    }
    function resetEvaluated(it) {
      const { gen, validateName } = it;
      it.evaluated = gen.const(
        'evaluated',
        (0, codegen_1._)`${validateName}.evaluated`
      );
      gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () =>
        gen.assign(
          (0, codegen_1._)`${it.evaluated}.props`,
          (0, codegen_1._)`undefined`
        )
      );
      gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () =>
        gen.assign(
          (0, codegen_1._)`${it.evaluated}.items`,
          (0, codegen_1._)`undefined`
        )
      );
    }
    function funcSourceUrl(schema, opts) {
      const schId = typeof schema == 'object' && schema[opts.schemaId];
      return schId && (opts.code.source || opts.code.process)
        ? (0, codegen_1._)`/*# sourceURL=${schId} */`
        : codegen_1.nil;
    }
    function subschemaCode(it, valid) {
      if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
          subSchemaObjCode(it, valid);
          return;
        }
      }
      (0, boolSchema_1.boolOrEmptySchema)(it, valid);
    }
    function schemaCxtHasRules({ schema, self: self2 }) {
      if (typeof schema == 'boolean') return !schema;
      for (const key in schema) if (self2.RULES.all[key]) return true;
      return false;
    }
    function isSchemaObj(it) {
      return typeof it.schema != 'boolean';
    }
    function subSchemaObjCode(it, valid) {
      const { schema, gen, opts } = it;
      if (opts.$comment && schema.$comment) commentKeyword(it);
      updateContext(it);
      checkAsyncSchema(it);
      const errsCount = gen.const('_errs', names_1.default.errors);
      typeAndKeywords(it, errsCount);
      gen.var(
        valid,
        (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`
      );
    }
    function checkKeywords(it) {
      (0, util_1.checkUnknownRules)(it);
      checkRefsAndKeywords(it);
    }
    function typeAndKeywords(it, errsCount) {
      if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount);
      const types = (0, dataType_1.getSchemaTypes)(it.schema);
      const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
      schemaKeywords(it, types, !checkedTypes, errsCount);
    }
    function checkRefsAndKeywords(it) {
      const { schema, errSchemaPath, opts, self: self2 } = it;
      if (
        schema.$ref &&
        opts.ignoreKeywordsWithRef &&
        (0, util_1.schemaHasRulesButRef)(schema, self2.RULES)
      ) {
        self2.logger.warn(
          `$ref: keywords ignored in schema at path "${errSchemaPath}"`
        );
      }
    }
    function checkNoDefault(it) {
      const { schema, opts } = it;
      if (schema.default !== void 0 && opts.useDefaults && opts.strictSchema) {
        (0, util_1.checkStrictMode)(
          it,
          'default is ignored in the schema root'
        );
      }
    }
    function updateContext(it) {
      const schId = it.schema[it.opts.schemaId];
      if (schId)
        it.baseId = (0, resolve_1.resolveUrl)(
          it.opts.uriResolver,
          it.baseId,
          schId
        );
    }
    function checkAsyncSchema(it) {
      if (it.schema.$async && !it.schemaEnv.$async)
        throw new Error('async schema in sync schema');
    }
    function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
      const msg = schema.$comment;
      if (opts.$comment === true) {
        gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
      } else if (typeof opts.$comment == 'function') {
        const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
        const rootName = gen.scopeValue('root', { ref: schemaEnv.root });
        gen.code(
          (0,
          codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`
        );
      }
    }
    function returnResults(it) {
      const { gen, schemaEnv, validateName, ValidationError, opts } = it;
      if (schemaEnv.$async) {
        gen.if(
          (0, codegen_1._)`${names_1.default.errors} === 0`,
          () => gen.return(names_1.default.data),
          () =>
            gen.throw(
              (0,
              codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`
            )
        );
      } else {
        gen.assign(
          (0, codegen_1._)`${validateName}.errors`,
          names_1.default.vErrors
        );
        if (opts.unevaluated) assignEvaluated(it);
        gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
      }
    }
    function assignEvaluated({ gen, evaluated, props, items }) {
      if (props instanceof codegen_1.Name)
        gen.assign((0, codegen_1._)`${evaluated}.props`, props);
      if (items instanceof codegen_1.Name)
        gen.assign((0, codegen_1._)`${evaluated}.items`, items);
    }
    function schemaKeywords(it, types, typeErrors, errsCount) {
      const { gen, schema, data, allErrors, opts, self: self2 } = it;
      const { RULES } = self2;
      if (
        schema.$ref &&
        (opts.ignoreKeywordsWithRef ||
          !(0, util_1.schemaHasRulesButRef)(schema, RULES))
      ) {
        gen.block(() => keywordCode(it, '$ref', RULES.all.$ref.definition));
        return;
      }
      if (!opts.jtd) checkStrictTypes(it, types);
      gen.block(() => {
        for (const group of RULES.rules) groupKeywords(group);
        groupKeywords(RULES.post);
      });
      function groupKeywords(group) {
        if (!(0, applicability_1.shouldUseGroup)(schema, group)) return;
        if (group.type) {
          gen.if(
            (0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers)
          );
          iterateKeywords(it, group);
          if (types.length === 1 && types[0] === group.type && typeErrors) {
            gen.else();
            (0, dataType_2.reportTypeError)(it);
          }
          gen.endIf();
        } else {
          iterateKeywords(it, group);
        }
        if (!allErrors)
          gen.if(
            (0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`
          );
      }
    }
    function iterateKeywords(it, group) {
      const {
        gen,
        schema,
        opts: { useDefaults },
      } = it;
      if (useDefaults) (0, defaults_1.assignDefaults)(it, group.type);
      gen.block(() => {
        for (const rule of group.rules) {
          if ((0, applicability_1.shouldUseRule)(schema, rule)) {
            keywordCode(it, rule.keyword, rule.definition, group.type);
          }
        }
      });
    }
    function checkStrictTypes(it, types) {
      if (it.schemaEnv.meta || !it.opts.strictTypes) return;
      checkContextTypes(it, types);
      if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types);
      checkKeywordTypes(it, it.dataTypes);
    }
    function checkContextTypes(it, types) {
      if (!types.length) return;
      if (!it.dataTypes.length) {
        it.dataTypes = types;
        return;
      }
      types.forEach((t) => {
        if (!includesType(it.dataTypes, t)) {
          strictTypesError(
            it,
            `type "${t}" not allowed by context "${it.dataTypes.join(',')}"`
          );
        }
      });
      narrowSchemaTypes(it, types);
    }
    function checkMultipleTypes(it, ts) {
      if (ts.length > 1 && !(ts.length === 2 && ts.includes('null'))) {
        strictTypesError(it, 'use allowUnionTypes to allow union type keyword');
      }
    }
    function checkKeywordTypes(it, ts) {
      const rules = it.self.RULES.all;
      for (const keyword in rules) {
        const rule = rules[keyword];
        if (
          typeof rule == 'object' &&
          (0, applicability_1.shouldUseRule)(it.schema, rule)
        ) {
          const { type } = rule.definition;
          if (type.length && !type.some((t) => hasApplicableType(ts, t))) {
            strictTypesError(
              it,
              `missing type "${type.join(',')}" for keyword "${keyword}"`
            );
          }
        }
      }
    }
    function hasApplicableType(schTs, kwdT) {
      return (
        schTs.includes(kwdT) || (kwdT === 'number' && schTs.includes('integer'))
      );
    }
    function includesType(ts, t) {
      return ts.includes(t) || (t === 'integer' && ts.includes('number'));
    }
    function narrowSchemaTypes(it, withTypes) {
      const ts = [];
      for (const t of it.dataTypes) {
        if (includesType(withTypes, t)) ts.push(t);
        else if (withTypes.includes('integer') && t === 'number')
          ts.push('integer');
      }
      it.dataTypes = ts;
    }
    function strictTypesError(it, msg) {
      const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
      msg += ` at "${schemaPath}" (strictTypes)`;
      (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
    }
    var KeywordCxt = class {
      constructor(it, def, keyword) {
        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
        this.gen = it.gen;
        this.allErrors = it.allErrors;
        this.keyword = keyword;
        this.data = it.data;
        this.schema = it.schema[keyword];
        this.$data =
          def.$data && it.opts.$data && this.schema && this.schema.$data;
        this.schemaValue = (0, util_1.schemaRefOrVal)(
          it,
          this.schema,
          keyword,
          this.$data
        );
        this.schemaType = def.schemaType;
        this.parentSchema = it.schema;
        this.params = {};
        this.it = it;
        this.def = def;
        if (this.$data) {
          this.schemaCode = it.gen.const('vSchema', getData(this.$data, it));
        } else {
          this.schemaCode = this.schemaValue;
          if (
            !(0, keyword_1.validSchemaType)(
              this.schema,
              def.schemaType,
              def.allowUndefined
            )
          ) {
            throw new Error(
              `${keyword} value must be ${JSON.stringify(def.schemaType)}`
            );
          }
        }
        if ('code' in def ? def.trackErrors : def.errors !== false) {
          this.errsCount = it.gen.const('_errs', names_1.default.errors);
        }
      }
      result(condition, successAction, failAction) {
        this.failResult(
          (0, codegen_1.not)(condition),
          successAction,
          failAction
        );
      }
      failResult(condition, successAction, failAction) {
        this.gen.if(condition);
        if (failAction) failAction();
        else this.error();
        if (successAction) {
          this.gen.else();
          successAction();
          if (this.allErrors) this.gen.endIf();
        } else {
          if (this.allErrors) this.gen.endIf();
          else this.gen.else();
        }
      }
      pass(condition, failAction) {
        this.failResult((0, codegen_1.not)(condition), void 0, failAction);
      }
      fail(condition) {
        if (condition === void 0) {
          this.error();
          if (!this.allErrors) this.gen.if(false);
          return;
        }
        this.gen.if(condition);
        this.error();
        if (this.allErrors) this.gen.endIf();
        else this.gen.else();
      }
      fail$data(condition) {
        if (!this.$data) return this.fail(condition);
        const { schemaCode } = this;
        this.fail(
          (0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(
            this.invalid$data(),
            condition
          )})`
        );
      }
      error(append, errorParams, errorPaths) {
        if (errorParams) {
          this.setParams(errorParams);
          this._error(append, errorPaths);
          this.setParams({});
          return;
        }
        this._error(append, errorPaths);
      }
      _error(append, errorPaths) {
        (append ? errors_1.reportExtraError : errors_1.reportError)(
          this,
          this.def.error,
          errorPaths
        );
      }
      $dataError() {
        (0, errors_1.reportError)(
          this,
          this.def.$dataError || errors_1.keyword$DataError
        );
      }
      reset() {
        if (this.errsCount === void 0)
          throw new Error('add "trackErrors" to keyword definition');
        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
      }
      ok(cond) {
        if (!this.allErrors) this.gen.if(cond);
      }
      setParams(obj, assign) {
        if (assign) Object.assign(this.params, obj);
        else this.params = obj;
      }
      block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
        this.gen.block(() => {
          this.check$data(valid, $dataValid);
          codeBlock();
        });
      }
      check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
        if (!this.$data) return;
        const { gen, schemaCode, schemaType, def } = this;
        gen.if(
          (0, codegen_1.or)(
            (0, codegen_1._)`${schemaCode} === undefined`,
            $dataValid
          )
        );
        if (valid !== codegen_1.nil) gen.assign(valid, true);
        if (schemaType.length || def.validateSchema) {
          gen.elseIf(this.invalid$data());
          this.$dataError();
          if (valid !== codegen_1.nil) gen.assign(valid, false);
        }
        gen.else();
      }
      invalid$data() {
        const { gen, schemaCode, schemaType, def, it } = this;
        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
        function wrong$DataType() {
          if (schemaType.length) {
            if (!(schemaCode instanceof codegen_1.Name))
              throw new Error('ajv implementation error');
            const st = Array.isArray(schemaType) ? schemaType : [schemaType];
            return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(
              st,
              schemaCode,
              it.opts.strictNumbers,
              dataType_2.DataType.Wrong
            )}`;
          }
          return codegen_1.nil;
        }
        function invalid$DataSchema() {
          if (def.validateSchema) {
            const validateSchemaRef = gen.scopeValue('validate$data', {
              ref: def.validateSchema,
            });
            return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
          }
          return codegen_1.nil;
        }
      }
      subschema(appl, valid) {
        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
        (0, subschema_1.extendSubschemaMode)(subschema, appl);
        const nextContext = {
          ...this.it,
          ...subschema,
          items: void 0,
          props: void 0,
        };
        subschemaCode(nextContext, valid);
        return nextContext;
      }
      mergeEvaluated(schemaCxt, toName) {
        const { it, gen } = this;
        if (!it.opts.unevaluated) return;
        if (it.props !== true && schemaCxt.props !== void 0) {
          it.props = util_1.mergeEvaluated.props(
            gen,
            schemaCxt.props,
            it.props,
            toName
          );
        }
        if (it.items !== true && schemaCxt.items !== void 0) {
          it.items = util_1.mergeEvaluated.items(
            gen,
            schemaCxt.items,
            it.items,
            toName
          );
        }
      }
      mergeValidEvaluated(schemaCxt, valid) {
        const { it, gen } = this;
        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
          gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
          return true;
        }
      }
    };
    exports.KeywordCxt = KeywordCxt;
    function keywordCode(it, keyword, def, ruleType) {
      const cxt = new KeywordCxt(it, def, keyword);
      if ('code' in def) {
        def.code(cxt, ruleType);
      } else if (cxt.$data && def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
      } else if ('macro' in def) {
        (0, keyword_1.macroKeywordCode)(cxt, def);
      } else if (def.compile || def.validate) {
        (0, keyword_1.funcKeywordCode)(cxt, def);
      }
    }
    var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
    var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
    function getData($data, { dataLevel, dataNames, dataPathArr }) {
      let jsonPointer;
      let data;
      if ($data === '') return names_1.default.rootData;
      if ($data[0] === '/') {
        if (!JSON_POINTER.test($data))
          throw new Error(`Invalid JSON-pointer: ${$data}`);
        jsonPointer = $data;
        data = names_1.default.rootData;
      } else {
        const matches = RELATIVE_JSON_POINTER.exec($data);
        if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`);
        const up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer === '#') {
          if (up >= dataLevel) throw new Error(errorMsg('property/index', up));
          return dataPathArr[dataLevel - up];
        }
        if (up > dataLevel) throw new Error(errorMsg('data', up));
        data = dataNames[dataLevel - up];
        if (!jsonPointer) return data;
      }
      let expr = data;
      const segments = jsonPointer.split('/');
      for (const segment of segments) {
        if (segment) {
          data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(
            (0, util_1.unescapeJsonPointer)(segment)
          )}`;
          expr = (0, codegen_1._)`${expr} && ${data}`;
        }
      }
      return expr;
      function errorMsg(pointerType, up) {
        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
      }
    }
    exports.getData = getData;
  },
});

// node_modules/ajv/dist/runtime/validation_error.js
var require_validation_error = __commonJS({
  'node_modules/ajv/dist/runtime/validation_error.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var ValidationError = class extends Error {
      constructor(errors) {
        super('validation failed');
        this.errors = errors;
        this.ajv = this.validation = true;
      }
    };
    exports.default = ValidationError;
  },
});

// node_modules/ajv/dist/compile/ref_error.js
var require_ref_error = __commonJS({
  'node_modules/ajv/dist/compile/ref_error.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var resolve_1 = require_resolve();
    var MissingRefError = class extends Error {
      constructor(resolver, baseId, ref, msg) {
        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
        this.missingSchema = (0, resolve_1.normalizeId)(
          (0, resolve_1.getFullPath)(resolver, this.missingRef)
        );
      }
    };
    exports.default = MissingRefError;
  },
});

// node_modules/ajv/dist/compile/index.js
var require_compile = __commonJS({
  'node_modules/ajv/dist/compile/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.resolveSchema =
      exports.getCompilingSchema =
      exports.resolveRef =
      exports.compileSchema =
      exports.SchemaEnv =
        void 0;
    var codegen_1 = require_codegen();
    var validation_error_1 = require_validation_error();
    var names_1 = require_names();
    var resolve_1 = require_resolve();
    var util_1 = require_util4();
    var validate_1 = require_validate2();
    var SchemaEnv = class {
      constructor(env) {
        var _a;
        this.refs = {};
        this.dynamicAnchors = {};
        let schema;
        if (typeof env.schema == 'object') schema = env.schema;
        this.schema = env.schema;
        this.schemaId = env.schemaId;
        this.root = env.root || this;
        this.baseId =
          (_a = env.baseId) !== null && _a !== void 0
            ? _a
            : (0, resolve_1.normalizeId)(
                schema === null || schema === void 0
                  ? void 0
                  : schema[env.schemaId || '$id']
              );
        this.schemaPath = env.schemaPath;
        this.localRefs = env.localRefs;
        this.meta = env.meta;
        this.$async =
          schema === null || schema === void 0 ? void 0 : schema.$async;
        this.refs = {};
      }
    };
    exports.SchemaEnv = SchemaEnv;
    function compileSchema(sch) {
      const _sch = getCompilingSchema.call(this, sch);
      if (_sch) return _sch;
      const rootId = (0, resolve_1.getFullPath)(
        this.opts.uriResolver,
        sch.root.baseId
      );
      const { es5, lines } = this.opts.code;
      const { ownProperties } = this.opts;
      const gen = new codegen_1.CodeGen(this.scope, {
        es5,
        lines,
        ownProperties,
      });
      let _ValidationError;
      if (sch.$async) {
        _ValidationError = gen.scopeValue('Error', {
          ref: validation_error_1.default,
          code: (0,
          codegen_1._)`require("ajv/dist/runtime/validation_error").default`,
        });
      }
      const validateName = gen.scopeName('validate');
      sch.validateName = validateName;
      const schemaCxt = {
        gen,
        allErrors: this.opts.allErrors,
        data: names_1.default.data,
        parentData: names_1.default.parentData,
        parentDataProperty: names_1.default.parentDataProperty,
        dataNames: [names_1.default.data],
        dataPathArr: [codegen_1.nil],
        dataLevel: 0,
        dataTypes: [],
        definedProperties: /* @__PURE__ */ new Set(),
        topSchemaRef: gen.scopeValue(
          'schema',
          this.opts.code.source === true
            ? { ref: sch.schema, code: (0, codegen_1.stringify)(sch.schema) }
            : { ref: sch.schema }
        ),
        validateName,
        ValidationError: _ValidationError,
        schema: sch.schema,
        schemaEnv: sch,
        rootId,
        baseId: sch.baseId || rootId,
        schemaPath: codegen_1.nil,
        errSchemaPath: sch.schemaPath || (this.opts.jtd ? '' : '#'),
        errorPath: (0, codegen_1._)`""`,
        opts: this.opts,
        self: this,
      };
      let sourceCode;
      try {
        this._compilations.add(sch);
        (0, validate_1.validateFunctionCode)(schemaCxt);
        gen.optimize(this.opts.code.optimize);
        const validateCode = gen.toString();
        sourceCode = `${gen.scopeRefs(
          names_1.default.scope
        )}return ${validateCode}`;
        if (this.opts.code.process)
          sourceCode = this.opts.code.process(sourceCode, sch);
        const makeValidate = new Function(
          `${names_1.default.self}`,
          `${names_1.default.scope}`,
          sourceCode
        );
        const validate2 = makeValidate(this, this.scope.get());
        this.scope.value(validateName, { ref: validate2 });
        validate2.errors = null;
        validate2.schema = sch.schema;
        validate2.schemaEnv = sch;
        if (sch.$async) validate2.$async = true;
        if (this.opts.code.source === true) {
          validate2.source = {
            validateName,
            validateCode,
            scopeValues: gen._values,
          };
        }
        if (this.opts.unevaluated) {
          const { props, items } = schemaCxt;
          validate2.evaluated = {
            props: props instanceof codegen_1.Name ? void 0 : props,
            items: items instanceof codegen_1.Name ? void 0 : items,
            dynamicProps: props instanceof codegen_1.Name,
            dynamicItems: items instanceof codegen_1.Name,
          };
          if (validate2.source)
            validate2.source.evaluated = (0, codegen_1.stringify)(
              validate2.evaluated
            );
        }
        sch.validate = validate2;
        return sch;
      } catch (e) {
        delete sch.validate;
        delete sch.validateName;
        if (sourceCode)
          this.logger.error(
            'Error compiling schema, function code:',
            sourceCode
          );
        throw e;
      } finally {
        this._compilations.delete(sch);
      }
    }
    exports.compileSchema = compileSchema;
    function resolveRef(root, baseId, ref) {
      var _a;
      ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
      const schOrFunc = root.refs[ref];
      if (schOrFunc) return schOrFunc;
      let _sch = resolve.call(this, root, ref);
      if (_sch === void 0) {
        const schema =
          (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref];
        const { schemaId } = this.opts;
        if (schema) _sch = new SchemaEnv({ schema, schemaId, root, baseId });
      }
      if (_sch === void 0) return;
      return (root.refs[ref] = inlineOrCompile.call(this, _sch));
    }
    exports.resolveRef = resolveRef;
    function inlineOrCompile(sch) {
      if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs))
        return sch.schema;
      return sch.validate ? sch : compileSchema.call(this, sch);
    }
    function getCompilingSchema(schEnv) {
      for (const sch of this._compilations) {
        if (sameSchemaEnv(sch, schEnv)) return sch;
      }
    }
    exports.getCompilingSchema = getCompilingSchema;
    function sameSchemaEnv(s1, s2) {
      return (
        s1.schema === s2.schema &&
        s1.root === s2.root &&
        s1.baseId === s2.baseId
      );
    }
    function resolve(root, ref) {
      let sch;
      while (typeof (sch = this.refs[ref]) == 'string') ref = sch;
      return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
    }
    function resolveSchema(root, ref) {
      const p = this.opts.uriResolver.parse(ref);
      const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
      let baseId = (0, resolve_1.getFullPath)(
        this.opts.uriResolver,
        root.baseId,
        void 0
      );
      if (Object.keys(root.schema).length > 0 && refPath === baseId) {
        return getJsonPointer.call(this, p, root);
      }
      const id = (0, resolve_1.normalizeId)(refPath);
      const schOrRef = this.refs[id] || this.schemas[id];
      if (typeof schOrRef == 'string') {
        const sch = resolveSchema.call(this, root, schOrRef);
        if (
          typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !==
          'object'
        )
          return;
        return getJsonPointer.call(this, p, sch);
      }
      if (
        typeof (schOrRef === null || schOrRef === void 0
          ? void 0
          : schOrRef.schema) !== 'object'
      )
        return;
      if (!schOrRef.validate) compileSchema.call(this, schOrRef);
      if (id === (0, resolve_1.normalizeId)(ref)) {
        const { schema } = schOrRef;
        const { schemaId } = this.opts;
        const schId = schema[schemaId];
        if (schId)
          baseId = (0, resolve_1.resolveUrl)(
            this.opts.uriResolver,
            baseId,
            schId
          );
        return new SchemaEnv({ schema, schemaId, root, baseId });
      }
      return getJsonPointer.call(this, p, schOrRef);
    }
    exports.resolveSchema = resolveSchema;
    var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
      'properties',
      'patternProperties',
      'enum',
      'dependencies',
      'definitions',
    ]);
    function getJsonPointer(parsedRef, { baseId, schema, root }) {
      var _a;
      if (
        ((_a = parsedRef.fragment) === null || _a === void 0
          ? void 0
          : _a[0]) !== '/'
      )
        return;
      for (const part of parsedRef.fragment.slice(1).split('/')) {
        if (typeof schema === 'boolean') return;
        const partSchema = schema[(0, util_1.unescapeFragment)(part)];
        if (partSchema === void 0) return;
        schema = partSchema;
        const schId = typeof schema === 'object' && schema[this.opts.schemaId];
        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
          baseId = (0, resolve_1.resolveUrl)(
            this.opts.uriResolver,
            baseId,
            schId
          );
        }
      }
      let env;
      if (
        typeof schema != 'boolean' &&
        schema.$ref &&
        !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)
      ) {
        const $ref = (0, resolve_1.resolveUrl)(
          this.opts.uriResolver,
          baseId,
          schema.$ref
        );
        env = resolveSchema.call(this, root, $ref);
      }
      const { schemaId } = this.opts;
      env = env || new SchemaEnv({ schema, schemaId, root, baseId });
      if (env.schema !== env.root.schema) return env;
      return void 0;
    }
  },
});

// node_modules/ajv/dist/refs/data.json
var require_data = __commonJS({
  'node_modules/ajv/dist/refs/data.json'(exports, module2) {
    module2.exports = {
      $id: 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#',
      description:
        'Meta-schema for $data reference (JSON AnySchema extension proposal)',
      type: 'object',
      required: ['$data'],
      properties: {
        $data: {
          type: 'string',
          anyOf: [
            { format: 'relative-json-pointer' },
            { format: 'json-pointer' },
          ],
        },
      },
      additionalProperties: false,
    };
  },
});

// node_modules/uri-js/dist/es5/uri.all.js
var require_uri_all = __commonJS({
  'node_modules/uri-js/dist/es5/uri.all.js'(exports, module2) {
    (function (global2, factory) {
      typeof exports === 'object' && typeof module2 !== 'undefined'
        ? factory(exports)
        : typeof define === 'function' && define.amd
        ? define(['exports'], factory)
        : factory((global2.URI = global2.URI || {}));
    })(exports, function (exports2) {
      'use strict';
      function merge() {
        for (
          var _len = arguments.length, sets = Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          sets[_key] = arguments[_key];
        }
        if (sets.length > 1) {
          sets[0] = sets[0].slice(0, -1);
          var xl = sets.length - 1;
          for (var x = 1; x < xl; ++x) {
            sets[x] = sets[x].slice(1, -1);
          }
          sets[xl] = sets[xl].slice(1);
          return sets.join('');
        } else {
          return sets[0];
        }
      }
      function subexp(str) {
        return '(?:' + str + ')';
      }
      function typeOf(o) {
        return o === void 0
          ? 'undefined'
          : o === null
          ? 'null'
          : Object.prototype.toString
              .call(o)
              .split(' ')
              .pop()
              .split(']')
              .shift()
              .toLowerCase();
      }
      function toUpperCase(str) {
        return str.toUpperCase();
      }
      function toArray(obj) {
        return obj !== void 0 && obj !== null
          ? obj instanceof Array
            ? obj
            : typeof obj.length !== 'number' ||
              obj.split ||
              obj.setInterval ||
              obj.call
            ? [obj]
            : Array.prototype.slice.call(obj)
          : [];
      }
      function assign(target, source) {
        var obj = target;
        if (source) {
          for (var key in source) {
            obj[key] = source[key];
          }
        }
        return obj;
      }
      function buildExps(isIRI2) {
        var ALPHA$$ = '[A-Za-z]',
          CR$ = '[\\x0D]',
          DIGIT$$ = '[0-9]',
          DQUOTE$$ = '[\\x22]',
          HEXDIG$$2 = merge(DIGIT$$, '[A-Fa-f]'),
          LF$$ = '[\\x0A]',
          SP$$ = '[\\x20]',
          PCT_ENCODED$2 = subexp(
            subexp(
              '%[EFef]' +
                HEXDIG$$2 +
                '%' +
                HEXDIG$$2 +
                HEXDIG$$2 +
                '%' +
                HEXDIG$$2 +
                HEXDIG$$2
            ) +
              '|' +
              subexp('%[89A-Fa-f]' + HEXDIG$$2 + '%' + HEXDIG$$2 + HEXDIG$$2) +
              '|' +
              subexp('%' + HEXDIG$$2 + HEXDIG$$2)
          ),
          GEN_DELIMS$$ = '[\\:\\/\\?\\#\\[\\]\\@]',
          SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
          RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
          UCSCHAR$$ = isIRI2
            ? '[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]'
            : '[]',
          IPRIVATE$$ = isIRI2 ? '[\\uE000-\\uF8FF]' : '[]',
          UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, '[\\-\\.\\_\\~]', UCSCHAR$$),
          SCHEME$ = subexp(
            ALPHA$$ + merge(ALPHA$$, DIGIT$$, '[\\+\\-\\.]') + '*'
          ),
          USERINFO$ = subexp(
            subexp(
              PCT_ENCODED$2 + '|' + merge(UNRESERVED$$2, SUB_DELIMS$$, '[\\:]')
            ) + '*'
          ),
          DEC_OCTET$ = subexp(
            subexp('25[0-5]') +
              '|' +
              subexp('2[0-4]' + DIGIT$$) +
              '|' +
              subexp('1' + DIGIT$$ + DIGIT$$) +
              '|' +
              subexp('[1-9]' + DIGIT$$) +
              '|' +
              DIGIT$$
          ),
          DEC_OCTET_RELAXED$ = subexp(
            subexp('25[0-5]') +
              '|' +
              subexp('2[0-4]' + DIGIT$$) +
              '|' +
              subexp('1' + DIGIT$$ + DIGIT$$) +
              '|' +
              subexp('0?[1-9]' + DIGIT$$) +
              '|0?0?' +
              DIGIT$$
          ),
          IPV4ADDRESS$ = subexp(
            DEC_OCTET_RELAXED$ +
              '\\.' +
              DEC_OCTET_RELAXED$ +
              '\\.' +
              DEC_OCTET_RELAXED$ +
              '\\.' +
              DEC_OCTET_RELAXED$
          ),
          H16$ = subexp(HEXDIG$$2 + '{1,4}'),
          LS32$ = subexp(subexp(H16$ + '\\:' + H16$) + '|' + IPV4ADDRESS$),
          IPV6ADDRESS1$ = subexp(subexp(H16$ + '\\:') + '{6}' + LS32$),
          IPV6ADDRESS2$ = subexp(
            '\\:\\:' + subexp(H16$ + '\\:') + '{5}' + LS32$
          ),
          IPV6ADDRESS3$ = subexp(
            subexp(H16$) + '?\\:\\:' + subexp(H16$ + '\\:') + '{4}' + LS32$
          ),
          IPV6ADDRESS4$ = subexp(
            subexp(subexp(H16$ + '\\:') + '{0,1}' + H16$) +
              '?\\:\\:' +
              subexp(H16$ + '\\:') +
              '{3}' +
              LS32$
          ),
          IPV6ADDRESS5$ = subexp(
            subexp(subexp(H16$ + '\\:') + '{0,2}' + H16$) +
              '?\\:\\:' +
              subexp(H16$ + '\\:') +
              '{2}' +
              LS32$
          ),
          IPV6ADDRESS6$ = subexp(
            subexp(subexp(H16$ + '\\:') + '{0,3}' + H16$) +
              '?\\:\\:' +
              H16$ +
              '\\:' +
              LS32$
          ),
          IPV6ADDRESS7$ = subexp(
            subexp(subexp(H16$ + '\\:') + '{0,4}' + H16$) + '?\\:\\:' + LS32$
          ),
          IPV6ADDRESS8$ = subexp(
            subexp(subexp(H16$ + '\\:') + '{0,5}' + H16$) + '?\\:\\:' + H16$
          ),
          IPV6ADDRESS9$ = subexp(
            subexp(subexp(H16$ + '\\:') + '{0,6}' + H16$) + '?\\:\\:'
          ),
          IPV6ADDRESS$ = subexp(
            [
              IPV6ADDRESS1$,
              IPV6ADDRESS2$,
              IPV6ADDRESS3$,
              IPV6ADDRESS4$,
              IPV6ADDRESS5$,
              IPV6ADDRESS6$,
              IPV6ADDRESS7$,
              IPV6ADDRESS8$,
              IPV6ADDRESS9$,
            ].join('|')
          ),
          ZONEID$ = subexp(subexp(UNRESERVED$$2 + '|' + PCT_ENCODED$2) + '+'),
          IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + '\\%25' + ZONEID$),
          IPV6ADDRZ_RELAXED$ = subexp(
            IPV6ADDRESS$ + subexp('\\%25|\\%(?!' + HEXDIG$$2 + '{2})') + ZONEID$
          ),
          IPVFUTURE$ = subexp(
            '[vV]' +
              HEXDIG$$2 +
              '+\\.' +
              merge(UNRESERVED$$2, SUB_DELIMS$$, '[\\:]') +
              '+'
          ),
          IP_LITERAL$ = subexp(
            '\\[' +
              subexp(
                IPV6ADDRZ_RELAXED$ + '|' + IPV6ADDRESS$ + '|' + IPVFUTURE$
              ) +
              '\\]'
          ),
          REG_NAME$ = subexp(
            subexp(PCT_ENCODED$2 + '|' + merge(UNRESERVED$$2, SUB_DELIMS$$)) +
              '*'
          ),
          HOST$ = subexp(
            IP_LITERAL$ +
              '|' +
              IPV4ADDRESS$ +
              '(?!' +
              REG_NAME$ +
              ')|' +
              REG_NAME$
          ),
          PORT$ = subexp(DIGIT$$ + '*'),
          AUTHORITY$ = subexp(
            subexp(USERINFO$ + '@') + '?' + HOST$ + subexp('\\:' + PORT$) + '?'
          ),
          PCHAR$ = subexp(
            PCT_ENCODED$2 + '|' + merge(UNRESERVED$$2, SUB_DELIMS$$, '[\\:\\@]')
          ),
          SEGMENT$ = subexp(PCHAR$ + '*'),
          SEGMENT_NZ$ = subexp(PCHAR$ + '+'),
          SEGMENT_NZ_NC$ = subexp(
            subexp(
              PCT_ENCODED$2 + '|' + merge(UNRESERVED$$2, SUB_DELIMS$$, '[\\@]')
            ) + '+'
          ),
          PATH_ABEMPTY$ = subexp(subexp('\\/' + SEGMENT$) + '*'),
          PATH_ABSOLUTE$ = subexp(
            '\\/' + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + '?'
          ),
          PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
          PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),
          PATH_EMPTY$ = '(?!' + PCHAR$ + ')',
          PATH$ = subexp(
            PATH_ABEMPTY$ +
              '|' +
              PATH_ABSOLUTE$ +
              '|' +
              PATH_NOSCHEME$ +
              '|' +
              PATH_ROOTLESS$ +
              '|' +
              PATH_EMPTY$
          ),
          QUERY$ = subexp(
            subexp(PCHAR$ + '|' + merge('[\\/\\?]', IPRIVATE$$)) + '*'
          ),
          FRAGMENT$ = subexp(subexp(PCHAR$ + '|[\\/\\?]') + '*'),
          HIER_PART$ = subexp(
            subexp('\\/\\/' + AUTHORITY$ + PATH_ABEMPTY$) +
              '|' +
              PATH_ABSOLUTE$ +
              '|' +
              PATH_ROOTLESS$ +
              '|' +
              PATH_EMPTY$
          ),
          URI$ = subexp(
            SCHEME$ +
              '\\:' +
              HIER_PART$ +
              subexp('\\?' + QUERY$) +
              '?' +
              subexp('\\#' + FRAGMENT$) +
              '?'
          ),
          RELATIVE_PART$ = subexp(
            subexp('\\/\\/' + AUTHORITY$ + PATH_ABEMPTY$) +
              '|' +
              PATH_ABSOLUTE$ +
              '|' +
              PATH_NOSCHEME$ +
              '|' +
              PATH_EMPTY$
          ),
          RELATIVE$ = subexp(
            RELATIVE_PART$ +
              subexp('\\?' + QUERY$) +
              '?' +
              subexp('\\#' + FRAGMENT$) +
              '?'
          ),
          URI_REFERENCE$ = subexp(URI$ + '|' + RELATIVE$),
          ABSOLUTE_URI$ = subexp(
            SCHEME$ + '\\:' + HIER_PART$ + subexp('\\?' + QUERY$) + '?'
          ),
          GENERIC_REF$ =
            '^(' +
            SCHEME$ +
            ')\\:' +
            subexp(
              subexp(
                '\\/\\/(' +
                  subexp('(' + USERINFO$ + ')@') +
                  '?(' +
                  HOST$ +
                  ')' +
                  subexp('\\:(' + PORT$ + ')') +
                  '?)'
              ) +
                '?(' +
                PATH_ABEMPTY$ +
                '|' +
                PATH_ABSOLUTE$ +
                '|' +
                PATH_ROOTLESS$ +
                '|' +
                PATH_EMPTY$ +
                ')'
            ) +
            subexp('\\?(' + QUERY$ + ')') +
            '?' +
            subexp('\\#(' + FRAGMENT$ + ')') +
            '?$',
          RELATIVE_REF$ =
            '^(){0}' +
            subexp(
              subexp(
                '\\/\\/(' +
                  subexp('(' + USERINFO$ + ')@') +
                  '?(' +
                  HOST$ +
                  ')' +
                  subexp('\\:(' + PORT$ + ')') +
                  '?)'
              ) +
                '?(' +
                PATH_ABEMPTY$ +
                '|' +
                PATH_ABSOLUTE$ +
                '|' +
                PATH_NOSCHEME$ +
                '|' +
                PATH_EMPTY$ +
                ')'
            ) +
            subexp('\\?(' + QUERY$ + ')') +
            '?' +
            subexp('\\#(' + FRAGMENT$ + ')') +
            '?$',
          ABSOLUTE_REF$ =
            '^(' +
            SCHEME$ +
            ')\\:' +
            subexp(
              subexp(
                '\\/\\/(' +
                  subexp('(' + USERINFO$ + ')@') +
                  '?(' +
                  HOST$ +
                  ')' +
                  subexp('\\:(' + PORT$ + ')') +
                  '?)'
              ) +
                '?(' +
                PATH_ABEMPTY$ +
                '|' +
                PATH_ABSOLUTE$ +
                '|' +
                PATH_ROOTLESS$ +
                '|' +
                PATH_EMPTY$ +
                ')'
            ) +
            subexp('\\?(' + QUERY$ + ')') +
            '?$',
          SAMEDOC_REF$ = '^' + subexp('\\#(' + FRAGMENT$ + ')') + '?$',
          AUTHORITY_REF$ =
            '^' +
            subexp('(' + USERINFO$ + ')@') +
            '?(' +
            HOST$ +
            ')' +
            subexp('\\:(' + PORT$ + ')') +
            '?$';
        return {
          NOT_SCHEME: new RegExp(
            merge('[^]', ALPHA$$, DIGIT$$, '[\\+\\-\\.]'),
            'g'
          ),
          NOT_USERINFO: new RegExp(
            merge('[^\\%\\:]', UNRESERVED$$2, SUB_DELIMS$$),
            'g'
          ),
          NOT_HOST: new RegExp(
            merge('[^\\%\\[\\]\\:]', UNRESERVED$$2, SUB_DELIMS$$),
            'g'
          ),
          NOT_PATH: new RegExp(
            merge('[^\\%\\/\\:\\@]', UNRESERVED$$2, SUB_DELIMS$$),
            'g'
          ),
          NOT_PATH_NOSCHEME: new RegExp(
            merge('[^\\%\\/\\@]', UNRESERVED$$2, SUB_DELIMS$$),
            'g'
          ),
          NOT_QUERY: new RegExp(
            merge(
              '[^\\%]',
              UNRESERVED$$2,
              SUB_DELIMS$$,
              '[\\:\\@\\/\\?]',
              IPRIVATE$$
            ),
            'g'
          ),
          NOT_FRAGMENT: new RegExp(
            merge('[^\\%]', UNRESERVED$$2, SUB_DELIMS$$, '[\\:\\@\\/\\?]'),
            'g'
          ),
          ESCAPE: new RegExp(merge('[^]', UNRESERVED$$2, SUB_DELIMS$$), 'g'),
          UNRESERVED: new RegExp(UNRESERVED$$2, 'g'),
          OTHER_CHARS: new RegExp(
            merge('[^\\%]', UNRESERVED$$2, RESERVED$$),
            'g'
          ),
          PCT_ENCODED: new RegExp(PCT_ENCODED$2, 'g'),
          IPV4ADDRESS: new RegExp('^(' + IPV4ADDRESS$ + ')$'),
          IPV6ADDRESS: new RegExp(
            '^\\[?(' +
              IPV6ADDRESS$ +
              ')' +
              subexp(
                subexp('\\%25|\\%(?!' + HEXDIG$$2 + '{2})') +
                  '(' +
                  ZONEID$ +
                  ')'
              ) +
              '?\\]?$'
          ),
          //RFC 6874, with relaxed parsing rules
        };
      }
      var URI_PROTOCOL = buildExps(false);
      var IRI_PROTOCOL = buildExps(true);
      var slicedToArray = (function () {
        function sliceIterator(arr, i) {
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (
              var _i = arr[Symbol.iterator](), _s;
              !(_n = (_s = _i.next()).done);
              _n = true
            ) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i['return']) _i['return']();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        return function (arr, i) {
          if (Array.isArray(arr)) {
            return arr;
          } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
          } else {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance'
            );
          }
        };
      })();
      var toConsumableArray = function (arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
            arr2[i] = arr[i];
          return arr2;
        } else {
          return Array.from(arr);
        }
      };
      var maxInt = 2147483647;
      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128;
      var delimiter = '-';
      var regexPunycode = /^xn--/;
      var regexNonASCII = /[^\0-\x7E]/;
      var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
      var errors = {
        overflow: 'Overflow: input needs wider integers to process',
        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
        'invalid-input': 'Invalid input',
      };
      var baseMinusTMin = base - tMin;
      var floor = Math.floor;
      var stringFromCharCode = String.fromCharCode;
      function error$1(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var result = [];
        var length = array.length;
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split('@');
        var result = '';
        if (parts.length > 1) {
          result = parts[0] + '@';
          string = parts[1];
        }
        string = string.replace(regexSeparators, '.');
        var labels = string.split('.');
        var encoded = map(labels, fn).join('.');
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
          var value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      var ucs2encode = function ucs2encode2(array) {
        return String.fromCodePoint.apply(String, toConsumableArray(array));
      };
      var basicToDigit = function basicToDigit2(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      };
      var digitToBasic = function digitToBasic2(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      };
      var adapt = function adapt2(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (
          ;
          /* no initialization */
          delta > (baseMinusTMin * tMax) >> 1;
          k += base
        ) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));
      };
      var decode = function decode2(input) {
        var output = [];
        var inputLength = input.length;
        var i = 0;
        var n = initialN;
        var bias = initialBias;
        var basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (var j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error$1('not-basic');
          }
          output.push(input.charCodeAt(j));
        }
        for (var index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          var oldi = i;
          for (
            var w = 1, k = base;
            ;
            /* no condition */
            k += base
          ) {
            if (index >= inputLength) {
              error$1('invalid-input');
            }
            var digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error$1('overflow');
            }
            i += digit * w;
            var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            var baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error$1('overflow');
            }
            w *= baseMinusT;
          }
          var out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error$1('overflow');
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return String.fromCodePoint.apply(String, output);
      };
      var encode = function encode2(input) {
        var output = [];
        input = ucs2decode(input);
        var inputLength = input.length;
        var n = initialN;
        var delta = 0;
        var bias = initialBias;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (
            var _iterator = input[Symbol.iterator](), _step;
            !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
            _iteratorNormalCompletion = true
          ) {
            var _currentValue2 = _step.value;
            if (_currentValue2 < 128) {
              output.push(stringFromCharCode(_currentValue2));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        var basicLength = output.length;
        var handledCPCount = basicLength;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          var m = maxInt;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = void 0;
          try {
            for (
              var _iterator2 = input[Symbol.iterator](), _step2;
              !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);
              _iteratorNormalCompletion2 = true
            ) {
              var currentValue = _step2.value;
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
          var handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error$1('overflow');
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = void 0;
          try {
            for (
              var _iterator3 = input[Symbol.iterator](), _step3;
              !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);
              _iteratorNormalCompletion3 = true
            ) {
              var _currentValue = _step3.value;
              if (_currentValue < n && ++delta > maxInt) {
                error$1('overflow');
              }
              if (_currentValue == n) {
                var q = delta;
                for (
                  var k = base;
                  ;
                  /* no condition */
                  k += base
                ) {
                  var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) {
                    break;
                  }
                  var qMinusT = q - t;
                  var baseMinusT = base - t;
                  output.push(
                    stringFromCharCode(
                      digitToBasic(t + (qMinusT % baseMinusT), 0)
                    )
                  );
                  q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(
                  delta,
                  handledCPCountPlusOne,
                  handledCPCount == basicLength
                );
                delta = 0;
                ++handledCPCount;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
          ++delta;
          ++n;
        }
        return output.join('');
      };
      var toUnicode = function toUnicode2(input) {
        return mapDomain(input, function (string) {
          return regexPunycode.test(string)
            ? decode(string.slice(4).toLowerCase())
            : string;
        });
      };
      var toASCII = function toASCII2(input) {
        return mapDomain(input, function (string) {
          return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
        });
      };
      var punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        version: '2.1.0',
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        ucs2: {
          decode: ucs2decode,
          encode: ucs2encode,
        },
        decode: decode,
        encode: encode,
        toASCII: toASCII,
        toUnicode: toUnicode,
      };
      var SCHEMES = {};
      function pctEncChar(chr) {
        var c = chr.charCodeAt(0);
        var e = void 0;
        if (c < 16) e = '%0' + c.toString(16).toUpperCase();
        else if (c < 128) e = '%' + c.toString(16).toUpperCase();
        else if (c < 2048)
          e =
            '%' +
            ((c >> 6) | 192).toString(16).toUpperCase() +
            '%' +
            ((c & 63) | 128).toString(16).toUpperCase();
        else
          e =
            '%' +
            ((c >> 12) | 224).toString(16).toUpperCase() +
            '%' +
            (((c >> 6) & 63) | 128).toString(16).toUpperCase() +
            '%' +
            ((c & 63) | 128).toString(16).toUpperCase();
        return e;
      }
      function pctDecChars(str) {
        var newStr = '';
        var i = 0;
        var il = str.length;
        while (i < il) {
          var c = parseInt(str.substr(i + 1, 2), 16);
          if (c < 128) {
            newStr += String.fromCharCode(c);
            i += 3;
          } else if (c >= 194 && c < 224) {
            if (il - i >= 6) {
              var c2 = parseInt(str.substr(i + 4, 2), 16);
              newStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            } else {
              newStr += str.substr(i, 6);
            }
            i += 6;
          } else if (c >= 224) {
            if (il - i >= 9) {
              var _c = parseInt(str.substr(i + 4, 2), 16);
              var c3 = parseInt(str.substr(i + 7, 2), 16);
              newStr += String.fromCharCode(
                ((c & 15) << 12) | ((_c & 63) << 6) | (c3 & 63)
              );
            } else {
              newStr += str.substr(i, 9);
            }
            i += 9;
          } else {
            newStr += str.substr(i, 3);
            i += 3;
          }
        }
        return newStr;
      }
      function _normalizeComponentEncoding(components, protocol) {
        function decodeUnreserved2(str) {
          var decStr = pctDecChars(str);
          return !decStr.match(protocol.UNRESERVED) ? str : decStr;
        }
        if (components.scheme)
          components.scheme = String(components.scheme)
            .replace(protocol.PCT_ENCODED, decodeUnreserved2)
            .toLowerCase()
            .replace(protocol.NOT_SCHEME, '');
        if (components.userinfo !== void 0)
          components.userinfo = String(components.userinfo)
            .replace(protocol.PCT_ENCODED, decodeUnreserved2)
            .replace(protocol.NOT_USERINFO, pctEncChar)
            .replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.host !== void 0)
          components.host = String(components.host)
            .replace(protocol.PCT_ENCODED, decodeUnreserved2)
            .toLowerCase()
            .replace(protocol.NOT_HOST, pctEncChar)
            .replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.path !== void 0)
          components.path = String(components.path)
            .replace(protocol.PCT_ENCODED, decodeUnreserved2)
            .replace(
              components.scheme
                ? protocol.NOT_PATH
                : protocol.NOT_PATH_NOSCHEME,
              pctEncChar
            )
            .replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.query !== void 0)
          components.query = String(components.query)
            .replace(protocol.PCT_ENCODED, decodeUnreserved2)
            .replace(protocol.NOT_QUERY, pctEncChar)
            .replace(protocol.PCT_ENCODED, toUpperCase);
        if (components.fragment !== void 0)
          components.fragment = String(components.fragment)
            .replace(protocol.PCT_ENCODED, decodeUnreserved2)
            .replace(protocol.NOT_FRAGMENT, pctEncChar)
            .replace(protocol.PCT_ENCODED, toUpperCase);
        return components;
      }
      function _stripLeadingZeros(str) {
        return str.replace(/^0*(.*)/, '$1') || '0';
      }
      function _normalizeIPv4(host, protocol) {
        var matches = host.match(protocol.IPV4ADDRESS) || [];
        var _matches = slicedToArray(matches, 2),
          address = _matches[1];
        if (address) {
          return address.split('.').map(_stripLeadingZeros).join('.');
        } else {
          return host;
        }
      }
      function _normalizeIPv6(host, protocol) {
        var matches = host.match(protocol.IPV6ADDRESS) || [];
        var _matches2 = slicedToArray(matches, 3),
          address = _matches2[1],
          zone = _matches2[2];
        if (address) {
          var _address$toLowerCase$ = address
              .toLowerCase()
              .split('::')
              .reverse(),
            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
            last = _address$toLowerCase$2[0],
            first = _address$toLowerCase$2[1];
          var firstFields = first
            ? first.split(':').map(_stripLeadingZeros)
            : [];
          var lastFields = last.split(':').map(_stripLeadingZeros);
          var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(
            lastFields[lastFields.length - 1]
          );
          var fieldCount = isLastFieldIPv4Address ? 7 : 8;
          var lastFieldsStart = lastFields.length - fieldCount;
          var fields = Array(fieldCount);
          for (var x = 0; x < fieldCount; ++x) {
            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
          }
          if (isLastFieldIPv4Address) {
            fields[fieldCount - 1] = _normalizeIPv4(
              fields[fieldCount - 1],
              protocol
            );
          }
          var allZeroFields = fields.reduce(function (acc, field, index) {
            if (!field || field === '0') {
              var lastLongest = acc[acc.length - 1];
              if (
                lastLongest &&
                lastLongest.index + lastLongest.length === index
              ) {
                lastLongest.length++;
              } else {
                acc.push({ index, length: 1 });
              }
            }
            return acc;
          }, []);
          var longestZeroFields = allZeroFields.sort(function (a, b) {
            return b.length - a.length;
          })[0];
          var newHost = void 0;
          if (longestZeroFields && longestZeroFields.length > 1) {
            var newFirst = fields.slice(0, longestZeroFields.index);
            var newLast = fields.slice(
              longestZeroFields.index + longestZeroFields.length
            );
            newHost = newFirst.join(':') + '::' + newLast.join(':');
          } else {
            newHost = fields.join(':');
          }
          if (zone) {
            newHost += '%' + zone;
          }
          return newHost;
        } else {
          return host;
        }
      }
      var URI_PARSE =
        /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
      var NO_MATCH_IS_UNDEFINED = ''.match(/(){0}/)[1] === void 0;
      function parse2(uriString) {
        var options =
          arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var components = {};
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        if (options.reference === 'suffix')
          uriString =
            (options.scheme ? options.scheme + ':' : '') + '//' + uriString;
        var matches = uriString.match(URI_PARSE);
        if (matches) {
          if (NO_MATCH_IS_UNDEFINED) {
            components.scheme = matches[1];
            components.userinfo = matches[3];
            components.host = matches[4];
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || '';
            components.query = matches[7];
            components.fragment = matches[8];
            if (isNaN(components.port)) {
              components.port = matches[5];
            }
          } else {
            components.scheme = matches[1] || void 0;
            components.userinfo =
              uriString.indexOf('@') !== -1 ? matches[3] : void 0;
            components.host =
              uriString.indexOf('//') !== -1 ? matches[4] : void 0;
            components.port = parseInt(matches[5], 10);
            components.path = matches[6] || '';
            components.query =
              uriString.indexOf('?') !== -1 ? matches[7] : void 0;
            components.fragment =
              uriString.indexOf('#') !== -1 ? matches[8] : void 0;
            if (isNaN(components.port)) {
              components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)
                ? matches[4]
                : void 0;
            }
          }
          if (components.host) {
            components.host = _normalizeIPv6(
              _normalizeIPv4(components.host, protocol),
              protocol
            );
          }
          if (
            components.scheme === void 0 &&
            components.userinfo === void 0 &&
            components.host === void 0 &&
            components.port === void 0 &&
            !components.path &&
            components.query === void 0
          ) {
            components.reference = 'same-document';
          } else if (components.scheme === void 0) {
            components.reference = 'relative';
          } else if (components.fragment === void 0) {
            components.reference = 'absolute';
          } else {
            components.reference = 'uri';
          }
          if (
            options.reference &&
            options.reference !== 'suffix' &&
            options.reference !== components.reference
          ) {
            components.error =
              components.error ||
              'URI is not a ' + options.reference + ' reference.';
          }
          var schemeHandler =
            SCHEMES[(options.scheme || components.scheme || '').toLowerCase()];
          if (
            !options.unicodeSupport &&
            (!schemeHandler || !schemeHandler.unicodeSupport)
          ) {
            if (
              components.host &&
              (options.domainHost ||
                (schemeHandler && schemeHandler.domainHost))
            ) {
              try {
                components.host = punycode.toASCII(
                  components.host
                    .replace(protocol.PCT_ENCODED, pctDecChars)
                    .toLowerCase()
                );
              } catch (e) {
                components.error =
                  components.error ||
                  "Host's domain name can not be converted to ASCII via punycode: " +
                    e;
              }
            }
            _normalizeComponentEncoding(components, URI_PROTOCOL);
          } else {
            _normalizeComponentEncoding(components, protocol);
          }
          if (schemeHandler && schemeHandler.parse) {
            schemeHandler.parse(components, options);
          }
        } else {
          components.error = components.error || 'URI can not be parsed.';
        }
        return components;
      }
      function _recomposeAuthority(components, options) {
        var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        if (components.userinfo !== void 0) {
          uriTokens.push(components.userinfo);
          uriTokens.push('@');
        }
        if (components.host !== void 0) {
          uriTokens.push(
            _normalizeIPv6(
              _normalizeIPv4(String(components.host), protocol),
              protocol
            ).replace(protocol.IPV6ADDRESS, function (_2, $1, $2) {
              return '[' + $1 + ($2 ? '%25' + $2 : '') + ']';
            })
          );
        }
        if (
          typeof components.port === 'number' ||
          typeof components.port === 'string'
        ) {
          uriTokens.push(':');
          uriTokens.push(String(components.port));
        }
        return uriTokens.length ? uriTokens.join('') : void 0;
      }
      var RDS1 = /^\.\.?\//;
      var RDS2 = /^\/\.(\/|$)/;
      var RDS3 = /^\/\.\.(\/|$)/;
      var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
      function removeDotSegments(input) {
        var output = [];
        while (input.length) {
          if (input.match(RDS1)) {
            input = input.replace(RDS1, '');
          } else if (input.match(RDS2)) {
            input = input.replace(RDS2, '/');
          } else if (input.match(RDS3)) {
            input = input.replace(RDS3, '/');
            output.pop();
          } else if (input === '.' || input === '..') {
            input = '';
          } else {
            var im = input.match(RDS5);
            if (im) {
              var s = im[0];
              input = input.slice(s.length);
              output.push(s);
            } else {
              throw new Error('Unexpected dot segment condition');
            }
          }
        }
        return output.join('');
      }
      function serialize(components) {
        var options =
          arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
        var uriTokens = [];
        var schemeHandler =
          SCHEMES[(options.scheme || components.scheme || '').toLowerCase()];
        if (schemeHandler && schemeHandler.serialize)
          schemeHandler.serialize(components, options);
        if (components.host) {
          if (protocol.IPV6ADDRESS.test(components.host)) {
          } else if (
            options.domainHost ||
            (schemeHandler && schemeHandler.domainHost)
          ) {
            try {
              components.host = !options.iri
                ? punycode.toASCII(
                    components.host
                      .replace(protocol.PCT_ENCODED, pctDecChars)
                      .toLowerCase()
                  )
                : punycode.toUnicode(components.host);
            } catch (e) {
              components.error =
                components.error ||
                "Host's domain name can not be converted to " +
                  (!options.iri ? 'ASCII' : 'Unicode') +
                  ' via punycode: ' +
                  e;
            }
          }
        }
        _normalizeComponentEncoding(components, protocol);
        if (options.reference !== 'suffix' && components.scheme) {
          uriTokens.push(components.scheme);
          uriTokens.push(':');
        }
        var authority = _recomposeAuthority(components, options);
        if (authority !== void 0) {
          if (options.reference !== 'suffix') {
            uriTokens.push('//');
          }
          uriTokens.push(authority);
          if (components.path && components.path.charAt(0) !== '/') {
            uriTokens.push('/');
          }
        }
        if (components.path !== void 0) {
          var s = components.path;
          if (
            !options.absolutePath &&
            (!schemeHandler || !schemeHandler.absolutePath)
          ) {
            s = removeDotSegments(s);
          }
          if (authority === void 0) {
            s = s.replace(/^\/\//, '/%2F');
          }
          uriTokens.push(s);
        }
        if (components.query !== void 0) {
          uriTokens.push('?');
          uriTokens.push(components.query);
        }
        if (components.fragment !== void 0) {
          uriTokens.push('#');
          uriTokens.push(components.fragment);
        }
        return uriTokens.join('');
      }
      function resolveComponents(base2, relative) {
        var options =
          arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var skipNormalization = arguments[3];
        var target = {};
        if (!skipNormalization) {
          base2 = parse2(serialize(base2, options), options);
          relative = parse2(serialize(relative, options), options);
        }
        options = options || {};
        if (!options.tolerant && relative.scheme) {
          target.scheme = relative.scheme;
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || '');
          target.query = relative.query;
        } else {
          if (
            relative.userinfo !== void 0 ||
            relative.host !== void 0 ||
            relative.port !== void 0
          ) {
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || '');
            target.query = relative.query;
          } else {
            if (!relative.path) {
              target.path = base2.path;
              if (relative.query !== void 0) {
                target.query = relative.query;
              } else {
                target.query = base2.query;
              }
            } else {
              if (relative.path.charAt(0) === '/') {
                target.path = removeDotSegments(relative.path);
              } else {
                if (
                  (base2.userinfo !== void 0 ||
                    base2.host !== void 0 ||
                    base2.port !== void 0) &&
                  !base2.path
                ) {
                  target.path = '/' + relative.path;
                } else if (!base2.path) {
                  target.path = relative.path;
                } else {
                  target.path =
                    base2.path.slice(0, base2.path.lastIndexOf('/') + 1) +
                    relative.path;
                }
                target.path = removeDotSegments(target.path);
              }
              target.query = relative.query;
            }
            target.userinfo = base2.userinfo;
            target.host = base2.host;
            target.port = base2.port;
          }
          target.scheme = base2.scheme;
        }
        target.fragment = relative.fragment;
        return target;
      }
      function resolve(baseURI, relativeURI, options) {
        var schemelessOptions = assign({ scheme: 'null' }, options);
        return serialize(
          resolveComponents(
            parse2(baseURI, schemelessOptions),
            parse2(relativeURI, schemelessOptions),
            schemelessOptions,
            true
          ),
          schemelessOptions
        );
      }
      function normalize(uri, options) {
        if (typeof uri === 'string') {
          uri = serialize(parse2(uri, options), options);
        } else if (typeOf(uri) === 'object') {
          uri = parse2(serialize(uri, options), options);
        }
        return uri;
      }
      function equal(uriA, uriB, options) {
        if (typeof uriA === 'string') {
          uriA = serialize(parse2(uriA, options), options);
        } else if (typeOf(uriA) === 'object') {
          uriA = serialize(uriA, options);
        }
        if (typeof uriB === 'string') {
          uriB = serialize(parse2(uriB, options), options);
        } else if (typeOf(uriB) === 'object') {
          uriB = serialize(uriB, options);
        }
        return uriA === uriB;
      }
      function escapeComponent(str, options) {
        return (
          str &&
          str
            .toString()
            .replace(
              !options || !options.iri
                ? URI_PROTOCOL.ESCAPE
                : IRI_PROTOCOL.ESCAPE,
              pctEncChar
            )
        );
      }
      function unescapeComponent(str, options) {
        return (
          str &&
          str
            .toString()
            .replace(
              !options || !options.iri
                ? URI_PROTOCOL.PCT_ENCODED
                : IRI_PROTOCOL.PCT_ENCODED,
              pctDecChars
            )
        );
      }
      var handler2 = {
        scheme: 'http',
        domainHost: true,
        parse: function parse3(components, options) {
          if (!components.host) {
            components.error =
              components.error || 'HTTP URIs must have a host.';
          }
          return components;
        },
        serialize: function serialize2(components, options) {
          var secure = String(components.scheme).toLowerCase() === 'https';
          if (
            components.port === (secure ? 443 : 80) ||
            components.port === ''
          ) {
            components.port = void 0;
          }
          if (!components.path) {
            components.path = '/';
          }
          return components;
        },
      };
      var handler$1 = {
        scheme: 'https',
        domainHost: handler2.domainHost,
        parse: handler2.parse,
        serialize: handler2.serialize,
      };
      function isSecure(wsComponents) {
        return typeof wsComponents.secure === 'boolean'
          ? wsComponents.secure
          : String(wsComponents.scheme).toLowerCase() === 'wss';
      }
      var handler$2 = {
        scheme: 'ws',
        domainHost: true,
        parse: function parse3(components, options) {
          var wsComponents = components;
          wsComponents.secure = isSecure(wsComponents);
          wsComponents.resourceName =
            (wsComponents.path || '/') +
            (wsComponents.query ? '?' + wsComponents.query : '');
          wsComponents.path = void 0;
          wsComponents.query = void 0;
          return wsComponents;
        },
        serialize: function serialize2(wsComponents, options) {
          if (
            wsComponents.port === (isSecure(wsComponents) ? 443 : 80) ||
            wsComponents.port === ''
          ) {
            wsComponents.port = void 0;
          }
          if (typeof wsComponents.secure === 'boolean') {
            wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
            wsComponents.secure = void 0;
          }
          if (wsComponents.resourceName) {
            var _wsComponents$resourc = wsComponents.resourceName.split('?'),
              _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
              path = _wsComponents$resourc2[0],
              query = _wsComponents$resourc2[1];
            wsComponents.path = path && path !== '/' ? path : void 0;
            wsComponents.query = query;
            wsComponents.resourceName = void 0;
          }
          wsComponents.fragment = void 0;
          return wsComponents;
        },
      };
      var handler$3 = {
        scheme: 'wss',
        domainHost: handler$2.domainHost,
        parse: handler$2.parse,
        serialize: handler$2.serialize,
      };
      var O = {};
      var isIRI = true;
      var UNRESERVED$$ =
        '[A-Za-z0-9\\-\\.\\_\\~' +
        (isIRI
          ? '\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF'
          : '') +
        ']';
      var HEXDIG$$ = '[0-9A-Fa-f]';
      var PCT_ENCODED$ = subexp(
        subexp(
          '%[EFef]' +
            HEXDIG$$ +
            '%' +
            HEXDIG$$ +
            HEXDIG$$ +
            '%' +
            HEXDIG$$ +
            HEXDIG$$
        ) +
          '|' +
          subexp('%[89A-Fa-f]' + HEXDIG$$ + '%' + HEXDIG$$ + HEXDIG$$) +
          '|' +
          subexp('%' + HEXDIG$$ + HEXDIG$$)
      );
      var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
      var QTEXT$$ =
        "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
      var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]');
      var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
      var UNRESERVED = new RegExp(UNRESERVED$$, 'g');
      var PCT_ENCODED = new RegExp(PCT_ENCODED$, 'g');
      var NOT_LOCAL_PART = new RegExp(
        merge('[^]', ATEXT$$, '[\\.]', '[\\"]', VCHAR$$),
        'g'
      );
      var NOT_HFNAME = new RegExp(
        merge('[^]', UNRESERVED$$, SOME_DELIMS$$),
        'g'
      );
      var NOT_HFVALUE = NOT_HFNAME;
      function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(UNRESERVED) ? str : decStr;
      }
      var handler$4 = {
        scheme: 'mailto',
        parse: function parse$$1(components, options) {
          var mailtoComponents = components;
          var to = (mailtoComponents.to = mailtoComponents.path
            ? mailtoComponents.path.split(',')
            : []);
          mailtoComponents.path = void 0;
          if (mailtoComponents.query) {
            var unknownHeaders = false;
            var headers = {};
            var hfields = mailtoComponents.query.split('&');
            for (var x = 0, xl = hfields.length; x < xl; ++x) {
              var hfield = hfields[x].split('=');
              switch (hfield[0]) {
                case 'to':
                  var toAddrs = hfield[1].split(',');
                  for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                    to.push(toAddrs[_x]);
                  }
                  break;
                case 'subject':
                  mailtoComponents.subject = unescapeComponent(
                    hfield[1],
                    options
                  );
                  break;
                case 'body':
                  mailtoComponents.body = unescapeComponent(hfield[1], options);
                  break;
                default:
                  unknownHeaders = true;
                  headers[unescapeComponent(hfield[0], options)] =
                    unescapeComponent(hfield[1], options);
                  break;
              }
            }
            if (unknownHeaders) mailtoComponents.headers = headers;
          }
          mailtoComponents.query = void 0;
          for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
            var addr = to[_x2].split('@');
            addr[0] = unescapeComponent(addr[0]);
            if (!options.unicodeSupport) {
              try {
                addr[1] = punycode.toASCII(
                  unescapeComponent(addr[1], options).toLowerCase()
                );
              } catch (e) {
                mailtoComponents.error =
                  mailtoComponents.error ||
                  "Email address's domain name can not be converted to ASCII via punycode: " +
                    e;
              }
            } else {
              addr[1] = unescapeComponent(addr[1], options).toLowerCase();
            }
            to[_x2] = addr.join('@');
          }
          return mailtoComponents;
        },
        serialize: function serialize$$1(mailtoComponents, options) {
          var components = mailtoComponents;
          var to = toArray(mailtoComponents.to);
          if (to) {
            for (var x = 0, xl = to.length; x < xl; ++x) {
              var toAddr = String(to[x]);
              var atIdx = toAddr.lastIndexOf('@');
              var localPart = toAddr
                .slice(0, atIdx)
                .replace(PCT_ENCODED, decodeUnreserved)
                .replace(PCT_ENCODED, toUpperCase)
                .replace(NOT_LOCAL_PART, pctEncChar);
              var domain = toAddr.slice(atIdx + 1);
              try {
                domain = !options.iri
                  ? punycode.toASCII(
                      unescapeComponent(domain, options).toLowerCase()
                    )
                  : punycode.toUnicode(domain);
              } catch (e) {
                components.error =
                  components.error ||
                  "Email address's domain name can not be converted to " +
                    (!options.iri ? 'ASCII' : 'Unicode') +
                    ' via punycode: ' +
                    e;
              }
              to[x] = localPart + '@' + domain;
            }
            components.path = to.join(',');
          }
          var headers = (mailtoComponents.headers =
            mailtoComponents.headers || {});
          if (mailtoComponents.subject)
            headers['subject'] = mailtoComponents.subject;
          if (mailtoComponents.body) headers['body'] = mailtoComponents.body;
          var fields = [];
          for (var name in headers) {
            if (headers[name] !== O[name]) {
              fields.push(
                name
                  .replace(PCT_ENCODED, decodeUnreserved)
                  .replace(PCT_ENCODED, toUpperCase)
                  .replace(NOT_HFNAME, pctEncChar) +
                  '=' +
                  headers[name]
                    .replace(PCT_ENCODED, decodeUnreserved)
                    .replace(PCT_ENCODED, toUpperCase)
                    .replace(NOT_HFVALUE, pctEncChar)
              );
            }
          }
          if (fields.length) {
            components.query = fields.join('&');
          }
          return components;
        },
      };
      var URN_PARSE = /^([^\:]+)\:(.*)/;
      var handler$5 = {
        scheme: 'urn',
        parse: function parse$$1(components, options) {
          var matches = components.path && components.path.match(URN_PARSE);
          var urnComponents = components;
          if (matches) {
            var scheme = options.scheme || urnComponents.scheme || 'urn';
            var nid = matches[1].toLowerCase();
            var nss = matches[2];
            var urnScheme = scheme + ':' + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            urnComponents.nid = nid;
            urnComponents.nss = nss;
            urnComponents.path = void 0;
            if (schemeHandler) {
              urnComponents = schemeHandler.parse(urnComponents, options);
            }
          } else {
            urnComponents.error =
              urnComponents.error || 'URN can not be parsed.';
          }
          return urnComponents;
        },
        serialize: function serialize$$1(urnComponents, options) {
          var scheme = options.scheme || urnComponents.scheme || 'urn';
          var nid = urnComponents.nid;
          var urnScheme = scheme + ':' + (options.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          if (schemeHandler) {
            urnComponents = schemeHandler.serialize(urnComponents, options);
          }
          var uriComponents = urnComponents;
          var nss = urnComponents.nss;
          uriComponents.path = (nid || options.nid) + ':' + nss;
          return uriComponents;
        },
      };
      var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
      var handler$6 = {
        scheme: 'urn:uuid',
        parse: function parse3(urnComponents, options) {
          var uuidComponents = urnComponents;
          uuidComponents.uuid = uuidComponents.nss;
          uuidComponents.nss = void 0;
          if (
            !options.tolerant &&
            (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))
          ) {
            uuidComponents.error = uuidComponents.error || 'UUID is not valid.';
          }
          return uuidComponents;
        },
        serialize: function serialize2(uuidComponents, options) {
          var urnComponents = uuidComponents;
          urnComponents.nss = (uuidComponents.uuid || '').toLowerCase();
          return urnComponents;
        },
      };
      SCHEMES[handler2.scheme] = handler2;
      SCHEMES[handler$1.scheme] = handler$1;
      SCHEMES[handler$2.scheme] = handler$2;
      SCHEMES[handler$3.scheme] = handler$3;
      SCHEMES[handler$4.scheme] = handler$4;
      SCHEMES[handler$5.scheme] = handler$5;
      SCHEMES[handler$6.scheme] = handler$6;
      exports2.SCHEMES = SCHEMES;
      exports2.pctEncChar = pctEncChar;
      exports2.pctDecChars = pctDecChars;
      exports2.parse = parse2;
      exports2.removeDotSegments = removeDotSegments;
      exports2.serialize = serialize;
      exports2.resolveComponents = resolveComponents;
      exports2.resolve = resolve;
      exports2.normalize = normalize;
      exports2.equal = equal;
      exports2.escapeComponent = escapeComponent;
      exports2.unescapeComponent = unescapeComponent;
      Object.defineProperty(exports2, '__esModule', { value: true });
    });
  },
});

// node_modules/ajv/dist/runtime/uri.js
var require_uri = __commonJS({
  'node_modules/ajv/dist/runtime/uri.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var uri = require_uri_all();
    uri.code = 'require("ajv/dist/runtime/uri").default';
    exports.default = uri;
  },
});

// node_modules/ajv/dist/core.js
var require_core = __commonJS({
  'node_modules/ajv/dist/core.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.CodeGen =
      exports.Name =
      exports.nil =
      exports.stringify =
      exports.str =
      exports._ =
      exports.KeywordCxt =
        void 0;
    var validate_1 = require_validate2();
    Object.defineProperty(exports, 'KeywordCxt', {
      enumerable: true,
      get: function () {
        return validate_1.KeywordCxt;
      },
    });
    var codegen_1 = require_codegen();
    Object.defineProperty(exports, '_', {
      enumerable: true,
      get: function () {
        return codegen_1._;
      },
    });
    Object.defineProperty(exports, 'str', {
      enumerable: true,
      get: function () {
        return codegen_1.str;
      },
    });
    Object.defineProperty(exports, 'stringify', {
      enumerable: true,
      get: function () {
        return codegen_1.stringify;
      },
    });
    Object.defineProperty(exports, 'nil', {
      enumerable: true,
      get: function () {
        return codegen_1.nil;
      },
    });
    Object.defineProperty(exports, 'Name', {
      enumerable: true,
      get: function () {
        return codegen_1.Name;
      },
    });
    Object.defineProperty(exports, 'CodeGen', {
      enumerable: true,
      get: function () {
        return codegen_1.CodeGen;
      },
    });
    var validation_error_1 = require_validation_error();
    var ref_error_1 = require_ref_error();
    var rules_1 = require_rules();
    var compile_1 = require_compile();
    var codegen_2 = require_codegen();
    var resolve_1 = require_resolve();
    var dataType_1 = require_dataType();
    var util_1 = require_util4();
    var $dataRefSchema = require_data();
    var uri_1 = require_uri();
    var defaultRegExp = (str, flags) => new RegExp(str, flags);
    defaultRegExp.code = 'new RegExp';
    var META_IGNORE_OPTIONS = [
      'removeAdditional',
      'useDefaults',
      'coerceTypes',
    ];
    var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
      'validate',
      'serialize',
      'parse',
      'wrapper',
      'root',
      'schema',
      'keyword',
      'pattern',
      'formats',
      'validate$data',
      'func',
      'obj',
      'Error',
    ]);
    var removedOptions = {
      errorDataPath: '',
      format: '`validateFormats: false` can be used instead.',
      nullable: '"nullable" keyword is supported by default.',
      jsonPointers: 'Deprecated jsPropertySyntax can be used instead.',
      extendRefs: 'Deprecated ignoreKeywordsWithRef can be used instead.',
      missingRefs:
        'Pass empty schema with $id that should be ignored to ajv.addSchema.',
      processCode:
        'Use option `code: {process: (code, schemaEnv: object) => string}`',
      sourceCode: 'Use option `code: {source: true}`',
      strictDefaults: 'It is default now, see option `strict`.',
      strictKeywords: 'It is default now, see option `strict`.',
      uniqueItems: '"uniqueItems" keyword is always validated.',
      unknownFormats:
        'Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).',
      cache: 'Map is used as cache, schema object as key.',
      serialize: 'Map is used as cache, schema object as key.',
      ajvErrors: 'It is default now.',
    };
    var deprecatedOptions = {
      ignoreKeywordsWithRef: '',
      jsPropertySyntax: '',
      unicode:
        '"minLength"/"maxLength" account for unicode characters by default.',
    };
    var MAX_EXPRESSION = 200;
    function requiredOptions(o) {
      var _a,
        _b,
        _c,
        _d,
        _e,
        _f,
        _g,
        _h,
        _j,
        _k,
        _l,
        _m,
        _o,
        _p,
        _q,
        _r,
        _s,
        _t,
        _u,
        _v,
        _w,
        _x,
        _y,
        _z,
        _0;
      const s = o.strict;
      const _optz =
        (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
      const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
      const regExp =
        (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !==
          null && _c !== void 0
          ? _c
          : defaultRegExp;
      const uriResolver =
        (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
      return {
        strictSchema:
          (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !==
            null && _f !== void 0
            ? _f
            : true,
        strictNumbers:
          (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !==
            null && _h !== void 0
            ? _h
            : true,
        strictTypes:
          (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !==
            null && _k !== void 0
            ? _k
            : 'log',
        strictTuples:
          (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !==
            null && _m !== void 0
            ? _m
            : 'log',
        strictRequired:
          (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !==
            null && _p !== void 0
            ? _p
            : false,
        code: o.code ? { ...o.code, optimize, regExp } : { optimize, regExp },
        loopRequired:
          (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
        loopEnum:
          (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : '$id',
        addUsedSchema:
          (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
        validateSchema:
          (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
        validateFormats:
          (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
        unicodeRegExp:
          (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
        uriResolver,
      };
    }
    var Ajv2 = class {
      constructor(opts = {}) {
        this.schemas = {};
        this.refs = {};
        this.formats = {};
        this._compilations = /* @__PURE__ */ new Set();
        this._loading = {};
        this._cache = /* @__PURE__ */ new Map();
        opts = this.opts = { ...opts, ...requiredOptions(opts) };
        const { es5, lines } = this.opts.code;
        this.scope = new codegen_2.ValueScope({
          scope: {},
          prefixes: EXT_SCOPE_NAMES,
          es5,
          lines,
        });
        this.logger = getLogger(opts.logger);
        const formatOpt = opts.validateFormats;
        opts.validateFormats = false;
        this.RULES = (0, rules_1.getRules)();
        checkOptions.call(this, removedOptions, opts, 'NOT SUPPORTED');
        checkOptions.call(this, deprecatedOptions, opts, 'DEPRECATED', 'warn');
        this._metaOpts = getMetaSchemaOptions.call(this);
        if (opts.formats) addInitialFormats.call(this);
        this._addVocabularies();
        this._addDefaultMetaSchema();
        if (opts.keywords) addInitialKeywords.call(this, opts.keywords);
        if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
        addInitialSchemas.call(this);
        opts.validateFormats = formatOpt;
      }
      _addVocabularies() {
        this.addKeyword('$async');
      }
      _addDefaultMetaSchema() {
        const { $data, meta, schemaId } = this.opts;
        let _dataRefSchema = $dataRefSchema;
        if (schemaId === 'id') {
          _dataRefSchema = { ...$dataRefSchema };
          _dataRefSchema.id = _dataRefSchema.$id;
          delete _dataRefSchema.$id;
        }
        if (meta && $data)
          this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
      }
      defaultMeta() {
        const { meta, schemaId } = this.opts;
        return (this.opts.defaultMeta =
          typeof meta == 'object' ? meta[schemaId] || meta : void 0);
      }
      validate(schemaKeyRef, data) {
        let v;
        if (typeof schemaKeyRef == 'string') {
          v = this.getSchema(schemaKeyRef);
          if (!v)
            throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
        } else {
          v = this.compile(schemaKeyRef);
        }
        const valid = v(data);
        if (!('$async' in v)) this.errors = v.errors;
        return valid;
      }
      compile(schema, _meta) {
        const sch = this._addSchema(schema, _meta);
        return sch.validate || this._compileSchemaEnv(sch);
      }
      compileAsync(schema, meta) {
        if (typeof this.opts.loadSchema != 'function') {
          throw new Error('options.loadSchema should be a function');
        }
        const { loadSchema } = this.opts;
        return runCompileAsync.call(this, schema, meta);
        async function runCompileAsync(_schema, _meta) {
          await loadMetaSchema.call(this, _schema.$schema);
          const sch = this._addSchema(_schema, _meta);
          return sch.validate || _compileAsync.call(this, sch);
        }
        async function loadMetaSchema($ref) {
          if ($ref && !this.getSchema($ref)) {
            await runCompileAsync.call(this, { $ref }, true);
          }
        }
        async function _compileAsync(sch) {
          try {
            return this._compileSchemaEnv(sch);
          } catch (e) {
            if (!(e instanceof ref_error_1.default)) throw e;
            checkLoaded.call(this, e);
            await loadMissingSchema.call(this, e.missingSchema);
            return _compileAsync.call(this, sch);
          }
        }
        function checkLoaded({ missingSchema: ref, missingRef }) {
          if (this.refs[ref]) {
            throw new Error(
              `AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`
            );
          }
        }
        async function loadMissingSchema(ref) {
          const _schema = await _loadSchema.call(this, ref);
          if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema);
          if (!this.refs[ref]) this.addSchema(_schema, ref, meta);
        }
        async function _loadSchema(ref) {
          const p = this._loading[ref];
          if (p) return p;
          try {
            return await (this._loading[ref] = loadSchema(ref));
          } finally {
            delete this._loading[ref];
          }
        }
      }
      // Adds schema to the instance
      addSchema(
        schema,
        key,
        _meta,
        _validateSchema = this.opts.validateSchema
      ) {
        if (Array.isArray(schema)) {
          for (const sch of schema)
            this.addSchema(sch, void 0, _meta, _validateSchema);
          return this;
        }
        let id;
        if (typeof schema === 'object') {
          const { schemaId } = this.opts;
          id = schema[schemaId];
          if (id !== void 0 && typeof id != 'string') {
            throw new Error(`schema ${schemaId} must be string`);
          }
        }
        key = (0, resolve_1.normalizeId)(key || id);
        this._checkUnique(key);
        this.schemas[key] = this._addSchema(
          schema,
          _meta,
          key,
          _validateSchema,
          true
        );
        return this;
      }
      // Add schema that will be used to validate other schemas
      // options in META_IGNORE_OPTIONS are alway set to false
      addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema) {
        this.addSchema(schema, key, true, _validateSchema);
        return this;
      }
      //  Validate schema against its meta-schema
      validateSchema(schema, throwOrLogError) {
        if (typeof schema == 'boolean') return true;
        let $schema;
        $schema = schema.$schema;
        if ($schema !== void 0 && typeof $schema != 'string') {
          throw new Error('$schema must be a string');
        }
        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
        if (!$schema) {
          this.logger.warn('meta-schema not available');
          this.errors = null;
          return true;
        }
        const valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
          const message = 'schema is invalid: ' + this.errorsText();
          if (this.opts.validateSchema === 'log') this.logger.error(message);
          else throw new Error(message);
        }
        return valid;
      }
      // Get compiled schema by `key` or `ref`.
      // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
      getSchema(keyRef) {
        let sch;
        while (typeof (sch = getSchEnv.call(this, keyRef)) == 'string')
          keyRef = sch;
        if (sch === void 0) {
          const { schemaId } = this.opts;
          const root = new compile_1.SchemaEnv({ schema: {}, schemaId });
          sch = compile_1.resolveSchema.call(this, root, keyRef);
          if (!sch) return;
          this.refs[keyRef] = sch;
        }
        return sch.validate || this._compileSchemaEnv(sch);
      }
      // Remove cached schema(s).
      // If no parameter is passed all schemas but meta-schemas are removed.
      // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
      // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
      removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
          this._removeAllSchemas(this.schemas, schemaKeyRef);
          this._removeAllSchemas(this.refs, schemaKeyRef);
          return this;
        }
        switch (typeof schemaKeyRef) {
          case 'undefined':
            this._removeAllSchemas(this.schemas);
            this._removeAllSchemas(this.refs);
            this._cache.clear();
            return this;
          case 'string': {
            const sch = getSchEnv.call(this, schemaKeyRef);
            if (typeof sch == 'object') this._cache.delete(sch.schema);
            delete this.schemas[schemaKeyRef];
            delete this.refs[schemaKeyRef];
            return this;
          }
          case 'object': {
            const cacheKey = schemaKeyRef;
            this._cache.delete(cacheKey);
            let id = schemaKeyRef[this.opts.schemaId];
            if (id) {
              id = (0, resolve_1.normalizeId)(id);
              delete this.schemas[id];
              delete this.refs[id];
            }
            return this;
          }
          default:
            throw new Error('ajv.removeSchema: invalid parameter');
        }
      }
      // add "vocabulary" - a collection of keywords
      addVocabulary(definitions) {
        for (const def of definitions) this.addKeyword(def);
        return this;
      }
      addKeyword(kwdOrDef, def) {
        let keyword;
        if (typeof kwdOrDef == 'string') {
          keyword = kwdOrDef;
          if (typeof def == 'object') {
            this.logger.warn(
              'these parameters are deprecated, see docs for addKeyword'
            );
            def.keyword = keyword;
          }
        } else if (typeof kwdOrDef == 'object' && def === void 0) {
          def = kwdOrDef;
          keyword = def.keyword;
          if (Array.isArray(keyword) && !keyword.length) {
            throw new Error(
              'addKeywords: keyword must be string or non-empty array'
            );
          }
        } else {
          throw new Error('invalid addKeywords parameters');
        }
        checkKeyword.call(this, keyword, def);
        if (!def) {
          (0, util_1.eachItem)(keyword, (kwd) => addRule.call(this, kwd));
          return this;
        }
        keywordMetaschema.call(this, def);
        const definition = {
          ...def,
          type: (0, dataType_1.getJSONTypes)(def.type),
          schemaType: (0, dataType_1.getJSONTypes)(def.schemaType),
        };
        (0, util_1.eachItem)(
          keyword,
          definition.type.length === 0
            ? (k) => addRule.call(this, k, definition)
            : (k) =>
                definition.type.forEach((t) =>
                  addRule.call(this, k, definition, t)
                )
        );
        return this;
      }
      getKeyword(keyword) {
        const rule = this.RULES.all[keyword];
        return typeof rule == 'object' ? rule.definition : !!rule;
      }
      // Remove keyword
      removeKeyword(keyword) {
        const { RULES } = this;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        for (const group of RULES.rules) {
          const i = group.rules.findIndex((rule) => rule.keyword === keyword);
          if (i >= 0) group.rules.splice(i, 1);
        }
        return this;
      }
      // Add format
      addFormat(name, format) {
        if (typeof format == 'string') format = new RegExp(format);
        this.formats[name] = format;
        return this;
      }
      errorsText(
        errors = this.errors,
        { separator = ', ', dataVar = 'data' } = {}
      ) {
        if (!errors || errors.length === 0) return 'No errors';
        return errors
          .map((e) => `${dataVar}${e.instancePath} ${e.message}`)
          .reduce((text, msg) => text + separator + msg);
      }
      $dataMetaSchema(metaSchema, keywordsJsonPointers) {
        const rules = this.RULES.all;
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        for (const jsonPointer of keywordsJsonPointers) {
          const segments = jsonPointer.split('/').slice(1);
          let keywords = metaSchema;
          for (const seg of segments) keywords = keywords[seg];
          for (const key in rules) {
            const rule = rules[key];
            if (typeof rule != 'object') continue;
            const { $data } = rule.definition;
            const schema = keywords[key];
            if ($data && schema) keywords[key] = schemaOrData(schema);
          }
        }
        return metaSchema;
      }
      _removeAllSchemas(schemas, regex) {
        for (const keyRef in schemas) {
          const sch = schemas[keyRef];
          if (!regex || regex.test(keyRef)) {
            if (typeof sch == 'string') {
              delete schemas[keyRef];
            } else if (sch && !sch.meta) {
              this._cache.delete(sch.schema);
              delete schemas[keyRef];
            }
          }
        }
      }
      _addSchema(
        schema,
        meta,
        baseId,
        validateSchema = this.opts.validateSchema,
        addSchema = this.opts.addUsedSchema
      ) {
        let id;
        const { schemaId } = this.opts;
        if (typeof schema == 'object') {
          id = schema[schemaId];
        } else {
          if (this.opts.jtd) throw new Error('schema must be object');
          else if (typeof schema != 'boolean')
            throw new Error('schema must be object or boolean');
        }
        let sch = this._cache.get(schema);
        if (sch !== void 0) return sch;
        baseId = (0, resolve_1.normalizeId)(id || baseId);
        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
        sch = new compile_1.SchemaEnv({
          schema,
          schemaId,
          meta,
          baseId,
          localRefs,
        });
        this._cache.set(sch.schema, sch);
        if (addSchema && !baseId.startsWith('#')) {
          if (baseId) this._checkUnique(baseId);
          this.refs[baseId] = sch;
        }
        if (validateSchema) this.validateSchema(schema, true);
        return sch;
      }
      _checkUnique(id) {
        if (this.schemas[id] || this.refs[id]) {
          throw new Error(`schema with key or id "${id}" already exists`);
        }
      }
      _compileSchemaEnv(sch) {
        if (sch.meta) this._compileMetaSchema(sch);
        else compile_1.compileSchema.call(this, sch);
        if (!sch.validate) throw new Error('ajv implementation error');
        return sch.validate;
      }
      _compileMetaSchema(sch) {
        const currentOpts = this.opts;
        this.opts = this._metaOpts;
        try {
          compile_1.compileSchema.call(this, sch);
        } finally {
          this.opts = currentOpts;
        }
      }
    };
    exports.default = Ajv2;
    Ajv2.ValidationError = validation_error_1.default;
    Ajv2.MissingRefError = ref_error_1.default;
    function checkOptions(checkOpts, options, msg, log = 'error') {
      for (const key in checkOpts) {
        const opt = key;
        if (opt in options)
          this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
      }
    }
    function getSchEnv(keyRef) {
      keyRef = (0, resolve_1.normalizeId)(keyRef);
      return this.schemas[keyRef] || this.refs[keyRef];
    }
    function addInitialSchemas() {
      const optsSchemas = this.opts.schemas;
      if (!optsSchemas) return;
      if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);
      else for (const key in optsSchemas) this.addSchema(optsSchemas[key], key);
    }
    function addInitialFormats() {
      for (const name in this.opts.formats) {
        const format = this.opts.formats[name];
        if (format) this.addFormat(name, format);
      }
    }
    function addInitialKeywords(defs) {
      if (Array.isArray(defs)) {
        this.addVocabulary(defs);
        return;
      }
      this.logger.warn('keywords option as map is deprecated, pass array');
      for (const keyword in defs) {
        const def = defs[keyword];
        if (!def.keyword) def.keyword = keyword;
        this.addKeyword(def);
      }
    }
    function getMetaSchemaOptions() {
      const metaOpts = { ...this.opts };
      for (const opt of META_IGNORE_OPTIONS) delete metaOpts[opt];
      return metaOpts;
    }
    var noLogs = { log() {}, warn() {}, error() {} };
    function getLogger(logger) {
      if (logger === false) return noLogs;
      if (logger === void 0) return console;
      if (logger.log && logger.warn && logger.error) return logger;
      throw new Error('logger must implement log, warn and error methods');
    }
    var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
    function checkKeyword(keyword, def) {
      const { RULES } = this;
      (0, util_1.eachItem)(keyword, (kwd) => {
        if (RULES.keywords[kwd])
          throw new Error(`Keyword ${kwd} is already defined`);
        if (!KEYWORD_NAME.test(kwd))
          throw new Error(`Keyword ${kwd} has invalid name`);
      });
      if (!def) return;
      if (def.$data && !('code' in def || 'validate' in def)) {
        throw new Error(
          '$data keyword must have "code" or "validate" function'
        );
      }
    }
    function addRule(keyword, definition, dataType) {
      var _a;
      const post =
        definition === null || definition === void 0 ? void 0 : definition.post;
      if (dataType && post)
        throw new Error('keyword with "post" flag cannot have "type"');
      const { RULES } = this;
      let ruleGroup = post
        ? RULES.post
        : RULES.rules.find(({ type: t }) => t === dataType);
      if (!ruleGroup) {
        ruleGroup = { type: dataType, rules: [] };
        RULES.rules.push(ruleGroup);
      }
      RULES.keywords[keyword] = true;
      if (!definition) return;
      const rule = {
        keyword,
        definition: {
          ...definition,
          type: (0, dataType_1.getJSONTypes)(definition.type),
          schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType),
        },
      };
      if (definition.before)
        addBeforeRule.call(this, ruleGroup, rule, definition.before);
      else ruleGroup.rules.push(rule);
      RULES.all[keyword] = rule;
      (_a = definition.implements) === null || _a === void 0
        ? void 0
        : _a.forEach((kwd) => this.addKeyword(kwd));
    }
    function addBeforeRule(ruleGroup, rule, before) {
      const i = ruleGroup.rules.findIndex((_rule) => _rule.keyword === before);
      if (i >= 0) {
        ruleGroup.rules.splice(i, 0, rule);
      } else {
        ruleGroup.rules.push(rule);
        this.logger.warn(`rule ${before} is not defined`);
      }
    }
    function keywordMetaschema(def) {
      let { metaSchema } = def;
      if (metaSchema === void 0) return;
      if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);
      def.validateSchema = this.compile(metaSchema, true);
    }
    var $dataRef = {
      $ref: 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#',
    };
    function schemaOrData(schema) {
      return { anyOf: [schema, $dataRef] };
    }
  },
});

// node_modules/ajv/dist/vocabularies/core/id.js
var require_id = __commonJS({
  'node_modules/ajv/dist/vocabularies/core/id.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var def = {
      keyword: 'id',
      code() {
        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/core/ref.js
var require_ref = __commonJS({
  'node_modules/ajv/dist/vocabularies/core/ref.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.callRef = exports.getValidate = void 0;
    var ref_error_1 = require_ref_error();
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var compile_1 = require_compile();
    var util_1 = require_util4();
    var def = {
      keyword: '$ref',
      schemaType: 'string',
      code(cxt) {
        const { gen, schema: $ref, it } = cxt;
        const { baseId, schemaEnv: env, validateName, opts, self: self2 } = it;
        const { root } = env;
        if (($ref === '#' || $ref === '#/') && baseId === root.baseId)
          return callRootRef();
        const schOrEnv = compile_1.resolveRef.call(self2, root, baseId, $ref);
        if (schOrEnv === void 0)
          throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
        if (schOrEnv instanceof compile_1.SchemaEnv)
          return callValidate(schOrEnv);
        return inlineRefSchema(schOrEnv);
        function callRootRef() {
          if (env === root) return callRef(cxt, validateName, env, env.$async);
          const rootName = gen.scopeValue('root', { ref: root });
          return callRef(
            cxt,
            (0, codegen_1._)`${rootName}.validate`,
            root,
            root.$async
          );
        }
        function callValidate(sch) {
          const v = getValidate(cxt, sch);
          callRef(cxt, v, sch, sch.$async);
        }
        function inlineRefSchema(sch) {
          const schName = gen.scopeValue(
            'schema',
            opts.code.source === true
              ? { ref: sch, code: (0, codegen_1.stringify)(sch) }
              : { ref: sch }
          );
          const valid = gen.name('valid');
          const schCxt = cxt.subschema(
            {
              schema: sch,
              dataTypes: [],
              schemaPath: codegen_1.nil,
              topSchemaRef: schName,
              errSchemaPath: $ref,
            },
            valid
          );
          cxt.mergeEvaluated(schCxt);
          cxt.ok(valid);
        }
      },
    };
    function getValidate(cxt, sch) {
      const { gen } = cxt;
      return sch.validate
        ? gen.scopeValue('validate', { ref: sch.validate })
        : (0, codegen_1._)`${gen.scopeValue('wrapper', { ref: sch })}.validate`;
    }
    exports.getValidate = getValidate;
    function callRef(cxt, v, sch, $async) {
      const { gen, it } = cxt;
      const { allErrors, schemaEnv: env, opts } = it;
      const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
      if ($async) callAsyncRef();
      else callSyncRef();
      function callAsyncRef() {
        if (!env.$async)
          throw new Error('async schema referenced by sync schema');
        const valid = gen.let('valid');
        gen.try(
          () => {
            gen.code(
              (0, codegen_1._)`await ${(0, code_1.callValidateCode)(
                cxt,
                v,
                passCxt
              )}`
            );
            addEvaluatedFrom(v);
            if (!allErrors) gen.assign(valid, true);
          },
          (e) => {
            gen.if(
              (0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`,
              () => gen.throw(e)
            );
            addErrorsFrom(e);
            if (!allErrors) gen.assign(valid, false);
          }
        );
        cxt.ok(valid);
      }
      function callSyncRef() {
        cxt.result(
          (0, code_1.callValidateCode)(cxt, v, passCxt),
          () => addEvaluatedFrom(v),
          () => addErrorsFrom(v)
        );
      }
      function addErrorsFrom(source) {
        const errs = (0, codegen_1._)`${source}.errors`;
        gen.assign(
          names_1.default.vErrors,
          (0,
          codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`
        );
        gen.assign(
          names_1.default.errors,
          (0, codegen_1._)`${names_1.default.vErrors}.length`
        );
      }
      function addEvaluatedFrom(source) {
        var _a;
        if (!it.opts.unevaluated) return;
        const schEvaluated =
          (_a = sch === null || sch === void 0 ? void 0 : sch.validate) ===
            null || _a === void 0
            ? void 0
            : _a.evaluated;
        if (it.props !== true) {
          if (schEvaluated && !schEvaluated.dynamicProps) {
            if (schEvaluated.props !== void 0) {
              it.props = util_1.mergeEvaluated.props(
                gen,
                schEvaluated.props,
                it.props
              );
            }
          } else {
            const props = gen.var(
              'props',
              (0, codegen_1._)`${source}.evaluated.props`
            );
            it.props = util_1.mergeEvaluated.props(
              gen,
              props,
              it.props,
              codegen_1.Name
            );
          }
        }
        if (it.items !== true) {
          if (schEvaluated && !schEvaluated.dynamicItems) {
            if (schEvaluated.items !== void 0) {
              it.items = util_1.mergeEvaluated.items(
                gen,
                schEvaluated.items,
                it.items
              );
            }
          } else {
            const items = gen.var(
              'items',
              (0, codegen_1._)`${source}.evaluated.items`
            );
            it.items = util_1.mergeEvaluated.items(
              gen,
              items,
              it.items,
              codegen_1.Name
            );
          }
        }
      }
    }
    exports.callRef = callRef;
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/core/index.js
var require_core2 = __commonJS({
  'node_modules/ajv/dist/vocabularies/core/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var id_1 = require_id();
    var ref_1 = require_ref();
    var core = [
      '$schema',
      '$id',
      '$defs',
      '$vocabulary',
      { keyword: '$comment' },
      'definitions',
      id_1.default,
      ref_1.default,
    ];
    exports.default = core;
  },
});

// node_modules/ajv/dist/vocabularies/validation/limitNumber.js
var require_limitNumber = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/limitNumber.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var ops = codegen_1.operators;
    var KWDs = {
      maximum: { okStr: '<=', ok: ops.LTE, fail: ops.GT },
      minimum: { okStr: '>=', ok: ops.GTE, fail: ops.LT },
      exclusiveMaximum: { okStr: '<', ok: ops.LT, fail: ops.GTE },
      exclusiveMinimum: { okStr: '>', ok: ops.GT, fail: ops.LTE },
    };
    var error = {
      message: ({ keyword, schemaCode }) =>
        (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
      params: ({ keyword, schemaCode }) =>
        (0,
        codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`,
    };
    var def = {
      keyword: Object.keys(KWDs),
      type: 'number',
      schemaType: 'number',
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        cxt.fail$data(
          (0,
          codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`
        );
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/validation/multipleOf.js
var require_multipleOf = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/multipleOf.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) =>
        (0, codegen_1.str)`must be multiple of ${schemaCode}`,
      params: ({ schemaCode }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`,
    };
    var def = {
      keyword: 'multipleOf',
      type: 'number',
      schemaType: 'number',
      $data: true,
      error,
      code(cxt) {
        const { gen, data, schemaCode, it } = cxt;
        const prec = it.opts.multipleOfPrecision;
        const res = gen.let('res');
        const invalid = prec
          ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`
          : (0, codegen_1._)`${res} !== parseInt(${res})`;
        cxt.fail$data(
          (0,
          codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`
        );
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/runtime/ucs2length.js
var require_ucs2length = __commonJS({
  'node_modules/ajv/dist/runtime/ucs2length.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function ucs2length(str) {
      const len = str.length;
      let length = 0;
      let pos = 0;
      let value;
      while (pos < len) {
        length++;
        value = str.charCodeAt(pos++);
        if (value >= 55296 && value <= 56319 && pos < len) {
          value = str.charCodeAt(pos);
          if ((value & 64512) === 56320) pos++;
        }
      }
      return length;
    }
    exports.default = ucs2length;
    ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
  },
});

// node_modules/ajv/dist/vocabularies/validation/limitLength.js
var require_limitLength = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/limitLength.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var ucs2length_1 = require_ucs2length();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === 'maxLength' ? 'more' : 'fewer';
        return (0,
        codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`,
    };
    var def = {
      keyword: ['maxLength', 'minLength'],
      type: 'string',
      schemaType: 'number',
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode, it } = cxt;
        const op =
          keyword === 'maxLength'
            ? codegen_1.operators.GT
            : codegen_1.operators.LT;
        const len =
          it.opts.unicode === false
            ? (0, codegen_1._)`${data}.length`
            : (0, codegen_1._)`${(0, util_1.useFunc)(
                cxt.gen,
                ucs2length_1.default
              )}(${data})`;
        cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/validation/pattern.js
var require_pattern = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/pattern.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) =>
        (0, codegen_1.str)`must match pattern "${schemaCode}"`,
      params: ({ schemaCode }) => (0, codegen_1._)`{pattern: ${schemaCode}}`,
    };
    var def = {
      keyword: 'pattern',
      type: 'string',
      schemaType: 'string',
      $data: true,
      error,
      code(cxt) {
        const { data, $data, schema, schemaCode, it } = cxt;
        const u = it.opts.unicodeRegExp ? 'u' : '';
        const regExp = $data
          ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))`
          : (0, code_1.usePattern)(cxt, schema);
        cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/validation/limitProperties.js
var require_limitProperties = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/limitProperties.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === 'maxProperties' ? 'more' : 'fewer';
        return (0,
        codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`,
    };
    var def = {
      keyword: ['maxProperties', 'minProperties'],
      type: 'object',
      schemaType: 'number',
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op =
          keyword === 'maxProperties'
            ? codegen_1.operators.GT
            : codegen_1.operators.LT;
        cxt.fail$data(
          (0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`
        );
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/validation/required.js
var require_required = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/required.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var error = {
      message: ({ params: { missingProperty } }) =>
        (0, codegen_1.str)`must have required property '${missingProperty}'`,
      params: ({ params: { missingProperty } }) =>
        (0, codegen_1._)`{missingProperty: ${missingProperty}}`,
    };
    var def = {
      keyword: 'required',
      type: 'object',
      schemaType: 'array',
      $data: true,
      error,
      code(cxt) {
        const { gen, schema, schemaCode, data, $data, it } = cxt;
        const { opts } = it;
        if (!$data && schema.length === 0) return;
        const useLoop = schema.length >= opts.loopRequired;
        if (it.allErrors) allErrorsMode();
        else exitOnErrorMode();
        if (opts.strictRequired) {
          const props = cxt.parentSchema.properties;
          const { definedProperties } = cxt.it;
          for (const requiredKey of schema) {
            if (
              (props === null || props === void 0
                ? void 0
                : props[requiredKey]) === void 0 &&
              !definedProperties.has(requiredKey)
            ) {
              const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
              const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
              (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
            }
          }
        }
        function allErrorsMode() {
          if (useLoop || $data) {
            cxt.block$data(codegen_1.nil, loopAllRequired);
          } else {
            for (const prop of schema) {
              (0, code_1.checkReportMissingProp)(cxt, prop);
            }
          }
        }
        function exitOnErrorMode() {
          const missing = gen.let('missing');
          if (useLoop || $data) {
            const valid = gen.let('valid', true);
            cxt.block$data(valid, () => loopUntilMissing(missing, valid));
            cxt.ok(valid);
          } else {
            gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
          }
        }
        function loopAllRequired() {
          gen.forOf('prop', schemaCode, (prop) => {
            cxt.setParams({ missingProperty: prop });
            gen.if(
              (0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties),
              () => cxt.error()
            );
          });
        }
        function loopUntilMissing(missing, valid) {
          cxt.setParams({ missingProperty: missing });
          gen.forOf(
            missing,
            schemaCode,
            () => {
              gen.assign(
                valid,
                (0, code_1.propertyInData)(
                  gen,
                  data,
                  missing,
                  opts.ownProperties
                )
              );
              gen.if((0, codegen_1.not)(valid), () => {
                cxt.error();
                gen.break();
              });
            },
            codegen_1.nil
          );
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/validation/limitItems.js
var require_limitItems = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/limitItems.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message({ keyword, schemaCode }) {
        const comp = keyword === 'maxItems' ? 'more' : 'fewer';
        return (0,
        codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
      },
      params: ({ schemaCode }) => (0, codegen_1._)`{limit: ${schemaCode}}`,
    };
    var def = {
      keyword: ['maxItems', 'minItems'],
      type: 'array',
      schemaType: 'number',
      $data: true,
      error,
      code(cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op =
          keyword === 'maxItems'
            ? codegen_1.operators.GT
            : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/runtime/equal.js
var require_equal = __commonJS({
  'node_modules/ajv/dist/runtime/equal.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var equal = require_fast_deep_equal();
    equal.code = 'require("ajv/dist/runtime/equal").default';
    exports.default = equal;
  },
});

// node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
var require_uniqueItems = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/uniqueItems.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var dataType_1 = require_dataType();
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var equal_1 = require_equal();
    var error = {
      message: ({ params: { i, j } }) =>
        (0,
        codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
      params: ({ params: { i, j } }) => (0, codegen_1._)`{i: ${i}, j: ${j}}`,
    };
    var def = {
      keyword: 'uniqueItems',
      type: 'array',
      schemaType: 'boolean',
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
        if (!$data && !schema) return;
        const valid = gen.let('valid');
        const itemTypes = parentSchema.items
          ? (0, dataType_1.getSchemaTypes)(parentSchema.items)
          : [];
        cxt.block$data(
          valid,
          validateUniqueItems,
          (0, codegen_1._)`${schemaCode} === false`
        );
        cxt.ok(valid);
        function validateUniqueItems() {
          const i = gen.let('i', (0, codegen_1._)`${data}.length`);
          const j = gen.let('j');
          cxt.setParams({ i, j });
          gen.assign(valid, true);
          gen.if((0, codegen_1._)`${i} > 1`, () =>
            (canOptimize() ? loopN : loopN2)(i, j)
          );
        }
        function canOptimize() {
          return (
            itemTypes.length > 0 &&
            !itemTypes.some((t) => t === 'object' || t === 'array')
          );
        }
        function loopN(i, j) {
          const item = gen.name('item');
          const wrongType = (0, dataType_1.checkDataTypes)(
            itemTypes,
            item,
            it.opts.strictNumbers,
            dataType_1.DataType.Wrong
          );
          const indices = gen.const('indices', (0, codegen_1._)`{}`);
          gen.for((0, codegen_1._)`;${i}--;`, () => {
            gen.let(item, (0, codegen_1._)`${data}[${i}]`);
            gen.if(wrongType, (0, codegen_1._)`continue`);
            if (itemTypes.length > 1)
              gen.if(
                (0, codegen_1._)`typeof ${item} == "string"`,
                (0, codegen_1._)`${item} += "_"`
              );
            gen
              .if(
                (0, codegen_1._)`typeof ${indices}[${item}] == "number"`,
                () => {
                  gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
                  cxt.error();
                  gen.assign(valid, false).break();
                }
              )
              .code((0, codegen_1._)`${indices}[${item}] = ${i}`);
          });
        }
        function loopN2(i, j) {
          const eql = (0, util_1.useFunc)(gen, equal_1.default);
          const outer = gen.name('outer');
          gen.label(outer).for((0, codegen_1._)`;${i}--;`, () =>
            gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () =>
              gen.if(
                (0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`,
                () => {
                  cxt.error();
                  gen.assign(valid, false).break(outer);
                }
              )
            )
          );
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/validation/const.js
var require_const = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/const.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var equal_1 = require_equal();
    var error = {
      message: 'must be equal to constant',
      params: ({ schemaCode }) =>
        (0, codegen_1._)`{allowedValue: ${schemaCode}}`,
    };
    var def = {
      keyword: 'const',
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schemaCode, schema } = cxt;
        if ($data || (schema && typeof schema == 'object')) {
          cxt.fail$data(
            (0, codegen_1._)`!${(0, util_1.useFunc)(
              gen,
              equal_1.default
            )}(${data}, ${schemaCode})`
          );
        } else {
          cxt.fail((0, codegen_1._)`${schema} !== ${data}`);
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/validation/enum.js
var require_enum = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/enum.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var equal_1 = require_equal();
    var error = {
      message: 'must be equal to one of the allowed values',
      params: ({ schemaCode }) =>
        (0, codegen_1._)`{allowedValues: ${schemaCode}}`,
    };
    var def = {
      keyword: 'enum',
      schemaType: 'array',
      $data: true,
      error,
      code(cxt) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        if (!$data && schema.length === 0)
          throw new Error('enum must have non-empty array');
        const useLoop = schema.length >= it.opts.loopEnum;
        let eql;
        const getEql = () =>
          eql !== null && eql !== void 0
            ? eql
            : (eql = (0, util_1.useFunc)(gen, equal_1.default));
        let valid;
        if (useLoop || $data) {
          valid = gen.let('valid');
          cxt.block$data(valid, loopEnum);
        } else {
          if (!Array.isArray(schema))
            throw new Error('ajv implementation error');
          const vSchema = gen.const('vSchema', schemaCode);
          valid = (0, codegen_1.or)(
            ...schema.map((_x, i) => equalCode(vSchema, i))
          );
        }
        cxt.pass(valid);
        function loopEnum() {
          gen.assign(valid, false);
          gen.forOf('v', schemaCode, (v) =>
            gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, () =>
              gen.assign(valid, true).break()
            )
          );
        }
        function equalCode(vSchema, i) {
          const sch = schema[i];
          return typeof sch === 'object' && sch !== null
            ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])`
            : (0, codegen_1._)`${data} === ${sch}`;
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/validation/index.js
var require_validation = __commonJS({
  'node_modules/ajv/dist/vocabularies/validation/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var limitNumber_1 = require_limitNumber();
    var multipleOf_1 = require_multipleOf();
    var limitLength_1 = require_limitLength();
    var pattern_1 = require_pattern();
    var limitProperties_1 = require_limitProperties();
    var required_1 = require_required();
    var limitItems_1 = require_limitItems();
    var uniqueItems_1 = require_uniqueItems();
    var const_1 = require_const();
    var enum_1 = require_enum();
    var validation = [
      // number
      limitNumber_1.default,
      multipleOf_1.default,
      // string
      limitLength_1.default,
      pattern_1.default,
      // object
      limitProperties_1.default,
      required_1.default,
      // array
      limitItems_1.default,
      uniqueItems_1.default,
      // any
      { keyword: 'type', schemaType: ['string', 'array'] },
      { keyword: 'nullable', schemaType: 'boolean' },
      const_1.default,
      enum_1.default,
    ];
    exports.default = validation;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
var require_additionalItems = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/additionalItems.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateAdditionalItems = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var error = {
      message: ({ params: { len } }) =>
        (0, codegen_1.str)`must NOT have more than ${len} items`,
      params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`,
    };
    var def = {
      keyword: 'additionalItems',
      type: 'array',
      schemaType: ['boolean', 'object'],
      before: 'uniqueItems',
      error,
      code(cxt) {
        const { parentSchema, it } = cxt;
        const { items } = parentSchema;
        if (!Array.isArray(items)) {
          (0, util_1.checkStrictMode)(
            it,
            '"additionalItems" is ignored when "items" is not an array of schemas'
          );
          return;
        }
        validateAdditionalItems(cxt, items);
      },
    };
    function validateAdditionalItems(cxt, items) {
      const { gen, schema, data, keyword, it } = cxt;
      it.items = true;
      const len = gen.const('len', (0, codegen_1._)`${data}.length`);
      if (schema === false) {
        cxt.setParams({ len: items.length });
        cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
      } else if (
        typeof schema == 'object' &&
        !(0, util_1.alwaysValidSchema)(it, schema)
      ) {
        const valid = gen.var(
          'valid',
          (0, codegen_1._)`${len} <= ${items.length}`
        );
        gen.if((0, codegen_1.not)(valid), () => validateItems(valid));
        cxt.ok(valid);
      }
      function validateItems(valid) {
        gen.forRange('i', items.length, len, (i) => {
          cxt.subschema(
            { keyword, dataProp: i, dataPropType: util_1.Type.Num },
            valid
          );
          if (!it.allErrors)
            gen.if((0, codegen_1.not)(valid), () => gen.break());
        });
      }
    }
    exports.validateAdditionalItems = validateAdditionalItems;
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/items.js
var require_items = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/items.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateTuple = void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var code_1 = require_code2();
    var def = {
      keyword: 'items',
      type: 'array',
      schemaType: ['object', 'array', 'boolean'],
      before: 'uniqueItems',
      code(cxt) {
        const { schema, it } = cxt;
        if (Array.isArray(schema))
          return validateTuple(cxt, 'additionalItems', schema);
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema)) return;
        cxt.ok((0, code_1.validateArray)(cxt));
      },
    };
    function validateTuple(cxt, extraItems, schArr = cxt.schema) {
      const { gen, parentSchema, data, keyword, it } = cxt;
      checkStrictTuple(parentSchema);
      if (it.opts.unevaluated && schArr.length && it.items !== true) {
        it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
      }
      const valid = gen.name('valid');
      const len = gen.const('len', (0, codegen_1._)`${data}.length`);
      schArr.forEach((sch, i) => {
        if ((0, util_1.alwaysValidSchema)(it, sch)) return;
        gen.if((0, codegen_1._)`${len} > ${i}`, () =>
          cxt.subschema(
            {
              keyword,
              schemaProp: i,
              dataProp: i,
            },
            valid
          )
        );
        cxt.ok(valid);
      });
      function checkStrictTuple(sch) {
        const { opts, errSchemaPath } = it;
        const l = schArr.length;
        const fullTuple =
          l === sch.minItems &&
          (l === sch.maxItems || sch[extraItems] === false);
        if (opts.strictTuples && !fullTuple) {
          const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
          (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
        }
      }
    }
    exports.validateTuple = validateTuple;
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
var require_prefixItems = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/prefixItems.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var items_1 = require_items();
    var def = {
      keyword: 'prefixItems',
      type: 'array',
      schemaType: ['array'],
      before: 'uniqueItems',
      code: (cxt) => (0, items_1.validateTuple)(cxt, 'items'),
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/items2020.js
var require_items2020 = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/items2020.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var code_1 = require_code2();
    var additionalItems_1 = require_additionalItems();
    var error = {
      message: ({ params: { len } }) =>
        (0, codegen_1.str)`must NOT have more than ${len} items`,
      params: ({ params: { len } }) => (0, codegen_1._)`{limit: ${len}}`,
    };
    var def = {
      keyword: 'items',
      type: 'array',
      schemaType: ['object', 'boolean'],
      before: 'uniqueItems',
      error,
      code(cxt) {
        const { schema, parentSchema, it } = cxt;
        const { prefixItems } = parentSchema;
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema)) return;
        if (prefixItems)
          (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
        else cxt.ok((0, code_1.validateArray)(cxt));
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/contains.js
var require_contains = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/contains.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var error = {
      message: ({ params: { min, max } }) =>
        max === void 0
          ? (0, codegen_1.str)`must contain at least ${min} valid item(s)`
          : (0,
            codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
      params: ({ params: { min, max } }) =>
        max === void 0
          ? (0, codegen_1._)`{minContains: ${min}}`
          : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`,
    };
    var def = {
      keyword: 'contains',
      type: 'array',
      schemaType: ['object', 'boolean'],
      before: 'uniqueItems',
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        let min;
        let max;
        const { minContains, maxContains } = parentSchema;
        if (it.opts.next) {
          min = minContains === void 0 ? 1 : minContains;
          max = maxContains;
        } else {
          min = 1;
        }
        const len = gen.const('len', (0, codegen_1._)`${data}.length`);
        cxt.setParams({ min, max });
        if (max === void 0 && min === 0) {
          (0, util_1.checkStrictMode)(
            it,
            `"minContains" == 0 without "maxContains": "contains" keyword ignored`
          );
          return;
        }
        if (max !== void 0 && min > max) {
          (0, util_1.checkStrictMode)(
            it,
            `"minContains" > "maxContains" is always invalid`
          );
          cxt.fail();
          return;
        }
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
          let cond = (0, codegen_1._)`${len} >= ${min}`;
          if (max !== void 0)
            cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
          cxt.pass(cond);
          return;
        }
        it.items = true;
        const valid = gen.name('valid');
        if (max === void 0 && min === 1) {
          validateItems(valid, () => gen.if(valid, () => gen.break()));
        } else if (min === 0) {
          gen.let(valid, true);
          if (max !== void 0)
            gen.if(
              (0, codegen_1._)`${data}.length > 0`,
              validateItemsWithCount
            );
        } else {
          gen.let(valid, false);
          validateItemsWithCount();
        }
        cxt.result(valid, () => cxt.reset());
        function validateItemsWithCount() {
          const schValid = gen.name('_valid');
          const count = gen.let('count', 0);
          validateItems(schValid, () =>
            gen.if(schValid, () => checkLimits(count))
          );
        }
        function validateItems(_valid, block) {
          gen.forRange('i', 0, len, (i) => {
            cxt.subschema(
              {
                keyword: 'contains',
                dataProp: i,
                dataPropType: util_1.Type.Num,
                compositeRule: true,
              },
              _valid
            );
            block();
          });
        }
        function checkLimits(count) {
          gen.code((0, codegen_1._)`${count}++`);
          if (max === void 0) {
            gen.if((0, codegen_1._)`${count} >= ${min}`, () =>
              gen.assign(valid, true).break()
            );
          } else {
            gen.if((0, codegen_1._)`${count} > ${max}`, () =>
              gen.assign(valid, false).break()
            );
            if (min === 1) gen.assign(valid, true);
            else
              gen.if((0, codegen_1._)`${count} >= ${min}`, () =>
                gen.assign(valid, true)
              );
          }
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/dependencies.js
var require_dependencies = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/dependencies.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.validateSchemaDeps =
      exports.validatePropertyDeps =
      exports.error =
        void 0;
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var code_1 = require_code2();
    exports.error = {
      message: ({ params: { property, depsCount, deps } }) => {
        const property_ies = depsCount === 1 ? 'property' : 'properties';
        return (0,
        codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
      },
      params: ({
        params: { property, depsCount, deps, missingProperty },
      }) => (0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`,
      // TODO change to reference
    };
    var def = {
      keyword: 'dependencies',
      type: 'object',
      schemaType: 'object',
      error: exports.error,
      code(cxt) {
        const [propDeps, schDeps] = splitDependencies(cxt);
        validatePropertyDeps(cxt, propDeps);
        validateSchemaDeps(cxt, schDeps);
      },
    };
    function splitDependencies({ schema }) {
      const propertyDeps = {};
      const schemaDeps = {};
      for (const key in schema) {
        if (key === '__proto__') continue;
        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
        deps[key] = schema[key];
      }
      return [propertyDeps, schemaDeps];
    }
    function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
      const { gen, data, it } = cxt;
      if (Object.keys(propertyDeps).length === 0) return;
      const missing = gen.let('missing');
      for (const prop in propertyDeps) {
        const deps = propertyDeps[prop];
        if (deps.length === 0) continue;
        const hasProperty = (0, code_1.propertyInData)(
          gen,
          data,
          prop,
          it.opts.ownProperties
        );
        cxt.setParams({
          property: prop,
          depsCount: deps.length,
          deps: deps.join(', '),
        });
        if (it.allErrors) {
          gen.if(hasProperty, () => {
            for (const depProp of deps) {
              (0, code_1.checkReportMissingProp)(cxt, depProp);
            }
          });
        } else {
          gen.if(
            (0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(
              cxt,
              deps,
              missing
            )})`
          );
          (0, code_1.reportMissingProp)(cxt, missing);
          gen.else();
        }
      }
    }
    exports.validatePropertyDeps = validatePropertyDeps;
    function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
      const { gen, data, keyword, it } = cxt;
      const valid = gen.name('valid');
      for (const prop in schemaDeps) {
        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) continue;
        gen.if(
          (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties),
          () => {
            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);
            cxt.mergeValidEvaluated(schCxt, valid);
          },
          () => gen.var(valid, true)
          // TODO var
        );
        cxt.ok(valid);
      }
    }
    exports.validateSchemaDeps = validateSchemaDeps;
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
var require_propertyNames = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/propertyNames.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var error = {
      message: 'property name must be valid',
      params: ({ params }) =>
        (0, codegen_1._)`{propertyName: ${params.propertyName}}`,
    };
    var def = {
      keyword: 'propertyNames',
      type: 'object',
      schemaType: ['object', 'boolean'],
      error,
      code(cxt) {
        const { gen, schema, data, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema)) return;
        const valid = gen.name('valid');
        gen.forIn('key', data, (key) => {
          cxt.setParams({ propertyName: key });
          cxt.subschema(
            {
              keyword: 'propertyNames',
              data: key,
              dataTypes: ['string'],
              propertyName: key,
              compositeRule: true,
            },
            valid
          );
          gen.if((0, codegen_1.not)(valid), () => {
            cxt.error(true);
            if (!it.allErrors) gen.break();
          });
        });
        cxt.ok(valid);
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
var require_additionalProperties = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var names_1 = require_names();
    var util_1 = require_util4();
    var error = {
      message: 'must NOT have additional properties',
      params: ({ params }) =>
        (0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`,
    };
    var def = {
      keyword: 'additionalProperties',
      type: ['object'],
      schemaType: ['boolean', 'object'],
      allowUndefined: true,
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
        if (!errsCount) throw new Error('ajv implementation error');
        const { allErrors, opts } = it;
        it.props = true;
        if (
          opts.removeAdditional !== 'all' &&
          (0, util_1.alwaysValidSchema)(it, schema)
        )
          return;
        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
        const patProps = (0, code_1.allSchemaProperties)(
          parentSchema.patternProperties
        );
        checkAdditionalProperties();
        cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
        function checkAdditionalProperties() {
          gen.forIn('key', data, (key) => {
            if (!props.length && !patProps.length) additionalPropertyCode(key);
            else gen.if(isAdditional(key), () => additionalPropertyCode(key));
          });
        }
        function isAdditional(key) {
          let definedProp;
          if (props.length > 8) {
            const propsSchema = (0, util_1.schemaRefOrVal)(
              it,
              parentSchema.properties,
              'properties'
            );
            definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
          } else if (props.length) {
            definedProp = (0, codegen_1.or)(
              ...props.map((p) => (0, codegen_1._)`${key} === ${p}`)
            );
          } else {
            definedProp = codegen_1.nil;
          }
          if (patProps.length) {
            definedProp = (0, codegen_1.or)(
              definedProp,
              ...patProps.map(
                (p) =>
                  (0, codegen_1._)`${(0, code_1.usePattern)(
                    cxt,
                    p
                  )}.test(${key})`
              )
            );
          }
          return (0, codegen_1.not)(definedProp);
        }
        function deleteAdditional(key) {
          gen.code((0, codegen_1._)`delete ${data}[${key}]`);
        }
        function additionalPropertyCode(key) {
          if (
            opts.removeAdditional === 'all' ||
            (opts.removeAdditional && schema === false)
          ) {
            deleteAdditional(key);
            return;
          }
          if (schema === false) {
            cxt.setParams({ additionalProperty: key });
            cxt.error();
            if (!allErrors) gen.break();
            return;
          }
          if (
            typeof schema == 'object' &&
            !(0, util_1.alwaysValidSchema)(it, schema)
          ) {
            const valid = gen.name('valid');
            if (opts.removeAdditional === 'failing') {
              applyAdditionalSchema(key, valid, false);
              gen.if((0, codegen_1.not)(valid), () => {
                cxt.reset();
                deleteAdditional(key);
              });
            } else {
              applyAdditionalSchema(key, valid);
              if (!allErrors)
                gen.if((0, codegen_1.not)(valid), () => gen.break());
            }
          }
        }
        function applyAdditionalSchema(key, valid, errors) {
          const subschema = {
            keyword: 'additionalProperties',
            dataProp: key,
            dataPropType: util_1.Type.Str,
          };
          if (errors === false) {
            Object.assign(subschema, {
              compositeRule: true,
              createErrors: false,
              allErrors: false,
            });
          }
          cxt.subschema(subschema, valid);
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/properties.js
var require_properties = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/properties.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var validate_1 = require_validate2();
    var code_1 = require_code2();
    var util_1 = require_util4();
    var additionalProperties_1 = require_additionalProperties();
    var def = {
      keyword: 'properties',
      type: 'object',
      schemaType: 'object',
      code(cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        if (
          it.opts.removeAdditional === 'all' &&
          parentSchema.additionalProperties === void 0
        ) {
          additionalProperties_1.default.code(
            new validate_1.KeywordCxt(
              it,
              additionalProperties_1.default,
              'additionalProperties'
            )
          );
        }
        const allProps = (0, code_1.allSchemaProperties)(schema);
        for (const prop of allProps) {
          it.definedProperties.add(prop);
        }
        if (it.opts.unevaluated && allProps.length && it.props !== true) {
          it.props = util_1.mergeEvaluated.props(
            gen,
            (0, util_1.toHash)(allProps),
            it.props
          );
        }
        const properties = allProps.filter(
          (p) => !(0, util_1.alwaysValidSchema)(it, schema[p])
        );
        if (properties.length === 0) return;
        const valid = gen.name('valid');
        for (const prop of properties) {
          if (hasDefault(prop)) {
            applyPropertySchema(prop);
          } else {
            gen.if(
              (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties)
            );
            applyPropertySchema(prop);
            if (!it.allErrors) gen.else().var(valid, true);
            gen.endIf();
          }
          cxt.it.definedProperties.add(prop);
          cxt.ok(valid);
        }
        function hasDefault(prop) {
          return (
            it.opts.useDefaults &&
            !it.compositeRule &&
            schema[prop].default !== void 0
          );
        }
        function applyPropertySchema(prop) {
          cxt.subschema(
            {
              keyword: 'properties',
              schemaProp: prop,
              dataProp: prop,
            },
            valid
          );
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
var require_patternProperties = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/patternProperties.js'(
    exports
  ) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var code_1 = require_code2();
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var util_2 = require_util4();
    var def = {
      keyword: 'patternProperties',
      type: 'object',
      schemaType: 'object',
      code(cxt) {
        const { gen, schema, data, parentSchema, it } = cxt;
        const { opts } = it;
        const patterns = (0, code_1.allSchemaProperties)(schema);
        const alwaysValidPatterns = patterns.filter((p) =>
          (0, util_1.alwaysValidSchema)(it, schema[p])
        );
        if (
          patterns.length === 0 ||
          (alwaysValidPatterns.length === patterns.length &&
            (!it.opts.unevaluated || it.props === true))
        ) {
          return;
        }
        const checkProperties =
          opts.strictSchema &&
          !opts.allowMatchingProperties &&
          parentSchema.properties;
        const valid = gen.name('valid');
        if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
          it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
        }
        const { props } = it;
        validatePatternProperties();
        function validatePatternProperties() {
          for (const pat of patterns) {
            if (checkProperties) checkMatchingProperties(pat);
            if (it.allErrors) {
              validateProperties(pat);
            } else {
              gen.var(valid, true);
              validateProperties(pat);
              gen.if(valid);
            }
          }
        }
        function checkMatchingProperties(pat) {
          for (const prop in checkProperties) {
            if (new RegExp(pat).test(prop)) {
              (0, util_1.checkStrictMode)(
                it,
                `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`
              );
            }
          }
        }
        function validateProperties(pat) {
          gen.forIn('key', data, (key) => {
            gen.if(
              (0, codegen_1._)`${(0, code_1.usePattern)(
                cxt,
                pat
              )}.test(${key})`,
              () => {
                const alwaysValid = alwaysValidPatterns.includes(pat);
                if (!alwaysValid) {
                  cxt.subschema(
                    {
                      keyword: 'patternProperties',
                      schemaProp: pat,
                      dataProp: key,
                      dataPropType: util_2.Type.Str,
                    },
                    valid
                  );
                }
                if (it.opts.unevaluated && props !== true) {
                  gen.assign((0, codegen_1._)`${props}[${key}]`, true);
                } else if (!alwaysValid && !it.allErrors) {
                  gen.if((0, codegen_1.not)(valid), () => gen.break());
                }
              }
            );
          });
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/not.js
var require_not2 = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/not.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var util_1 = require_util4();
    var def = {
      keyword: 'not',
      schemaType: ['object', 'boolean'],
      trackErrors: true,
      code(cxt) {
        const { gen, schema, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
          cxt.fail();
          return;
        }
        const valid = gen.name('valid');
        cxt.subschema(
          {
            keyword: 'not',
            compositeRule: true,
            createErrors: false,
            allErrors: false,
          },
          valid
        );
        cxt.failResult(
          valid,
          () => cxt.reset(),
          () => cxt.error()
        );
      },
      error: { message: 'must NOT be valid' },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/anyOf.js
var require_anyOf = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/anyOf.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var code_1 = require_code2();
    var def = {
      keyword: 'anyOf',
      schemaType: 'array',
      trackErrors: true,
      code: code_1.validateUnion,
      error: { message: 'must match a schema in anyOf' },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/oneOf.js
var require_oneOf = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/oneOf.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var error = {
      message: 'must match exactly one schema in oneOf',
      params: ({ params }) =>
        (0, codegen_1._)`{passingSchemas: ${params.passing}}`,
    };
    var def = {
      keyword: 'oneOf',
      schemaType: 'array',
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, schema, parentSchema, it } = cxt;
        if (!Array.isArray(schema)) throw new Error('ajv implementation error');
        if (it.opts.discriminator && parentSchema.discriminator) return;
        const schArr = schema;
        const valid = gen.let('valid', false);
        const passing = gen.let('passing', null);
        const schValid = gen.name('_valid');
        cxt.setParams({ passing });
        gen.block(validateOneOf);
        cxt.result(
          valid,
          () => cxt.reset(),
          () => cxt.error(true)
        );
        function validateOneOf() {
          schArr.forEach((sch, i) => {
            let schCxt;
            if ((0, util_1.alwaysValidSchema)(it, sch)) {
              gen.var(schValid, true);
            } else {
              schCxt = cxt.subschema(
                {
                  keyword: 'oneOf',
                  schemaProp: i,
                  compositeRule: true,
                },
                schValid
              );
            }
            if (i > 0) {
              gen
                .if((0, codegen_1._)`${schValid} && ${valid}`)
                .assign(valid, false)
                .assign(passing, (0, codegen_1._)`[${passing}, ${i}]`)
                .else();
            }
            gen.if(schValid, () => {
              gen.assign(valid, true);
              gen.assign(passing, i);
              if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);
            });
          });
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/allOf.js
var require_allOf = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/allOf.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var util_1 = require_util4();
    var def = {
      keyword: 'allOf',
      schemaType: 'array',
      code(cxt) {
        const { gen, schema, it } = cxt;
        if (!Array.isArray(schema)) throw new Error('ajv implementation error');
        const valid = gen.name('valid');
        schema.forEach((sch, i) => {
          if ((0, util_1.alwaysValidSchema)(it, sch)) return;
          const schCxt = cxt.subschema(
            { keyword: 'allOf', schemaProp: i },
            valid
          );
          cxt.ok(valid);
          cxt.mergeEvaluated(schCxt);
        });
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/if.js
var require_if = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/if.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var util_1 = require_util4();
    var error = {
      message: ({ params }) =>
        (0, codegen_1.str)`must match "${params.ifClause}" schema`,
      params: ({ params }) =>
        (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`,
    };
    var def = {
      keyword: 'if',
      schemaType: ['object', 'boolean'],
      trackErrors: true,
      error,
      code(cxt) {
        const { gen, parentSchema, it } = cxt;
        if (parentSchema.then === void 0 && parentSchema.else === void 0) {
          (0, util_1.checkStrictMode)(
            it,
            '"if" without "then" and "else" is ignored'
          );
        }
        const hasThen = hasSchema(it, 'then');
        const hasElse = hasSchema(it, 'else');
        if (!hasThen && !hasElse) return;
        const valid = gen.let('valid', true);
        const schValid = gen.name('_valid');
        validateIf();
        cxt.reset();
        if (hasThen && hasElse) {
          const ifClause = gen.let('ifClause');
          cxt.setParams({ ifClause });
          gen.if(
            schValid,
            validateClause('then', ifClause),
            validateClause('else', ifClause)
          );
        } else if (hasThen) {
          gen.if(schValid, validateClause('then'));
        } else {
          gen.if((0, codegen_1.not)(schValid), validateClause('else'));
        }
        cxt.pass(valid, () => cxt.error(true));
        function validateIf() {
          const schCxt = cxt.subschema(
            {
              keyword: 'if',
              compositeRule: true,
              createErrors: false,
              allErrors: false,
            },
            schValid
          );
          cxt.mergeEvaluated(schCxt);
        }
        function validateClause(keyword, ifClause) {
          return () => {
            const schCxt = cxt.subschema({ keyword }, schValid);
            gen.assign(valid, schValid);
            cxt.mergeValidEvaluated(schCxt, valid);
            if (ifClause) gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
            else cxt.setParams({ ifClause: keyword });
          };
        }
      },
    };
    function hasSchema(it, keyword) {
      const schema = it.schema[keyword];
      return schema !== void 0 && !(0, util_1.alwaysValidSchema)(it, schema);
    }
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/thenElse.js
var require_thenElse = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/thenElse.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var util_1 = require_util4();
    var def = {
      keyword: ['then', 'else'],
      schemaType: ['object', 'boolean'],
      code({ keyword, parentSchema, it }) {
        if (parentSchema.if === void 0)
          (0, util_1.checkStrictMode)(
            it,
            `"${keyword}" without "if" is ignored`
          );
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/applicator/index.js
var require_applicator = __commonJS({
  'node_modules/ajv/dist/vocabularies/applicator/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var additionalItems_1 = require_additionalItems();
    var prefixItems_1 = require_prefixItems();
    var items_1 = require_items();
    var items2020_1 = require_items2020();
    var contains_1 = require_contains();
    var dependencies_1 = require_dependencies();
    var propertyNames_1 = require_propertyNames();
    var additionalProperties_1 = require_additionalProperties();
    var properties_1 = require_properties();
    var patternProperties_1 = require_patternProperties();
    var not_1 = require_not2();
    var anyOf_1 = require_anyOf();
    var oneOf_1 = require_oneOf();
    var allOf_1 = require_allOf();
    var if_1 = require_if();
    var thenElse_1 = require_thenElse();
    function getApplicator(draft2020 = false) {
      const applicator = [
        // any
        not_1.default,
        anyOf_1.default,
        oneOf_1.default,
        allOf_1.default,
        if_1.default,
        thenElse_1.default,
        // object
        propertyNames_1.default,
        additionalProperties_1.default,
        dependencies_1.default,
        properties_1.default,
        patternProperties_1.default,
      ];
      if (draft2020)
        applicator.push(prefixItems_1.default, items2020_1.default);
      else applicator.push(additionalItems_1.default, items_1.default);
      applicator.push(contains_1.default);
      return applicator;
    }
    exports.default = getApplicator;
  },
});

// node_modules/ajv/dist/vocabularies/format/format.js
var require_format = __commonJS({
  'node_modules/ajv/dist/vocabularies/format/format.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var error = {
      message: ({ schemaCode }) =>
        (0, codegen_1.str)`must match format "${schemaCode}"`,
      params: ({ schemaCode }) => (0, codegen_1._)`{format: ${schemaCode}}`,
    };
    var def = {
      keyword: 'format',
      type: ['number', 'string'],
      schemaType: 'string',
      $data: true,
      error,
      code(cxt, ruleType) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
        if (!opts.validateFormats) return;
        if ($data) validate$DataFormat();
        else validateFormat();
        function validate$DataFormat() {
          const fmts = gen.scopeValue('formats', {
            ref: self2.formats,
            code: opts.code.formats,
          });
          const fDef = gen.const(
            'fDef',
            (0, codegen_1._)`${fmts}[${schemaCode}]`
          );
          const fType = gen.let('fType');
          const format = gen.let('format');
          gen.if(
            (0,
            codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`,
            () =>
              gen
                .assign(fType, (0, codegen_1._)`${fDef}.type || "string"`)
                .assign(format, (0, codegen_1._)`${fDef}.validate`),
            () =>
              gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef)
          );
          cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
          function unknownFmt() {
            if (opts.strictSchema === false) return codegen_1.nil;
            return (0, codegen_1._)`${schemaCode} && !${format}`;
          }
          function invalidFmt() {
            const callFormat = schemaEnv.$async
              ? (0,
                codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`
              : (0, codegen_1._)`${format}(${data})`;
            const validData = (0,
            codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
            return (0,
            codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
          }
        }
        function validateFormat() {
          const formatDef = self2.formats[schema];
          if (!formatDef) {
            unknownFormat();
            return;
          }
          if (formatDef === true) return;
          const [fmtType, format, fmtRef] = getFormat(formatDef);
          if (fmtType === ruleType) cxt.pass(validCondition());
          function unknownFormat() {
            if (opts.strictSchema === false) {
              self2.logger.warn(unknownMsg());
              return;
            }
            throw new Error(unknownMsg());
            function unknownMsg() {
              return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
            }
          }
          function getFormat(fmtDef) {
            const code =
              fmtDef instanceof RegExp
                ? (0, codegen_1.regexpCode)(fmtDef)
                : opts.code.formats
                ? (0, codegen_1._)`${opts.code.formats}${(0,
                  codegen_1.getProperty)(schema)}`
                : void 0;
            const fmt = gen.scopeValue('formats', {
              key: schema,
              ref: fmtDef,
              code,
            });
            if (typeof fmtDef == 'object' && !(fmtDef instanceof RegExp)) {
              return [
                fmtDef.type || 'string',
                fmtDef.validate,
                (0, codegen_1._)`${fmt}.validate`,
              ];
            }
            return ['string', fmtDef, fmt];
          }
          function validCondition() {
            if (
              typeof formatDef == 'object' &&
              !(formatDef instanceof RegExp) &&
              formatDef.async
            ) {
              if (!schemaEnv.$async)
                throw new Error('async format in sync schema');
              return (0, codegen_1._)`await ${fmtRef}(${data})`;
            }
            return typeof format == 'function'
              ? (0, codegen_1._)`${fmtRef}(${data})`
              : (0, codegen_1._)`${fmtRef}.test(${data})`;
          }
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/vocabularies/format/index.js
var require_format2 = __commonJS({
  'node_modules/ajv/dist/vocabularies/format/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var format_1 = require_format();
    var format = [format_1.default];
    exports.default = format;
  },
});

// node_modules/ajv/dist/vocabularies/metadata.js
var require_metadata = __commonJS({
  'node_modules/ajv/dist/vocabularies/metadata.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.contentVocabulary = exports.metadataVocabulary = void 0;
    exports.metadataVocabulary = [
      'title',
      'description',
      'default',
      'deprecated',
      'readOnly',
      'writeOnly',
      'examples',
    ];
    exports.contentVocabulary = [
      'contentMediaType',
      'contentEncoding',
      'contentSchema',
    ];
  },
});

// node_modules/ajv/dist/vocabularies/draft7.js
var require_draft7 = __commonJS({
  'node_modules/ajv/dist/vocabularies/draft7.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var core_1 = require_core2();
    var validation_1 = require_validation();
    var applicator_1 = require_applicator();
    var format_1 = require_format2();
    var metadata_1 = require_metadata();
    var draft7Vocabularies = [
      core_1.default,
      validation_1.default,
      (0, applicator_1.default)(),
      format_1.default,
      metadata_1.metadataVocabulary,
      metadata_1.contentVocabulary,
    ];
    exports.default = draft7Vocabularies;
  },
});

// node_modules/ajv/dist/vocabularies/discriminator/types.js
var require_types7 = __commonJS({
  'node_modules/ajv/dist/vocabularies/discriminator/types.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.DiscrError = void 0;
    var DiscrError;
    (function (DiscrError2) {
      DiscrError2['Tag'] = 'tag';
      DiscrError2['Mapping'] = 'mapping';
    })((DiscrError = exports.DiscrError || (exports.DiscrError = {})));
  },
});

// node_modules/ajv/dist/vocabularies/discriminator/index.js
var require_discriminator = __commonJS({
  'node_modules/ajv/dist/vocabularies/discriminator/index.js'(exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var codegen_1 = require_codegen();
    var types_1 = require_types7();
    var compile_1 = require_compile();
    var util_1 = require_util4();
    var error = {
      message: ({ params: { discrError, tagName } }) =>
        discrError === types_1.DiscrError.Tag
          ? `tag "${tagName}" must be string`
          : `value of tag "${tagName}" must be in oneOf`,
      params: ({ params: { discrError, tag, tagName } }) =>
        (0,
        codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`,
    };
    var def = {
      keyword: 'discriminator',
      type: 'object',
      schemaType: 'object',
      error,
      code(cxt) {
        const { gen, data, schema, parentSchema, it } = cxt;
        const { oneOf } = parentSchema;
        if (!it.opts.discriminator) {
          throw new Error('discriminator: requires discriminator option');
        }
        const tagName = schema.propertyName;
        if (typeof tagName != 'string')
          throw new Error('discriminator: requires propertyName');
        if (schema.mapping)
          throw new Error('discriminator: mapping is not supported');
        if (!oneOf) throw new Error('discriminator: requires oneOf keyword');
        const valid = gen.let('valid', false);
        const tag = gen.const(
          'tag',
          (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`
        );
        gen.if(
          (0, codegen_1._)`typeof ${tag} == "string"`,
          () => validateMapping(),
          () =>
            cxt.error(false, {
              discrError: types_1.DiscrError.Tag,
              tag,
              tagName,
            })
        );
        cxt.ok(valid);
        function validateMapping() {
          const mapping = getMapping();
          gen.if(false);
          for (const tagValue in mapping) {
            gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
            gen.assign(valid, applyTagSchema(mapping[tagValue]));
          }
          gen.else();
          cxt.error(false, {
            discrError: types_1.DiscrError.Mapping,
            tag,
            tagName,
          });
          gen.endIf();
        }
        function applyTagSchema(schemaProp) {
          const _valid = gen.name('valid');
          const schCxt = cxt.subschema(
            { keyword: 'oneOf', schemaProp },
            _valid
          );
          cxt.mergeEvaluated(schCxt, codegen_1.Name);
          return _valid;
        }
        function getMapping() {
          var _a;
          const oneOfMapping = {};
          const topRequired = hasRequired(parentSchema);
          let tagRequired = true;
          for (let i = 0; i < oneOf.length; i++) {
            let sch = oneOf[i];
            if (
              (sch === null || sch === void 0 ? void 0 : sch.$ref) &&
              !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)
            ) {
              sch = compile_1.resolveRef.call(
                it.self,
                it.schemaEnv.root,
                it.baseId,
                sch === null || sch === void 0 ? void 0 : sch.$ref
              );
              if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;
            }
            const propSch =
              (_a =
                sch === null || sch === void 0 ? void 0 : sch.properties) ===
                null || _a === void 0
                ? void 0
                : _a[tagName];
            if (typeof propSch != 'object') {
              throw new Error(
                `discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`
              );
            }
            tagRequired = tagRequired && (topRequired || hasRequired(sch));
            addMappings(propSch, i);
          }
          if (!tagRequired)
            throw new Error(`discriminator: "${tagName}" must be required`);
          return oneOfMapping;
          function hasRequired({ required }) {
            return Array.isArray(required) && required.includes(tagName);
          }
          function addMappings(sch, i) {
            if (sch.const) {
              addMapping(sch.const, i);
            } else if (sch.enum) {
              for (const tagValue of sch.enum) {
                addMapping(tagValue, i);
              }
            } else {
              throw new Error(
                `discriminator: "properties/${tagName}" must have "const" or "enum"`
              );
            }
          }
          function addMapping(tagValue, i) {
            if (typeof tagValue != 'string' || tagValue in oneOfMapping) {
              throw new Error(
                `discriminator: "${tagName}" values must be unique strings`
              );
            }
            oneOfMapping[tagValue] = i;
          }
        }
      },
    };
    exports.default = def;
  },
});

// node_modules/ajv/dist/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS({
  'node_modules/ajv/dist/refs/json-schema-draft-07.json'(exports, module2) {
    module2.exports = {
      $schema: 'http://json-schema.org/draft-07/schema#',
      $id: 'http://json-schema.org/draft-07/schema#',
      title: 'Core schema meta-schema',
      definitions: {
        schemaArray: {
          type: 'array',
          minItems: 1,
          items: { $ref: '#' },
        },
        nonNegativeInteger: {
          type: 'integer',
          minimum: 0,
        },
        nonNegativeIntegerDefault0: {
          allOf: [{ $ref: '#/definitions/nonNegativeInteger' }, { default: 0 }],
        },
        simpleTypes: {
          enum: [
            'array',
            'boolean',
            'integer',
            'null',
            'number',
            'object',
            'string',
          ],
        },
        stringArray: {
          type: 'array',
          items: { type: 'string' },
          uniqueItems: true,
          default: [],
        },
      },
      type: ['object', 'boolean'],
      properties: {
        $id: {
          type: 'string',
          format: 'uri-reference',
        },
        $schema: {
          type: 'string',
          format: 'uri',
        },
        $ref: {
          type: 'string',
          format: 'uri-reference',
        },
        $comment: {
          type: 'string',
        },
        title: {
          type: 'string',
        },
        description: {
          type: 'string',
        },
        default: true,
        readOnly: {
          type: 'boolean',
          default: false,
        },
        examples: {
          type: 'array',
          items: true,
        },
        multipleOf: {
          type: 'number',
          exclusiveMinimum: 0,
        },
        maximum: {
          type: 'number',
        },
        exclusiveMaximum: {
          type: 'number',
        },
        minimum: {
          type: 'number',
        },
        exclusiveMinimum: {
          type: 'number',
        },
        maxLength: { $ref: '#/definitions/nonNegativeInteger' },
        minLength: { $ref: '#/definitions/nonNegativeIntegerDefault0' },
        pattern: {
          type: 'string',
          format: 'regex',
        },
        additionalItems: { $ref: '#' },
        items: {
          anyOf: [{ $ref: '#' }, { $ref: '#/definitions/schemaArray' }],
          default: true,
        },
        maxItems: { $ref: '#/definitions/nonNegativeInteger' },
        minItems: { $ref: '#/definitions/nonNegativeIntegerDefault0' },
        uniqueItems: {
          type: 'boolean',
          default: false,
        },
        contains: { $ref: '#' },
        maxProperties: { $ref: '#/definitions/nonNegativeInteger' },
        minProperties: { $ref: '#/definitions/nonNegativeIntegerDefault0' },
        required: { $ref: '#/definitions/stringArray' },
        additionalProperties: { $ref: '#' },
        definitions: {
          type: 'object',
          additionalProperties: { $ref: '#' },
          default: {},
        },
        properties: {
          type: 'object',
          additionalProperties: { $ref: '#' },
          default: {},
        },
        patternProperties: {
          type: 'object',
          additionalProperties: { $ref: '#' },
          propertyNames: { format: 'regex' },
          default: {},
        },
        dependencies: {
          type: 'object',
          additionalProperties: {
            anyOf: [{ $ref: '#' }, { $ref: '#/definitions/stringArray' }],
          },
        },
        propertyNames: { $ref: '#' },
        const: true,
        enum: {
          type: 'array',
          items: true,
          minItems: 1,
          uniqueItems: true,
        },
        type: {
          anyOf: [
            { $ref: '#/definitions/simpleTypes' },
            {
              type: 'array',
              items: { $ref: '#/definitions/simpleTypes' },
              minItems: 1,
              uniqueItems: true,
            },
          ],
        },
        format: { type: 'string' },
        contentMediaType: { type: 'string' },
        contentEncoding: { type: 'string' },
        if: { $ref: '#' },
        then: { $ref: '#' },
        else: { $ref: '#' },
        allOf: { $ref: '#/definitions/schemaArray' },
        anyOf: { $ref: '#/definitions/schemaArray' },
        oneOf: { $ref: '#/definitions/schemaArray' },
        not: { $ref: '#' },
      },
      default: true,
    };
  },
});

// node_modules/ajv/dist/ajv.js
var require_ajv = __commonJS({
  'node_modules/ajv/dist/ajv.js'(exports, module2) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.MissingRefError =
      exports.ValidationError =
      exports.CodeGen =
      exports.Name =
      exports.nil =
      exports.stringify =
      exports.str =
      exports._ =
      exports.KeywordCxt =
        void 0;
    var core_1 = require_core();
    var draft7_1 = require_draft7();
    var discriminator_1 = require_discriminator();
    var draft7MetaSchema = require_json_schema_draft_07();
    var META_SUPPORT_DATA = ['/properties'];
    var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';
    var Ajv2 = class extends core_1.default {
      _addVocabularies() {
        super._addVocabularies();
        draft7_1.default.forEach((v) => this.addVocabulary(v));
        if (this.opts.discriminator) this.addKeyword(discriminator_1.default);
      }
      _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        if (!this.opts.meta) return;
        const metaSchema = this.opts.$data
          ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA)
          : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
      }
      defaultMeta() {
        return (this.opts.defaultMeta =
          super.defaultMeta() ||
          (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0));
      }
    };
    module2.exports = exports = Ajv2;
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.default = Ajv2;
    var validate_1 = require_validate2();
    Object.defineProperty(exports, 'KeywordCxt', {
      enumerable: true,
      get: function () {
        return validate_1.KeywordCxt;
      },
    });
    var codegen_1 = require_codegen();
    Object.defineProperty(exports, '_', {
      enumerable: true,
      get: function () {
        return codegen_1._;
      },
    });
    Object.defineProperty(exports, 'str', {
      enumerable: true,
      get: function () {
        return codegen_1.str;
      },
    });
    Object.defineProperty(exports, 'stringify', {
      enumerable: true,
      get: function () {
        return codegen_1.stringify;
      },
    });
    Object.defineProperty(exports, 'nil', {
      enumerable: true,
      get: function () {
        return codegen_1.nil;
      },
    });
    Object.defineProperty(exports, 'Name', {
      enumerable: true,
      get: function () {
        return codegen_1.Name;
      },
    });
    Object.defineProperty(exports, 'CodeGen', {
      enumerable: true,
      get: function () {
        return codegen_1.CodeGen;
      },
    });
    var validation_error_1 = require_validation_error();
    Object.defineProperty(exports, 'ValidationError', {
      enumerable: true,
      get: function () {
        return validation_error_1.default;
      },
    });
    var ref_error_1 = require_ref_error();
    Object.defineProperty(exports, 'MissingRefError', {
      enumerable: true,
      get: function () {
        return ref_error_1.default;
      },
    });
  },
});

// apps/aws-cdk/meal-planner/src/lambda-handlers/auth/delete-user.ts
var delete_user_exports = {};
__export(delete_user_exports, {
  handler: () => handler,
});
module.exports = __toCommonJS(delete_user_exports);

// apps/aws-cdk/meal-planner/src/lambda-layer/utils.ts
var import_lib_dynamodb = __toESM(require_dist_cjs55());
var import_client_dynamodb = __toESM(require_dist_cjs53());
var import_lodash = __toESM(require_lodash());
var logInfo = (message, title = void 0) => {
  if (typeof message === 'string') {
    title ? console.info(`${title}: ${message}`) : console.info(message);
  } else {
    title
      ? console.info(`${title}:`, JSON.stringify(message, null, 2))
      : console.info(JSON.stringify(message, null, 2));
  }
};
var logError = (message, title = void 0) => {
  if (typeof message === 'string') {
    title ? console.error(`${title}: ${message}`) : console.error(message);
  } else {
    title
      ? console.error(`${title}:`, JSON.stringify(message, null, 2))
      : console.error(JSON.stringify(message, null, 2));
  }
};
var apiSuccessResponse = (body) => {
  return new Promise((resolve, reject) => {
    resolve({
      statusCode: 200,
      headers: {
        'content-type': 'application/json',
      },
      body:
        typeof body === 'string'
          ? JSON.stringify({ message: body })
          : JSON.stringify(body),
    });
  });
};
var apiErrorResponse = (
  statusCode,
  error = 'Something went wrong. Please contact administrator'
) => {
  return new Promise((resolve, reject) => {
    resolve({
      statusCode,
      headers: {
        'content-type': 'application/json',
      },
      body: JSON.stringify({ error }),
    });
  });
};
var getDDBDocClient = () => {
  return new Promise((resolve, reject) => {
    const ddbClient = new import_client_dynamodb.DynamoDBClient({
      region: 'ap-southeast-2',
    });
    const marshallOptions = {
      convertEmptyValues: true,
      removeUndefinedValues: true,
      convertClassInstanceToMap: true,
    };
    const unmarshallOptions = {
      wrapNumbers: false,
    };
    const translateConfig = { marshallOptions, unmarshallOptions };
    const ddbDocClient = import_lib_dynamodb.DynamoDBDocumentClient.from(
      ddbClient,
      translateConfig
    );
    resolve(ddbDocClient);
  });
};
var ddbWrite = (table, item) => {
  return new Promise(async (resolve, reject) => {
    try {
      console.log('Writing item to DDB');
      const ddbDocClient = await getDDBDocClient();
      await ddbDocClient.send(
        new import_lib_dynamodb.PutCommand({ TableName: table, Item: item })
      );
      resolve();
    } catch (error) {
      reject(error);
    }
  });
};

// apps/aws-cdk/meal-planner/src/lambda-layer/schema-definitions.ts
var import_ajv = __toESM(require_ajv());
var validateAPISchema = async (schema, data) => {
  return new Promise(async (resolve, reject) => {
    var _a;
    try {
      const ajv = new import_ajv.default({ allErrors: true });
      const validate2 = ajv.compile(schema);
      const isValid = validate2(data);
      if (isValid) {
        resolve({ isValid: true });
      } else {
        resolve({
          isValid: false,
          errors:
            (_a = validate2.errors) == null ? void 0 : _a.map((e) => e.message),
        });
      }
    } catch (error) {
      console.log(error);
      resolve({
        isValid: false,
        errors: ['Error occurred while validating API payload'],
      });
    }
  });
};
var commonGetParams = {
  returnAttributes: { type: 'string', minLength: 1 },
  nextToken: { type: 'string' },
  limit: { type: 'number', minimum: 1 },
};
var getUsersSchema = {
  type: 'object',
  properties: {
    ...commonGetParams,
    email: { type: 'string', minLength: 1 },
  },
  required: [],
  additionalProperties: false,
};
var deleteUserSchema = {
  type: 'object',
  properties: {
    email: { type: 'string', minLength: 1 },
  },
  required: ['email'],
  additionalProperties: false,
};

// apps/aws-cdk/meal-planner/src/lambda-handlers/auth/delete-user.ts
var import_lib_dynamodb2 = __toESM(require_dist_cjs55());
var handler = async (event, context) => {
  return new Promise(async (resolve, reject) => {
    var _a;
    try {
      logInfo(event, 'Event');
      const params = event.queryStringParameters
        ? event.queryStringParameters
        : {};
      const validationResult = await validateAPISchema(
        deleteUserSchema,
        params
      );
      if (validationResult.isValid) {
        const ddbDocClient = await getDDBDocClient();
        const getUserOutput = await ddbDocClient.send(
          new import_lib_dynamodb2.QueryCommand({
            TableName: process.env.DDB_TABLE,
            KeyConditionExpression: `email = :email`,
            ExpressionAttributeValues: {
              ':email': params.email,
            },
            ProjectionExpression: 'email',
          })
        );
        if (getUserOutput.Items && getUserOutput.Items.length > 0) {
          if (process.env.DDB_TABLE)
            await ddbWrite(process.env.DDB_TABLE, params.email);
          return resolve(
            await apiSuccessResponse({ message: 'User deleted successfully' })
          );
        } else {
          return resolve(
            await apiErrorResponse(
              400,
              `User with email ${params.email} not found`
            )
          );
        }
      } else {
        return resolve(
          await apiErrorResponse(
            400,
            (_a = validationResult.errors) == null ? void 0 : _a.join(',')
          )
        );
      }
    } catch (error) {
      logError(error);
      resolve(await apiErrorResponse(500, error.message || error));
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 &&
  (module.exports = {
    handler,
  });
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

uri-js/dist/es5/uri.all.js:
  (** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js *)
*/
